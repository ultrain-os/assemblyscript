{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","OperatorKind","common_1","diagnostics_1","types_1","ast_1","util_1","abi_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","diagnostics","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","text","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","DiagnosticEmitter","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","infoRelated","warning","warningRelated","errorRelated","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","typeName","TypeName","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","isSimpleType","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","Cannot_find_name_0","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","inserter_1","astutil_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","AbiHelper","proposals","abiTypeLookup","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","addAbiTypeAlias","typeNodeAnalyzer","asTypes","getAsTypes","asTypes_1","asTypes_1_1","asType","abiType","findSourceAbiType","findElement","getStructFromClzPrototype","isActionFnPrototype","funcType","AstUtil","haveSpecifyDecorator","resolveDatabaseDecorator","clsProto","decorators_1","decorators_1_1","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","getInternalName","ele","addFieldsFromClassPrototype","struct","impledSerializable","fieldDeclare","memberType","TypeNodeAnalyzer","getAbiDeclareType","addToStruct","resolveClassDispatcher","clzPrototype","extendedContract","hasActionDecorators","contractName","contractVarName","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","getArrayArgAbiTypeEnum","argTypeName","getArrayArg","AbiTypeEnum","NUMBER","abiTypeEnum","rtnNodeAnly","isVoid","isClassPrototype","declaration_1","impledReturnable","location","impledInterfaces","impledInterfaces_1","impledInterfaces_1_1","impledInterface","getActionAbility","funcPrototype","decoratorNode","getSpecifyDecorator","parameters_1","parameters_1_1","parameter","typeInfo","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","collectionutil_1","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","isSpecifyElement","tempClz","interfaces","implTypes","implTypes_1","e_4","implTypes_1_1","getDeclareType","MAP","getArgs","findSourceAsElement","isPrimaryType","findSourceAsTypeName","argType","args_1","args_1_1","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","undefined","beginChar","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","typeToString","members_2","members_2_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","fieldDeclaration","serializeField","deserializeField","primaryKey","serializeClassname","indentity","newArray"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,OAAA,aAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAKAA,IAAA,2BAxEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,YAAW,KA4EV3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,aAAerD,EAAA4C,eAAiB,QAG7C,SAAiBU,GAEFA,EAAAC,MAAQ,GAERD,EAAAE,GAAK,KACLF,EAAAG,IAAM,MACNH,EAAAI,IAAM,MACNJ,EAAAK,IAAM,MACNL,EAAAM,MAAQ,QACRN,EAAAO,GAAK,KACLP,EAAAQ,IAAM,MACNR,EAAAS,IAAM,MACNT,EAAAU,IAAM,MACNV,EAAAW,MAAQ,QACRX,EAAAY,KAAO,OACPZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,KAAO,OACPf,EAAAgB,MAAQ,QACRhB,EAAAiB,MAAQ,QACRjB,EAAAkB,MAAQ,QACRlB,EAAAmB,MAAQ,QACRnB,EAAAoB,MAAQ,QACRpB,EAAAqB,MAAQ,QACRrB,EAAAsB,MAAQ,QACRtB,EAAAuB,MAAQ,QACRvB,EAAAwB,MAAQ,QACRxB,EAAAyB,MAAQ,QACRzB,EAAA0B,MAAQ,OACR1B,EAAA2B,OAAS,SACT3B,EAAA4B,QAAU,UACV5B,EAAA6B,OAAS,SACT7B,EAAA8B,OAAS,SACT9B,EAAA+B,QAAU,UACV/B,EAAAgC,QAAU,UAEVhC,EAAAiC,MAAQ,OACRjC,EAAAkC,MAAQ,OACRlC,EAAAmC,OAAS,QAETnC,EAAAoC,MAAQ,OACRpC,EAAAqC,OAAS,QACTrC,EAAAsC,YAAc,cAEdtC,EAAAuC,WAAa,aACbvC,EAAAwC,mBAAqB,qBACrBxC,EAAAyC,cAAgB,gBAChBzC,EAAA0C,gBAAkB,kBAClB1C,EAAA2C,mBAAqB,qBACrB3C,EAAA4C,iBAAmB,mBACnB5C,EAAA6C,2BAA6B,6BAC7B7C,EAAA8C,2BAA6B,6BAC7B9C,EAAA+C,wBAA0B,0BAC1B/C,EAAAgD,iBAAmB,mBACnBhD,EAAAiD,oBAAsB,sBAEtBjD,EAAAkD,GAAK,KACLlD,EAAAmD,IAAM,MACNnD,EAAAoD,IAAM,MACNpD,EAAAqD,IAAM,MACNrD,EAAAsD,MAAQ,QACRtD,EAAAuD,GAAK,KACLvD,EAAAwD,IAAM,MACNxD,EAAAyD,IAAM,MACNzD,EAAA0D,IAAM,MACN1D,EAAA2D,MAAQ,QACR3D,EAAA4D,KAAO,OACP5D,EAAA6D,IAAM,MACN7D,EAAA8D,IAAM,MACN9D,EAAA+D,KAAO,OACP/D,EAAAgE,OAAS,SACThE,EAAAiE,MAAQ,QACRjE,EAAAkE,WAAa,aACblE,EAAAmE,IAAM,MACNnE,EAAAoE,IAAM,MACNpE,EAAAqE,gBAAkB,kBAClBrE,EAAAsE,YAAc,cACdtE,EAAAuE,KAAO,OACPvE,EAAAwE,MAAQ,QACRxE,EAAAyE,UAAY,YACZzE,EAAA0E,WAAa,aACb1E,EAAA2E,WAAa,aACb3E,EAAA4E,WAAa,aACb5E,EAAA6E,WAAa,aACb7E,EAAA8E,kBAAoB,oBACpB9E,EAAA+E,YAAc,cACd/E,EAAAgF,YAAc,cACdhF,EAAAiF,YAAc,cACdjF,EAAAkF,aAAe,eACflF,EAAAmF,aAAe,eAEfnF,EAAAoF,MAAQ,QACRpF,EAAAqF,IAAM,MACNrF,EAAAsF,IAAM,MACNtF,EAAAuF,MAAQ,UACRvF,EAAAwF,QAAU,YACVxF,EAAAyF,KAAO,SACPzF,EAAA0F,OAAS,WACT1F,EAAA2F,QAAU,YACV3F,EAAA4F,QAAU,YACV5F,EAAA6F,SAAW,aACX7F,EAAA8F,YAAc,eACd9F,EAAA+F,MAAQ,UACR/F,EAAAgG,WAAa,eAvG5B,CAAiBtJ,EAAAsD,gBAAAtD,EAAAsD,cAAa,KA2G9B,IAAAiG,EAAA9I,EAAA,IAAST,EAAAwJ,QAAAD,EAAAC,QACT,IAAAC,EAAAhJ,EAAA,IAAST,EAAA0J,OAAAD,EAAAC,OACT,IAAAC,EAAAlJ,EAAA,IAAST,EAAA4J,SAAAD,EAAAC,SAAU5J,EAAA6J,cAAAF,EAAAE,w5BC/MnB,IAiJYC,EAjJZC,EAAAtJ,EAAA,GAmBAuJ,EAAAvJ,EAAA,GAMAwJ,EAAAxJ,EAAA,GAOAyJ,EAAAzJ,EAAA,GAiDA0J,EAAA1J,EAAA,GASA2J,EAAA3J,EAAA,IAGA4J,EAAA5J,EAAA,GAIA6J,EAAA7J,EAAA,IAKA8J,EAAA,WAaA,OAZE,SAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARAtK,KAAAkK,YAEAlK,KAAAmK,kBAEAnK,KAAAoK,oBAEApK,KAAAqK,cAEArK,KAAAsK,kBAXX,GAgBAC,EAAA,WAWA,OAVE,SAESJ,EAEAC,EAEAC,EAEAC,GANAtK,KAAAmK,kBAEAnK,KAAAoK,oBAEApK,KAAAqK,cAEArK,KAAAsK,kBATX,GAcAE,EAAA,WAUA,OARE,SAESH,EAEAC,EAEAG,GAJAzK,KAAAqK,cAEArK,KAAAsK,iBAEAtK,KAAAyK,eARX,GA6DA,SAASC,EAA0BC,EAA8BC,GAE/D,OADAC,OAAOD,EAAIE,QACHH,GACN,KAAKf,EAAAmB,cAAcC,SACnB,KAAKpB,EAAAmB,cAAcE,gBACjB,OAAQL,EAAIM,WAAW,IACrB,QACE,GAAW,MAAPN,EAAa,OAAOpB,EAAa2B,YACrC,GAAW,OAAPP,EAAc,OAAOpB,EAAa4B,YACtC,MAEF,SACE,GAAW,MAAPR,EAAa,OAAOpB,EAAa6B,sBACrC,GAAW,OAAPT,EAAc,OAAOpB,EAAa8B,sBACtC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOpB,EAAa+B,IACpC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOpB,EAAagC,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOpB,EAAaiC,IACpC,GAAW,MAAPb,EAAa,OAAOpB,EAAakC,IACrC,MAEF,QACE,GAAW,KAAPd,EAAY,OAAOpB,EAAamC,IACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOpB,EAAaoC,IACpC,MAEF,QACE,GAAW,KAAPhB,EAAY,OAAOpB,EAAaqC,YACpC,MAEF,SACE,GAAW,KAAPjB,EAAY,OAAOpB,EAAasC,WACpC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOpB,EAAauC,YACpC,MAEF,QACE,GAAW,MAAPnB,EAAa,OAAOpB,EAAawC,GACrC,MAEF,QACE,GAAW,MAAPpB,EAAa,OAAOpB,EAAayC,GACrC,MAEF,QACE,GAAW,KAAPrB,EAAY,OAAOpB,EAAa0C,GACpC,GAAW,MAAPtB,EAAa,OAAOpB,EAAa2C,GACrC,GAAW,MAAPvB,EAAa,OAAOpB,EAAa4C,YACrC,GAAW,OAAPxB,EAAc,OAAOpB,EAAa6C,cACtC,MAEF,QACE,GAAW,KAAPzB,EAAY,OAAOpB,EAAa8C,GACpC,GAAW,MAAP1B,EAAa,OAAOpB,EAAa+C,GACrC,GAAW,MAAP3B,EAAa,OAAOpB,EAAagD,YAIzC,MAEF,KAAK5C,EAAAmB,cAAc0B,gBACjB,OAAQ7B,EAAIM,WAAW,IACrB,QACE,GAAW,KAAPN,EAAY,OAAOpB,EAAakD,KACpC,GAAW,MAAP9B,EAAa,OAAOpB,EAAamD,WACrC,MAEF,QACE,GAAW,KAAP/B,EAAY,OAAOpB,EAAaoD,MACpC,GAAW,MAAPhC,EAAa,OAAOpB,EAAaqD,WACrC,MAEF,QACE,GAAW,KAAPjC,EAAY,OAAOpB,EAAasD,IACpC,MAEF,SACE,GAAW,KAAPlC,EAAY,OAAOpB,EAAauD,YAIxC,MAEF,KAAKnD,EAAAmB,cAAciC,iBACjB,OAAQpC,EAAIM,WAAW,IACrB,QACE,GAAW,MAAPN,EAAa,OAAOpB,EAAayD,YACrC,MAEF,QACE,GAAW,MAAPrC,EAAa,OAAOpB,EAAa0D,aAO7C,OAAO1D,EAAa2D,SA9JtB,SAAY3D,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA9J,EAAA8J,eAAA9J,EAAA8J,aAAY,KAkKxB,IAiiDY4D,EAwCAC,EAzkDZC,EAAA,SAAAC,GAkGE,SAAAD,EAEEE,QAAA,IAAAA,MAAA,MAFF,IAAAC,EAIEF,EAAA/M,KAAAR,KAAMwN,IAAYxN,KAjGpByN,EAAAC,QAAoB,GAEpBD,EAAAE,kBAAyB,EAWzBF,EAAAG,YAAgC,IAAIxG,IAEpCqG,EAAAI,eAAsC,IAAIzG,IAE1CqG,EAAAK,sBAAmE,IAAI1G,IAEvEqG,EAAAM,gBAAuC,IAAI3G,IAE3CqG,EAAAO,YAAmC,IAAI5G,IAEvCqG,EAAAQ,eAAiC,IAAI7G,IAmErCqG,EAAAS,YAAmB,EAkFXT,EAAAU,qBAAgD,KA1EtD,IAAIC,EAAe,IAAIxE,EAAAyE,OAAO5E,EAAA5G,cAAe,gBAAiB+G,EAAA0E,WAAWC,SACzEd,EAAKW,aAAeA,EACpB,IAAII,EAAa,IAAIC,EAAKhB,EAAMW,UAChCX,EAAKe,WAAaA,EAClBf,EAAKG,YAAYc,IAAIF,EAAWG,aAAcH,GAC9Cf,EAAKmB,SAAW,IAAI7E,EAAA8E,SAASpB,KAk7CjC,OA9hD6BqB,EAAAxB,EAAAC,GA+G3BD,EAAArL,UAAA8M,WAAA,WAEE,OADc,IAAIjF,EAAAkF,QAAQhP,OAK5BsN,EAAArL,UAAAgN,UAAA,SAAUC,GAER,IADA,IAAIxB,EAAU1N,KAAK0N,QACVrN,EAAI,EAAG8O,EAAIzB,EAAQ5C,OAAQzK,EAAI8O,IAAK9O,EAAG,CAC9C,IAAI+O,EAAS1B,EAAQrN,GACrB,GAAI+O,EAAOF,gBAAkBA,EAAgB,OAAOE,EAEtD,OAAO,MAGT9B,EAAArL,UAAAoN,mBAAA,SAAmBC,EAAoBC,EAAaC,EAAsBC,GAOxE5E,OAAO4E,EAAe,GAAK,IAC3B5F,EAAA6F,SAASD,EAAaH,EAAQC,GAC9B1F,EAAA6F,SAAS,EAAGJ,EAAQC,EAAS,GAC7B1F,EAAA6F,SAASF,EAAcG,GAAIL,EAAQC,EAAS,GAC5C1F,EAAA6F,SAASD,EAAaH,EAAQC,EAAS,KAIzCxO,OAAAC,eAAIsM,EAAArL,UAAA,oBAAiB,KAArB,WACE,OAAO,oCAITqL,EAAArL,UAAA2N,8BAAA,SAEEhP,EAEAiP,QAAA,IAAAA,MAAqBpG,EAAApH,YAAYyN,MAEjC,IAAIC,EAAQ/P,KAAKoO,aAAa2B,MAC9B,OAAOnG,EAAAoG,KAAKC,0BACVrG,EAAAoG,KAAKE,2BAA2BtP,EAAMmP,GACtC,KAAM,KAAM,KAAMF,EAAOE,IAK7BzC,EAAArL,UAAAkO,0BAAA,SAEEvP,EAEAiP,QAAA,IAAAA,MAAqBpG,EAAApH,YAAYyN,MAEjC,IAAIC,EAAQ/P,KAAKoO,aAAa2B,MAC1BK,EAAaxG,EAAAoG,KAAKE,2BAA2BtP,EAAMmP,GACvD,OAAOnG,EAAAoG,KAAKK,sBACVD,EACA,KACAxG,EAAAoG,KAAKM,kBAAkBP,GACvB,KAAMF,EAAOE,IAQjBzC,EAAArL,UAAAsO,8BAAA,SAEE3P,EAEAiP,QAAA,IAAAA,MAAqBpG,EAAApH,YAAYyN,MAEjC,IAAIC,EAAQ/P,KAAKoO,aAAa2B,MAC9B,OAAOnG,EAAAoG,KAAKQ,0BACV5G,EAAAoG,KAAKE,2BAA2BtP,EAAMmP,GACtC,KACA/P,KAAKmO,uBAAyBnO,KAAKmO,qBAAuBvE,EAAAoG,KAAKS,mBAAmB,GAChF7G,EAAAoG,KAAKU,gBACH9G,EAAAoG,KAAKW,qBAAqBlH,EAAAzG,cAAc0B,MAAOqL,GAC/C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAEf,KAAM,KAAMF,EAAK,EAAkBE,IAKvCzC,EAAArL,UAAA2O,+BAAA,SAEEhQ,EAEAiP,QAAA,IAAAA,MAAqBpG,EAAApH,YAAYyN,MAEjC,IAAIC,EAAQ/P,KAAKoO,aAAa2B,MAC9B,OAAOnG,EAAAoG,KAAKa,2BACVjH,EAAAoG,KAAKE,2BAA2BtP,EAAMmP,GACtC,GAAI,KAAMF,EAAOE,IAKrBzC,EAAArL,UAAA6O,mBAAA,SAEElQ,EAEAmQ,EAEAC,EAEAnB,EAEAoB,GAEA,YANA,IAAAD,MAAkBhR,KAAKwO,iBAEvB,IAAAqB,MAAqBpG,EAAApH,YAAYyN,WAEjC,IAAAmB,MAAiC5D,EAAeyC,MAEzC,IAAIoB,EACTtQ,EACA,IAAIuQ,EACFvQ,EACAoQ,EACAhR,KAAKuQ,8BAA8B3P,EAAMiP,GACzCoB,GAEFF,IAKJzD,EAAArL,UAAAmP,wBAAA,SAAwBC,GACtB,IAAIvD,EAAwB9N,KAAK8N,sBAEjC,OADAjD,OAAOiD,EAAsBwD,IAAID,IAC1BvD,EAAsB5M,IAAImQ,IAInC/D,EAAArL,UAAAsP,WAAA,SAAWC,+BACTxR,KAAKwR,QAAUA,EAGfxR,KAAKyR,mBAAmBhI,EAAAzG,cAAcE,GAAIyG,EAAA+H,KAAKxO,IAC/ClD,KAAKyR,mBAAmBhI,EAAAzG,cAAcG,IAAKwG,EAAA+H,KAAKvO,KAChDnD,KAAKyR,mBAAmBhI,EAAAzG,cAAcI,IAAKuG,EAAA+H,KAAKtO,KAChDpD,KAAKyR,mBAAmBhI,EAAAzG,cAAcK,IAAKsG,EAAA+H,KAAKrO,KAChDrD,KAAKyR,mBAAmBhI,EAAAzG,cAAcM,MAAOkO,EAAQG,WACrD3R,KAAKyR,mBAAmBhI,EAAAzG,cAAcO,GAAIoG,EAAA+H,KAAKnO,IAC/CvD,KAAKyR,mBAAmBhI,EAAAzG,cAAcQ,IAAKmG,EAAA+H,KAAKlO,KAChDxD,KAAKyR,mBAAmBhI,EAAAzG,cAAcS,IAAKkG,EAAA+H,KAAKjO,KAChDzD,KAAKyR,mBAAmBhI,EAAAzG,cAAcU,IAAKiG,EAAA+H,KAAKhO,KAChD1D,KAAKyR,mBAAmBhI,EAAAzG,cAAcW,MAAO6N,EAAQI,WACrD5R,KAAKyR,mBAAmBhI,EAAAzG,cAAcY,KAAM+F,EAAA+H,KAAK9N,MACjD5D,KAAKyR,mBAAmBhI,EAAAzG,cAAca,IAAK8F,EAAA+H,KAAK7N,KAChD7D,KAAKyR,mBAAmBhI,EAAAzG,cAAcc,IAAK6F,EAAA+H,KAAK5N,KAChD9D,KAAKyR,mBAAmBhI,EAAAzG,cAAc0B,MAAOiF,EAAA+H,KAAKG,MAClD7R,KAAKyR,mBAAmBhI,EAAAzG,cAAc2B,OAAQgF,EAAA+H,KAAK5N,KACnD9D,KAAKyR,mBAAmBhI,EAAAzG,cAAc4B,QAAS+E,EAAA+H,KAAK9N,MACpD5D,KAAKwO,WAAWsD,IAAIrI,EAAAzG,cAAc8B,OAAQ,IAAIiN,EAC5CtI,EAAAzG,cAAc8B,OACd9E,KAAKwO,WACLxO,KAAKmQ,0BAA0B1G,EAAAzG,cAAc8B,OAAQ2E,EAAApH,YAAY2P,OAASvI,EAAApH,YAAY4P,SACtF5E,EAAe6E,UAEjBlS,KAAKwO,WAAWsD,IAAIrI,EAAAzG,cAAc+B,QAAS,IAAIgN,EAC7CtI,EAAAzG,cAAc+B,QACd/E,KAAKwO,WACLxO,KAAKmQ,0BAA0B1G,EAAAzG,cAAc+B,QAAS0E,EAAApH,YAAY2P,OAASvI,EAAApH,YAAY4P,SACvF5E,EAAe6E,UAEjBlS,KAAKwO,WAAWsD,IAAIrI,EAAAzG,cAAcgC,QAAS,IAAI+M,EAC7CtI,EAAAzG,cAAcgC,QACdhF,KAAKwO,WACLxO,KAAKmQ,0BAA0B1G,EAAAzG,cAAcgC,QAASyE,EAAApH,YAAY2P,OAASvI,EAAApH,YAAY4P,SACvF5E,EAAe6E,UAEbV,EAAQW,WAAU,IAAgBnS,KAAKyR,mBAAmBhI,EAAAzG,cAAce,KAAM4F,EAAA+H,KAAK3N,MAGvF/D,KAAKoS,wBAAwB3I,EAAAzG,cAAcuC,WAAYoE,EAAA+H,KAAKtO,IAC1DiP,QAAQb,EAAQc,SAAW7I,EAAAL,OAAOmJ,OAAS9I,EAAAL,OAAOoJ,SACpDxS,KAAKoS,wBAAwB3I,EAAAzG,cAAcyC,cAAekE,EAAA+H,KAAK9N,KAC7DyO,QAAQb,EAAQiB,SAAW,EAAI,EAAG,IACpCzS,KAAKoS,wBAAwB3I,EAAAzG,cAAc0C,gBAAiBiE,EAAA+H,KAAKtO,IAC/DiP,QAAQb,EAAQkB,WAAY,IAC9B1S,KAAKoS,wBAAwB3I,EAAAzG,cAAc2C,mBAAoBgE,EAAA+H,KAAKtO,IAClEiP,QAAQb,EAAQmB,kBAAmB,IACrC3S,KAAKoS,wBAAwB3I,EAAAzG,cAAc4C,iBAAkB+D,EAAA+H,KAAKtO,IAChEiP,QAAQb,EAAQoB,gBAAiB,IACnC5S,KAAKoS,wBAAwB3I,EAAAzG,cAAc6C,2BAA4B8D,EAAA+H,KAAK9N,KAC1EyO,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9DnS,KAAKoS,wBAAwB3I,EAAAzG,cAAc8C,2BAA4B6D,EAAA+H,KAAK9N,KAC1EyO,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9DnS,KAAKoS,wBAAwB3I,EAAAzG,cAAc+C,wBAAyB4D,EAAA+H,KAAK9N,KACvEyO,QAAQb,EAAQW,WAAU,GAAwB,EAAI,EAAG,IAC3DnS,KAAKoS,wBAAwB3I,EAAAzG,cAAcgD,iBAAkB2D,EAAA+H,KAAK9N,KAChEyO,QAAQb,EAAQW,WAAU,GAAiB,EAAI,EAAG,IACpDnS,KAAKoS,wBAAwB3I,EAAAzG,cAAciD,oBAAqB0D,EAAA+H,KAAK9N,KACnEyO,QAAQb,EAAQW,WAAU,IAAoB,EAAI,EAAG,IAUvD,IAPA,IAAIU,EAAgB,IAAI5L,MACpB6L,EAAgB,IAAI1L,IACpB2L,EAAoB,IAAI3L,IACxB4L,EAAgB,IAAI/L,MACpBgM,EAAmB,IAAIhM,MAGlB5G,EAAI,EAAG8O,EAAInP,KAAK0N,QAAQ5C,OAAQzK,EAAI8O,IAAK9O,EAAG,CACnD,IAAI+O,EAASpP,KAAK0N,QAAQrN,GACtB6S,EAAO,IAAIzE,EAAKzO,KAAMoP,GAC1BpP,KAAK4N,YAAYc,IAAIwE,EAAKvE,aAAcuE,GAExC,IADA,IAAIC,EAAa/D,EAAO+D,WACfC,EAAI,EAAG9S,EAAI6S,EAAWrI,OAAQsI,EAAI9S,IAAK8S,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAK1J,EAAA2J,SAASvB,OACZhS,KAAKwT,kBAAmCH,EAAWH,EAAMJ,EAAeC,GACxE,MAEF,KAAKnJ,EAAA2J,SAASE,cACZzT,KAAK0T,wBAAgDL,EAAWH,EAAMF,EAAeC,GACrF,MAEF,KAAKrJ,EAAA2J,SAASI,OACZ3T,KAAK4T,kBAAmCP,EAAWH,EAAML,EAAeC,GACxE,MAEF,KAAKlJ,EAAA2J,SAASM,SACZ7T,KAAK8T,oBAAuCT,EAAWH,GACvD,MAEF,KAAKtJ,EAAA2J,SAASQ,iBACZ/T,KAAKgU,gBAAkCX,EAAWH,EAAMF,EAAeC,GACvE,MAEF,KAAKrJ,EAAA2J,SAASU,gBACZjU,KAAKkU,eAAgCb,EAAWH,GAChD,MAEF,KAAKtJ,EAAA2J,SAASY,oBACZnU,KAAKoU,mBAAwCf,EAAWH,GACxD,MAEF,KAAKtJ,EAAA2J,SAASc,qBACZrU,KAAKsU,oBAA0CjB,EAAWH,GAC1D,MAEF,KAAKtJ,EAAA2J,SAASgB,qBACZvU,KAAKwU,oBAA0CnB,EAAWH,EAAMF,EAAeC,GAC/E,MAEF,KAAKrJ,EAAA2J,SAASkB,gBACZzU,KAAK0U,yBAA0CrB,EAAWH,SAQlE,IAAgC,IAAAyB,EAAAC,EAAA7B,GAAiB8B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAxC,KAAAE,EAAAC,EAAAJ,EAAAvT,MAAA,GAAO4T,GAANhC,EAAA8B,EAAA,GAAMA,EAAA,IACd,IAAS3U,EAAI,EAAG8O,EAAI+F,EAAYpK,OAAQzK,EAAI8O,IAAK9O,EAAG,CAClD,IAAI8U,EAAaD,EAAY7U,IACzB+U,EAAcpV,KAAKqV,kBAAkBF,EAAW9K,YAAa8K,EAAW7K,iBAQ5E4I,EAAKoC,iBAAiBF,GANpBpV,KAAKuV,MACH7L,EAAA8L,eAAeC,iBACfN,EAAW1K,YAAYsF,MAAOoF,EAAW1K,YAAYnJ,0GAS7D,IAASjB,EAAI,EAAG8O,EAAI0D,EAAc/H,OAAQzK,EAAI8O,IAAK9O,EAAG,CACpD,IAuBM+U,EAvBFM,EAAe7C,EAAcxS,GAC7B+J,EAAoBsL,EAAatL,kBACrC,GAAIA,GACEuL,GAAU3V,KAAK4V,cACjBxL,EAAkByL,KAClBH,EAAarL,YACbqL,EAAapL,eACbwI,IAGA4C,EAAaxL,UAAU4H,IACrB4D,EAAavL,gBAAgB0L,KAC7BF,IACA,GAIF3V,KAAKuV,MACH7L,EAAA8L,eAAeM,kCACf1L,EAAkB2F,MAAO2F,EAAarL,YAAaD,EAAkByL,WAKzE,GADIT,EAAcpV,KAAKqV,kBAAkBK,EAAarL,YAAaqL,EAAapL,gBAC/D,CACf,IAAIJ,EAAYwL,EAAaxL,UACzB6L,EAAYL,EAAavL,gBAAgB0L,KAC7C3L,EAAU4H,IACRiE,EACAX,EAAYY,oBACVD,EACA7L,IAEF,QAGFW,QAAO,OAMb,IAA4B,IAAAoL,EAAArB,EAAA9B,GAAaoD,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAlC,IAAAqB,EAAAlB,EAAAiB,EAAA5U,MAAA,GAAO5B,GAANwT,EAAAiD,EAAA,GAAMA,EAAA,QACd,IAAuC,IAAAC,GAAAC,OAAA,EAAAzB,EAAAlV,IAAO4W,EAAAF,EAAAtB,QAAAwB,EAAAvB,KAAAuB,EAAAF,EAAAtB,OAAE,CAAvC,IAAAyB,EAAAtB,EAAAqB,EAAAhV,MAAA,GAACkV,GAAAD,EAAA,GAAYE,GAAAF,EAAA,GAEhBlM,IADA0L,EAAYU,GAAatM,gBAAgB0L,KAC3BY,GAAapM,aAC/B,GAAIA,IACEsL,GAAU3V,KAAK4V,cACjBG,EACA1L,GACAQ,OAAO4L,GAAanM,gBACpBwI,IAGAI,EAAKwD,aAAaF,GAAYb,IAE9B3V,KAAKuV,MACH7L,EAAA8L,eAAeM,kCACfW,GAAatM,gBAAgB4F,MAC7B1F,GAAa0L,QAKjB,GADIJ,GAAUzC,EAAKyD,aAAaZ,GAE9B7C,EAAKwD,aAAaF,GAAYb,QACzB,CACL,IAAIiB,GAAgB5W,KAAK6W,aAAad,GAClCa,IAAiBA,cAAyBE,EAC5C5D,EAAKwD,aAAaF,GAA6BI,IAE/C5W,KAAKuV,MACH7L,EAAA8L,eAAeM,kCACfW,GAAarM,kBAAkB2F,MAC/BmD,EAAKvE,aAAc8H,GAAarM,kBAAkByL,4MAS9DhL,OAA2B,GAApB7K,KAAKkO,aACZlO,KAAK+W,oBAAsB/W,KAAKgX,aAAavN,EAAAzG,cAAcsE,aAC3DuD,OAAsC,GAA/B7K,KAAK+W,oBAAoBpH,IAChC3P,KAAKiX,eAAiBjX,KAAKgX,aAAavN,EAAAzG,cAAcgE,QACtD6D,OAAiC,GAA1B7K,KAAKiX,eAAetH,IAC3B3P,KAAKkX,wBAA0BlX,KAAKgX,aAAavN,EAAAzG,cAAcqE,iBAC/DwD,OAA0C,GAAnC7K,KAAKkX,wBAAwBvH,IAGpC3P,KAAKmX,wBAAuB,EAAc1N,EAAAzG,cAAckD,IACxDlG,KAAKmX,wBAAuB,EAAe1N,EAAAzG,cAAcmD,KACzDnG,KAAKmX,wBAAuB,EAAe1N,EAAAzG,cAAcoD,KACzDpG,KAAKmX,wBAAuB,EAAe1N,EAAAzG,cAAcqD,KACzDrG,KAAKmX,wBAAuB,EAAiB1N,EAAAzG,cAAcsD,OAC3DtG,KAAKmX,wBAAuB,EAAc1N,EAAAzG,cAAcuD,IACxDvG,KAAKmX,wBAAuB,EAAe1N,EAAAzG,cAAcwD,KACzDxG,KAAKmX,wBAAuB,EAAe1N,EAAAzG,cAAcyD,KACzDzG,KAAKmX,wBAAuB,EAAe1N,EAAAzG,cAAc0D,KACzD1G,KAAKmX,wBAAuB,EAAiB1N,EAAAzG,cAAc2D,OAC3D3G,KAAKmX,wBAAuB,GAAgB1N,EAAAzG,cAAc4D,MAC1D5G,KAAKmX,wBAAuB,GAAe1N,EAAAzG,cAAc6D,KACzD7G,KAAKmX,wBAAuB,GAAe1N,EAAAzG,cAAc8D,KACrD0K,EAAQW,WAAU,IAAgBnS,KAAKmX,wBAAuB,GAAgB1N,EAAAzG,cAAc+D,MAGhG/G,KAAKoX,iBAAmCpX,KAAKJ,QAAQ6J,EAAAzG,cAAcyE,UAAW2F,EAAYiK,iBAC1FrX,KAAKsX,kBAAoCtX,KAAKJ,QAAQ6J,EAAAzG,cAAc0E,WAAY0F,EAAYiK,iBAC5FrX,KAAKuX,kBAAoCvX,KAAKJ,QAAQ6J,EAAAzG,cAAc2E,WAAYyF,EAAYiK,iBAC5FrX,KAAKwX,kBAAoCxX,KAAKJ,QAAQ6J,EAAAzG,cAAc4E,WAAYwF,EAAYiK,iBAC5FrX,KAAKyX,iBAAmCzX,KAAKJ,QAAQ6J,EAAAzG,cAAc6E,WAAYuF,EAAYiK,iBAC3FrX,KAAK0X,wBAA0C1X,KAAKJ,QAAQ6J,EAAAzG,cAAc8E,kBAAmBsF,EAAYiK,iBACzGrX,KAAK2X,kBAAoC3X,KAAKJ,QAAQ6J,EAAAzG,cAAc+E,YAAaqF,EAAYiK,iBAC7FrX,KAAK4X,kBAAoC5X,KAAKJ,QAAQ6J,EAAAzG,cAAcgF,YAAaoF,EAAYiK,iBAC7FrX,KAAK6X,kBAAoC7X,KAAKJ,QAAQ6J,EAAAzG,cAAciF,YAAamF,EAAYiK,iBAC7FrX,KAAK8X,kBAAoC9X,KAAKJ,QAAQ6J,EAAAzG,cAAckF,aAAckF,EAAYiK,iBAC9FrX,KAAK+X,kBAAoC/X,KAAKJ,QAAQ6J,EAAAzG,cAAcmF,aAAciF,EAAYiK,iBAG9F,IAAIzI,GAAW5O,KAAK4O,SACpB,IAASvO,EAAI,EAAG8O,EAAI6D,EAAclI,OAAQzK,EAAI8O,IAAK9O,EAAG,CACpD,IAAI2X,GAAgBhF,EAAc3S,GAC9B4X,GAAcpN,OAAOmN,GAAcC,aACnCC,GAActJ,GAASuJ,gBAAgBF,GAAYrX,KAAMoX,GAAchH,QAC3E,GAAKkH,GACL,GAAIA,GAAY5E,MAAQlG,EAAYiK,gBAAiB,CACnD,IAAIe,GAAgCF,GAChCE,GAAcC,aAAahL,EAAeiL,SAC5CtY,KAAKuV,MACH7L,EAAA8L,eAAe+C,yCACfN,GAAYlI,MAAwBmI,GAAaM,eAAe3C,MAIlEuC,GAAcC,aAAahL,EAAeoL,YAC1CT,GAAcK,aAAahL,EAAeoL,YAE1CzY,KAAKuV,MACH7L,EAAA8L,eAAekD,+DACf9O,EAAA+O,MAAMC,KAAKZ,GAAcQ,eAAezI,MAAOkI,GAAYlI,QAG/DiI,GAAcI,cAAgBA,QAE9BpY,KAAKuV,MACH7L,EAAA8L,eAAeqD,sCACfZ,GAAYlI,OAOhB,IAAI+I,GAAgBtH,EAAQsH,cAC5B,GAAIA,OACF,IAA0B,IAAAC,GAAAnE,EAAAkE,IAAaE,GAAAD,GAAAjE,QAAAkE,GAAAjE,KAAAiE,GAAAD,GAAAjE,OAAE,CAAhC,IAAAmE,GAAAhE,EAAA+D,GAAA1X,MAAA,GAAC4X,GAAAD,GAAA,GAAOrY,GAAAqY,GAAA,GACf,GAAKrY,GAAKkK,OAAV,CACA,IAAIqO,GAAYvY,GAAKsK,WAAW,GAChC,GAAIiO,IAAS,IAAmBA,IAAS,GACvCnZ,KAAKoS,wBAAwB8G,GAAOvP,EAAA+H,KAAKtO,IAAKiP,QAAa+G,SAASxY,GAAM,UACrE,CACL,IAAIiN,GAAiB7N,KAAK6N,eAE1B,KADI8H,GAAU9H,GAAe3M,IAAIN,KAK5B,MAAM,IAAIyY,MAAM,2BAA6BzY,IAHhD,GAAIiN,GAAeyD,IAAI4H,IAAQ,MAAM,IAAIG,MAAM,6BAA+BzY,IAC9EiN,GAAea,IAAIwK,GAAOvD,4GASpC3V,KAAKsZ,eAAiCtZ,KAAKJ,QAAQ6J,EAAAzG,cAAciE,MAAOmG,EAAYiK,iBACpFrX,KAAKuZ,oBAAsCvZ,KAAKJ,QAAQ6J,EAAAzG,cAAckE,WAAYkG,EAAYiK,iBAC9FrX,KAAKwZ,aAA+BxZ,KAAKJ,QAAQ6J,EAAAzG,cAAcmE,IAAKiG,EAAYiK,iBAChFrX,KAAKyZ,aAA+BzZ,KAAKJ,QAAQ6J,EAAAzG,cAAcoE,IAAKgG,EAAYiK,iBAChFrX,KAAK0Z,cAAgB1Z,KAAK2Z,eAAelQ,EAAAzG,cAAcoF,OACvDpI,KAAK4Z,cAAgB5Z,KAAK6Z,gBAAgBpQ,EAAAzG,cAAcuF,OACxDvI,KAAK8Z,gBAAkB9Z,KAAK6Z,gBAAgBpQ,EAAAzG,cAAcwF,SAC1DxI,KAAK+Z,aAAe/Z,KAAK6Z,gBAAgBpQ,EAAAzG,cAAcyF,MACvDzI,KAAKga,eAAiBha,KAAK6Z,gBAAgBpQ,EAAAzG,cAAc0F,QACzD1I,KAAKia,gBAAkBja,KAAK6Z,gBAAgBpQ,EAAAzG,cAAc2F,SAC1D3I,KAAKka,gBAAkBla,KAAK6Z,gBAAgBpQ,EAAAzG,cAAc4F,SAC1D5I,KAAKma,iBAAmBna,KAAK6Z,gBAAgBpQ,EAAAzG,cAAc6F,UAC3D7I,KAAKoa,mBAAqBpa,KAAK6Z,gBAAgBpQ,EAAAzG,cAAc8F,aAC7D9I,KAAKqa,cAAgBra,KAAK6Z,gBAAgBpQ,EAAAzG,cAAc+F,OACxD/I,KAAKsa,mBAAqBta,KAAK6Z,gBAAgBpQ,EAAAzG,cAAcgG,gBAG7D,IAAiB,IAAAuR,GAAA3F,EAAA5U,KAAK4N,YAAY4M,UAAQC,GAAAF,GAAAzF,QAAA2F,GAAA1F,KAAA0F,GAAAF,GAAAzF,OAAE,CACtCpV,GADGwT,EAAIuH,GAAAnZ,OACQ5B,QACnB,GAAMwT,EAAK9D,OAAOsL,SAAWhb,MAC7B,IAAoB,IAAAib,IAAAC,OAAA,EAAAhG,EAAAlV,EAAQ8a,WAAQK,GAAAF,GAAA7F,QAAA+F,GAAA9F,KAAA8F,GAAAF,GAAA7F,OAAA,CAA/B,IAAIa,GAAOkF,GAAAvZ,MAAsBtB,KAAK8a,iBAAiBnF,mNAKxDrI,EAAArL,UAAArC,QAAR,SAAgBgB,EAAc0S,GAC5B,IAAIqC,EAAU3V,KAAK6W,aAAajW,GAChC,IAAK+U,EAAS,MAAM,IAAI0D,MAAM,WAAazY,GAC3C,GAAI+U,EAAQrC,MAAQA,EAAM,MAAM,IAAI+F,MAAM,cAAgBzY,GAC1D,OAAO+U,GAIDrI,EAAArL,UAAA+U,aAAR,SAAqBpW,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMwM,EAAYiK,iBAC3C0D,EAAW/a,KAAK4O,SAASoM,aAA6B/Y,EAAW,MACrE,IAAK8Y,EAAU,MAAM,IAAI1B,MAAM,WAAazY,GAC5C,OAAOma,GAIDzN,EAAArL,UAAA0X,eAAR,SAAuB/Y,GACrB,IAAIqB,EAAYjC,KAAK6W,aAAajW,GAClC,OAAKqB,GAAaA,EAAUqR,MAAQlG,EAAY6N,mBACzCjb,KAAK4O,SAASsM,gBAAmCjZ,EAAW,MADQ,MAKrEqL,EAAArL,UAAA4X,gBAAR,SAAwBjZ,GACtB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMwM,EAAY6N,oBAC3CF,EAAW/a,KAAK4O,SAASsM,gBAAmCjZ,EAAW,MAC3E,IAAK8Y,EAAU,MAAM,IAAI1B,MAAM,WAAazY,GAC5C,OAAOma,GAIDzN,EAAArL,UAAA6Y,iBAAR,SAAyBnF,eAEvB,OADAA,EAAQjH,IAAIjF,EAAApH,YAAY8Y,eAChBxF,EAAQrC,MACd,KAAKlG,EAAYiK,gBACf,IAAI+D,EAAmCzF,EAASyF,gBAChD,GAAIA,MAAiB,IAAmB,IAAAC,EAAAzG,EAAAwG,EAAgBZ,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAA,CAAtC,IAAIyG,EAAMD,EAAAha,MAA8BtB,KAAK8a,iBAAiBS,qGACxF,MAEF,KAAKnO,EAAYoO,mBACf,IAAIC,EAAsC9F,EAAS8F,gBAC/CA,GAAiBzb,KAAK8a,iBAAiBW,GAC3C,IAAIC,EAAsC/F,EAAS+F,gBAC/CA,GAAiB1b,KAAK8a,iBAAiBY,GAC3C,MAEF,KAAKtO,EAAYuO,SACjB,KAAKvO,EAAYwO,SACjB,KAAKxO,EAAYyO,MACjB,KAAKzO,EAAY0O,MAAOjR,QAAO,GAG/B,IAAIkR,EAAUpG,EAAQoG,QACtB,GAAIA,MAAS,IAAmB,IAAAC,EAAApH,EAAAmH,EAAQvB,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAA,CAA1ByG,EAAMU,EAAA3a,MAAsBtB,KAAK8a,iBAAiBS,uGAKpEjO,EAAArL,UAAAwP,mBAAR,SAA2B7Q,EAAcsb,GACvC,IAAIvG,EAAU,IAAI5D,EAChBnR,EACAZ,KAAKwO,WACLxO,KAAKmQ,0BAA0BvP,EAAM6I,EAAApH,YAAY2P,QACjD3E,EAAe6E,SAEjByD,EAAQwG,QAAQD,GAChBlc,KAAKwO,WAAWsD,IAAIlR,EAAM+U,IAIpBrI,EAAArL,UAAAkV,wBAAR,SAAgCiF,EAAoBC,GAClDxR,QAAQ7K,KAAKgO,YAAYsD,IAAI8K,IAC7B,IAAIzG,EAAU3V,KAAK6W,aAAawF,GAChC,GAAI1G,EAAS,CACX9K,OAAO8K,EAAQrC,MAAQlG,EAAYiK,iBACnC,IAAIiF,EAAetc,KAAK4O,SAASoM,aAA6BrF,EAAS,MACnE2G,GAActc,KAAKgO,YAAYU,IAAI0N,EAAUE,KAK7ChP,EAAArL,UAAAmQ,wBAAR,SAAgCxR,EAAcsb,EAAY5a,GACxDuJ,OAAOqR,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf7b,EACAZ,KAAKwO,WACLnB,EAAeyC,KACf9P,KAAK4P,8BAA8BhP,EAAM6I,EAAApH,YAAYqa,MAAQjT,EAAApH,YAAY2P,SAE3EwK,EAAOG,wBAAwBrb,EAAO4a,GACtClc,KAAKwO,WAAWsD,IAAIlR,EAAM4b,IAIpBlP,EAAArL,UAAA2a,sBAAR,SAA8Bhc,EAAcsb,EAAY5a,GACtDuJ,OAAOqR,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf7b,EACAZ,KAAKwO,WACLnB,EAAeyC,KACf9P,KAAK4P,8BAA8BhP,EAAM6I,EAAApH,YAAYqa,MAAQjT,EAAApH,YAAY2P,SAE3EwK,EAAOK,sBAAsBvb,EAAO4a,GACpClc,KAAKwO,WAAWsD,IAAIlR,EAAM4b,IAI5BlP,EAAArL,UAAA6a,aAAA,SAAalc,EAAc+U,GACzB,IAAI9H,EAAiB7N,KAAK6N,eAC1B,GAAIA,EAAeyD,IAAI1Q,IACRiN,EAAe3M,IAAIN,KAMjB+U,EAAS,CACtB,IAAIoH,EAASC,EAASnP,EAAe3M,IAAIN,GAAQ+U,GACjD,IAAKoH,EAKH,OAJA/c,KAAKuV,MACH7L,EAAA8L,eAAeyH,uBACftH,EAAQ6C,eAAezI,MAAOnP,GAEzB+U,EAETA,EAAUoH,EAId,OADAlP,EAAea,IAAI9N,EAAM+U,GAClBA,GAITrI,EAAArL,UAAA4U,aAAA,SAAajW,GACX,IAAIsc,EAAWld,KAAK6N,eACpB,OAAIqP,EAAS5L,IAAI1Q,GAAcsc,EAAShc,IAAIN,GACrC,MAIT0M,EAAArL,UAAAkb,cAAA,SAAcvc,GACZ,IAAIsc,EAAWld,KAAK6N,eACpB,GAAIqP,EAAS5L,IAAI1Q,GAAO,OAAOsc,EAAShc,IAAIN,GAC5C,MAAM,IAAIyY,MAAM,mBAIV/L,EAAArL,UAAAoT,kBAAR,SAEEhL,EAEAC,GAEA,IAAIsD,EAAc5N,KAAK4N,YACvB,OAAOA,EAAY0D,IAAIjH,GAChBuD,EAAY1M,IAAImJ,GAChBuD,EAAY0D,IAAIhH,GAChBsD,EAAY1M,IAAIoJ,GAChB,MAIDgD,EAAArL,UAAA2T,cAAR,SAEEwH,EAEA/S,EAEAC,EAEAwI,GAEA,OAAG,CACD,IAAIsC,EAAcpV,KAAKqV,kBAAkBhL,EAAaC,GACtD,IAAK8K,EAAa,OAAO,KAGzB,IAAIO,EAAUP,EAAYiI,aAAaD,GACvC,GAAIzH,EAAS,OAAOA,EAGpB,GAAI7C,EAAcxB,IAAI8D,GAAc,CAClC,IAAIkI,EAAoBxK,EAAc5R,IAAIkU,GAC1C,GAAIkI,EAAkBhM,IAAI8L,GAAc,CACtC,IAAI3G,EAAe6G,EAAkBpc,IAAIkc,GACzC,GAAI3G,EAAapM,YAAa,CAC5B+S,EAAc3G,EAAatM,gBAAgB0L,KAC3CxL,EAAcoM,EAAapM,YAC3BC,EAAiBO,OAAO4L,EAAanM,gBACrC,SAGA,GADAqL,EAAUP,EAAYuB,aAAaF,EAAatM,gBAAgB0L,MACnD,OAAOF,GAI1B,MAEF,OAAO,MAIDrI,EAAArL,UAAAsb,gBAAR,SAEEC,EAEAC,GAEA,IAAI5N,EAAQxC,EAAeyC,KAC3B,GAAI0N,EACF,IAAK,IAAInd,EAAI,EAAG8O,EAAIqO,EAAW1S,OAAQzK,EAAI8O,IAAK9O,EAAG,CACjD,IAAIqd,EAAYF,EAAWnd,GAEvBsd,EAAOC,EADAhU,EAAAiU,oBAAoBH,EAAU9c,OAErC+c,IACEA,GAAQtQ,EAAe6E,QACnBuL,EAAgBE,GAAUD,EAAU3N,MAAMX,OAAO0O,UAMrDjO,GAAS8N,EALT3d,KAAKuV,MACH7L,EAAA8L,eAAeuI,8BACfL,EAAU3N,MAAO2N,EAAU9c,KAAKmP,MAAMiO,YAK/BP,EAAgBE,EAKlB9N,EAAQ8N,EACjB3d,KAAKuV,MACH7L,EAAA8L,eAAeyI,oBACfP,EAAU3N,MAAO2N,EAAU9c,KAAKmP,MAAMiO,YAGxCnO,GAAS8N,EAVT3d,KAAKuV,MACH7L,EAAA8L,eAAeuI,8BACfL,EAAU3N,MAAO2N,EAAU9c,KAAKmP,MAAMiO,aAahD,OAAOnO,GAIDvC,EAAArL,UAAA+R,gBAAR,SAEE3C,EAEAL,EAEAgC,EAEAC,GAEA,IAAIrS,EAAOyQ,EAAYzQ,KAAKiV,KACxBF,EAAU,IAAIuI,EAChBtd,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAC/BnQ,EAAe8Q,OACf9Q,EAAeiL,OACfjL,EAAeoL,YAGnB,IAAKzH,EAAOc,IAAIlR,EAAM+U,GAAU,OAAO,KAEvC,IAAIyI,EAAkB/M,EAAY+M,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgBtT,OAEzC,GAAI6K,EAAQ0C,aAAahL,EAAeoL,WAClC4F,GACFre,KAAKuV,MACH7L,EAAA8L,eAAe8I,8CACf1U,EAAA+O,MAAMC,KACJvH,EAAYzQ,KAAKmP,MACjBqO,EAAgBC,EAAqB,GAAGtO,aAIzC,GAAIsO,EAAoB,CAE7B,IAAK,IAAIhe,EAAI,EAAGA,EAAIge,IAAsBhe,GAM1C4S,EAAiBsL,KAAK5I,IAItBtE,EAAYmN,aAAaxL,EAAcuL,KAAK5I,GAIhD,IADA,IAAI8I,EAAqBpN,EAAY0K,QACrB5M,GAAP9O,EAAI,EAAOoe,EAAmB3T,QAAQzK,EAAI8O,IAAK9O,EAAG,CACzD,IAAIqe,EAAoBD,EAAmBpe,GAC3C,OAAQqe,EAAkBpL,MACxB,KAAK1J,EAAA2J,SAASoL,iBACZ3e,KAAK4e,gBAAkCF,EAAmB/I,GAC1D,MAEF,KAAK/L,EAAA2J,SAASsL,kBACRH,EAAkBI,MAAMrV,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,KACxDhf,KAAKif,mBAAsCP,EAAmB/I,GAE9D3V,KAAKkf,iBAAoCR,EAAmB/I,GAE9D,MAEF,KAAK/L,EAAA2J,SAAS4L,0BAA2B,MACzC,QAAStU,QAAO,IAGpB,OAAO8K,GAIDrI,EAAArL,UAAA2c,gBAAR,SAEEvN,EAEAL,GAEA,IAEI2E,EAFA/U,EAAOyQ,EAAYzQ,KAAKiV,KACxB2H,EAAanM,EAAYmM,WAE7B,GAAInM,EAAYkL,GAAG9S,EAAApH,YAAY+c,SAa7B,GAZAvU,OAAOmG,EAAOsC,MAAQlG,EAAYiS,qBAClC1J,EAAU,IAAI8G,EACZ7b,EACAoQ,EACAhR,KAAKud,gBAAgBC,GAClBnM,EAAYkL,GAAG9S,EAAApH,YAAYid,UACxBjS,EAAekS,OACflS,EAAeyC,MACfzC,EAAemS,KAAOnS,EAAeoS,QAE3CpO,IAEGL,EAAOc,IAAIlR,EAAM+U,GAAU,YAShC,GAPA9K,QAAQwG,EAAYyN,MAAMrV,EAAApH,YAAYqd,SAAWjW,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,MAC/ErJ,EAAU,IAAIgK,EACZ/e,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBC,EAAYnQ,EAAeoS,UAE7CzO,EAAO4O,YAAYhf,EAAM+U,GAAU,QAKpCrI,EAAArL,UAAAid,iBAAR,SAEE7N,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KACxBgK,EAAWxO,EAAYkL,GAAG9S,EAAApH,YAAY+c,QACtC3B,EAAgBpQ,EAAekS,OAASlS,EAAeoS,OACtDpO,EAAYkL,GAAG9S,EAAApH,YAAY4P,WAC9BwL,GAAiBpQ,EAAepC,gBACfoC,EAAeZ,gBACfY,EAAeL,kBAElC,IAAI2I,EAAU,IAAIxE,EAChBvQ,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAAYC,IAE/C,GAAIoC,GAEF,GADAhV,OAAOwG,EAAYzQ,KAAK0S,MAAQ1J,EAAA2J,SAASuM,cACpC9O,EAAOc,IAAIlR,EAAM+U,GAAU,YAEhC,IAAK3E,EAAO4O,YAAYhf,EAAM+U,GAAU,OAE1C3V,KAAK+f,uBAAuB1O,EAAYmM,WAAY7H,EAAS3E,IAIvD1D,EAAArL,UAAA8d,uBAAR,SAEEvC,EAEAvb,EAEA+d,GAEA,GAAIxC,EACF,IAAK,IAAInd,EAAI,EAAG8O,EAAIqO,EAAW1S,OAAQzK,EAAI8O,IAAK9O,EAAG,CACjD,IAAIqd,EAAYF,EAAWnd,GAC3B,OAAQqd,EAAU/S,eAChB,KAAKf,EAAAmB,cAAcC,SACnB,KAAKpB,EAAAmB,cAAcE,gBACnB,KAAKrB,EAAAmB,cAAc0B,gBACnB,KAAK7C,EAAAmB,cAAciC,iBACjB,IAAIiT,EAAUvC,EAAUwC,WAAaxC,EAAUwC,UAAUpV,QAAU,EACnE,GAAe,GAAXmV,EAAc,CAChB,IAAIE,EAA0BzC,EAAUwC,UAAW,GACnD,GACEC,EAAS7M,MAAQ1J,EAAA2J,SAAS6M,SACND,EAAUE,aAAezW,EAAA0W,YAAYC,OACzD,CACA,IAAIjN,EAAO5I,EACTgT,EAAU/S,cACgBwV,EAAU7e,OAEtC,GAAIgS,GAAQ9J,EAAa2D,QACvBnN,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfL,EAASpQ,WAEN,CACL,IAAI0Q,EAAYT,EAAeU,mBAC3BD,EAAUnP,IAAIgC,GAChBtT,KAAKuV,MACH7L,EAAA8L,eAAemL,kCACfR,EAASpQ,QAGX9N,EAAU2e,aAAetN,EACzBmN,EAAU/R,IAAI4E,EAAMrR,UAIxBjC,KAAKuV,MACH7L,EAAA8L,eAAeqL,wBACfV,EAASpQ,YAIb/P,KAAKuV,MACH7L,EAAA8L,eAAesL,+BACfpD,EAAU3N,MAAO,IAAKkQ,EAAQjC,SAAS,QAU7C1Q,EAAArL,UAAA8e,eAAR,SAEE1P,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KAC5B,GAAIxE,EAAYkL,GAAG9S,EAAApH,YAAY+c,QAAS,CAEtC,KADI4B,EAAgBhQ,EAAO+K,WACNiF,EAAc1P,IAAI1Q,GAGhC,CACL,IAAI+U,EAAU,IAAIsL,EAAkBrgB,EAAMoQ,EAAQK,GAClD,OAAKL,EAAOc,IAAIlR,EAAM+U,GACfA,EADgC,KAHvC,IADIA,EAAmBqL,EAAc9f,IAAIN,IAC7B0S,MAAQlG,EAAYoO,mBAAoB,OAA0B7F,MAM3E,CACL,IAAIqL,EACJ,KADIA,EAAgBhQ,EAAOoK,mBACN4F,EAAc1P,IAAI1Q,GAGhC,CACD+U,EAAU,IAAIsL,EAAkBrgB,EAAMoQ,EAAQK,GAClD,OAAKL,EAAO4O,YAAYhf,EAAM+U,GACvBA,EADwC,KAH/C,IADIA,EAAmBqL,EAAc9f,IAAIN,IAC7B0S,MAAQlG,EAAYoO,mBAAoB,OAA0B7F,EAWlF,OAJA3V,KAAKuV,MACH7L,EAAA8L,eAAe0L,qBACf7P,EAAYzQ,KAAKmP,MAAOnP,GAEnB,MAID0M,EAAArL,UAAAgd,mBAAR,SAEE5N,EAEAL,GAEA,IAAIhP,EAAWhC,KAAK+gB,eAAe1P,EAAaL,GAChD,GAAKhP,EAAL,CACA,IAAIpB,EAAOyQ,EAAYzQ,KAAKiV,KACxBsL,EAAW9P,EAAYkL,GAAG9S,EAAApH,YAAY0c,KAC1C,GAAIoC,GACF,GAAInf,EAASyZ,gBAKX,YAJAzb,KAAKuV,MACH7L,EAAA8L,eAAe0L,qBACf7P,EAAYzQ,KAAKmP,MAAOnP,QAK5B,GAAIoB,EAAS0Z,gBAKX,YAJA1b,KAAKuV,MACH7L,EAAA8L,eAAe0L,qBACf7P,EAAYzQ,KAAKmP,MAAOnP,GAK9B,IAAI+U,EAAU,IAAIxE,GACfgQ,EAAW1X,EAAAjH,cAAgBiH,EAAAhH,eAAiB7B,EAC7CoB,EACAqP,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAC/BnQ,EAAekS,OAASlS,EAAeoS,SAGvC0B,EACFnf,EAASyZ,gBAAkB9F,EAE3B3T,EAAS0Z,gBAAkB/F,IAKvBrI,EAAArL,UAAAiS,eAAR,SAEE7C,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KACxBF,EAAU,IAAIyL,EAChBxgB,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAC/BnQ,EAAe8Q,OACf9Q,EAAekS,OACflS,EAAemS,OAGnB,IAAKxO,EAAOc,IAAIlR,EAAM+U,GAAU,OAAO,KAEvC,IADA,IAAI6E,EAASnJ,EAAYmJ,OAChBna,EAAI,EAAG8O,EAAIqL,EAAO1P,OAAQzK,EAAI8O,IAAK9O,EAC1CL,KAAKqhB,oBAAoB7G,EAAOna,GAAIsV,GAEtC,OAAOA,GAIDrI,EAAArL,UAAAof,oBAAR,SAEEhQ,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KACxBF,EAAU,IAAI2L,EAChB1gB,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAC/BnQ,EAAeyC,OAGdkB,EAAOc,IAAIlR,EAAM+U,IAIhBrI,EAAArL,UAAAuR,kBAAR,SAEEH,EAEArC,EAEA8B,EAEAC,GAEA,IAAIgJ,EAAU1I,EAAU0I,QACxB,GAAIA,EACF,IAAK,IAAI1b,EAAI,EAAG8O,EAAI4M,EAAQjR,OAAQzK,EAAI8O,IAAK9O,EAC3CL,KAAKuhB,iBAAiBxF,EAAQ1b,GAAI2Q,EAAQqC,EAAUmO,aAAc1O,OAE/D,CACL,IAAI2O,OAAM,EACN1O,EAAkBzB,IAAIN,GAASyQ,EAAS1O,EAAkB7R,IAAI8P,GAC7D+B,EAAkBrE,IAAIsC,EAAQyQ,EAAS,IAC5C,IAAIpX,EAAcQ,OAAOwI,EAAUmO,cACnCC,EAAOlD,KAAK,IAAI/T,EACdH,EACAA,EAAYqX,SAASjY,EAAA1G,cACjBsH,EAAYsX,UAAU,EAAGtX,EAAYS,OAASrB,EAAA1G,aAAa+H,QAC3DT,EAAcZ,EAAA1G,aAClB8H,OAAOwI,EAAUuO,UAMftU,EAAArL,UAAAsf,iBAAR,SAEEhG,EAEArR,EAEAG,EAEAyI,GAEA,IAAIiD,EAAYwF,EAAOxF,UAAUF,KAC7BuH,EAAc7B,EAAOsG,aAAahM,KAGlCF,EAAUzL,EAAUmT,aAAaD,GACrC,GAAIzH,EACF3V,KAAKuV,MACH7L,EAAA8L,eAAesM,4DACfvG,EAAOsG,aAAa9R,MAAOqN,QAK/B,GAAoB,OAAhB/S,EAGF,GAAIsL,EAAUzL,EAAUyM,aAAaZ,GACnC7L,EAAUwM,aAAa0G,EAAazH,OAG/B,CACL,IAAI8L,OAAM,EACN3O,EAAcxB,IAAIpH,GAAYuX,EAAS3O,EAAc5R,IAAIgJ,GACxD4I,EAAcpE,IAAIxE,EAAWuX,EAAS,IAAIra,KAC/Cqa,EAAO/S,IAAI0O,EAAa,IAAI7S,EAC1BgR,EAAOxF,UACPwF,EAAOsG,aACP,KAAM,WAKL,CACDJ,OAAM,EACN3O,EAAcxB,IAAIpH,GAAYuX,EAAS3O,EAAc5R,IAAIgJ,GACxD4I,EAAcpE,IAAIxE,EAAWuX,EAAS,IAAIra,KAC/Cqa,EAAO/S,IAAI0O,EAAa,IAAI7S,EAC1BgR,EAAOxF,UACPwF,EAAOsG,aACPxX,EACAA,EAAYqX,SAASjY,EAAA1G,cACjBsH,EAAYsX,UAAU,EAAGtX,EAAYS,OAASrB,EAAA1G,aAAa+H,QAC3DT,EAAcZ,EAAA1G,iBAKhBuK,EAAArL,UAAAyR,wBAAR,SAEEL,EAEArC,EAEAgC,EAEAC,GAEA,IAAI5B,EAAcgC,EAAUhC,YACxBsE,EAAkC,KACtC,OAAQtE,EAAYiC,MAClB,KAAK1J,EAAA2J,SAASU,gBACZ0B,EAAU3V,KAAKkU,eAAgC7C,EAAaL,GAC5D,MAEF,KAAKpH,EAAA2J,SAASY,oBACZwB,EAAU3V,KAAKoU,mBAAwC/C,EAAaL,GACpE,MAEF,KAAKpH,EAAA2J,SAASQ,iBACZ4B,EAAU3V,KAAKgU,gBAAkC3C,EAAaL,EAAQgC,EAAeC,GACrF,MAEF,KAAKrJ,EAAA2J,SAASc,qBACZsB,EAAU3V,KAAKsU,oBAA0CjD,EAAaL,GACtE,MAEF,KAAKpH,EAAA2J,SAASgB,qBACZoB,EAAU3V,KAAKwU,oBAA0CnD,EAAaL,EAAQgC,EAAeC,GAC7F,MAEF,QAASpI,QAAO,GAElB,GAAI8K,EAAS,CACX,IAAIjW,EAAUsR,EAAOtR,QACrB,GAAKA,GACA,GAAIA,EAAQ4R,IAAI,WAKnB,YAJAtR,KAAKuV,MACH7L,EAAA8L,eAAeyH,uBACf5L,EAAYzQ,KAAKmP,MAAO,gBAJdiB,EAAOtR,QAAUA,EAAU,IAAI0H,IAQ7C1H,EAAQgP,IAAI,UAAWiH,KAKnBrI,EAAArL,UAAA2R,kBAAR,SAEEP,EAEArC,EAEA6B,EAEAC,GAEA,IAAIiP,EAAe1O,EAAU0O,aAC7B,GAAIA,EACF,IAAK,IAAI1hB,EAAI,EAAG8O,EAAI4S,EAAajX,OAAQzK,EAAI8O,IAAK9O,EAChDL,KAAKgiB,iBACHD,EAAa1hB,GACb2Q,EACAqC,EAAUmO,aACV3O,EACAC,QAGKO,EAAU4O,eACnBpP,EAAc0L,KAAK,IAAItU,EACrB+G,EACAqC,EAAU4O,cACV,KACA5O,EAAUmO,aACVnO,EAAUmO,aAAe/X,EAAA1G,gBAQvBuK,EAAArL,UAAA+f,iBAAR,SAEE3Q,EAEAL,EAEA3G,EAEAwI,EAEAC,GAEA,IAAIxI,EAAiBD,EAAYqX,SAASjY,EAAA1G,cACtCsH,EAAYsX,UAAU,EAAGtX,EAAYS,OAASrB,EAAA1G,aAAa+H,QAC3DT,EAAcZ,EAAA1G,aAGd4S,EAAU3V,KAAK4V,cAAcvE,EAAY+L,YAAYvH,KAAMxL,EAAaC,EAAgBwI,GACxF6C,EACF3E,EAAOc,IAAIT,EAAYzQ,KAAKiV,KAAMF,GAAS,GAK7C9C,EAAc0L,KAAK,IAAItU,EACrB+G,EACAK,EAAYzQ,KACZyQ,EAAY+L,YACZ/S,EACAC,KAKIgD,EAAArL,UAAAmS,mBAAR,SAEE/C,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KACxBqM,EAAkB7U,EAAeoS,OAASpS,EAAe6E,QACzDb,EAAYkL,GAAG9S,EAAApH,YAAY8f,SAC7BD,GAAmB7U,EAAe+U,SAElCF,GAAmB7U,EAAekS,OAE/BlO,EAAYkL,GAAG9S,EAAApH,YAAYggB,WAC1BrR,EAAOsC,MAAQlG,EAAYiK,kBAC7B6K,GAAmB7U,EAAe8Q,QAGtC,IAAIxI,EAAU,IAAIxE,EAChBvQ,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAAY0E,IAE/C,OAAKlR,EAAOc,IAAIlR,EAAM+U,GACfA,EADgC,MAKjCrI,EAAArL,UAAAqS,oBAAR,SAEEjD,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KACxBF,EAAU,IAAI2M,EAChB1hB,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAC/BnQ,EAAe8Q,SAGnB,IAAKnN,EAAOc,IAAIlR,EAAM+U,GAAU,OAAO,KAEvC,IADA,IAAI8I,EAAqBpN,EAAY0K,QAC5B1b,EAAI,EAAG8O,EAAIsP,EAAmB3T,OAAQzK,EAAI8O,IAAK9O,EAAG,CACzD,IAAIqe,EAAoBD,EAAmBpe,GAC3C,OAAQqe,EAAkBpL,MACxB,KAAK1J,EAAA2J,SAASoL,iBACZ3e,KAAK4e,gBAAkCF,EAAmB/I,GAC1D,MAEF,KAAK/L,EAAA2J,SAASsL,kBACRH,EAAkBI,MAAMrV,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,KACxDhf,KAAKif,mBAAsCP,EAAmB/I,GAE9D3V,KAAKkf,iBAAoCR,EAAmB/I,GAE9D,MAEF,QAAS9K,QAAO,IAGpB,OAAO8K,GAIDrI,EAAArL,UAAAuS,oBAAR,SAEEnD,EAEAL,EAEAgC,EAEAC,GAEA,IAAIrS,EAAOyQ,EAAYzQ,KAAKiV,KACxB0M,EAAW,IAAIC,EACjB5hB,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAAYnQ,EAAe8Q,SAE9D,IAAKnN,EAAOc,IAAIlR,EAAM2hB,GAAW,OAAO,KAGxC,IAFA,IAAI5M,EAAU9K,OAAOmG,EAAO2F,aAAa/V,IACrCmb,EAAU1K,EAAY0K,QACjB1b,EAAI,EAAG8O,EAAI4M,EAAQjR,OAAQzK,EAAI8O,IAAK9O,EAAG,CAC9C,IAAIkb,EAASQ,EAAQ1b,GACrB,OAAQkb,EAAOjI,MACb,KAAK1J,EAAA2J,SAASQ,iBACZ/T,KAAKgU,gBAAkCuH,EAAQgH,EAAUvP,EAAeC,GACxE,MAEF,KAAKrJ,EAAA2J,SAASU,gBACZjU,KAAKkU,eAAgCqH,EAAQgH,GAC7C,MAEF,KAAK3Y,EAAA2J,SAASY,oBACZnU,KAAKoU,mBAAwCmH,EAAQgH,GACrD,MAEF,KAAK3Y,EAAA2J,SAASc,qBACZrU,KAAKsU,oBAA0CiH,EAAQgH,GACvD,MAEF,KAAK3Y,EAAA2J,SAASgB,qBACZvU,KAAKwU,oBAA0C+G,EAAQgH,EAAUvP,EAAeC,GAChF,MAEF,KAAKrJ,EAAA2J,SAASkB,gBACZzU,KAAK0U,yBAA0C6G,EAAQgH,GACvD,MAEF,KAAK3Y,EAAA2J,SAASM,SACZ7T,KAAK8T,oBAAuCyH,EAAQgH,GACpD,MAEF,QAAS1X,QAAO,IAIpB,OADI0X,GAAY5M,GAAS8M,EAAYF,EAAU5M,GACxCA,GAIDrI,EAAArL,UAAAyS,yBAAR,SAEErD,EAEAL,GAEA,IAAIpQ,EAAOyQ,EAAYzQ,KAAKiV,KACxBF,EAAU,IAAI5D,EAChBnR,EACAoQ,EACAK,EACArR,KAAKud,gBAAgBlM,EAAYmM,WAAYnQ,EAAeyC,OAE9DkB,EAAOc,IAAIlR,EAAM+U,IAIXrI,EAAArL,UAAA6R,oBAAR,SAEET,EAEArC,GAGA,IADA,IAAI+Q,EAAe1O,EAAU0O,aACpB1hB,EAAI,EAAG8O,EAAI4S,EAAajX,OAAQzK,EAAI8O,IAAK9O,EAAG,CACnD,IAAIgR,EAAc0Q,EAAa1hB,GAC3BO,EAAOyQ,EAAYzQ,KAAKiV,KACxB4H,EAAgBpQ,EAAe8Q,OAAS9Q,EAAemS,KACvDnO,EAAYkL,GAAG9S,EAAApH,YAAYqgB,WAC7BjF,GAAiBpQ,EAAe+U,UAE9B/Q,EAAYkL,GAAG9S,EAAApH,YAAYqa,SAC7Be,GAAiBpQ,EAAekS,QAElC,IAAI5J,EAAU,IAAI8G,EAChB7b,EACAoQ,EACAhR,KAAKud,gBAAgBlM,EAAYmM,WAAYC,GAC7CpM,GAEGL,EAAOc,IAAIlR,EAAM+U,KA8B5BrI,EA9hDA,CAA6B5D,EAAAiZ,mBA2mD7B,SAAgB/E,EAAoBtK,GAClC,OAAQA,GACN,KAAK1J,EAAAmB,cAAcoT,OAAQ,OAAO9Q,EAAe8Q,OACjD,KAAKvU,EAAAmB,cAAcC,SACnB,KAAKpB,EAAAmB,cAAcE,gBAAiB,OAAOoC,EAAepC,gBAC1D,KAAKrB,EAAAmB,cAAc0B,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAK7C,EAAAmB,cAAciC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAKpD,EAAAmB,cAAc0N,UAAW,OAAOpL,EAAeoL,UACpD,KAAK7O,EAAAmB,cAAcuN,OAAQ,OAAOjL,EAAeiL,OACjD,KAAK1O,EAAAmB,cAAcwU,OAAQ,OAAOlS,EAAekS,OACjD,KAAK3V,EAAAmB,cAAcqX,SAAU,OAAO/U,EAAe+U,SACnD,KAAKxY,EAAAmB,cAAcmH,QAAS,OAAO7E,EAAe6E,QAIlD,KAAKtI,EAAAmB,cAAcyU,KAAM,OAAOnS,EAAemS,KAC/C,KAAK5V,EAAAmB,cAAc0U,OAAQ,OAAOpS,EAAeoS,OACjD,QAAS,OAAOpS,EAAeyC,MA5nDtBpQ,EAAA4N,UAiiDb,SAAYF,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,4CAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,gBAEAA,IAAA,oCApCF,CAAYA,EAAA1N,EAAA0N,cAAA1N,EAAA0N,YAAW,KAwCvB,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,0BAEAA,IAAA,sBAEAA,IAAA,sBA9BF,CAAYA,EAAA3N,EAAA2N,iBAAA3N,EAAA2N,eAAc,KAkC1B3N,EAAAke,sBAsBA,IAAAgF,EAAA,WAcE,SAAAA,EAEStP,EAEA1S,EAEA+N,EAEAkU,EAEP7R,GAROhR,KAAAsT,OAEAtT,KAAAY,OAEAZ,KAAA2O,eAEA3O,KAAA6iB,UAjBT7iB,KAAA6P,MAAqBpG,EAAApH,YAAYyN,KAEjC9P,KAAAiR,eAAiC5D,EAAeyC,KAEhD9P,KAAA+b,QAA8C,KAE9C/b,KAAA8iB,WAAoC,KAelC9iB,KAAK6iB,QAAUA,EACf7iB,KAAKY,KAAOA,EACZZ,KAAK2O,aAAeA,EAChBqC,EACFhR,KAAKgR,OAASA,GAEdnG,OAAO7K,KAAKsT,MAAQlG,EAAY2V,MAChC/iB,KAAKgR,OAAShR,MAoEpB,OA/DEe,OAAAC,eAAI4hB,EAAA3gB,UAAA,OAAI,KAAR,WAEE,IADA,IAAI+gB,EAAmBhjB,OACpB,IAAKgjB,EAAUA,EAAQhS,QAAQsC,MAAQlG,EAAY2V,KAAM,OAAaC,mCAK3EJ,EAAA3gB,UAAAsa,GAAA,SAAGoB,GAA2B,OAAQ3d,KAAK6P,MAAQ8N,IAASA,GAE5DiF,EAAA3gB,UAAA6c,MAAA,SAAMjP,GAA4B,OAA+B,IAAvB7P,KAAK6P,MAAQA,IAEvD+S,EAAA3gB,UAAAyM,IAAA,SAAIiP,GAA2B3d,KAAK6P,OAAS8N,GAE7CiF,EAAA3gB,UAAAghB,MAAA,SAAMtF,GAA0B3d,KAAK6P,QAAU8N,GAE/CiF,EAAA3gB,UAAAoW,aAAA,SAAasF,GAA8B,OAAQ3d,KAAKiR,eAAiB0M,IAASA,GAGlFiF,EAAA3gB,UAAA0U,aAAA,SAAa/V,GACX,IAAImb,EAAU/b,KAAK+b,QACnB,OAAIA,GAAWA,EAAQzK,IAAI1Q,GAAcmb,EAAQ7a,IAAIN,GAC9C,MAOTgiB,EAAA3gB,UAAA6P,IAAA,SAAIlR,EAAc+U,GAChB,IAAIuN,EAAsBvN,EAAQtE,YAC9B0K,EAAU/b,KAAK+b,QACnB,GAAKA,GACA,GAAIA,EAAQzK,IAAI1Q,GAAO,CAC1B,IAAIuiB,EAASpH,EAAQ7a,IAAIN,GACzB,GAAIuiB,EAAOnS,SAAWhR,UAEf,CACL,IAAI+c,EAASC,EAASmG,EAAQxN,GAC9B,IAAIoH,EAOF,OAJA/c,KAAK6iB,QAAQtN,MACX7L,EAAA8L,eAAeyH,uBACftH,EAAQ6C,eAAezI,MAAO4F,EAAQ6C,eAAe3C,OAEhD,EANPF,EAAUoH,SARF/c,KAAK+b,QAAUA,EAAU,IAAI3U,IAkB3C2U,EAAQrN,IAAI9N,EAAM+U,GAClB,IAAIkN,EAAU7iB,KAAK6iB,QAMnB,OALIlN,EAAQrC,MAAQlG,EAAY6N,oBAA2CtF,EAASyN,UAElFP,EAAQhV,eAAea,IAAIiH,EAAQhH,aAAcgH,GACjDkN,EAAQ/U,sBAAsBY,IAAIwU,EAAqBvN,KAElD,GAITiN,EAAA3gB,UAAA+b,SAAA,WACE,OAAO5Q,EAAYpN,KAAKsT,MAAQ,IAAMtT,KAAK2O,cAE/CiU,EArGA,GAAsBljB,EAAAkjB,UAwGtB,IAAA9L,EAAA,SAAAvJ,GAGE,SAAAuJ,EAEExD,EAEA1S,EAEA+N,EAEAkU,EAEA7R,EAEOK,GAZT,IAAA5D,EAcEF,EAAA/M,KAAAR,KAAMsT,EAAM1S,EAAM+N,EAAckU,EAAS7R,IAAOhR,YAFzCyN,EAAA4D,cASP5D,EAAK4D,YAAcA,EACnB5D,EAAKoC,MAAQwB,EAAYxB,QAiB7B,OA1C8Cf,EAAAgI,EAAAvJ,GA6B5CxM,OAAAC,eAAI8V,EAAA7U,UAAA,sBAAmB,KAAvB,WACE,OAAOjC,KAAKqR,YAAYtB,MAAMX,OAAO0O,2CAIvC/c,OAAAC,eAAI8V,EAAA7U,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKqR,YAAYzQ,sCAI1BG,OAAAC,eAAI8V,EAAA7U,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKqR,YAAYmM,4CAE5B1G,EA1CA,CAA8C8L,GAAxBljB,EAAAoX,kBA6CtB,IAAAuM,EAAA,SAAA9V,GAAA,SAAA8V,IAAA,IAAA5V,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YAGEyN,EAAAyO,KAAavS,EAAA+H,KAAKG,OAQpB,OAX2C/C,EAAAuU,EAAA9V,GAMzC8V,EAAAphB,UAAAka,QAAA,SAAQD,GACNrR,QAAQ7K,KAAKuc,GAAG9S,EAAApH,YAAYkhB,WAC5BvjB,KAAKkc,KAAOA,EACZlc,KAAK0O,IAAIjF,EAAApH,YAAYkhB,WAEzBF,EAXA,CAA2CvM,GAArBpX,EAAA2jB,eActB,IAAA5U,EAAA,SAAAlB,GAUE,SAAAkB,EAEEoU,EAEOzT,GAJT,IAAA3B,EAMEF,EAAA/M,KAAAR,KACEoN,EAAY2V,KACZ3T,EAAOF,eACPE,EAAOoS,aACPqB,EACA,OACD7iB,KARMyN,EAAA2B,SAXT3B,EAAA/N,QAA8C,KAE9C+N,EAAAyH,YAA6B,KAkB3BzH,EAAK2B,OAASA,EACdvE,QAAQgY,EAAQjV,YAAY0D,IAAI7D,EAAKkB,eACrCkU,EAAQjV,YAAYc,IAAIjB,EAAKkB,aAAclB,GAC3C,IAAI+V,EAAgB/V,EAAKoV,QAAQ/R,mBAC/B,SAAWrD,EAAKkB,aAChB,IAAIhF,EAAA8Z,UAAU,KAAM9Z,EAAA+H,KAAKG,MACzBpE,UAEF+V,EAAc7U,aAAe6U,EAAc5iB,KAC3C6M,EAAK+V,cAAgBA,IAoFzB,OApH0B1U,EAAAL,EAAAlB,GAoCxBkB,EAAAxM,UAAA6P,IAAA,SAAIlR,EAAc+U,EAA0B+N,GAI1C,YAJ0C,IAAAA,OAAA,GACtC/N,EAAQ0C,aAAahL,EAAe8Q,UACtCxI,EAAU3V,KAAK6iB,QAAQ/F,aAAalc,EAAM+U,MAEvCpI,EAAAtL,UAAM6P,IAAGtR,KAAAR,KAACY,EAAM+U,MACrBA,EAAU9K,OAAO7K,KAAK2W,aAAa/V,KACvB2b,GAAG9S,EAAApH,YAAY2P,UAAY0R,GACrC1jB,KAAK0W,aACHf,EAAQ/U,KACR+U,IAGG,IAITlH,EAAAxM,UAAA0U,aAAA,SAAa/V,GACX,IAAI+U,EAAUpI,EAAAtL,UAAM0U,aAAYnW,KAAAR,KAACY,GACjC,GAAI+U,EAAS,OAAOA,EACpB,IAAIT,EAAclV,KAAKkV,YACvB,GAAIA,EACF,IAAK,IAAI7U,EAAI,EAAG8O,EAAI+F,EAAYpK,OAAQzK,EAAI8O,IAAK9O,EAC/C,GAAIsV,EAAUT,EAAY7U,GAAGsW,aAAa/V,GAAO,OAAO+U,EAG5D,OAAO,MAITlH,EAAAxM,UAAA0hB,OAAA,SAAO/iB,GACL,IAAI+U,EAAU3V,KAAK2W,aAAa/V,GAChC,OAAI+U,GACG3V,KAAK6iB,QAAQhM,aAAajW,IAInC6N,EAAAxM,UAAAyU,aAAA,SAAa9V,EAAc+U,GACzB,IAAIjW,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAI0H,KAC3C1H,EAAQgP,IAAI9N,EAAM+U,GACd3V,KAAKoP,OAAO0O,WAAW9d,KAAK6iB,QAAQ/F,aAAalc,EAAM+U,IAI7DlH,EAAAxM,UAAAqT,iBAAA,SAAiBpC,GACf,IAAIgC,EAAclV,KAAKkV,YACvB,GAAKA,GACA,GAAIA,EAAY0O,SAAS1Q,GAAO,YADnBlT,KAAKkV,YAAcA,EAAc,GAEnDA,EAAYqJ,KAAKrL,IAInBzE,EAAAxM,UAAAob,aAAA,SAAazc,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAIA,GAAWA,EAAQ4R,IAAI1Q,GAAO,OAAOlB,EAAQwB,IAAIN,GACrD,IAAIsU,EAAclV,KAAKkV,YACvB,GAAIA,EACF,IAAK,IAAI7U,EAAI,EAAG8O,EAAI+F,EAAYpK,OAAQzK,EAAI8O,IAAK9O,EAAG,CAClD,IAAIsV,EAAUT,EAAY7U,GAAGgd,aAAazc,GAC1C,GAAI+U,EAAS,OAAOA,EAGxB,OAAO,MAITlH,EAAAxM,UAAA+T,oBAAA,SAAoBpV,EAAcoQ,WAC5BtP,EAAK,IAAI8gB,EACX5hB,EACAoQ,EACAhR,KAAK6iB,QAAQjS,+BAA+BhQ,IAE1ClB,EAAUM,KAAKN,QACnB,GAAIA,MACF,IAAiC,IAAAmkB,EAAAjP,EAAAlV,GAAOokB,EAAAD,EAAA/O,QAAAgP,EAAA/O,KAAA+O,EAAAD,EAAA/O,OAAE,CAAjC,IAAAiP,EAAA9O,EAAA6O,EAAAxiB,MAAA,GAAC0iB,EAAAD,EAAA,GAAYxI,EAAAwI,EAAA,GACpBriB,EAAGoQ,IAAIkS,EAAYzI,qGAGvB,OAAO7Z,GAEX+M,EApHA,CAA0BmU,GAAbljB,EAAA+O,OAuHb,IAAAsD,EAAA,SAAAxE,GAGE,SAAAwE,EAEEnR,EAEAoQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiC5D,EAAeyC,MARlD,IAAArC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAY6W,eACZrjB,EACAsjB,EAAmBtjB,EAAMoQ,GAAQ,GACjCA,EAAO6R,QACP7R,EACAK,IACDrR,YACDyN,EAAKwD,eAAiBA,IAiB1B,OAtCoCnC,EAAAiD,EAAAxE,GAyBlCxM,OAAAC,eAAI+Q,EAAA9P,UAAA,qBAAkB,KAAtB,WACE,OAAyBjC,KAAKqR,YAAa8S,gDAI7CpjB,OAAAC,eAAI+Q,EAAA9P,UAAA,WAAQ,KAAZ,WACE,OAAyBjC,KAAKqR,YAAa6K,sCAI7CnK,EAAA9P,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9BmR,EAtCA,CAAoCsR,GAAvB3jB,EAAAqS,iBAyCb,IAAAyQ,EAAA,SAAAjV,GAGE,SAAAiV,EAEE5hB,EAEAoQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiC5D,EAAeyC,MARlD,IAAArC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYgX,UACZxjB,EACAsjB,EAAmBtjB,EAAMoQ,GAAQ,GACjCA,EAAO6R,QACP7R,EACAK,IACDrR,YACDyN,EAAKwD,eAAiBA,IAQ1B,OA7B+BnC,EAAA0T,EAAAjV,GAyB7BiV,EAAAvgB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK2W,aAAa/V,IAClBZ,KAAKgR,OAAO2S,OAAO/iB,IAE9B4hB,EA7BA,CAA+B1L,GAAlBpX,EAAA8iB,YAgCb,IAAApB,EAAA,SAAA7T,GAGE,SAAA6T,EAEExgB,EAEAoQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiC5D,EAAeyC,MARlD,IAAArC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYiX,KACZzjB,EACAsjB,EAAmBtjB,EAAMoQ,GAAQ,GACjCA,EAAO6R,QACP7R,EACAK,IACDrR,YACDyN,EAAKwD,eAAiBA,EACtBxD,EAAK0O,QAAQxS,EAAA+H,KAAKtO,OAQtB,OA9B0B0L,EAAAsS,EAAA7T,GA0BxB6T,EAAAnf,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAK2W,aAAa/V,IAClBZ,KAAKgR,OAAO2S,OAAO/iB,IAE9BwgB,EA9BA,CAA0BiC,GAAb3jB,EAAA0hB,OAiCb,SAAkBkD,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAkB5kB,EAAA4kB,oBAAA5kB,EAAA4kB,kBAAiB,KAUnC,IAAAC,EAAA,SAAAhX,GAUE,SAAAgX,EAEEjR,EAEA1S,EAEAoQ,EAEAK,QAAA,IAAAA,MAAgDL,EAAO6R,QAAQjT,8BAA8BhP,IAR/F,IAAA6M,EAUEF,EAAA/M,KAAAR,KACEsT,EACA1S,EACAsjB,EAAmBtjB,EAAMoQ,GAAQ,GACjCA,EAAO6R,QACP7R,EACAK,IACDrR,YAxBHyN,EAAA+W,kBAAiB,EAyBf/W,EAAKoC,MAAQwB,EAAYxB,QAmC7B,OA/DkDf,EAAAyV,EAAAhX,GAgChDxM,OAAAC,eAAIujB,EAAAtiB,UAAA,WAAQ,KAAZ,WACE,OAA0CjC,KAAKqR,YAAa6K,sCAI9Dnb,OAAAC,eAAIujB,EAAAtiB,UAAA,kBAAe,KAAnB,WACE,OAA0CjC,KAAKqR,YAAaoT,6CAI9DF,EAAAtiB,UAAA0a,wBAAA,SAAwBrb,EAAY4a,GAClCrR,OAAOqR,EAAKK,GAAE,IACdvc,KAAKkc,KAAOA,EACZlc,KAAKwkB,kBAAiB,EACtBxkB,KAAK0kB,qBAAuBpjB,EAC5BtB,KAAK0O,IAAIjF,EAAApH,YAAYqa,MAAQjT,EAAApH,YAAYsiB,QAAUlb,EAAApH,YAAYkhB,WAIjEgB,EAAAtiB,UAAA4a,sBAAA,SAAsBvb,EAAY4a,GAChCrR,OAAOqR,EAAKK,GAAE,IACdvc,KAAKkc,KAAOA,EACZlc,KAAKwkB,kBAAiB,EACtBxkB,KAAK4kB,mBAAqBtjB,EAC1BtB,KAAK0O,IAAIjF,EAAApH,YAAYqa,MAAQjT,EAAApH,YAAYsiB,QAAUlb,EAAApH,YAAYkhB,WAIjEgB,EAAAtiB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9B2jB,EA/DA,CAAkDlB,GAA5B3jB,EAAA6kB,sBAkEtB,IAAAjD,EAAA,SAAA/T,GAGE,SAAA+T,EAEE1gB,EAEAoQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiC5D,EAAeyC,MARlD,IAAArC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYyX,UACZjkB,EACAoQ,EACAK,IACDrR,YAMHyN,EAAAqX,aAAoB,EALlBrX,EAAKwD,eAAiBA,EACtBxD,EAAK0O,QAAQxS,EAAA+H,KAAKtO,OAetB,OAnC+B0L,EAAAwS,EAAA/T,GA2B7BxM,OAAAC,eAAIsgB,EAAArf,UAAA,YAAS,KAAb,WACE,OAA8BjC,KAAKqR,YAAa/P,uCAIlDggB,EAAArf,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9B0gB,EAnCA,CAA+BiD,GAAlB7kB,EAAA4hB,YAsCb,IAAA7E,EAAA,SAAAlP,GAGE,SAAAkP,EAEE7b,EAEAoQ,EAEAC,EAEAI,QAAA,IAAAA,MAAgDL,EAAO6R,QAAQjT,8BAA8BhP,IAR/F,IAAA6M,EAUEF,EAAA/M,KAAAR,KACEoN,EAAY+Q,OACZvd,EACAoQ,EACAK,IACDrR,YACDyN,EAAKwD,eAAiBA,IAE1B,OArB4BnC,EAAA2N,EAAAlP,GAqB5BkP,EArBA,CAA4B8H,GAAf7kB,EAAA+c,SAwBb,IAAAsI,EAAA,WAUA,OARE,SAESnkB,EAEAsb,EAEAuI,QAAA,IAAAA,MAAA,MAJAzkB,KAAAY,OAEAZ,KAAAkc,OAEAlc,KAAAykB,eARX,GAAa/kB,EAAAqlB,YAab,IAAAC,EAAA,SAAAzX,GAGE,SAAAyX,EAEEpkB,EAEOqkB,EAEP/I,EAEAlL,EAEAK,QAAA,IAAAA,MAAgDL,EAAO6R,QAAQjT,8BAA8BhP,IAV/F,IAAA6M,EAYEF,EAAA/M,KAAAR,KACEoN,EAAY8X,MACZtkB,EACAoQ,EACAK,IACDrR,YAbMyN,EAAAwX,QAcPxX,EAAKwX,MAAQA,EACbpa,OAAOqR,GAAQvS,EAAA+H,KAAKG,MACpBpE,EAAK0O,QAAQD,KAEjB,OAzB2BpN,EAAAkW,EAAAzX,GAyB3ByX,EAzBA,CAA2BT,GAAd7kB,EAAAslB,QA4Bb,IAAA7T,EAAA,SAAA5D,GAWE,SAAA4D,EAEEvQ,EAEAoQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiC5D,EAAeyC,MARlD,IAAArC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAY6N,mBACZra,EACAsjB,EAAmBtjB,EAAMoQ,EAAQK,EAAYkL,GAAG9S,EAAApH,YAAYggB,WAC5DrR,EAAO6R,QACP7R,EACAK,IACDrR,YAzBHyN,EAAAmT,aAA6BpX,EAAa2D,QAE1CM,EAAA0X,UAAyC,KAGjC1X,EAAA2X,gBAAuD,KAqB7D3X,EAAKwD,eAAiBA,IAsE1B,OAnGuCnC,EAAAqC,EAAA5D,GAiCrCxM,OAAAC,eAAImQ,EAAAlP,UAAA,qBAAkB,KAAtB,WACE,OAA6BjC,KAAKqR,YAAa8S,gDAIjDpjB,OAAAC,eAAImQ,EAAAlP,UAAA,mBAAgB,KAApB,WACE,OAA6BjC,KAAKqR,YAAaN,2CAIjDhQ,OAAAC,eAAImQ,EAAAlP,UAAA,WAAQ,KAAZ,WACE,OAA6BjC,KAAKqR,YAAagU,sCAIjDtkB,OAAAC,eAAImQ,EAAAlP,UAAA,YAAS,KAAb,WACE,OAA6BjC,KAAKqR,YAAaiU,2CAIjDvkB,OAAAC,eAAImQ,EAAAlP,UAAA,UAAO,KAAX,WACE,IAAI+O,EAAShR,KAAKgR,OAClB,OAAOA,EAAOsC,MAAQlG,EAAY0O,OAC3B9K,EAAOsC,MAAQlG,EAAYoO,oBAAsBxK,EAAOA,OAAOsC,MAAQlG,EAAY0O,uCAI5F3K,EAAAlP,UAAAsjB,QAAA,SAAQ/V,GACN3E,OAAO7K,KAAKuc,GAAG9S,EAAApH,YAAYggB,WAC3BxX,QAAQ7K,KAAKojB,SACb,IAAIgC,EAAkBplB,KAAKolB,gBAC3B,GAAKA,GACA,GAAIA,EAAgB9T,IAAI9B,GAAgB,OAAO4V,EAAgBlkB,IAAIsO,QADlDxP,KAAKolB,gBAAkBA,EAAkB,IAAIhe,IAEnE,IAAIiK,EAAcrR,KAAKqR,YAAaxG,OAAOwG,EAAYiC,MAAQ1J,EAAA2J,SAASsL,mBACxE,IAAI2G,EAAQ,IAAIrU,EACdnR,KAAKY,KACL4O,EACmB6B,EACnBrR,KAAKiR,gBAMP,OAJAuU,EAAM3V,MAAQ7P,KAAK6P,MACnB2V,EAAM5E,aAAe5gB,KAAK4gB,aAE1BwE,EAAgB1W,IAAIc,EAAegW,GAC5BA,GAITrU,EAAAlP,UAAAwjB,oBAAA,SAAoBC,GAClB,IAAIP,EAAYnlB,KAAKmlB,UACrB,OAAIA,GAAaA,EAAU7T,IAAIoU,GAA+BP,EAAUjkB,IAAIwkB,GACrE,MAITvU,EAAAlP,UAAA0jB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAYnlB,KAAKmlB,UAChBA,EACAta,QAAQsa,EAAU7T,IAAIoU,IADX1lB,KAAKmlB,UAAYA,EAAY,IAAI/d,IAEjD+d,EAAUzW,IAAIgX,EAAaE,IAI7BzU,EAAAlP,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9BuQ,EAnGA,CAAuC2F,GAA1BpX,EAAAyR,oBAsGb,IAAAD,EAAA,SAAA3D,GAiCE,SAAA2D,EAEE2U,EAEA5jB,EAEA8O,EAEA+U,QAAA,IAAAA,MAAA,MARF,IAAArY,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYwO,SACZiK,EACA3B,EAAmB2B,EAAwB5jB,EAAU+O,OAAQ/O,EAAUsa,GAAG9S,EAAApH,YAAYggB,WACtFpgB,EAAU4gB,QACV5gB,EAAU+O,OACV/O,EAAUoP,cACXrR,KAOD,GAlDFyN,EAAAsY,aAAkC,IAAI3e,IAEtCqG,EAAAuY,cAAyB,GAEzBvY,EAAAwY,iBAA2B,GAM3BxY,EAAAyY,eAA0B,GAE1BzY,EAAA0Y,IAAmB,EAEnB1Y,EAAA2Y,oBAA2B,EAE3B3Y,EAAA4Y,WAA8B,KAG9B5Y,EAAA6Y,aAAoB,EAEpB7Y,EAAA8Y,gBAAuB,EAEvB9Y,EAAA+Y,kBAAyB,EAyFzB/Y,EAAAgZ,SAA2B,KAC3BhZ,EAAAiZ,SAA2B,KAC3BjZ,EAAAkZ,SAA2B,KAC3BlZ,EAAAmZ,SAA2B,KAC3BnZ,EAAAoZ,UAA4B,KAG5BpZ,EAAAqZ,YAAmB,EACnBrZ,EAAAsZ,WAA2B,KAC3BtZ,EAAAuZ,WAA4B,KA7E1BvZ,EAAKxL,UAAYA,EACjBwL,EAAKsD,UAAYA,EACjBtD,EAAKoC,MAAQ5N,EAAU4N,MAAQpG,EAAApH,YAAYkhB,SAC3C9V,EAAKwD,eAAiBhP,EAAUgP,eAChCxD,EAAKqY,wBAA0BA,EAC/BrY,EAAKyO,KAAOvS,EAAA+H,KAAKjO,IAAIwjB,WAAWlW,IAC3B9O,EAAUsa,GAAG9S,EAAApH,YAAY8f,SAAU,CACtC,IAAI+E,EAAa,EACjB,GAAIzZ,EAAK8O,GAAG9S,EAAApH,YAAYggB,UAAW,CACjC,IAAI8E,EAAQ,IAAInC,EACdvb,EAAAzG,cAAcoC,MACd8hB,IACArc,OAAOkG,EAAUqW,UACjB3Z,GAEFA,EAAKsY,aAAarX,IAAIjF,EAAAzG,cAAcoC,MAAO+hB,GAC3C1Z,EAAKuY,cAAcmB,EAAMlC,OAASkC,EAGpC,IADA,IAAIE,EAAiBtW,EAAUsW,eACtBhnB,EAAI,EAAG8O,EAAIkY,EAAevc,OAAQzK,EAAI8O,IAAK9O,EAAG,CACrD,IAAIinB,EAAgBD,EAAehnB,GAC/BknB,EAAgBxW,EAAUyW,iBAAiBnnB,GAC3C8mB,EAAQ,IAAInC,EACduC,EACAL,IACAI,EACA7Z,GAEFA,EAAKsY,aAAarX,IAAI6Y,EAAeJ,GACrC1Z,EAAKuY,cAAcmB,EAAMlC,OAASkC,UAGtC1Z,EAAKga,KAAOzd,EAAA0d,KAAK/lB,OAAO8L,GACxBka,EAAwBla,EAAKoV,QAASpV,KAmE1C,OAvJ8BqB,EAAAoC,EAAA3D,GAwF5B2D,EAAAjP,UAAA2lB,SAAA,SAAS1L,EAAYtb,EAA4ByQ,QAA5B,IAAAzQ,MAAA,WAA4B,IAAAyQ,MAAA,MAE/C,IAAI6V,EAAalnB,KAAK+Q,UAAUsW,eAAevc,OAAS9K,KAAKimB,iBAAiBnb,OAC1E9K,KAAKuc,GAAG9S,EAAApH,YAAYggB,aAAa6E,EACrC,IAAInR,EAAqB,OAATnV,EACZA,EACA,OAASsmB,EAAWlJ,WACpBmJ,EAAQ,IAAInC,EACdjP,EACAmR,EACAhL,EACAlc,KACAqR,GAAerR,KAAK6iB,QAAQjT,8BAA8BmG,IAE5D,GAAInV,EAAM,CACR,GAAIZ,KAAK+lB,aAAazU,IAAI1Q,GAAO,MAAM,IAAIyY,MAAM,wBACjDrZ,KAAK+lB,aAAarX,IAAI9N,EAAMumB,GAI9B,OAFAnnB,KAAKgmB,cAAcmB,EAAMlC,OAASkC,EAClCnnB,KAAKimB,iBAAiB1H,KAAKrC,GACpBiL,GAITjW,EAAAjP,UAAA0hB,OAAA,SAAO/iB,GACL,IAAIinB,EAAS7nB,KAAK+lB,aAClB,OAAI8B,EAAOvW,IAAI1Q,GAAcinB,EAAO3mB,IAAIN,GACjCZ,KAAKgR,OAAO2S,OAAO/iB,IAgB5BsQ,EAAAjP,UAAA6lB,SAAA,SAASnoB,EAAgBwmB,GAMvB,GALAnmB,KAAKmmB,IAAMA,EACXtb,QAAQ7K,KAAK+mB,aAAe/mB,KAAK+mB,WAAWjc,QAC5C9K,KAAK+mB,WAAa,KAClB/mB,KAAKgnB,WAAa,KAClBhnB,KAAKymB,SAAWzmB,KAAK0mB,SAAW1mB,KAAK2mB,SAAW3mB,KAAK4mB,SAAW,KAC5D5mB,KAAK6iB,QAAQrR,QAAQuW,UAEvB,IADA,IAAI7B,EAAiBlmB,KAAKkmB,eACjB7lB,EAAI,EAAG8O,EAAI+W,EAAepb,OAAQzK,EAAI8O,IAAK9O,EAAG,CACrD,IAAI2nB,EAAgB9B,EAAe7lB,GACnCV,EAAOsoB,iBACL9B,EACA6B,EAAcE,aACdF,EAAc5Y,OAAO+Y,eACrBH,EAAcI,KACdJ,EAAcK,UAKxBnX,EAvJA,CAA8BmS,GAAjB3jB,EAAAwR,WA0Jb,IAAAoX,EAAA,SAAA/a,GAQE,SAAA+a,EAEEvX,EAEA8R,EACA0F,QAAA,IAAAA,MAAA,IALF,IAAA9a,EAOEF,EAAA/M,KAAAR,KACEoN,EAAYob,gBACZD,EAAM,OAASxX,EAAU0X,oBACzBF,EACA1F,EACAA,EAAQrU,aACTxO,YACDyN,EAAKsD,UAAYA,EACjBtD,EAAKoC,MAAQpG,EAAApH,YAAYkhB,SACzB9V,EAAKyO,KAAOvS,EAAA+H,KAAKjO,IAAIwjB,WAAWlW,KAOpC,OA/BoCjC,EAAAwZ,EAAA/a,GA4BlC+a,EAAArmB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAO,MAEX0nB,EA/BA,CAAoC1F,GAAvBljB,EAAA4oB,iBAkCb,IAAA3I,EAAA,SAAApS,GAGE,SAAAoS,EAEE/e,EAEAoQ,EAEAK,EAEAJ,QAAA,IAAAA,MAAiC5D,EAAeyC,MARlD,IAAArC,EAUEF,EAAA/M,KAAAR,KACEoN,EAAYsb,gBACZ9nB,EACAsjB,EAAmBtjB,EAAMoQ,EAAQnG,OAAOwG,EAAYkL,GAAG9S,EAAApH,YAAYggB,YACnErR,EAAO6R,QACP7R,EACAK,IACDrR,YACDyN,EAAKwD,eAAiBA,IAsB1B,OA3CoCnC,EAAA6Q,EAAApS,GAyBlCxM,OAAAC,eAAI2e,EAAA1d,UAAA,WAAQ,KAAZ,WACE,OAA0BjC,KAAKqR,YAAa6K,sCAI9Cnb,OAAAC,eAAI2e,EAAA1d,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKqR,YAAaoT,6CAI9C1jB,OAAAC,eAAI2e,EAAA1d,UAAA,iBAAc,KAAlB,WACE,OAA0BjC,KAAKqR,YAAasX,gDAI9ChJ,EAAA1d,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9B+e,EA3CA,CAAoC7I,GAAvBpX,EAAAigB,iBA8Cb,IAAAiJ,EAAA,SAAArb,GAQE,SAAAqb,EAEE3mB,EAEA+O,EAEAkL,GANF,IAAAzO,EAQEF,EAAA/M,KAAAR,KACEoN,EAAYyO,MACZ5Z,EAAUrB,KACVoQ,EACkC/O,EAAUoP,cAC7CrR,YAhBHyN,EAAAob,cAAqB,EAiBnBpb,EAAKxL,UAAYA,EACjBwL,EAAKoC,MAAQ5N,EAAU4N,MACvBhF,OAAOqR,GAAQvS,EAAA+H,KAAKG,MACpBpE,EAAK0O,QAAQD,GACbyL,EAAwBla,EAAKoV,QAASpV,KAE1C,OA5B2BqB,EAAA8Z,EAAArb,GA4B3Bqb,EA5BA,CAA2BrE,GAAd7kB,EAAAkpB,QA+Bb,IAAA3H,EAAA,SAAA1T,GAQE,SAAA0T,EAEErgB,EAEAoQ,EAEA8X,GANF,IAAArb,EAQEF,EAAA/M,KAAAR,KACEoN,EAAYoO,mBACZ5a,EACAsjB,EAAmBtjB,EAAMoQ,EAAQ8X,EAAiBvM,GAAG9S,EAAApH,YAAYggB,WACjErR,EAAO6R,QACP7R,EACA8X,IACD9oB,YApBHyN,EAAAgO,gBAA4C,KAE5ChO,EAAAiO,gBAA4C,KAmB1CjO,EAAKoC,SAAWpG,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,OAOlD,OA/BuClQ,EAAAmS,EAAA1T,GA4BrC0T,EAAAhf,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9BqgB,EA/BA,CAAuCnK,GAA1BpX,EAAAuhB,oBAkCb,IAAA8H,EAAA,SAAAxb,GAUE,SAAAwb,EAEE9mB,EAEA+O,GAJF,IAAAvD,EAMEF,EAAA/M,KAAAR,KACEoN,EAAYuO,SACZ1Z,EAAUrB,KACVoQ,EACA/O,EAAU4gB,QAAQjT,8BAChB3N,EAAUrB,KACVqB,EAAUsa,GAAG9S,EAAApH,YAAYggB,UACrB5Y,EAAApH,YAAYggB,SACZ5Y,EAAApH,YAAYyN,QAEnB9P,YArBHyN,EAAAub,eAAkC,KAElCvb,EAAAwb,eAAkC,KAoBhCxb,EAAKxL,UAAYA,EACjB0lB,EAAwBla,EAAKoV,QAASpV,KAO1C,OAnC8BqB,EAAAia,EAAAxb,GAgC5Bwb,EAAA9mB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9BmoB,EAnCA,CAA8BxE,GAAjB7kB,EAAAqpB,WAsCb,IA4GWG,EA5GXhL,EAAA,SAAA3Q,GAaE,SAAA2Q,EAEEtd,EAEAoQ,EAEAK,EAEAJ,EACAkY,QADA,IAAAlY,MAAiC5D,EAAeyC,WAChD,IAAAqZ,OAAA,GATF,IAAA1b,EAWEF,EAAA/M,KAAAR,KACEmpB,EAAe/b,EAAYiS,oBAAsBjS,EAAYiK,gBAC7DzW,EACAsjB,EAAmBtjB,EAAMoQ,EAAQK,EAAYkL,GAAG9S,EAAApH,YAAYggB,WAC5DrR,EAAO6R,QACP7R,EACAK,IACDrR,YA5BHyN,EAAA2N,gBAA8C,KAE9C3N,EAAA2K,cAAuC,KAEvC3K,EAAA2b,qBAAiD,KAEjD3b,EAAAiT,mBAA2D,IAAItZ,IAE/DqG,EAAA0X,UAAsC,KAqBpC1X,EAAKwD,eAAiBA,IA0E1B,OA1GoCnC,EAAAoP,EAAA3Q,GAoClCxM,OAAAC,eAAIkd,EAAAjc,UAAA,qBAAkB,KAAtB,WACE,OAA0BjC,KAAKqR,YAAa8S,gDAG9CpjB,OAAAC,eAAIkd,EAAAjc,UAAA,cAAW,KAAf,WACE,OAA0BjC,KAAKqR,YAAamN,6CAG9Czd,OAAAC,eAAIkd,EAAAjc,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKqR,YAAa+M,iDAI9Crd,OAAAC,eAAIkd,EAAAjc,UAAA,iBAAc,KAAlB,WACE,IAAIiV,EAA0BlX,KAAK6iB,QAAQ3L,wBAC3C,OAAmC,OAA5BA,GACAlX,KAAKqpB,QAAQnS,EAAwBjV,4CAI9Cic,EAAAjc,UAAAonB,QAAA,SAAQC,GACN,IAAItG,EAAiChjB,KACrC,GAAG,GAAIgjB,IAAYsG,EAAe,OAAO,QAClCtG,EAAUA,EAAQ5K,eACzB,OAAO,GAIT8F,EAAAjc,UAAA2d,YAAA,SAAYhf,EAAc+U,GACxB,IAAIuN,EAAsBvN,EAAQtE,YAC9B+J,EAAkBpb,KAAKob,gBAC3B,GAAKA,GACA,GAAIA,EAAgB9J,IAAI1Q,GAAO,CAClC,IAAImc,EAASC,EAAS5B,EAAgBla,IAAIN,GAAQ+U,GAClD,IAAKoH,EAKH,OAJA/c,KAAK6iB,QAAQtN,MACX7L,EAAA8L,eAAeyH,uBACftH,EAAQ6C,eAAezI,MAAO4F,EAAQ6C,eAAe3C,OAEhD,EAETF,EAAUoH,QAVU/c,KAAKob,gBAAkBA,EAAkB,IAAIhU,IAiBnE,OALAgU,EAAgB1M,IAAI9N,EAAM+U,GACtBA,EAAQ4G,GAAG9S,EAAApH,YAAY2P,SAAWhS,KAAKuc,GAAG9S,EAAApH,YAAY8Y,gBACxDxF,EAAQjH,IAAIjF,EAAApH,YAAY8Y,eAE1Bnb,KAAK6iB,QAAQ/U,sBAAsBY,IAAIwU,EAAqBvN,IACrD,GAITuI,EAAAjc,UAAAwjB,oBAAA,SAAoBC,GAClB,IAAIP,EAAYnlB,KAAKmlB,UACrB,OAAIA,GAAaA,EAAU7T,IAAIoU,GAA4BP,EAAUjkB,IAAIwkB,GAClE,MAITxH,EAAAjc,UAAA0jB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAYnlB,KAAKmlB,UAChBA,EACAta,QAAQsa,EAAU7T,IAAIoU,IADX1lB,KAAKmlB,UAAYA,EAAY,IAAI/d,IAEjD+d,EAAUzW,IAAIgX,EAAaE,IAI7B1H,EAAAjc,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAE9Bsd,EA1GA,CAAoCpH,GAAvBpX,EAAAwe,iBA4Gb,SAAWgL,GACTA,IAAA,qBACAA,IAAA,qBACAA,IAAA,6BAHF,CAAWA,MAAY,KAOvB,IAAAK,EAAA,SAAAhc,GAkDE,SAAAgc,EAEE1D,EAEA5jB,EAEAunB,EAEAC,EACAN,gBAHA,IAAAK,MAAA,WAEA,IAAAC,MAAA,WACA,IAAAN,OAAA,GATF,IAAA1b,EAWEF,EAAA/M,KAAAR,KACEmpB,EAAe/b,EAAYsc,UAAYtc,EAAY0O,MACnD+J,EACA3B,EAAmB2B,EAAwB5jB,EAAU+O,OAAQ/O,EAAUsa,GAAG9S,EAAApH,YAAYggB,WACtFpgB,EAAU4gB,QACV5gB,EAAU+O,OACV/O,EAAUoP,cACXrR,KA3DHyN,EAAAqY,wBAAmD,KAEnDrY,EAAAkc,oBAA2B,EAE3Blc,EAAAmc,oBAAuC,KAEvCnc,EAAAgT,UAA+C,KAEvChT,EAAAoc,IAAW,EAEXpc,EAAAqc,SAAQ,EAEhBrc,EAAAsc,UAAiB,EAgDf,IAAIlH,EAAUpV,EAAKoV,QAQnB,GAPApV,EAAKxL,UAAYA,EACjBwL,EAAKoC,MAAQ5N,EAAU4N,MACvBpC,EAAKwD,eAAiBhP,EAAUgP,eAChCxD,EAAK+b,cAAgBA,EACrB/b,EAAK0O,QAAQ0G,EAAQrR,QAAQI,UAAUoY,QAAQvc,IAC/CA,EAAKgc,KAAOA,GAEPhc,EAAK4K,aAAahL,EAAeoL,WAAY,CAChD,IAAI9I,EAAKkT,EAAQ3U,cACjBT,EAAKoc,IAAMla,EACXkT,EAAQ5U,eAAeS,IAAIiB,EAAIlC,GAIjC,GAAIgc,EAAM,CACR,IAAIQ,EAAyBR,EAAK3D,wBAClC,GAAImE,EAAwB,CAC1B,IAAInE,EAA0BrY,EAAKqY,4BACnC,IAAiC,IAAAoE,EAAAtV,EAAAqV,GAAsBE,EAAAD,EAAApV,QAAAqV,EAAApV,KAAAoV,EAAAD,EAAApV,OAAE,CAAhD,IAAAiP,EAAA9O,EAAAkV,EAAA7oB,MAAA,GAAC8oB,EAAArG,EAAA,GAAUsG,EAAAtG,EAAA,GACb+B,IAAyBrY,EAAKqY,wBAA0BA,EAA0B,IAAI1e,KAC3F0e,EAAwBpX,IAAI0b,EAAUC,uGAM5C,IAAIlG,EAAiBliB,EAAUqoB,mBAC/B,GAAId,EAAe,CACjB,IAAIe,EAAmBf,EAAc1e,OACrC,IAAKqZ,GAAkBoG,GAAoBpG,EAAerZ,OACxD,MAAM,IAAIuO,MAAM,gCAElB,GAAIkR,EAAkB,CACf9c,EAAKqY,0BAAyBrY,EAAKqY,wBAA0B,IAAI1e,KACtE,IAAK,IAAI/G,EAAI,EAAGA,EAAIkqB,IAAoBlqB,EACtCoN,EAAKqY,wBAAwBpX,IAAIyV,EAAe9jB,GAAGO,KAAKiV,KAAM2T,EAAcnpB,UAG3E,GAAI8jB,GAAkBA,EAAerZ,OAC1C,MAAM,IAAIuO,MAAM,uCAElBsO,EAAwB9E,EAASpV,KA+NrC,OA9U2BqB,EAAAya,EAAAhc,GAwBzBxM,OAAAC,eAAIuoB,EAAAtnB,UAAA,KAAE,KAAN,WACE,OAAOjC,KAAK6pB,qCAId9oB,OAAAC,eAAIuoB,EAAAtnB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiC,UAAUuoB,gDAIxBzpB,OAAAC,eAAIuoB,EAAAtnB,UAAA,cAAW,KAAf,WACE,GAAIjC,KAAKwqB,eAAgB,OAAO,EAChC,IAAIC,EAAczqB,KAAK2W,aAAa,UACpC,OAAuB,OAAhB8T,IACLA,EAAYnX,MAAQlG,EAAYyO,OAE9B4O,EAAYnX,MAAQlG,EAAYuO,UACW,OAAhC8O,EAAazB,kBAGwB,OAAlDhpB,KAAK0qB,eAAelhB,EAAa2B,cAC2B,OAA5DnL,KAAK0qB,eAAelhB,EAAa6B,yDAsErCke,EAAAtnB,UAAA0oB,eAAA,SAAeC,GACb,IAAI5H,EAAwBhjB,KAC5B,GAAG,GAAIgjB,GAAW4H,EAAQ,OAAO,QAC1B5H,EAAUA,EAAQyG,MACzB,OAAO,GAITF,EAAAtnB,UAAAyoB,eAAA,SAAepX,EAAoBuX,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQvX,GACN,KAAK9J,EAAa2B,YAEhB,GADI2f,EAAoB9qB,KAAK0qB,eAAelhB,EAAa6B,uBAClC,OAAOyf,EAC9B,MAEF,KAAKthB,EAAa4B,YAChB,IAAI0f,EACJ,GADIA,EAAoB9qB,KAAK0qB,eAAelhB,EAAa8B,uBAClC,OAAOwf,EAC9B,MAEF,QAASjgB,QAAO,GAGpB,IAAI+a,EAAyB5lB,KAC7B,EAAG,CACD,IAAIygB,EAAYmF,EAASnF,UACzB,GAAIA,EAAW,CACb,IAAIsK,EAAWtK,EAAUvf,IAAIoS,GAC7B,GAAIyX,EAAU,OAAOA,SAEhBnF,EAAWA,EAAS6D,MAC7B,OAAO,MAITF,EAAAtnB,UAAA0hB,OAAA,SAAO/iB,GACL,OAAOZ,KAAKgR,OAAO2S,OAAO/iB,IAI5B2oB,EAAAtnB,UAAA+oB,SAAA,SAASC,GACP,IAAIlP,EAAUlR,OAAO7K,KAAK+b,SAC1BlR,OAAOkR,EAAQzK,IAAI2Z,IACnB,IAAIC,EAAiBnP,EAAQ7a,IAAI+pB,GAEjC,OADApgB,OAAOqgB,EAAM5X,MAAQlG,EAAYyO,OAClBqP,EAAOrC,cAIxBU,EAAAtnB,UAAAkpB,WAAA,SAAcvqB,EAAcU,EAAUgO,EAAoB8b,GACxD,IAAIF,EAAQlrB,KAAK2W,aAAa/V,GAC9B,GAAIsqB,GAASA,EAAM5X,MAAQlG,EAAYyO,MAAO,CAC5C,IAAItM,EAAS6b,EAAqBF,EAAOrC,aACzC,OAAgBqC,EAAOhP,KAAK5I,MAC1B,OACA,OAEE,OADAzJ,EAAAwhB,QAAQjoB,IAAI9B,GAAQgO,EAAQC,GACrB,EAET,OACA,OAEE,OADA1F,EAAAyhB,SAASloB,IAAI9B,GAAQgO,EAAQC,GACtB,EAET,OACA,OAEE,OADA1F,EAAA6F,SAAStM,IAAI9B,GAAQgO,EAAQC,GACtB,EAET,OACA,OAGE,OAFA1E,QAAQ7K,KAAK6iB,QAAQrR,QAAQc,UAC7BzI,EAAA6F,SAAStM,IAAI9B,GAAQgO,EAAQC,GACtB,EAET,QAEE,OADA1F,EAAA0hB,SAAS1nB,IAAIvC,GAAQgO,EAAQC,GACtB,EAET,QAEE,OADA1F,EAAA2hB,SAAS1nB,IAAIxC,GAAQgO,EAAQC,GACtB,GAKb,OADA1E,QAAO,GACA,GAIT0e,EAAAtnB,UAAAonB,QAAA,SAAQpnB,GACN,OAAOjC,KAAKiC,UAAUonB,QAAQpnB,IAIhCsnB,EAAAtnB,UAAAwpB,mBAAA,SAAmBC,GACjB,IAAI1I,EAAwBhjB,KAC5B,GAAG,GAAIgjB,EAAQ/gB,YAAcypB,EAAmB,OAAO1I,EAAQwG,oBACxDxG,EAAUA,EAAQyG,MACzB,OAAO,MAITF,EAAAtnB,UAAA0pB,kBAAA,WAIE,IAHA,IAAI3I,EAAiBhjB,KACjB6iB,EAAU7iB,KAAK6iB,QACf+I,EAAc/I,EAAQ3L,wBACnB8L,EAAQyG,OAASmC,GACtB5I,EAAUnY,OAAOmY,EAAQyG,MAE3B,OAAQzG,EAAQ/gB,WACd,KAAK4gB,EAAQzL,iBAAkB,OAAOzN,EAAA+H,KAAKxO,GAC3C,KAAK2f,EAAQvL,kBAAmB,OAAO3N,EAAA+H,KAAKvO,IAC5C,KAAK0f,EAAQtL,kBAAmB,OAAO5N,EAAA+H,KAAKtO,IAC5C,KAAKyf,EAAQrL,kBAAmB,OAAO7N,EAAA+H,KAAKrO,IAC5C,KAAKwf,EAAQpL,iBACb,KAAKoL,EAAQnL,wBAAyB,OAAO/N,EAAA+H,KAAKnO,GAClD,KAAKsf,EAAQlL,kBAAmB,OAAOhO,EAAA+H,KAAKlO,IAC5C,KAAKqf,EAAQjL,kBAAmB,OAAOjO,EAAA+H,KAAKjO,IAC5C,KAAKof,EAAQhL,kBAAmB,OAAOlO,EAAA+H,KAAKhO,IAC5C,KAAKmf,EAAQ/K,kBAAmB,OAAOnO,EAAA+H,KAAK7N,IAC5C,KAAKgf,EAAQ9K,kBAAmB,OAAOpO,EAAA+H,KAAK5N,IAC5C,KAAK+e,EAAQvJ,eAAgB,OAAOzO,OAAO7K,KAAKyrB,mBAAmB5I,EAAQvJ,iBAAiB,GAC5F,QAASzO,QAAO,GAElB,OAAOlB,EAAA+H,KAAKG,MAId9Q,OAAAC,eAAIuoB,EAAAtnB,UAAA,YAAS,KAAb,WACE,IAAI4pB,EAAU7rB,KAAK8pB,SACnB,GAAW,GAAP+B,EAAiC,CACnC,IAAIC,EAAW9rB,KAAK+rB,SAAS/rB,MACfA,KAAK8pB,SAAW+B,EAA1BC,EAAiC,EACT,EAE9B,OAAc,GAAPD,mCAIDtC,EAAAtnB,UAAA8pB,SAAR,SAAiBC,EAAcC,WAezBjJ,EAJJ,QAX6B,IAAAiJ,MAAA,IAAyB9kB,KAWlD8kB,EAAO3a,IAAItR,MAAO,OAAO,EAC7BisB,EAAOna,IAAI9R,MAIX,IAeIoY,EAfA2D,EAAU/b,KAAK+b,QACnB,GAAIA,MACF,IAAmB,IAAAgI,EAAAnP,EAAAmH,EAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAAhC,IAAIyG,EAAMF,EAAA/Z,MACb,GACEia,EAAOjI,MAAQlG,EAAYyO,OACyB,QAAnDmH,EAAkBzH,EAAQW,KAAKgQ,kBAE9BlJ,IAAYgJ,GACZhJ,EAAQ+I,SAASC,EAAOC,IAE1B,OAAO,oGAQb,IAAK7T,EAAgBpY,KAAK6iB,QAAQvJ,iBAAmBtZ,KAAKiC,UAAUonB,QAAQjR,GAAgB,CAC1F,IAAIoR,EAAgB3e,OAAO7K,KAAKyrB,mBAAmBrT,IAEnD,GADAvN,OAA+B,GAAxB2e,EAAc1e,QAE6B,QAA/CkY,EAAUwG,EAAc,GAAG0C,kBAE1BlJ,IAAYgJ,GACZhJ,EAAQ+I,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAK7T,EAAgBpY,KAAK6iB,QAAQrJ,eAAiBxZ,KAAKiC,UAAUonB,QAAQjR,GAAgB,CAC3FoR,EAAgB3e,OAAO7K,KAAKyrB,mBAAmBrT,IAEnD,GADAvN,OAA+B,GAAxB2e,EAAc1e,QAE6B,QAA/CkY,EAAUwG,EAAc,GAAG0C,kBAE1BlJ,IAAYgJ,GACZhJ,EAAQ+I,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAK7T,EAAgBpY,KAAK6iB,QAAQpJ,eAAiBzZ,KAAKiC,UAAUonB,QAAQjR,GAAgB,CAC3FoR,EAAgB3e,OAAO7K,KAAKyrB,mBAAmBrT,IAEnD,GADAvN,OAA+B,GAAxB2e,EAAc1e,QAE6B,QAA/CkY,EAAUwG,EAAc,GAAG0C,kBAE1BlJ,IAAYgJ,GACZhJ,EAAQ+I,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/CjJ,EAAUwG,EAAc,GAAG0C,kBAE1BlJ,IAAYgJ,GACZhJ,EAAQ+I,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GAEX1C,EA9UA,CAA2BlG,GAAd3jB,EAAA6pB,QAiVb,IAAAjH,EAAA,SAAA/U,GAGE,SAAA+U,EACE1hB,EACAoQ,EACAK,EACAJ,UAEA1D,EAAA/M,KAAAR,KACEY,EACAoQ,EACAK,EACAJ,GACA,IACDjR,KAEL,OAjBwC8O,EAAAwT,EAAA/U,GAiBxC+U,EAjBA,CAAwCpE,GAA3Bxe,EAAA4iB,qBAoBb,IAAA6J,EAAA,SAAA5e,GAGE,SAAA4e,EACEtG,EACA5jB,EACAunB,EACAC,eADA,IAAAD,MAAA,SACA,IAAAC,MAAA,MAEAlc,EAAA/M,KAAAR,KACE6lB,EACA5jB,EACAunB,EACAC,GACA,IACDzpB,KAEL,OAjB+B8O,EAAAqd,EAAA5e,GAiB/B4e,EAjBA,CAA+B5C,GAoB/B,SAAS5B,EAAwB9E,EAAkBlN,GACjD9K,QAAQgY,EAAQ9U,gBAAgBuD,IAAIqE,EAAQhH,eAC5CkU,EAAQ9U,gBAAgBW,IAAIiH,EAAQhH,aAAcgH,GAIpD,SAASqH,EAASoP,EAAgBC,GAGhCxhB,OAAOuhB,EAAMvJ,UAAYwJ,EAAMxJ,SAC/BhY,QAAQwhB,EAAMtQ,SACd,IAAIgB,EAAiC,KACrC,OAAQqP,EAAM9Y,MACZ,KAAKlG,EAAY6N,mBACf,OAAQoR,EAAM/Y,MACZ,KAAKlG,EAAYgX,UACf3B,EAAY4J,EAAOD,GACnBrP,EAA0BqP,EAC1B,MAEF,KAAKhf,EAAY6W,eACVmI,EAAMtJ,aACTsJ,EAAMtJ,WAA6BuJ,EACnC5J,EAAY4J,EAAOD,GACnBrP,EAA0BqP,GAKhC,MAEF,KAAKhf,EAAYiK,gBACjB,KAAKjK,EAAYiX,KACf,GAAIgI,EAAM/Y,MAAQlG,EAAYgX,UAAW,CACvC3B,EAAY4J,EAAOD,GACnBrP,EAA0BqP,EAC1B,MAEF,MAEF,KAAKhf,EAAYgX,UACf,OAAQiI,EAAM/Y,MACZ,KAAKlG,EAAYiX,KACjB,KAAKjX,EAAYiK,gBACjB,KAAKjK,EAAY6N,mBACfwH,EAAY2J,EAAOC,GACnBtP,EAA0BsP,EAC1B,MAEF,KAAKjf,EAAYgX,UACf3B,EAAY4J,EAAOD,GACnBrP,EAA0BqP,EAC1B,MAEF,KAAKhf,EAAY6W,eACVmI,EAAMtJ,aACTsJ,EAAMtJ,WAA6BuJ,EACnC5J,EAAY4J,EAAOD,GACnBrP,EAA0BqP,GAKhC,MAEF,KAAKhf,EAAY+Q,OACXkO,EAAM/Y,MAAQlG,EAAY6W,iBACvBmI,EAAMtJ,aACTsJ,EAAMtJ,WAA6BuJ,EACnC5J,EAAY4J,EAAOD,GACnBrP,EAA0BqP,IAG9B,MAEF,KAAKhf,EAAY6W,eACf,OAAQoI,EAAM/Y,MACZ,KAAKlG,EAAY+Q,OACjB,KAAK/Q,EAAY6N,mBACjB,KAAK7N,EAAYgX,UACViI,EAAMvJ,aACTuJ,EAAMvJ,WAA6BsJ,EACnC3J,EAAY2J,EAAOC,GACnBtP,EAA0BsP,IAQhCtP,KACkBqP,EAAM7P,GAAG9S,EAAApH,YAAY2P,SAAWoa,EAAM/T,aAAahL,EAAe8Q,WAClEkO,EAAM9P,GAAG9S,EAAApH,YAAY2P,SAAWqa,EAAMhU,aAAahL,EAAe8Q,UAEpFiO,EAAMvJ,QAAQtN,MACZ7L,EAAA8L,eAAe8W,kFACfvP,EAAOvE,eAAezI,MAAOgN,EAAOvE,eAAe3C,OAIzD,OAAOkH,EAIT,SAAS0F,EAAY8J,EAAcC,WAC7BC,EAAaF,EAAIxQ,QACrB,GAAI0Q,EAAY,CACd,IAAIC,EAAcF,EAAKzQ,QAClB2Q,IAAaF,EAAKzQ,QAAU2Q,EAAc,IAAItlB,SACnD,IAAiC,IAAAulB,EAAA/X,EAAA6X,GAAUG,EAAAD,EAAA7X,QAAA8X,EAAA7X,KAAA6X,EAAAD,EAAA7X,OAAE,CAApC,IAAAiP,EAAA9O,EAAA2X,EAAAtrB,MAAA,GAAC0iB,EAAAD,EAAA,GAAYxI,EAAAwI,EAAA,GACpB2I,EAAYhe,IAAIsV,EAAYzI,uGAMlC,SAAgB2I,EAAmBtjB,EAAcoQ,EAAiB6b,EAAkBC,GAClF,YADkF,IAAAA,OAAA,GAC1E9b,EAAOsC,MACb,KAAKlG,EAAY2V,KACf,OAAI+J,EAAiBlsB,EACdoQ,EAAOrC,aAAelF,EAAAnH,eAAiB1B,EAEhD,KAAKwM,EAAYwO,SACf,OAAIkR,EAAiBlsB,GACrBiK,QAAQgiB,GACD7b,EAAOrC,aAAelF,EAAA7G,gBAAkBhC,GAEjD,QACE,OAAOsjB,EAAmBlT,EAAOpQ,KAAMoQ,EAAOA,OAAQA,EAAOuL,GAAG9S,EAAApH,YAAYggB,UAAWyK,IAC/ED,EAAapjB,EAAA/G,mBAAqB+G,EAAA9G,kBAAoB/B,GAtJvDlB,EAAAysB,YAyIbzsB,EAAAwkB,kKClgHA6I,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KAGAT,EAAAstB,WAAA,SAA2BC,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,mFCL7B,IAeYC,EAfZC,EAAAhtB,EAAA,IAKA0J,EAAA1J,EAAA,GAIAitB,EAAAjtB,EAAA,IAgBA,SAAgBktB,EAA2BC,GACzC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,MAAO,OACrC,KAAKL,EAAmBM,QAAS,MAAO,UACxC,KAAKN,EAAmBO,MAAO,MAAO,QACtC,QAEE,OADA5iB,QAAO,GACA,IAeb,SAAgB6iB,EAA0BJ,GACxC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,OAAO7tB,EAAAiuB,WACrC,KAAKT,EAAmBM,QAAS,OAAO9tB,EAAAkuB,aACxC,KAAKV,EAAmBO,MAAO,OAAO/tB,EAAAmuB,UACtC,QAEE,OADAhjB,QAAO,GACA,IA5CXnL,EAAA8V,eAAA4X,EAAA5X,eACA9V,EAAAouB,uBAAAV,EAAAU,uBAIF,SAAYZ,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAxtB,EAAAwtB,qBAAAxtB,EAAAwtB,mBAAkB,KAU9BxtB,EAAA2tB,6BAaa3tB,EAAAiuB,WAAqB,QAErBjuB,EAAAkuB,aAAuB,QAEvBluB,EAAAmuB,UAAoB,QAEpBnuB,EAAAquB,YAAsB,OAGnCruB,EAAAguB,4BAaA,IAAAM,EAAA,WAcE,SAAAA,EAAoBC,EAAWX,EAA8BY,GAL7DluB,KAAA+P,MAAsB,KAEtB/P,KAAAmuB,aAA6B,KAI3BnuB,KAAKiuB,KAAOA,EACZjuB,KAAKstB,SAAWA,EAChBttB,KAAKkuB,QAAUA,EAkFnB,OA9ESF,EAAArsB,OAAP,SACEssB,EACAX,EACAc,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUf,EAAAW,uBAAuBG,GAIrC,OAHY,MAARG,IAAcF,EAAUA,EAAQK,QAAQ,MAAOH,IACvC,MAARC,IAAcH,EAAUA,EAAQK,QAAQ,MAAOF,IACvC,MAARC,IAAcJ,EAAUA,EAAQK,QAAQ,MAAOD,IAC5C,IAAIN,EAAkBC,EAAMX,EAAUY,IAIxCF,EAAAQ,WAAP,SACEP,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBrsB,OAAOssB,EAAMf,EAAmBK,KAAMa,EAAMC,IAIhEL,EAAAS,cAAP,SACER,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBrsB,OAAOssB,EAAMf,EAAmBM,QAASY,EAAMC,IAInEL,EAAAU,YAAP,SACET,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBrsB,OAAOssB,EAAMf,EAAmBO,MAAOW,EAAMC,IAIxEL,EAAA/rB,UAAA0sB,UAAA,SAAU5e,GAER,OADA/P,KAAK+P,MAAQA,EACN/P,MAITguB,EAAA/rB,UAAA2sB,iBAAA,SAAiB7e,GAEf,OADA/P,KAAKmuB,aAAepe,EACb/P,MAITguB,EAAA/rB,UAAA+b,SAAA,WACE,OAAIhe,KAAK+P,MAELsd,EAA2BrtB,KAAKstB,UAChC,IACAttB,KAAKiuB,KAAKjQ,SAAS,IACnB,MACAhe,KAAKkuB,QACL,QACAluB,KAAK+P,MAAMX,OAAOF,eAClB,IACAlP,KAAK+P,MAAMqY,KAAKpK,SAAS,IACzB,IACAhe,KAAK+P,MAAMsY,OAAOrK,SAAS,IAI7BqP,EAA2BrtB,KAAKstB,UAChC,IACAttB,KAAKiuB,KAAKjQ,SAAS,IACnB,KACAhe,KAAKkuB,SAGXF,EAnGA,GA4JA,SAAgBa,EAAwB9e,EAAc+e,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIjZ,EAAO9F,EAAMX,OAAOyG,KACpBkZ,EAAMlZ,EAAK/K,OACXkkB,EAAQjf,EAAMif,MACdC,EAAMlf,EAAMkf,IACTD,EAAQ,IAAMnlB,EAAAqlB,YAAYrZ,EAAK3K,WAAW8jB,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQllB,EAAAqlB,YAAYrZ,EAAK3K,WAAW+jB,KAAOA,IAMxD,IALA,IAAIE,EAAe,CACjB,MACAtZ,EAAK8L,UAAUqN,EAAOC,GACtB,OAEKD,EAAQjf,EAAMif,OACnBG,EAAG5Q,KAAK,KACRyQ,IAGF,GADIF,GAAWK,EAAG5Q,KAAK7e,EAAAmuB,WACnB9d,EAAMif,OAASjf,EAAMkf,IACvBE,EAAG5Q,KAAK,UAER,KAAOyQ,IAAUjf,EAAMkf,KAAK,CAC1B,GAAIplB,EAAAqlB,YAAYrZ,EAAK3K,WAAW8jB,IAAS,CACvCG,EAAG5Q,KAAKyQ,GAASjf,EAAMif,MAAQ,EAAI,IAAM,KACzC,MAEFG,EAAG5Q,KAAK,KAIZ,OADIuQ,GAAWK,EAAG5Q,KAAK7e,EAAAquB,aAChBoB,EAAGvW,KAAK,IAzLJlZ,EAAAsuB,oBAsGbtuB,EAAA0vB,wBAAA,SACElB,EACAY,EACAO,QADA,IAAAP,OAAA,QACA,IAAAO,OAAA,GAIA,IAAIF,EAAe,GAUnB,GATIL,GAAWK,EAAG5Q,KAAKmP,EAA0BQ,EAAQZ,WACzD6B,EAAG5Q,KAAK8O,EAA2Ba,EAAQZ,WACvCwB,GAAWK,EAAG5Q,KAAK7e,EAAAquB,aACvBoB,EAAG5Q,KAAK2P,EAAQD,KAAO,IAAO,MAAQ,OACtCkB,EAAG5Q,KAAK2P,EAAQD,KAAKjQ,SAAS,KAC9BmR,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAK2P,EAAQA,SAGZA,EAAQne,MAAO,CAGjB,IAAIA,EAAQme,EAAQne,MAChBsf,IACFF,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKsQ,EAAwB9e,EAAO+e,KAEzCK,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAKxO,EAAMX,OAAOF,gBACrBigB,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAKxO,EAAMqY,KAAKpK,SAAS,KAC5BmR,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAKxO,EAAMsY,OAAOrK,SAAS,KAC9BmR,EAAG5Q,KAAK,KAER,IAAI4P,EAAeD,EAAQC,aACvBA,IACEkB,IACFF,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKsQ,EAAwBV,EAAcW,KAEhDK,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAKxO,EAAMX,OAAOF,gBACrBigB,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAKxO,EAAMqY,KAAKpK,SAAS,KAC5BmR,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAKxO,EAAMsY,OAAOrK,SAAS,KAC9BmR,EAAG5Q,KAAK,MAGZ,OAAO4Q,EAAGvW,KAAK,KAIjBlZ,EAAAmvB,0BAiCA,IAAAlM,EAAA,WAME,SAAAA,EAAsBnV,QAAA,IAAAA,MAAA,MACpBxN,KAAKwN,YAAcA,GAAiD,IAAIvG,MA2F5E,OAvFE0b,EAAA1gB,UAAAqtB,eAAA,SACErB,EACAX,EACAvd,EACAoe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUF,EAAkBrsB,OAAOssB,EAAMX,EAAUc,EAAMC,EAAMC,GAAMK,UAAU5e,GAC/Eoe,IAAcD,EAAQC,aAAeA,GACzCnuB,KAAKwN,YAAY+Q,KAAK2P,GACNhB,EAAmBO,OAQrC9K,EAAA1gB,UAAAstB,KAAA,SACEtB,EACAle,EACAqe,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBK,KAAMxd,EAAO,KAAMqe,EAAMC,EAAMC,IAI9E3L,EAAA1gB,UAAAutB,YAAA,SACEvB,EACAle,EACAoe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBK,KAAMxd,EAAOoe,EAAcC,EAAMC,EAAMC,IAItF3L,EAAA1gB,UAAAwtB,QAAA,SACExB,EACAle,EACAqe,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBM,QAASzd,EAAO,KAAMqe,EAAMC,EAAMC,IAIjF3L,EAAA1gB,UAAAytB,eAAA,SACEzB,EACAle,EACAoe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBM,QAASzd,EAAOoe,EAAcC,EAAMC,EAAMC,IAIzF3L,EAAA1gB,UAAAsT,MAAA,SACE0Y,EACAle,EACAqe,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBO,MAAO1d,EAAO,KAAMqe,EAAMC,EAAMC,IAI/E3L,EAAA1gB,UAAA0tB,aAAA,SACE1B,EACAle,EACAoe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAtuB,KAAKsvB,eAAerB,EAAMf,EAAmBO,MAAO1d,EAAOoe,EAAcC,EAAMC,EAAMC,IAEzF3L,EAlGA,GAAsBjjB,EAAAijB,mbC9PtB,IAAAlZ,EAAAtJ,EAAA,GAOAyvB,EAAAzvB,EAAA,GAYST,EAAAmwB,MAXPD,EAAAC,MAWcnwB,EAAAiZ,MATdiX,EAAAjX,MAGF,IASYpF,EATZ1J,EAAA1J,EAAA,IASA,SAAYoT,GAEVA,IAAA,mBAGAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,0DACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBA1EF,CAAYA,EAAA7T,EAAA6T,WAAA7T,EAAA6T,SAAQ,KA8EpB7T,EAAAowB,oBAAA,SAAoCxc,GAClC,OAAQA,GACN,KAAKC,EAAS6M,QACd,KAAK7M,EAASwc,KACd,KAAKxc,EAASyc,KACd,KAAKzc,EAAS0c,MAAO,OAAO,EAE9B,OAAO,GAITvwB,EAAAwwB,eAAA,SAA+B5c,GAC7B,OAAQA,GACN,KAAKC,EAAS4c,WACd,KAAK5c,EAAS6c,UACd,KAAK7c,EAAS8c,KACd,KAAK9c,EAAS+c,cACd,KAAK/c,EAASgd,cACd,KAAKhd,EAASid,eACd,KAAKjd,EAASkd,MAAO,OAAO,EAE9B,OAAO,GAIT/wB,EAAAgxB,sBAAA,SAAsCpd,GACpC,OAAQA,GACN,KAAKC,EAAS4c,WACd,KAAK5c,EAASid,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAxgB,EAAA,oBAAAA,KA66BA,OAp6BSA,EAAA2gB,eAAP,SACE/vB,EACAmP,GAEA,IAAI6gB,EAAW,IAAIC,EAInB,OAHAD,EAAS7gB,MAAQA,EACjB6gB,EAASxgB,WAAaxP,EACtBgwB,EAAS9b,KAAO,KACT8b,GAGF5gB,EAAAW,qBAAP,SACE/P,EACAmP,GAEA,OAAOC,EAAK2gB,eAAe3gB,EAAKE,2BAA2BtP,EAAMmP,GAAQA,IAGpEC,EAAAU,gBAAP,SACE9P,EACA4oB,EACAsH,EACA/gB,GAEA,IAAImM,EAAO,IAAI6U,EAKf,OAJA7U,EAAKnM,MAAQA,EACbmM,EAAKtb,KAAOA,EACZsb,EAAKsN,cAAgBA,EACrBtN,EAAK4U,WAAaA,EACX5U,GAGFlM,EAAAS,mBAAP,SACEugB,EACAC,EACAC,EACAJ,EACA/gB,GAEA,IAAImM,EAAO,IAAIiV,EAMf,OALAjV,EAAKnM,MAAQA,EACbmM,EAAK8U,WAAaA,EAClB9U,EAAK+U,WAAaA,EAClB/U,EAAKgV,iBAAmBA,EACxBhV,EAAK4U,WAAaA,EACX5U,GAGFlM,EAAAM,kBAAP,SACEP,GAEA,OAAOC,EAAKU,gBACVV,EAAKW,qBAAqB,GAAIZ,GAC9B,MACA,EACAA,IAIGC,EAAAohB,oBAAP,SACExwB,EACA4d,EACA6S,EACAthB,GAEA,IAAIuhB,EAAO,IAAIC,EAKf,OAJAD,EAAKvhB,MAAQA,EACbuhB,EAAK1wB,KAAOA,EACZ0wB,EAAK9S,YAAcA,EACnB8S,EAAKD,YAAcA,EACZC,GAGFthB,EAAAwhB,gBAAP,SACE5wB,EACAsb,EACAuI,EACAnR,EACAvD,GAEA,IAAIuhB,EAAO,IAAIG,EAMf,OALAH,EAAKvhB,MAAQA,EACbuhB,EAAK1wB,KAAOA,EACZ0wB,EAAKpV,KAAOA,EACZoV,EAAK7M,YAAcA,EACnB6M,EAAKI,cAAgBpe,EACdge,GAKFthB,EAAA2hB,gBAAP,SACE/wB,EACAgxB,EACA7hB,GAEA,IAAI8hB,EAAO,IAAIC,EAKf,OAJAD,EAAK9hB,MAAQA,EACb8hB,EAAKjxB,KAAOA,EACZixB,EAAK3R,UAAY0R,EACjBC,EAAKlnB,cAAgBkT,EAAoBjd,GAClCixB,GAGF7hB,EAAA+hB,cAAP,SACElc,EACAvC,EACAvD,GAEA,IAAIiiB,EAAO,IAAIC,EAIf,OAHAD,EAAKjiB,MAAQA,EACbiiB,EAAKE,YAAc5e,EACnB0e,EAAKnc,KAAOA,EACLmc,GAKFhiB,EAAAE,2BAAP,SACEtP,EACAmP,EACAoiB,QAAA,IAAAA,OAAA,GAEA,IAAIC,EAAO,IAAIC,EAKf,OAJAD,EAAKriB,MAAQA,EACbqiB,EAAKvc,KAAOjV,EACZwxB,EAAKE,OAAS1xB,EACdwxB,EAAKD,SAAWA,EACTC,GAGFpiB,EAAAuiB,gCAAP,SACExiB,GAEA,IAAIqiB,EAAO,IAAIC,EAGf,OAFAD,EAAKriB,MAAQA,EACbqiB,EAAKvc,KAAO,GACLuc,GAGFpiB,EAAAwiB,6BAAP,SACEtV,EACAnN,GAEA,IAAIqiB,EAAO,IAAIK,EAGf,OAFAL,EAAKriB,MAAQA,EACbqiB,EAAKM,mBAAqBxV,EACnBkV,GAGFpiB,EAAA2iB,0BAAP,SACEC,EACAC,EACAC,EACA/iB,GAEA,IAAIqiB,EAAO,IAAIW,EAKf,OAJAX,EAAKriB,MAAQA,EACbqiB,EAAKQ,cAAgBA,EACrBR,EAAKS,WAAaA,EAClBT,EAAKU,OAASA,EACPV,GAGFpiB,EAAAgjB,uBAAP,SACEC,EACAC,EACAC,EACApjB,GAEA,IAAIqiB,EAAO,IAAIgB,EAKf,OAJAhB,EAAKriB,MAAQA,EACbqiB,EAAKa,SAAWA,EAChBb,EAAKc,KAAOA,EACZd,EAAKe,MAAQA,EACNf,GAGFpiB,EAAAqjB,qBAAP,SACER,EACAS,EACA1B,EACA7hB,GAEA,IAAIqiB,EAAO,IAAImB,EAKf,OAJAnB,EAAKriB,MAAQA,EACbqiB,EAAKS,WAAaA,EAClBT,EAAK5I,cAAgB8J,EACrBlB,EAAKlS,UAAY0R,EACVQ,GAGFpiB,EAAAwjB,sBAAP,SACEniB,GAEA,IAAI+gB,EAAO,IAAIqB,EAGf,OAFArB,EAAKriB,MAAQsB,EAAYtB,MACzBqiB,EAAK/gB,YAAcA,EACZ+gB,GAGFpiB,EAAA0jB,sBAAP,SACEC,EACA5jB,GAEA,IAAIqiB,EAAO,IAAIwB,EAGf,OAFAxB,EAAKriB,MAAQA,EACbqiB,EAAKuB,YAAcA,EACZvB,GAGFpiB,EAAA6jB,4BAAP,SACE9jB,GAEA,IAAIqiB,EAAO,IAAI0B,EAEf,OADA1B,EAAKriB,MAAQA,EACNqiB,GAGFpiB,EAAA+jB,8BAAP,SACElB,EACAld,EACA5F,GAEA,IAAIqiB,EAAO,IAAI4B,EAIf,OAHA5B,EAAKriB,MAAQA,EACbqiB,EAAKS,WAAaA,EAClBT,EAAK6B,kBAAoBte,EAClByc,GAGFpiB,EAAAkkB,sBAAP,SACEnkB,GAEA,IAAIqiB,EAAO,IAAI+B,EAEf,OADA/B,EAAKriB,MAAQA,EACNqiB,GAGFpiB,EAAAokB,6BAAP,SACE9yB,EACAyO,GAEA,IAAIqiB,EAAO,IAAIiC,EAGf,OAFAjC,EAAKriB,MAAQA,EACbqiB,EAAK9wB,MAAQA,EACN8wB,GAGFpiB,EAAAskB,yBAAP,SACEjjB,GAEA,IAAI+gB,EAAO,IAAImC,EAGf,OAFAnC,EAAKriB,MAAQsB,EAAYtB,MACzBqiB,EAAK/gB,YAAcA,EACZ+gB,GAGFpiB,EAAAwkB,2BAAP,SACE3B,EACA4B,EACA1kB,GAEA,IAAIqiB,EAAO,IAAIsC,EAIf,OAHAtC,EAAKriB,MAAQA,EACbqiB,EAAKS,WAAaA,EAClBT,EAAKqC,OAASA,EACPrC,GAGFpiB,EAAA2kB,+BAAP,SACErzB,EACAyO,GAEA,IAAIqiB,EAAO,IAAIwC,EAGf,OAFAxC,EAAKriB,MAAQA,EACbqiB,EAAK9wB,MAAQA,EACN8wB,GAGFpiB,EAAA6kB,oBAAP,SACEhC,EACAS,EACA1B,EACA7hB,GAEA,IAAIqiB,EAAO,IAAI0C,EAKf,OAJA1C,EAAKriB,MAAQA,EACbqiB,EAAKS,WAAaA,EAClBT,EAAK5I,cAAgB8J,EACrBlB,EAAKlS,UAAY0R,EACVQ,GAGFpiB,EAAA+kB,qBAAP,SACEhlB,GAEA,IAAIqiB,EAAO,IAAI4C,EAEf,OADA5C,EAAKriB,MAAQA,EACNqiB,GAGFpiB,EAAAilB,8BAAP,SACEC,EACA1a,EACAzK,GAEA,IAAIqiB,EAAO,IAAI+C,EAIf,OAHA/C,EAAKriB,MAAQA,EACbqiB,EAAK8C,MAAQA,EACb9C,EAAK5X,OAASA,EACP4X,GAGFpiB,EAAAolB,8BAAP,SACEvC,EACA9iB,GAEA,IAAIqiB,EAAO,IAAIiD,EAGf,OAFAjD,EAAKriB,MAAQA,EACbqiB,EAAKS,WAAaA,EACXT,GAGFpiB,EAAAslB,+BAAP,SACEzC,EACA7wB,EACA+N,GAEA,IAAIqiB,EAAO,IAAImD,EAIf,OAHAnD,EAAKriB,MAAQA,EACbqiB,EAAKS,WAAaA,EAClBT,EAAKpwB,SAAWA,EACTowB,GAGFpiB,EAAAwlB,8BAAP,SACEC,EACA5lB,EACAE,GAEA,IAAIqiB,EAAO,IAAIsD,EAIf,OAHAtD,EAAKriB,MAAQA,EACbqiB,EAAKqD,QAAUA,EACfrD,EAAKuD,aAAe9lB,EACbuiB,GAGFpiB,EAAA4lB,wBAAP,SACEC,EACAC,EACAC,EACAhmB,GAEA,IAAIqiB,EAAO,IAAI4D,EAKf,OAJA5D,EAAKriB,MAAQA,EACbqiB,EAAKyD,UAAYA,EACjBzD,EAAK0D,OAASA,EACd1D,EAAK2D,OAASA,EACP3D,GAGFpiB,EAAAimB,8BAAP,SACE30B,EACAyO,GAEA,IAAIqiB,EAAO,IAAI8D,EAGf,OAFA9D,EAAKriB,MAAQA,EACbqiB,EAAK9wB,MAAQA,EACN8wB,GAGFpiB,EAAAmmB,sBAAP,SACEpmB,GAEA,IAAIqiB,EAAO,IAAIgE,EAEf,OADAhE,EAAKriB,MAAQA,EACNqiB,GAGFpiB,EAAAqmB,qBAAP,SACEtmB,GAEA,IAAIqiB,EAAO,IAAIkE,EAEf,OADAlE,EAAKriB,MAAQA,EACNqiB,GAGFpiB,EAAAumB,qBAAP,SACExmB,GAEA,IAAIqiB,EAAO,IAAIoE,EAEf,OADApE,EAAKriB,MAAQA,EACNqiB,GAGFpiB,EAAAymB,6BAAP,SACExD,EACAyD,EACA3mB,GAEA,IAAIqiB,EAAO,IAAIuE,EAIf,OAHAvE,EAAKriB,MAAQA,EACbqiB,EAAKa,SAAWA,EAChBb,EAAKsE,QAAUA,EACRtE,GAGFpiB,EAAA4mB,4BAAP,SACE3D,EACAyD,EACA3mB,GAEA,IAAIqiB,EAAO,IAAIyE,EAIf,OAHAzE,EAAKriB,MAAQA,EACbqiB,EAAKa,SAAWA,EAChBb,EAAKsE,QAAUA,EACRtE,GAKFpiB,EAAA8mB,qBAAP,SACE3jB,EACApD,GAEA,IAAI8hB,EAAO,IAAIkF,GAGf,OAFAlF,EAAK9hB,MAAQA,EACb8hB,EAAK1e,WAAaA,EACX0e,GAGF7hB,EAAAgnB,qBAAP,SACEC,EACAlnB,GAEA,IAAI8hB,EAAO,IAAIqF,GAGf,OAFArF,EAAK9hB,MAAQA,EACb8hB,EAAKoF,MAAQA,EACNpF,GAGF7hB,EAAAmnB,uBAAP,SACE/mB,EACA+T,EACA3F,EACAJ,EACArC,EACAyB,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAIuF,GASf,OARAvF,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOwP,EACZyhB,EAAK1N,eAAiBA,EACtB0N,EAAKrT,YAAcA,EACnBqT,EAAKzT,gBAAkBA,EACvByT,EAAK9V,QAAUA,EACf8V,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAAqnB,wBAAP,SACEJ,EACAlnB,GAEA,IAAI8hB,EAAO,IAAIyF,GAGf,OAFAzF,EAAK9hB,MAAQA,EACb8hB,EAAKoF,MAAQA,EACNpF,GAGF7hB,EAAAunB,kBAAP,SACElkB,EACAwiB,EACA9lB,GAEA,IAAI8hB,EAAO,IAAI2F,GAIf,OAHA3F,EAAK9hB,MAAQA,EACb8hB,EAAKxe,UAAYA,EACjBwe,EAAKgE,UAAYA,EACVhE,GAGF7hB,EAAAynB,qBAAP,SACE1nB,GAEA,IAAI8hB,EAAO,IAAI6F,GAEf,OADA7F,EAAK9hB,MAAQA,EACN8hB,GAGF7hB,EAAA2nB,sBAAP,SACE/2B,EACAmb,EACAyB,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAI+F,GAMf,OALA/F,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAKrX,OAASuB,EACd8V,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAA6nB,2BAAP,SACEj3B,EACAU,EACAuO,EACAE,GAEA,IAAI8hB,EAAO,IAAIiG,GAKf,OAJAjG,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAKvwB,MAAQA,EACNuwB,GAGF7hB,EAAA+nB,sBAAP,SACEhc,EACA6F,EACAoW,EACAjoB,GAEA,IAAI8hB,EAAO,IAAIoG,GAIf,GAHApG,EAAK9hB,MAAQA,EACb8hB,EAAK9V,QAAUA,EACf8V,EAAKjQ,KAAOA,EACRA,EAAM,CACR,IAAI1S,EAAiBrF,EAAAquB,cAActW,EAAKtgB,OACpCsgB,EAAKtgB,MAAM62B,WAAW,KACxBtG,EAAK3iB,eAAiBrF,EAAAuuB,YACpBlpB,EACAa,EAAMX,OAAOF,iBAGVA,EAAeipB,WAAW1uB,EAAA3G,kBAC7BoM,EAAiBzF,EAAA3G,eAAiBoM,GAEpC2iB,EAAK3iB,eAAiBA,GAExB2iB,EAAKrQ,aAAe6W,GAAmBxG,EAAK3iB,qBAE5C2iB,EAAK3iB,eAAiB,KACtB2iB,EAAKrQ,aAAe,KAGtB,OADAqQ,EAAKmG,UAAYA,EACVnG,GAGF7hB,EAAAsoB,6BAAP,SACEjnB,EACAtB,GAEA,IAAI8hB,EAAO,IAAI0G,GAGf,OAFA1G,EAAKxgB,YAAcA,EACnBwgB,EAAK9hB,MAAQA,EACN8hB,GAGF7hB,EAAAwoB,4BAAP,SACE53B,EACA63B,EACA1oB,GAEA,IAAI8hB,EAAO,IAAI6G,GAIf,OAHA7G,EAAK9hB,MAAQA,EACb8hB,EAAKjxB,KAAOA,EACZixB,EAAK4G,aAAeA,EACb5G,GAGF7hB,EAAA2oB,mBAAP,SACE/3B,EACA63B,EACA1oB,GAEA,IAAIuhB,EAAO,IAAIsH,GAKf,OAJAtH,EAAKvhB,MAAQA,EACbuhB,EAAKvb,UAAYnV,EACZ63B,IAAcA,EAAe73B,GAClC0wB,EAAKzP,aAAe4W,EACbnH,GAGFthB,EAAA6oB,0BAAP,SACEhG,GAEA,IAAIhB,EAAO,IAAIiH,GAGf,OAFAjH,EAAK9hB,MAAQ8iB,EAAW9iB,MACxB8hB,EAAKgB,WAAaA,EACXhB,GAGF7hB,EAAA+oB,kBAAP,SACElD,EACAmD,EACAC,EACAlpB,GAEA,IAAI8hB,EAAO,IAAIqH,GAKf,OAJArH,EAAK9hB,MAAQA,EACb8hB,EAAKgE,UAAYA,EACjBhE,EAAKmH,OAASA,EACdnH,EAAKoH,QAAUA,EACRpH,GAGF7hB,EAAAmpB,sBAAP,SACEC,EACAxX,EACA7R,GAEA,IAAI8hB,EAAO,IAAIwH,GACfxH,EAAK9hB,MAAQA,EACb8hB,EAAK9P,aAAeqX,EACpBvH,EAAK5P,cAAgB,KACrB4P,EAAKjQ,KAAOA,EACZ,IAAI1S,EAAiBrF,EAAAquB,cAActW,EAAKtgB,OAaxC,OAZIsgB,EAAKtgB,MAAM62B,WAAW,KACxBtG,EAAK3iB,eAAiBrF,EAAAuuB,YACpBlpB,EACAa,EAAMX,OAAOF,iBAGVA,EAAeipB,WAAW1uB,EAAA3G,kBAC7BoM,EAAiBzF,EAAA3G,eAAiBoM,GAEpC2iB,EAAK3iB,eAAiBA,GAExB2iB,EAAKrQ,aAAe6W,GAAmBxG,EAAK3iB,gBACrC2iB,GAGF7hB,EAAAspB,kCAAP,SACElpB,EACAwR,EACA7R,GAEA,IAAI8hB,EAAO,IAAIwH,GACfxH,EAAK9hB,MAAQA,EACb8hB,EAAK9P,aAAe,KACpB8P,EAAK5P,cAAgB7R,EACrByhB,EAAKjQ,KAAOA,EACZ,IAAI1S,EAAiBrF,EAAAquB,cAActW,EAAKtgB,OAaxC,OAZIsgB,EAAKtgB,MAAM62B,WAAW,KACxBtG,EAAK3iB,eAAiBrF,EAAAuuB,YACpBlpB,EACAa,EAAMX,OAAOF,iBAGVA,EAAeipB,WAAW1uB,EAAA3G,kBAC7BoM,EAAiBzF,EAAA3G,eAAiBoM,GAEpC2iB,EAAK3iB,eAAiBA,GAExB2iB,EAAKrQ,aAAe6W,GAAmBxG,EAAK3iB,gBACrC2iB,GAGF7hB,EAAAupB,wBAAP,SACEnc,EACAxc,EACAmP,GAEA,IAAIuhB,EAAO,IAAIkI,GAKf,OAJAlI,EAAKvhB,MAAQA,EACbuhB,EAAKlU,YAAcA,EACdxc,IAAMA,EAAOwc,GAClBkU,EAAK1wB,KAAOA,EACL0wB,GAGFthB,EAAAypB,2BAAP,SACE74B,EACAujB,EACA3F,EACAzC,EACAyB,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAI6H,GAQf,OAPA7H,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAK1N,eAAiBA,EACtB0N,EAAKrT,YAAcA,EACnBqT,EAAK9V,QAAUA,EACf8V,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAA2pB,uBAAP,SACE/4B,EACAsb,EACAuI,EACAjH,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAI+H,GAOf,OANA/H,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAK3V,KAAOA,EACZ2V,EAAKpN,YAAcA,EACnBoN,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAA6pB,mBAAP,SACEpV,EACAoR,EACAiE,EACAzmB,EACAtD,GAEA,IAAI8hB,EAAO,IAAIkI,GAMf,OALAlI,EAAK9hB,MAAQA,EACb8hB,EAAKpN,YAAcA,EACnBoN,EAAKgE,UAAYA,EACjBhE,EAAKiI,YAAcA,EACnBjI,EAAKxe,UAAYA,EACVwe,GAGF7hB,EAAAQ,0BAAP,SACE5P,EACAujB,EACApT,EACAsU,EACA7H,EACA3N,EACAyV,EACAvV,GAEA,IAAI8hB,EAAO,IAAImI,GASf,OARAnI,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAK1N,eAAiBA,EACtB0N,EAAK9gB,UAAYA,EACjB8gB,EAAKxM,KAAOA,EACZwM,EAAKrU,WAAaA,EAClBqU,EAAKvM,UAAYA,EACVuM,GAGF7hB,EAAAiqB,gCAAP,SACEC,EACAC,EACApqB,GAEA,IAAIuhB,EAAO,IAAI8I,GAIf,OAHA9I,EAAKvhB,MAAQA,EACbuhB,EAAK4I,QAAUA,EACf5I,EAAK6I,UAAYA,EACV7I,GAGFthB,EAAAqqB,wBAAP,SACEz5B,EACAujB,EACApT,EACAsU,EACA7H,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAIyI,GAQf,OAPAzI,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAK1N,eAAiBA,EACtB0N,EAAK9gB,UAAYA,EACjB8gB,EAAKxM,KAAOA,EACZwM,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAAa,2BAAP,SACEjQ,EACAmb,EACAyB,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAI0I,GAMf,OALA1I,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAK9V,QAAUA,EACf8V,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAAwqB,sBAAP,SACEl5B,EACAyO,GAEA,IAAI8hB,EAAO,IAAI4I,GAGf,OAFA5I,EAAK9hB,MAAQA,EACb8hB,EAAKvwB,MAAQA,EACNuwB,GAGF7hB,EAAA0qB,sBAAP,SACE7E,EACA8E,EACA5qB,GAEA,IAAI8hB,EAAO,IAAI+I,GAIf,OAHA/I,EAAK9hB,MAAQA,EACb8hB,EAAKgE,UAAYA,EACjBhE,EAAK8I,MAAQA,EACN9I,GAGF7hB,EAAA6qB,iBAAP,SACE5D,EACA9jB,EACApD,GAEA,IAAIuhB,EAAO,IAAIwJ,GAIf,OAHAxJ,EAAKvhB,MAAQA,EACbuhB,EAAK2F,MAAQA,EACb3F,EAAKne,WAAaA,EACXme,GAGFthB,EAAA+qB,qBAAP,SACEz5B,EACAyO,GAEA,IAAI8hB,EAAO,IAAImJ,GAGf,OAFAnJ,EAAK9hB,MAAQA,EACb8hB,EAAKvwB,MAAQA,EACNuwB,GAGF7hB,EAAAirB,mBAAP,SACE9nB,EACA+nB,EACAC,EACAC,EACArrB,GAEA,IAAI8hB,EAAO,IAAIwJ,GAMf,OALAxJ,EAAK9hB,MAAQA,EACb8hB,EAAK1e,WAAaA,EAClB0e,EAAKqJ,cAAgBA,EACrBrJ,EAAKsJ,gBAAkBA,EACvBtJ,EAAKuJ,kBAAoBA,EAClBvJ,GAGF7hB,EAAAK,sBAAP,SACEzP,EACAujB,EACAjL,EACAsE,EACA3N,EACAE,GAEA,IAAI8hB,EAAO,IAAIyJ,GAOf,OANAzJ,EAAK9hB,MAAQA,EACb8hB,EAAKhiB,MAAQA,EACbgiB,EAAKjxB,KAAOA,EACZixB,EAAK1N,eAAiBA,EACtB0N,EAAK3V,KAAOhD,EACZ2Y,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAAurB,wBAAP,SACExZ,EACAvE,EACAzN,GAEA,IAAI8hB,EAAO,IAAI2J,GAIf,OAHA3J,EAAK9hB,MAAQA,EACb8hB,EAAK9P,aAAeA,EACpB8P,EAAKrU,WAAaA,EACXqU,GAGF7hB,EAAAC,0BAAP,SACErP,EACAsb,EACAuI,EACAjH,EACA3N,EACAE,GAEA,IAAIuhB,EAAO,IAAImK,GAOf,OANAnK,EAAKvhB,MAAQA,EACbuhB,EAAKzhB,MAAQA,EACbyhB,EAAK1wB,KAAOA,EACZ0wB,EAAKpV,KAAOA,EACZoV,EAAK7M,YAAcA,EACnB6M,EAAK9T,WAAaA,EACX8T,GAGFthB,EAAA0rB,oBAAP,SACE7I,EACA9iB,GAEA,IAAI8hB,EAAO,IAAI8J,GAGf,OAFA9J,EAAK9hB,MAAQA,EACb8hB,EAAKgB,WAAaA,EACXhB,GAGF7hB,EAAA4rB,qBAAP,SACE/F,EACAxiB,EACAtD,GAEA,IAAI8hB,EAAO,IAAIgK,GAIf,OAHAhK,EAAK9hB,MAAQA,EACb8hB,EAAKgE,UAAYA,EACjBhE,EAAKxe,UAAYA,EACVwe,GAEX7hB,EA76BA,GAAsBtQ,EAAAsQ,OAi7BtB,IAAA8rB,EAAA,SAAAvuB,GAAA,SAAAuuB,mDAKA,OALuChtB,EAAAgtB,EAAAvuB,GAKvCuuB,EALA,CAAuC9rB,GAAjBtQ,EAAAo8B,WAQtB,IAAAjL,EAAA,SAAAtjB,GAAA,SAAAsjB,IAAA,IAAApjB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASwoB,WAMlB,OAP8BjtB,EAAA+hB,EAAAtjB,GAO9BsjB,EAPA,CAA8B7gB,GAAjBtQ,EAAAmxB,WAUb,IAAAE,EAAA,SAAAxjB,GAAA,SAAAwjB,IAAA,IAAAtjB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASyoB,YAMlB,OAPmCltB,EAAAiiB,EAAAxjB,GAOnCwjB,EAPA,CAAmC+K,GAAtBp8B,EAAAqxB,gBAUb,IAAAI,EAAA,SAAA5jB,GAAA,SAAA4jB,IAAA,IAAA1jB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS0oB,eAQlB,OATsCntB,EAAAqiB,EAAA5jB,GAStC4jB,EATA,CAAsC2K,GAAzBp8B,EAAAyxB,mBAYb,IAAAI,EAAA,SAAAhkB,GAAA,SAAAgkB,IAAA,IAAA9jB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS2oB,gBAQlB,OATuCptB,EAAAyiB,EAAAhkB,GASvCgkB,EATA,CAAuCvhB,GAA1BtQ,EAAA6xB,oBAYb,SAAY4K,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYz8B,EAAAy8B,gBAAAz8B,EAAAy8B,cAAa,KAUzB,IA2BYpxB,EA3BZ0mB,EAAA,SAAAlkB,GAAA,SAAAkkB,IAAA,IAAAhkB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS6oB,UAWhB3uB,EAAA4uB,yBAAoD,KAEpD5uB,EAAAoC,MAAqBpG,EAAApH,YAAYyN,OAQnC,OAtBmChB,EAAA2iB,EAAAlkB,GAiBjCkkB,EAAAxvB,UAAAsa,GAAA,SAAGoB,GAA2B,OAAQ3d,KAAK6P,MAAQ8N,IAASA,GAE5D8T,EAAAxvB,UAAA6c,MAAA,SAAMnB,GAA2B,OAA8B,IAAtB3d,KAAK6P,MAAQ8N,IAEtD8T,EAAAxvB,UAAAyM,IAAA,SAAIiP,GAA2B3d,KAAK6P,OAAS8N,GAC/C8T,EAtBA,CAAmCzhB,GAgDnC,SAAgB6N,EAAoBjd,GAElC,GAAIA,EAAK0S,MAAQC,EAAS4c,WAAY,CACpC,IAAImM,EAAiC17B,EAAMiV,KAE3C,OADAhL,OAAOyxB,EAAQxxB,QACPwxB,EAAQpxB,WAAW,IACzB,QACE,GAAe,UAAXoxB,EAAqB,OAAOvxB,EAAcwxB,OAC9C,MAEF,QACE,GAAe,WAAXD,EAAsB,OAAOvxB,EAAcmH,QAC/C,MAEF,SACE,GAAe,YAAXoqB,EAAuB,OAAOvxB,EAAcyxB,SAElD,SACE,GAAe,YAAXF,EAAuB,OAAOvxB,EAAcqX,SAChD,MAEF,SACE,GAAe,UAAXka,EAAqB,OAAOvxB,EAAcoT,OAC9C,MAEF,SACE,GAAe,UAAXme,EAAqB,OAAOvxB,EAAcwU,OAC9C,GAAe,UAAX+c,EAAqB,OAAOvxB,EAAc0xB,OAC9C,MAEF,SACE,GAAe,QAAXH,EAAmB,OAAOvxB,EAAcyU,KAC5C,MAEF,SACE,GAAe,YAAX8c,EAAuB,OAAOvxB,EAAcC,SAChD,MAEF,SACE,GAAe,aAAXsxB,EAAwB,OAAOvxB,EAAc2xB,UACjD,MAEF,SACE,GAAe,UAAXJ,EAAqB,OAAOvxB,EAAcuN,OAC9C,MAEF,SACE,GAAe,aAAXgkB,EAAwB,OAAOvxB,EAAc0N,UACjD,GAAe,UAAX6jB,EAAqB,OAAOvxB,EAAc0U,aAI7C,GACL7e,EAAK0S,MAAQC,EAASid,gBACK5vB,EAAMiyB,WAAWvf,MAAQC,EAAS4c,WAC7D,CACImM,EAA4D17B,EAAMiyB,WAAYhd,KAClFhL,OAAOyxB,EAAQxxB,QACf,IAAI6xB,EAAqC/7B,EAAMoB,SAAS6T,KAGxD,GAFAhL,OAAO8xB,EAAQ7xB,QAEA,YAAXwxB,EACF,OAAQK,EAAQzxB,WAAW,IACzB,QACE,GAAe,UAAXyxB,EAAqB,OAAO5xB,EAAcE,gBAC9C,MAEF,SACE,OAAQ0xB,GACN,IAAK,SAAU,OAAO5xB,EAAc0B,gBACpC,IAAK,UAAW,OAAO1B,EAAciC,mBAO/C,OAAOjC,EAAc6xB,OA7HVl9B,EAAA+xB,gBA2Bb,SAAY1mB,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,oBAjBF,CAAYA,EAAArL,EAAAqL,gBAAArL,EAAAqL,cAAa,KAqBzBrL,EAAAme,sBAiFA,IAAAiU,EAAA,SAAAvkB,GAAA,SAAAukB,IAAA,IAAArkB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASspB,YAQlB,OATmC/tB,EAAAgjB,EAAAvkB,GASnCukB,EATA,CAAmC9hB,GAAtBtQ,EAAAoyB,gBAYb,SAAYgL,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYp9B,EAAAo9B,cAAAp9B,EAAAo9B,YAAW,KAUvB,IAAA7K,EAAA,SAAA1kB,GAAA,SAAA0kB,IAAA,IAAAxkB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASwpB,UAMlB,OAPiCjuB,EAAAmjB,EAAA1kB,GAOjC0kB,EAPA,CAAiCjiB,GAApBtQ,EAAAuyB,cAYb,IAAA+K,EAAA,SAAAzvB,GAAA,SAAAyvB,mDAAgD,OAAPluB,EAAAkuB,EAAAzvB,GAAOyvB,EAAhD,CAAyChtB,GAAnBtQ,EAAAs9B,aAGtB,IAYY1c,EAZZ+R,EAAA,SAAA9kB,GAAA,SAAA8kB,IAAA,IAAA5kB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS4c,aAQlB,OAT0CrhB,EAAAujB,EAAA9kB,GAS1C8kB,EATA,CAA0C2K,GAA7Bt9B,EAAA2yB,uBAYb,SAAY/R,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA5gB,EAAA4gB,cAAA5gB,EAAA4gB,YAAW,KAUvB,IAAA2c,EAAA,SAAA1vB,GAAA,SAAA0vB,IAAA,IAAAxvB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS6M,UAIlB,OALgDtR,EAAAmuB,EAAA1vB,GAKhD0vB,EALA,CAAgDD,GAA1Bt9B,EAAAu9B,oBAQtB,IAAAxK,EAAA,SAAAllB,GAAA,SAAAklB,IAAA,IAAAhlB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAY4c,QAI5B,OAL4CpuB,EAAA2jB,EAAAllB,GAK5CklB,EALA,CAA4CwK,GAA/Bv9B,EAAA+yB,yBAQb,SAAY0K,GACVA,IAAA,mBACAA,IAAA,WACAA,IAAA,qBAHF,CAAYz9B,EAAAy9B,gBAAAz9B,EAAAy9B,cAAa,KAOzB,IAAApK,EAAA,SAAAxlB,GAAA,SAAAwlB,IAAA,IAAAtlB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS6c,YAQlB,OATyCthB,EAAAikB,EAAAxlB,GASzCwlB,EATA,CAAyCiK,GAA5Bt9B,EAAAqzB,sBAYb,IAAAK,EAAA,SAAA7lB,GAAA,SAAA6lB,IAAA,IAAA3lB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS6pB,SAQlB,OATsCtuB,EAAAskB,EAAA7lB,GAStC6lB,EATA,CAAsC4J,GAAzBt9B,EAAA0zB,mBAYb,IAAAG,EAAA,SAAAhmB,GAAA,SAAAgmB,IAAA,IAAA9lB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS8c,OA4BlB,OA7BoCvhB,EAAAykB,EAAAhmB,GAWlCxM,OAAAC,eAAIuyB,EAAAtxB,UAAA,qBAAkB,KAAtB,WACE,IACIsoB,EADAf,EAAgBxpB,KAAKwpB,cAEzB,OAAIA,IAAkBe,EAAmBf,EAAc1e,QAC9C8kB,EAAAjX,MAAMC,KAAK4Q,EAAc,GAAGzZ,MAAOyZ,EAAce,EAAmB,GAAGxa,OAEzE/P,KAAK6yB,WAAW9iB,uCAIzBhP,OAAAC,eAAIuyB,EAAAtxB,UAAA,iBAAc,KAAlB,WACE,IAAI2vB,EAAO5xB,KAAKkgB,UACZmd,EAAezL,EAAK9mB,OACxB,OAAIuyB,EACKzN,EAAAjX,MAAMC,KAAKgZ,EAAK,GAAG7hB,MAAO6hB,EAAKyL,EAAe,GAAGttB,OAEnD/P,KAAK6yB,WAAW9iB,uCAE3BwjB,EA7BA,CAAoCyJ,GAAvBt9B,EAAA6zB,iBAgCb,IAAAE,EAAA,SAAAlmB,GAAA,SAAAkmB,IAAA,IAAAhmB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASuI,QAIlB,OALqChN,EAAA2kB,EAAAlmB,GAKrCkmB,EALA,CAAqCuJ,GAAxBt9B,EAAA+zB,kBAQb,IAAAG,EAAA,SAAArmB,GAAA,SAAAqmB,IAAA,IAAAnmB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS+pB,QAIlB,OALqCxuB,EAAA8kB,EAAArmB,GAKrCqmB,EALA,CAAqCoJ,GAAxBt9B,EAAAk0B,kBAQb,IAAAE,EAAA,SAAAvmB,GAAA,SAAAumB,IAAA,IAAArmB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASuM,YAChBrS,EAAAoI,KAAO,cACPpI,EAAA6kB,OAAS7oB,EAAAzG,cAAcsC,cACzB,OAJ2CwJ,EAAAglB,EAAAvmB,GAI3CumB,EAJA,CAA2CzB,GAA9B3yB,EAAAo0B,wBAOb,IAAAE,EAAA,SAAAzmB,GAAA,SAAAymB,IAAA,IAAAvmB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS+c,gBAMlB,OAP6CxhB,EAAAklB,EAAAzmB,GAO7CymB,EAPA,CAA6CgJ,GAAhCt9B,EAAAs0B,0BAUb,IAAAK,EAAA,SAAA9mB,GAAA,SAAA8mB,IAAA,IAAA5mB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYid,QAI5B,OAL4CzuB,EAAAulB,EAAA9mB,GAK5C8mB,EALA,CAA4C4I,GAA/Bv9B,EAAA20B,yBAQb,IAAAE,EAAA,SAAAhnB,GAAA,SAAAgnB,IAAA,IAAA9mB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASqI,WAIlB,OALwC9M,EAAAylB,EAAAhnB,GAKxCgnB,EALA,CAAwCyI,GAA3Bt9B,EAAA60B,qBAQb,IAAAG,EAAA,SAAAnnB,GAAA,SAAAmnB,IAAA,IAAAjnB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASiqB,aAMlB,OAP0C1uB,EAAA4lB,EAAAnnB,GAO1CmnB,EAPA,CAA0CsI,GAA7Bt9B,EAAAg1B,uBAUb,IAAAE,EAAA,SAAArnB,GAAA,SAAAqnB,IAAA,IAAAnnB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYmd,UAI5B,OAL8C3uB,EAAA8lB,EAAArnB,GAK9CqnB,EALA,CAA8CqI,GAAjCv9B,EAAAk1B,2BAQb,IAAAE,EAAA,SAAAvnB,GAAA,SAAAunB,IAAA,IAAArnB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASmqB,MAClB,OAFmC5uB,EAAAgmB,EAAAvnB,GAEnCunB,EAFA,CAAmCvB,GAAtB7zB,EAAAo1B,gBAKb,IAAAE,EAAA,SAAAznB,GAAA,SAAAynB,IAAA,IAAAvnB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASwc,KAChBtiB,EAAAoI,KAAO,OACPpI,EAAA6kB,OAAS7oB,EAAAzG,cAAciC,QACzB,OAJoC6J,EAAAkmB,EAAAznB,GAIpCynB,EAJA,CAAoC3C,GAAvB3yB,EAAAs1B,iBAOb,IAAAG,EAAA,SAAA5nB,GAAA,SAAA4nB,IAAA,IAAA1nB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYqd,SAM5B,OAP6C7uB,EAAAqmB,EAAA5nB,GAO7C4nB,EAPA,CAA6C8H,GAAhCv9B,EAAAy1B,0BAUb,IAAAE,EAAA,SAAA9nB,GAAA,SAAA8nB,IAAA,IAAA5nB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASgd,gBAIlB,OAL6CzhB,EAAAumB,EAAA9nB,GAK7C8nB,EALA,CAA6C2H,GAAhCt9B,EAAA21B,0BAQb,IAAAE,EAAA,SAAAhoB,GAAA,SAAAgoB,IAAA,IAAA9nB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASid,iBAMlB,OAP8C1hB,EAAAymB,EAAAhoB,GAO9CgoB,EAPA,CAA8CyH,GAAjCt9B,EAAA61B,2BAUb,IAAAG,EAAA,SAAAnoB,GAAA,SAAAmoB,IAAA,IAAAjoB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYsd,SAM5B,OAP6C9uB,EAAA4mB,EAAAnoB,GAO7CmoB,EAPA,CAA6CuH,GAAhCv9B,EAAAg2B,0BAUb,IAAAM,EAAA,SAAAzoB,GAAA,SAAAyoB,IAAA,IAAAvoB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASsqB,UAQlB,OATuC/uB,EAAAknB,EAAAzoB,GASvCyoB,EATA,CAAuCgH,GAA1Bt9B,EAAAs2B,oBAYb,IAAAE,EAAA,SAAA3oB,GAAA,SAAA2oB,IAAA,IAAAzoB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA4S,YAAcC,EAAYC,SAI5B,OAL6CzR,EAAAonB,EAAA3oB,GAK7C2oB,EALA,CAA6C+G,GAAhCv9B,EAAAw2B,0BAQb,IAAAE,EAAA,SAAA7oB,GAAA,SAAA6oB,IAAA,IAAA3oB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASkd,MAChBhjB,EAAAoI,KAAO,QACPpI,EAAA6kB,OAAS7oB,EAAAzG,cAAcqC,SACzB,OAJqCyJ,EAAAsnB,EAAA7oB,GAIrC6oB,EAJA,CAAqC/D,GAAxB3yB,EAAA02B,kBAOb,IAAAE,EAAA,SAAA/oB,GAAA,SAAA+oB,IAAA,IAAA7oB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASuqB,KAChBrwB,EAAAoI,KAAO,OACPpI,EAAA6kB,OAAS7oB,EAAAzG,cAAcoC,QACzB,OAJoC0J,EAAAwnB,EAAA/oB,GAIpC+oB,EAJA,CAAoCjE,GAAvB3yB,EAAA42B,iBAOb,IAAAE,EAAA,SAAAjpB,GAAA,SAAAipB,IAAA,IAAA/oB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASyc,KAChBviB,EAAAoI,KAAO,OACPpI,EAAA6kB,OAAS7oB,EAAAzG,cAAckC,QACzB,OAJoC4J,EAAA0nB,EAAAjpB,GAIpCipB,EAJA,CAAoCnE,GAAvB3yB,EAAA82B,iBAOb,IAAArC,EAAA,SAAA5mB,GAAA,SAAA4mB,IAAA,IAAA1mB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS0c,MAChBxiB,EAAAoI,KAAO,QACPpI,EAAA6kB,OAAS7oB,EAAAzG,cAAcmC,SACzB,OAJqC2J,EAAAqlB,EAAA5mB,GAIrC4mB,EAJA,CAAqC9B,GAAxB3yB,EAAAy0B,kBAOb,IAAA4J,EAAA,SAAAxwB,GAAA,SAAAwwB,mDAMA,OAN8CjvB,EAAAivB,EAAAxwB,GAM9CwwB,EANA,CAA8Cf,GAAxBt9B,EAAAq+B,kBAStB,IAAApH,EAAA,SAAAppB,GAAA,SAAAopB,IAAA,IAAAlpB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASyqB,eAClB,OAF4ClvB,EAAA6nB,EAAAppB,GAE5CopB,EAFA,CAA4CoH,GAA/Br+B,EAAAi3B,yBAKb,IAAAE,EAAA,SAAAtpB,GAAA,SAAAspB,IAAA,IAAAppB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS0qB,cAClB,OAF2CnvB,EAAA+nB,EAAAtpB,GAE3CspB,EAFA,CAA2CkH,GAA9Br+B,EAAAm3B,wBAOb,IAGYvoB,EAHZ4vB,EAAA,SAAA3wB,GAAA,SAAA2wB,mDAA+C,OAAPpvB,EAAAovB,EAAA3wB,GAAO2wB,EAA/C,CAAwCluB,GAAlBtQ,EAAAw+B,YAGtB,SAAY5vB,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAA5O,EAAA4O,aAAA5O,EAAA4O,WAAU,KAUtB,IAAAD,EAAA,SAAAd,GAwBE,SAAAc,EAAYa,EAAwB2G,EAAcvC,GAAlD,IAAA7F,EACEF,EAAA/M,KAAAR,OAAOA,KAxBTyN,EAAA6F,KAAOC,EAAS4qB,OAChB1wB,EAAAuD,OAAS,KAeTvD,EAAA2wB,UAA8B,KAE9B3wB,EAAA0a,gBAAuB,EAEvB1a,EAAA4wB,YAAkC,KAKhC5wB,EAAK6wB,WAAahrB,EAClB7F,EAAKyB,eAAiBA,EACtB,IAAIsS,EAAe6W,GAAmB5qB,EAAKyB,gBAC3CzB,EAAK+T,aAAeA,EACpB,IAAI+c,EAAM/c,EAAagd,YAAY/0B,EAAAnH,uBACnCmL,EAAKgxB,WAAaF,GAAO,EAAI/c,EAAaG,UAAU4c,EAAM,GAAK/c,EAC/D/T,EAAK0F,WAAa,IAAIlM,MACtBwG,EAAKsC,MAAQ,IAAI6f,EAAAjX,MAAMlL,EAAM,EAAGoI,EAAK/K,QACrC2C,EAAKoI,KAAOA,IAOhB,OAzC4B/G,EAAAT,EAAAd,GAsC1BxM,OAAAC,eAAIqN,EAAApM,UAAA,UAAO,KAAX,WAAsB,OAAOjC,KAAKs+B,YAAchwB,EAAWowB,uCAE3D39B,OAAAC,eAAIqN,EAAApM,UAAA,YAAS,KAAb,WAAwB,OAAOjC,KAAKs+B,YAAchwB,EAAWC,yCAC/DF,EAzCA,CAA4B2B,GAAftQ,EAAA2O,SA4Cb,IAAAswB,GAAA,SAAApxB,GAAA,SAAAoxB,IAAA,IAAAlxB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YAIEyN,EAAA+P,WAAqC,KAErC/P,EAAAoC,MAAqBpG,EAAApH,YAAYyN,OAQnC,OAdmDhB,EAAA6vB,EAAApxB,GASjDoxB,EAAA18B,UAAAsa,GAAA,SAAGoB,GAA2B,OAAQ3d,KAAK6P,MAAQ8N,IAASA,GAE5DghB,EAAA18B,UAAA6c,MAAA,SAAMnB,GAA2B,OAA8B,IAAtB3d,KAAK6P,MAAQ8N,IAEtDghB,EAAA18B,UAAAyM,IAAA,SAAIiP,GAA2B3d,KAAK6P,OAAS8N,GAC/CghB,EAdA,CAAmDT,GAA7Bx+B,EAAAi/B,wBAiBtB,IAAAvE,GAAA,SAAA7sB,GAAA,SAAA6sB,IAAA,IAAA3sB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS4L,4BAMlB,OAP+CrQ,EAAAsrB,EAAA7sB,GAO/C6sB,EAPA,CAA+CuE,IAAlCj/B,EAAA06B,6BAUb,IAAAwE,GAAA,SAAArxB,GAAA,SAAAqxB,mDAMA,OAN+D9vB,EAAA8vB,EAAArxB,GAM/DqxB,EANA,CAA+DD,IAAzCj/B,EAAAk/B,oCAStB,IAAA7H,GAAA,SAAAxpB,GAAA,SAAAwpB,IAAA,IAAAtpB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASsrB,QAIlB,OALoC/vB,EAAAioB,EAAAxpB,GAKpCwpB,EALA,CAAoCmH,GAAvBx+B,EAAAq3B,kBAQb,IAAAG,GAAA,SAAA3pB,GAAA,SAAA2pB,IAAA,IAAAzpB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASurB,QAIlB,OALoChwB,EAAAooB,EAAA3pB,GAKpC2pB,EALA,CAAoCgH,GAAvBx+B,EAAAw3B,kBAQb,IAAAE,GAAA,SAAA7pB,GAAA,SAAA6pB,IAAA,IAAA3pB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASQ,mBAelB,OAhBsCjF,EAAAsoB,EAAA7pB,GAYpCxM,OAAAC,eAAIo2B,EAAAn1B,UAAA,YAAS,KAAb,WACE,IAAIkiB,EAAiBnkB,KAAKmkB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAerZ,OAAS,mCAE7DssB,EAhBA,CAAsCuH,IAAzBj/B,EAAA03B,oBAmBb,IAAAE,GAAA,SAAA/pB,GAAA,SAAA+pB,IAAA,IAAA7pB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASwrB,WAIlB,OALuCjwB,EAAAwoB,EAAA/pB,GAKvC+pB,EALA,CAAuC4G,GAA1Bx+B,EAAA43B,qBAQb,IAAAE,GAAA,SAAAjqB,GAAA,SAAAiqB,IAAA,IAAA/pB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASyrB,KAMlB,OAPiClwB,EAAA0oB,EAAAjqB,GAOjCiqB,EAPA,CAAiC0G,GAApBx+B,EAAA83B,eAUb,IAAAE,GAAA,SAAAnqB,GAAA,SAAAmqB,IAAA,IAAAjqB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAStQ,QAClB,OAFoC6L,EAAA4oB,EAAAnqB,GAEpCmqB,EAFA,CAAoCwG,GAAvBx+B,EAAAg4B,kBAKb,IAAAE,GAAA,SAAArqB,GAAA,SAAAqqB,IAAA,IAAAnqB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASU,kBAIlB,OALqCnF,EAAA8oB,EAAArqB,GAKrCqqB,EALA,CAAqC+G,IAAxBj/B,EAAAk4B,mBAQb,IAAAE,GAAA,SAAAvqB,GAAA,SAAAuqB,IAAA,IAAArqB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS0rB,uBAKlB,OAN0CnwB,EAAAgpB,EAAAvqB,GAM1CuqB,EANA,CAA0C8G,IAA7Bl/B,EAAAo4B,wBASb,IAAAY,GAAA,SAAAnrB,GAAA,SAAAmrB,IAAA,IAAAjrB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS2rB,eAMlB,OAP2CpwB,EAAA4pB,EAAAnrB,GAO3CmrB,EAPA,CAA2C1oB,GAA9BtQ,EAAAg5B,yBAUb,IAAAE,GAAA,SAAArrB,GAAA,SAAAqrB,IAAA,IAAAnrB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS4rB,eAMlB,OAPkCrwB,EAAA8pB,EAAArrB,GAOlCqrB,EAPA,CAAkC5oB,GAArBtQ,EAAAk5B,gBAUb,IAAAX,GAAA,SAAA1qB,GAAA,SAAA0qB,IAAA,IAAAxqB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASvB,SAYlB,OAbqClD,EAAAmpB,EAAA1qB,GAarC0qB,EAbA,CAAqCiG,GAAxBx+B,EAAAu4B,mBAgBb,IAAAM,GAAA,SAAAhrB,GAAA,SAAAgrB,IAAA,IAAA9qB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASE,gBAIlB,OAL4C3E,EAAAypB,EAAAhrB,GAK5CgrB,EALA,CAA4C2F,GAA/Bx+B,EAAA64B,0BAQb,IAAAO,GAAA,SAAAvrB,GAAA,SAAAurB,IAAA,IAAArrB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS6rB,aAIlB,OALyCtwB,EAAAgqB,EAAAvrB,GAKzCurB,EALA,CAAyCoF,GAA5Bx+B,EAAAo5B,uBAQb,IAAAc,GAAA,SAAArsB,GAAA,SAAAqsB,IAAA,IAAAnsB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASoL,iBAGhBlR,EAAAkb,gBAAuB,IACzB,OALsC7Z,EAAA8qB,EAAArsB,GAKtCqsB,EALA,CAAsCgF,IAAzBl/B,EAAAk6B,oBAQb,IAAAG,GAAA,SAAAxsB,GAAA,SAAAwsB,IAAA,IAAAtsB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS8rB,MAalB,OAdkCvwB,EAAAirB,EAAAxsB,GAclCwsB,EAdA,CAAkCmE,GAArBx+B,EAAAq6B,gBAiBb,SAAkBuF,GAEhBA,IAAA,eAEAA,IAAA,6CAEAA,IAAA,+BANF,CAAkB5/B,EAAA4/B,YAAA5/B,EAAA4/B,UAAS,KAU3B,IAAAtF,GAAA,SAAAzsB,GAAA,SAAAysB,IAAA,IAAAvsB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASY,sBA6BlB,OA9ByCrF,EAAAkrB,EAAAzsB,GAYvCxM,OAAAC,eAAIg5B,EAAA/3B,UAAA,YAAS,KAAb,WACE,IAAIkiB,EAAiBnkB,KAAKmkB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAerZ,OAAS,mCAI3DkvB,EAAA/3B,UAAAs9B,MAAA,WACE,OAAOvvB,EAAKQ,0BACVxQ,KAAKY,KACLZ,KAAKmkB,eACLnkB,KAAK+Q,UACL/Q,KAAKqlB,KACLrlB,KAAKwd,WACLxd,KAAK6P,MACL7P,KAAKslB,UACLtlB,KAAK+P,QAGXiqB,EA9BA,CAAyC2E,IAA5Bj/B,EAAAs6B,uBAiCb,IAAAd,GAAA,SAAA3rB,GAAA,SAAA2rB,IAAA,IAAAzrB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASisB,KAQlB,OATiC1wB,EAAAoqB,EAAA3rB,GASjC2rB,EATA,CAAiCgF,GAApBx+B,EAAAw5B,eAYb,IAAAM,GAAA,SAAAjsB,GAAA,SAAAisB,IAAA,IAAA/rB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASksB,oBAIlB,OALuC3wB,EAAA0qB,EAAAjsB,GAKvCisB,EALA,CAAuCmF,IAA1Bj/B,EAAA85B,qBAQb,IAAAH,GAAA,SAAA9rB,GAAA,SAAA8rB,IAAA,IAAA5rB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASI,SAYlB,OAbqC7E,EAAAuqB,EAAA9rB,GAarC8rB,EAbA,CAAqC6E,GAAxBx+B,EAAA25B,mBAgBb,IAAAK,GAAA,SAAAnsB,GAAA,SAAAmsB,IAAA,IAAAjsB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASc,uBAClB,OAF0CvF,EAAA4qB,EAAAnsB,GAE1CmsB,EAFA,CAA0CtC,IAA7B13B,EAAAg6B,wBAKb,IAAAY,GAAA,SAAA/sB,GAAA,SAAA+sB,IAAA,IAAA7sB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASsL,oBAClB,OAFuC/P,EAAAwrB,EAAA/sB,GAEvC+sB,EAFA,CAAuCN,IAA1Bt6B,EAAA46B,qBAKb,IAAAC,GAAA,SAAAhtB,GAAA,SAAAgtB,IAAA,IAAA9sB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASgB,uBAIlB,OAL0CzF,EAAAyrB,EAAAhtB,GAK1CgtB,EALA,CAA0CoE,IAA7Bj/B,EAAA66B,wBAQb,IAAAE,GAAA,SAAAltB,GAAA,SAAAktB,IAAA,IAAAhtB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASmsB,SAIlB,OALqC5wB,EAAA2rB,EAAAltB,GAKrCktB,EALA,CAAqCyD,GAAxBx+B,EAAA+6B,mBAQb,IAAAK,GAAA,SAAAvtB,GAAA,SAAAutB,IAAA,IAAArtB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASosB,aAMlB,OAPgC7wB,EAAAgsB,EAAAvtB,GAOhCutB,EAPA,CAAgC9qB,GAAnBtQ,EAAAo7B,cAUb,IAAAF,GAAA,SAAArtB,GAAA,SAAAqtB,IAAA,IAAAntB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASqsB,SAMlB,OAPqC9wB,EAAA8rB,EAAArtB,GAOrCqtB,EAPA,CAAqCsD,GAAxBx+B,EAAAk7B,mBAUb,IAAAI,GAAA,SAAAztB,GAAA,SAAAytB,IAAA,IAAAvtB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASssB,QAIlB,OALoC/wB,EAAAksB,EAAAztB,GAKpCytB,EALA,CAAoCkD,GAAvBx+B,EAAAs7B,kBAQb,IAAAK,GAAA,SAAA9tB,GAAA,SAAA8tB,IAAA,IAAA5tB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASusB,MAUlB,OAXkChxB,EAAAusB,EAAA9tB,GAWlC8tB,EAXA,CAAkC6C,GAArBx+B,EAAA27B,gBAcb,IAAAC,GAAA,SAAA/tB,GAAA,SAAA+tB,IAAA,IAAA7tB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASkB,kBAMlB,OAPqC3F,EAAAwsB,EAAA/tB,GAOrC+tB,EAPA,CAAqCqD,IAAxBj/B,EAAA47B,mBAUb,IAAAG,GAAA,SAAAluB,GAAA,SAAAkuB,IAAA,IAAAhuB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASwsB,sBAClB,OAFyCjxB,EAAA2sB,EAAAluB,GAEzCkuB,EAFA,CAAyCmD,IAA5Bl/B,EAAA+7B,uBAKb,IAAAD,GAAA,SAAAjuB,GAAA,SAAAiuB,IAAA,IAAA/tB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASM,WAMlB,OAPuC/E,EAAA0sB,EAAAjuB,GAOvCiuB,EAPA,CAAuC0C,GAA1Bx+B,EAAA87B,qBAUb,IAAAG,GAAA,SAAApuB,GAAA,SAAAouB,IAAA,IAAAluB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAASysB,OAIlB,OALmClxB,EAAA6sB,EAAApuB,GAKnCouB,EALA,CAAmCuC,GAAtBx+B,EAAAi8B,iBAQb,IAAAE,GAAA,SAAAtuB,GAAA,SAAAsuB,IAAA,IAAApuB,EAAA,OAAAF,KAAA+V,MAAAtjB,KAAAkgB,YAAAlgB,YACEyN,EAAA6F,KAAOC,EAAS0sB,QAMlB,OAPoCnxB,EAAA+sB,EAAAtuB,GAOpCsuB,EAPA,CAAoCqC,GAqBpC,SAAgB7F,GAAmBzW,GAEjC,OADIA,EAAKF,SAAS,SAAQE,EAAOA,EAAKD,UAAU,EAAGC,EAAK9W,OAAS,IAC1D8W,EAvBIliB,EAAAm8B,kBAUbn8B,EAAAwgC,cAAA,SAA8B5sB,EAAqBkK,GACjD,GAAIA,EACF,IAAK,IAAInd,EAAI,EAAG8O,EAAIqO,EAAW1S,OAAQzK,EAAI8O,IAAK9O,EAAG,CACjD,IAAIqd,EAAYF,EAAWnd,GAC3B,GAAIqd,EAAU/S,eAAiB2I,EAAM,OAAOoK,EAGhD,OAAO,MAIThe,EAAA24B,sBAMA34B,EAAAygC,cAAA,SAA8BjkB,GAC5B,GAAIA,EAAK5I,MAAQC,EAASyoB,UAAW,CACnC,IAAIp7B,EAAuBsb,EAAMtb,KACjC,QAASA,EAAKkU,MAAQlU,EAAKwP,WAAWyF,KAAK/K,QAE7C,OAAO,oRCngET,IAaYs1B,EAqBAC,EAlCZ52B,EAAAtJ,EAAA,IAaA,SAAYigC,GACVA,IAAA,KAAOE,qBAAmB,OAC1BF,IAAA,IAAOG,sBAAoB,MAC3BH,IAAA,IAAOI,sBAAoB,MAC3BJ,IAAA,IAAOK,wBAAsB,MAC7BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,KAAOO,uBAAqB,OAC5BP,IAAA,YAAcQ,4BAA0B,cACxCR,IAAA,KAAOS,qBAAmB,OAR5B,CAAYT,EAAA1gC,EAAA0gC,aAAA1gC,EAAA0gC,WAAU,KAWtB,SAAYU,GACVA,IAAA,QAAUC,2BAAyB,UACnCD,IAAA,eAAiBE,kCAAgC,iBACjDF,IAAA,mBAAqBG,sCAAoC,qBACzDH,IAAA,QAAUI,2BAAyB,UACnCJ,IAAA,WAAaK,8BAA4B,aACzCL,IAAA,QAAUM,2BAAyB,UACnCN,IAAA,kBAAoBO,qCAAmC,oBAPzD,CAAY3hC,EAAAohC,eAAAphC,EAAAohC,aAAY,KAUxB,SAAYT,GACVA,IAAA,QAAUiB,sBAAoB,UAC9BjB,IAAA,MAAQkB,oBAAkB,QAC1BlB,IAAA,GAAKmB,iBAAe,KACpBnB,IAAA,KAAOoB,mBAAiB,OACxBpB,IAAA,MAAQqB,oBAAkB,QAC1BrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,KAAOuB,mBAAiB,OACxBvB,IAAA,aAAewB,2BAAyB,eACxCxB,IAAA,SAAWyB,uBAAqB,WAChCzB,IAAA,SAAW0B,uBAAqB,WAChC1B,IAAA,UAAY2B,wBAAsB,YAClC3B,IAAA,UAAY4B,wBAAsB,YAClC5B,IAAA,KAAO6B,mBAAiB,OACxB7B,IAAA,MAAQ8B,oBAAkB,QAC1B9B,IAAA,MAAQ+B,oBAAkB,QAC1B/B,IAAA,MAAQgC,oBAAkB,QAC1BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,OAASkC,qBAAmB,SAC5BlC,IAAA,KAAOmC,mBAAiB,OACxBnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,KAAOqC,mBAAiB,OACxBrC,IAAA,IAAMsC,kBAAgB,MACtBtC,IAAA,YAAcuC,0BAAwB,cACtCvC,IAAA,cAAgBwC,4BAA0B,gBAC1CxC,IAAA,UAAYyC,wBAAsB,YAClCzC,IAAA,WAAa0C,yBAAuB,aACpC1C,IAAA,aAAe2C,2BAAyB,eACxC3C,IAAA,YAAc4C,0BAAwB,cACtC5C,IAAA,YAAc6C,0BAAwB,cACtC7C,IAAA,YAAc8C,0BAAwB,cACtC9C,IAAA,cAAgB+C,4BAA0B,gBAC1C/C,IAAA,UAAYgD,wBAAsB,YAClChD,IAAA,WAAaiD,yBAAuB,aACpCjD,IAAA,SAAWkD,uBAAqB,WAChClD,IAAA,WAAamD,yBAAuB,aACpCnD,IAAA,WAAaoD,yBAAuB,aApCtC,CAAYpD,EAAA3gC,EAAA2gC,eAAA3gC,EAAA2gC,aAAY,KAuCxB,SAAYqD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAa1CpD,IAAA,cAAgBqD,0BAAwB,gBACxCrD,IAAA,cAAgBsD,0BAAwB,gBACxCtD,IAAA,cAAgBuD,0BAAwB,gBACxCvD,IAAA,cAAgBwD,0BAAwB,gBACxCxD,IAAA,cAAgByD,0BAAwB,gBACxCzD,IAAA,cAAgB0D,0BAAwB,gBACxC1D,IAAA,UAAY2D,sBAAoB,YAChC3D,IAAA,YAAc4D,wBAAsB,cACpC5D,IAAA,gBAAkB6D,4BAA0B,kBAC5C7D,IAAA,gBAAkB8D,4BAA0B,kBAC5C9D,IAAA,YAAc+D,wBAAsB,cACpC/D,IAAA,gBAAkBgE,4BAA0B,kBAC5ChE,IAAA,gBAAkBiE,4BAA0B,kBAC5CjE,IAAA,YAAckE,wBAAsB,cACpClE,IAAA,gBAAkBmE,4BAA0B,kBAC5CnE,IAAA,gBAAkBoE,4BAA0B,kBAC5CpE,IAAA,YAAcqE,wBAAsB,cACpCrE,IAAA,gBAAkBsE,4BAA0B,kBAC5CtE,IAAA,gBAAkBuE,4BAA0B,kBAC5CvE,IAAA,YAAcwE,wBAAsB,cACpCxE,IAAA,YAAcyE,wBAAsB,cACpCzE,IAAA,aAAe0E,yBAAuB,eACtC1E,IAAA,YAAc2E,wBAAsB,cACpC3E,IAAA,YAAc4E,wBAAsB,cACpC5E,IAAA,aAAe6E,yBAAuB,eACtC7E,IAAA,4BAA8B8E,wCAAsC,8BACpE9E,IAAA,4BAA8B+E,wCAAsC,8BACpE/E,IAAA,4BAA8BgF,wCAAsC,8BACpEhF,IAAA,4BAA8BiF,wCAAsC,8BACpEjF,IAAA,2BAA6BkF,uCAAqC,6BAClElF,IAAA,2BAA6BmF,uCAAqC,6BAClEnF,IAAA,2BAA6BoF,uCAAqC,6BAClEpF,IAAA,2BAA6BqF,uCAAqC,6BAnGpE,CAAYrpC,EAAAgkC,UAAAhkC,EAAAgkC,QAAO,KAsGnB,SAAYsF,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QAG5B5E,IAAA,WAAa6E,uBAAqB,aAClC7E,IAAA,WAAa8E,uBAAqB,aAClC9E,IAAA,YAAc+E,wBAAsB,cACpC/E,IAAA,YAAcgF,wBAAsB,cACpChF,IAAA,YAAciF,wBAAsB,cACpCjF,IAAA,YAAckF,wBAAsB,cACpClF,IAAA,YAAcmF,wBAAsB,cACpCnF,IAAA,YAAcoF,wBAAsB,cACpCpF,IAAA,YAAcqF,wBAAsB,cACpCrF,IAAA,YAAcsF,wBAAsB,cACpCtF,IAAA,WAAauF,uBAAqB,aAClCvF,IAAA,WAAawF,uBAAqB,aAClCxF,IAAA,YAAcyF,wBAAsB,cACpCzF,IAAA,YAAc0F,wBAAsB,cACpC1F,IAAA,YAAc2F,wBAAsB,cACpC3F,IAAA,YAAc4F,wBAAsB,cACpC5F,IAAA,YAAc6F,wBAAsB,cACpC7F,IAAA,YAAc8F,wBAAsB,cACpC9F,IAAA,YAAc+F,wBAAsB,cACpC/F,IAAA,YAAcgG,wBAAsB,cACpChG,IAAA,WAAaiG,uBAAqB,aAClCjG,IAAA,WAAakG,uBAAqB,aAClClG,IAAA,YAAcmG,wBAAsB,cACpCnG,IAAA,YAAcoG,wBAAsB,cACpCpG,IAAA,YAAcqG,wBAAsB,cACpCrG,IAAA,YAAcsG,wBAAsB,cACpCtG,IAAA,YAAcuG,wBAAsB,cACpCvG,IAAA,YAAcwG,wBAAsB,cACpCxG,IAAA,YAAcyG,wBAAsB,cACpCzG,IAAA,YAAc0G,wBAAsB,cACpC1G,IAAA,WAAa2G,uBAAqB,aAClC3G,IAAA,WAAa4G,uBAAqB,aAClC5G,IAAA,WAAa6G,uBAAqB,aAClC7G,IAAA,WAAa8G,uBAAqB,aAClC9G,IAAA,WAAa+G,uBAAqB,aAClC/G,IAAA,WAAagH,uBAAqB,aAClChH,IAAA,WAAaiH,uBAAqB,aAClCjH,IAAA,WAAakH,uBAAqB,aAClClH,IAAA,WAAamH,uBAAqB,aAClCnH,IAAA,WAAaoH,uBAAqB,aAClCpH,IAAA,WAAaqH,uBAAqB,aAClCrH,IAAA,WAAasH,uBAAqB,aAClCtH,IAAA,UAAYuH,sBAAoB,YAChCvH,IAAA,SAAWwH,qBAAmB,WAC9BxH,IAAA,UAAYyH,sBAAoB,YAChCzH,IAAA,YAAc0H,wBAAsB,cACpC1H,IAAA,gBAAkB2H,4BAA0B,kBAC5C3H,IAAA,gBAAkB4H,4BAA0B,kBAC5C5H,IAAA,YAAc6H,wBAAsB,cACpC7H,IAAA,gBAAkB8H,4BAA0B,kBAC5C9H,IAAA,gBAAkB+H,4BAA0B,kBAC5C/H,IAAA,YAAcgI,wBAAsB,cACpChI,IAAA,YAAciI,wBAAsB,cACpCjI,IAAA,gBAAkBkI,4BAA0B,kBAC5ClI,IAAA,gBAAkBmI,4BAA0B,kBAC5CnI,IAAA,YAAcoI,wBAAsB,cACpCpI,IAAA,gBAAkBqI,4BAA0B,kBAC5CrI,IAAA,gBAAkBsI,4BAA0B,kBAC5CtI,IAAA,YAAcuI,wBAAsB,cACpCvI,IAAA,YAAcwI,wBAAsB,cACpCxI,IAAA,YAAcyI,wBAAsB,cACpCzI,IAAA,YAAc0I,wBAAsB,cACpC1I,IAAA,YAAc2I,wBAAsB,cACpC3I,IAAA,YAAc4I,wBAAsB,cACpC5I,IAAA,YAAc6I,wBAAsB,cACpC7I,IAAA,YAAc8I,wBAAsB,cACpC9I,IAAA,YAAc+I,wBAAsB,cACpC/I,IAAA,YAAcgJ,wBAAsB,cACpChJ,IAAA,YAAciJ,wBAAsB,cACpCjJ,IAAA,YAAckJ,wBAAsB,cACpClJ,IAAA,YAAcmJ,wBAAsB,cACpCnJ,IAAA,YAAcoJ,wBAAsB,cACpCpJ,IAAA,YAAcqJ,wBAAsB,cACpCrJ,IAAA,YAAcsJ,wBAAsB,cACpCtJ,IAAA,YAAcuJ,wBAAsB,cACpCvJ,IAAA,YAAcwJ,wBAAsB,cA1JtC,CAAY9yC,EAAAspC,WAAAtpC,EAAAspC,SAAQ,KA6JpB,SAAYyJ,GACVA,IAAA,WAAaC,uBAAqB,aAClCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAYjzC,EAAA+yC,SAAA/yC,EAAA+yC,OAAM,KAKlB,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYxzC,EAAAkzC,cAAAlzC,EAAAkzC,YAAW,KASvB,SAAYO,GACVA,IAAA,qBAAuBC,iCAA+B,uBACtDD,IAAA,qBAAuBE,iCAA+B,uBACtDF,IAAA,qBAAuBG,iCAA+B,uBACtDH,IAAA,qBAAuBI,iCAA+B,uBACtDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBACpDN,IAAA,oBAAsBO,gCAA8B,sBACpDP,IAAA,oBAAsBQ,gCAA8B,sBARtD,CAAYj0C,EAAAyzC,gBAAAzzC,EAAAyzC,cAAa,KAWzB,SAAYS,GACVA,IAAA,oBAAsBC,gCAA8B,sBACpDD,IAAA,oBAAsBE,gCAA8B,sBACpDF,IAAA,oBAAsBG,gCAA8B,sBACpDH,IAAA,oBAAsBI,gCAA8B,sBACpDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBANtD,CAAYx0C,EAAAk0C,gBAAAl0C,EAAAk0C,cAAa,KASzB,SAAYO,GACVA,IAAA,YAAcC,wBAAsB,cACpCD,IAAA,aAAeE,yBAAuB,eACtCF,IAAA,aAAeG,yBAAuB,eACtCH,IAAA,YAAcI,wBAAsB,cACpCJ,IAAA,aAAeK,yBAAuB,eACtCL,IAAA,aAAeM,yBAAuB,eACtCN,IAAA,YAAcO,wBAAsB,cACpCP,IAAA,aAAeQ,yBAAuB,eACtCR,IAAA,aAAeS,yBAAuB,eACtCT,IAAA,YAAcU,wBAAsB,cACpCV,IAAA,aAAeW,yBAAuB,eACtCX,IAAA,aAAeY,yBAAuB,eAZxC,CAAYr1C,EAAAy0C,cAAAz0C,EAAAy0C,YAAW,KAevB,IAAAa,EAAA,oBAAAA,KAWA,OANSA,EAAArzC,OAAP,SAAc2N,EAAoBC,GAChC,IAAI0lC,EAAU,IAAID,EAGlB,OAFAC,EAAQ3lC,OAASA,EACjB2lC,EAAQ1lC,OAASA,EACV0lC,GAEXD,EAXA,GAAat1C,EAAAs1C,gBAab,IAAAE,EAAA,WAyBE,SAAAA,IAwbQl1C,KAAAm1C,sBAA6B,EAoO7Bn1C,KAAAo1C,sBAA+B,EAyE/Bp1C,KAAAq1C,cAAmC,IAAIjuC,IA4IjD,OAp4BS8tC,EAAAvzC,OAAP,WACE,IAAIhC,EAAS,IAAIu1C,EAGjB,OAFAv1C,EAAOwmB,IAAMmvB,wBACb31C,EAAO41C,IAAMC,OAAOC,SAASC,0BACtB/1C,GAGFu1C,EAAAS,WAAP,SAAkBrmC,GAChB,IAAIsmC,EAAOC,EAAavmC,GACxB,IACE,IAAI3P,EAAS,IAAIu1C,EAGjB,OAFAv1C,EAAOwmB,IAAM2vB,oBAAoBF,EAAMtmC,EAAOxE,QAC9CnL,EAAO41C,IAAMC,OAAOC,SAASC,0BACtB/1C,UAEP61C,OAAO/sC,KAAKstC,WAAkBH,MAQlCV,EAAAjzC,UAAA+zC,gBAAA,SACEp1C,EACAq1C,EACAC,GAEA,IAAIC,EAAOn2C,KAAKo2C,kBAAkBx1C,GAC9Bg1C,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyBt2C,KAAKmmB,IAAKgwB,EAAMF,EAAQL,EAAMM,EAAaA,EAAWprC,OAAS,WAE/F0qC,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAs0C,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoCx2C,KAAKmmB,IAAK8vB,EAAQL,EAAMM,EAAaA,EAAWprC,OAAS,WAEpG0qC,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAw0C,mBAAA,SAAmB71C,GACjB,IAAIu1C,EAAOn2C,KAAKo2C,kBAAkBx1C,GAClC81C,4BAA4B12C,KAAKmmB,IAAKgwB,IAKxCjB,EAAAjzC,UAAAmB,IAAA,SAAI9B,GACF,IAAIq1C,EAAM32C,KAAKu1C,IAEf,OADAqB,sBAAsBD,EAAKr1C,GACpBu1C,eAAe72C,KAAKmmB,IAAKwwB,IAGlCzB,EAAAjzC,UAAAoB,IAAA,SAAIyzC,EAAeC,QAAA,IAAAA,MAAA,GACjB,IAAIJ,EAAM32C,KAAKu1C,IAEf,OADAyB,sBAAsBL,EAAKG,EAAUC,GAC9BF,eAAe72C,KAAKmmB,IAAKwwB,IAGlCzB,EAAAjzC,UAAA4B,IAAA,SAAIvC,GACF,IAAIq1C,EAAM32C,KAAKu1C,IAEf,OADA0B,wBAAwBN,EAAKr1C,GACtBu1C,eAAe72C,KAAKmmB,IAAKwwB,IAGlCzB,EAAAjzC,UAAA6B,IAAA,SAAIxC,GACF,IAAIq1C,EAAM32C,KAAKu1C,IAEf,OADA2B,wBAAwBP,EAAKr1C,GACtBu1C,eAAe72C,KAAKmmB,IAAKwwB,IAGlCzB,EAAAjzC,UAAA8B,KAAA,SAAKozC,GACHtsC,OAAuB,IAAhBssC,EAAMrsC,QAEb,IADA,IAAI6rC,EAAM32C,KAAKu1C,IACNl1C,EAAI,EAAGA,EAAI,KAAMA,EAAG+2C,MAAUT,EAAMt2C,EAAG82C,EAAM92C,IAEtD,OADAg3C,uBAAuBV,EAAKA,GACrBE,eAAe72C,KAAKmmB,IAAKwwB,IAKlCzB,EAAAjzC,UAAAq1C,MAAA,SACEC,EACAnlB,GAEA,OAAOolB,eAAex3C,KAAKmmB,IAAKoxB,EAAInlB,IAGtC8iB,EAAAjzC,UAAAw1C,OAAA,SACEF,EACArkB,EACAC,GAEA,OAAOukB,gBAAgB13C,KAAKmmB,IAAKoxB,EAAIrkB,EAAMC,IAG7C+hB,EAAAjzC,UAAA01C,KAAA,SACEJ,EACA32C,EACAg3C,QADA,IAAAh3C,MAAA,WACA,IAAAg3C,MAAA,MAEA,IAAIzB,EAAOn2C,KAAKo2C,kBAAkBx1C,GAC9Bg1C,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAc93C,KAAKmmB,IAAKoxB,EAAIpB,EAAMP,EAAMgC,EAA6BA,EAAU9sC,OAAS,WAE/F0qC,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAA81C,UAAA,SACE9yB,EACA/I,GAEA,OAAO87B,kBAAkBh4C,KAAKmmB,IAAKlB,EAAO/I,IAG5Cg5B,EAAAjzC,UAAAg2C,UAAA,SACEhzB,EACA3jB,GAEA,OAAO42C,kBAAkBl4C,KAAKmmB,IAAKlB,EAAO3jB,IAG5C4zC,EAAAjzC,UAAAk2C,WAAA,SACEv3C,EACAsb,GAEA,IAAIi6B,EAAOn2C,KAAKo2C,kBAAkBx1C,GAClC,OAAOw3C,mBAAmBp4C,KAAKmmB,IAAKgwB,EAAMj6B,IAG5Cg5B,EAAAjzC,UAAAo2C,KAAA,SACElB,EACAmB,EACAC,EACAr8B,EACA3M,EACAipC,GAEA,YAHA,IAAAjpC,MAAA,QACA,IAAAipC,MAAArB,GAEOsB,cAAcz4C,KAAKmmB,IAAKgxB,EAAOmB,EAAS,EAAI,EAAG/oC,EAAQipC,EAAOt8B,EAAMq8B,IAG7ErD,EAAAjzC,UAAAm1C,MAAA,SACED,EACAoB,EACAj3C,EACA4a,EACA3M,EACAipC,GAEA,QAHA,IAAAjpC,MAAA,QACA,IAAAipC,MAAArB,GAEIj7B,EAAOkkB,EAAWsY,MAAQx8B,EAAOkkB,EAAWr5B,KAAM,MAAM,IAAIsS,MAAM,SAAW6C,GACjF,OAAOy8B,eAAe34C,KAAKmmB,IAAKgxB,EAAO5nC,EAAQipC,EAAOD,EAAKj3C,EAAO4a,IAGpEg5B,EAAAjzC,UAAA22C,YAAA,SACEzB,EACAoB,EACAr8B,EACA3M,GAEA,YAFA,IAAAA,MAAA,GAEOspC,oBAAoB74C,KAAKmmB,IAAKgxB,EAAO5nC,EAAQ2M,EAAMq8B,IAG5DrD,EAAAjzC,UAAA62C,aAAA,SACE3B,EACAoB,EACAj3C,EACA4a,EACA3M,GAEA,YAFA,IAAAA,MAAA,GAEOwpC,qBAAqB/4C,KAAKmmB,IAAKgxB,EAAO5nC,EAAQgpC,EAAKj3C,EAAO4a,IAGnEg5B,EAAAjzC,UAAA+2C,WAAA,SACEzB,EACAJ,EACA5nC,EACAgpC,EACAj3C,EACA4a,GAEA,OAAO+8B,mBAAmBj5C,KAAKmmB,IAAKoxB,EAAIJ,EAAO5nC,EAAQgpC,EAAKj3C,EAAO4a,IAGrEg5B,EAAAjzC,UAAAi3C,eAAA,SACE/B,EACA5nC,EACAgpC,EACAY,EACAC,EACAl9B,GAEA,OAAOm9B,uBAAuBr5C,KAAKmmB,IAAKgxB,EAAO5nC,EAAQgpC,EAAKY,EAAUC,EAAal9B,IAGrFg5B,EAAAjzC,UAAAq3C,YAAA,SACEf,EACAY,EACAI,EACAC,GAEA,OAAOC,oBAAoBz5C,KAAKmmB,IAAKoyB,EAAKY,EAAUI,EAASC,IAG/DtE,EAAAjzC,UAAAy3C,cAAA,SACEnB,EACAoB,GAEA,OAAOC,sBAAsB55C,KAAKmmB,IAAKoyB,EAAKoB,IAK9CzE,EAAAjzC,UAAA43C,UAAA,SACE50B,EACA3jB,GAEA,OAAOw4C,kBAAkB95C,KAAKmmB,IAAKlB,EAAO3jB,IAG5C4zC,EAAAjzC,UAAA83C,WAAA,SACEn5C,EACAU,GAEA,IAAI60C,EAAOn2C,KAAKo2C,kBAAkBx1C,GAClC,OAAOo5C,mBAAmBh6C,KAAKmmB,IAAKgwB,EAAM70C,IAG5C4zC,EAAAjzC,UAAAg4C,MAAA,SACEhjB,EACAijB,EACAh+B,QAAA,IAAAA,MAAmBkkB,EAAWsY,MAE9B,IAAIvC,EAAOn2C,KAAKo2C,kBAAkBnf,GAC9B2e,EAAOiC,EAAcqC,GACzB,IACE,OAAOC,eAAen6C,KAAKmmB,IAAKgwB,EAAMP,EAAMsE,EAASpvC,OAAQoR,WAE7Ds5B,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAm4C,GAAA,SACEnjB,EACApB,EACAv0B,QADA,IAAAu0B,MAAA,QACA,IAAAv0B,MAAA,GAEA,IAAI60C,EAAOn2C,KAAKo2C,kBAAkBnf,GAClC,OAAOojB,eAAer6C,KAAKmmB,IAAKgwB,EAAMtgB,EAAWv0B,IAGnD4zC,EAAAjzC,UAAAq4C,KAAA,SACEznB,GAEA,OAAO0nB,cAAcv6C,KAAKmmB,IAAK0M,IAGjCqiB,EAAAjzC,UAAAu4C,KAAA,SACEvjB,EACA5R,GAEA,IAAI8wB,EAAOn2C,KAAKo2C,kBAAkBnf,GAClC,OAAOwjB,cAAcz6C,KAAKmmB,IAAKgwB,EAAM9wB,IAGvC6vB,EAAAjzC,UAAAy4C,GAAA,SACE7kB,EACAmD,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEO0hB,YAAY36C,KAAKmmB,IAAK0P,EAAWmD,EAAQC,IAGlDic,EAAAjzC,UAAA24C,IAAA,WACE,OAAOC,aAAa76C,KAAKmmB,MAG3B+uB,EAAAjzC,UAAA64C,OAAA,SACEjoB,GAEA,YAFA,IAAAA,MAAA,GAEOkoB,gBAAgB/6C,KAAKmmB,IAAK0M,IAGnCqiB,EAAAjzC,UAAA+4C,OAAA,SACEhiB,EACAC,EACApD,GAEA,OAAOolB,gBAAgBj7C,KAAKmmB,IAAK0P,EAAWmD,EAAQC,IAGtDic,EAAAjzC,UAAAi5C,OAAA,SACEhmB,EACAimB,EACAtlB,EACAv0B,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI85C,EAAWlmB,EAAMpqB,OACjBuwC,EAAO,IAAIp0C,MAAam0C,GACnB/6C,EAAI,EAAGA,EAAI+6C,IAAY/6C,EAC9Bg7C,EAAKh7C,GAAKL,KAAKo2C,kBAAkBlhB,EAAM70B,IAEzC,IAAIu1C,EAAOS,EAAcgF,GACrBlF,EAAOn2C,KAAKo2C,kBAAkB+E,GAClC,IACE,OAAOG,gBAAgBt7C,KAAKmmB,IAAKyvB,EAAMwF,EAAUjF,EAAMtgB,EAAWv0B,WAElEk0C,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAzB,KAAA,SACEoqB,EACAgtB,EACA3mB,GAEA,IAAIklB,EAAOn2C,KAAKo2C,kBAAkBxrB,GAC9BgrB,EAAOiC,EAAcD,GACzB,IACE,OAAO2D,cAAcv7C,KAAKmmB,IAAKgwB,EAAMP,EAAMgC,GAAYA,EAAS9sC,QAAU,EAAGmmB,WAE7EukB,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAu5C,cAAA,SACEv2B,EACA2yB,EACAhnB,GAEA,IAAIulB,EAAOn2C,KAAKo2C,kBAAkBxlB,GAC9BglB,EAAOiC,EAAcD,GACzB,IACE,OAAO6D,sBAAsBz7C,KAAKmmB,IAAKlB,EAAO2wB,EAAMgC,GAAYA,EAAS9sC,QAAU,EAAGqrC,WAEtFX,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAy5C,YAAA,WACE,OAAOC,qBAAqB37C,KAAKmmB,MAKnC+uB,EAAAjzC,UAAA25C,YAAA,SACEpvB,EACApd,EACAysC,GAEA,OAAOC,oBAAoB97C,KAAKmmB,IAAKqG,EAAMpd,EAAQysC,IAGrD3G,EAAAjzC,UAAA85C,YAAA,SACEvvB,EACAlrB,EACAu6C,GAEA,OAAOG,oBAAoBh8C,KAAKmmB,IAAKqG,EAAMlrB,EAAOu6C,IAKpD3G,EAAAjzC,UAAAg6C,aAAA,SACE1E,EACA2E,EACAC,GAEA,OAAOC,qBAAqBp8C,KAAKmmB,IAAKoxB,EAAI2E,EAAKC,IAGjDjH,EAAAjzC,UAAAo6C,aAAA,SACE9E,EACA2E,EACAC,EACA76C,GAEA,OAAOg7C,qBAAqBt8C,KAAKmmB,IAAKoxB,EAAI2E,EAAKC,EAAK76C,IAGtD4zC,EAAAjzC,UAAAs6C,aAAA,SACEC,EACAC,EACAC,GAEA7xC,OAAsB,IAAf6xC,EAAK5xC,QACZ,IAAI8qC,EAAOC,EAAa6G,GACxB,IACE,OAAOC,qBAAqB38C,KAAKmmB,IAAKq2B,EAAMC,EAAM7G,WAElDJ,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAA26C,eAAA,SACEJ,EACAC,EACAI,GAEA,OAAOC,uBAAuB98C,KAAKmmB,IAAKq2B,EAAMC,EAAMI,IAGtD3H,EAAAjzC,UAAA86C,WAAA,SACExF,EACA2E,EACAc,GAEA,OAAOC,mBAAmBj9C,KAAKmmB,IAAKoxB,EAAI2E,EAAKc,IAK/C9H,EAAAjzC,UAAAi7C,UAAA,SACEt8C,EACAsb,EACAihC,EACA14B,GAEA,IAAI0xB,EAAOn2C,KAAKo2C,kBAAkBx1C,GAClC,OAAOw8C,mBAAmBp9C,KAAKmmB,IAAKgwB,EAAMj6B,EAAMihC,EAAU,EAAI,EAAG14B,IAGnEywB,EAAAjzC,UAAAo7C,aAAA,SACEz8C,GAEA,IAAIu1C,EAAOn2C,KAAKo2C,kBAAkBx1C,GAClC08C,sBAAsBt9C,KAAKmmB,IAAKgwB,IAGlCjB,EAAAjzC,UAAAs7C,YAAA,SACE38C,EACAsb,EACAshC,EACAn4B,GAEA,IAAI8wB,EAAOn2C,KAAKo2C,kBAAkBx1C,GAC9Bg1C,EAAOS,EAAcmH,GACzB,IACE,OAAOC,qBAAqBz9C,KAAKmmB,IAAKgwB,EAAMj6B,EAAM05B,EAAM4H,EAAWA,EAAS1yC,OAAS,EAAGua,WAExFmwB,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAAy7C,eAAA,SAAe98C,GACb,IAAIu1C,EAAOn2C,KAAKo2C,kBAAkBx1C,GAClC+8C,wBAAwB39C,KAAKmmB,IAAKgwB,IAKpCjB,EAAAjzC,UAAA27C,qBAAA,SAAqB3H,EAAoBC,EAAiC7wB,GACxErlB,KAAKm1C,qBAAuBtqC,QAAQ7K,KAAKm1C,sBACzC,IAAI0I,EAAW79C,KAAKo2C,kBAAkB,IAClCR,EAAOS,EAAcH,GACzB,IACE,IAAI4H,EAAUxH,yBAAyBt2C,KAAKmmB,IAAK03B,EAAU5H,EAAQL,EAAMM,EAAaA,EAAWprC,OAAS,GAC1G,OAAO2yC,qBAAqBz9C,KAAKmmB,IAAK03B,EAAUC,EAAS,EAAG,EAAGz4B,WAE/DmwB,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAA87C,wBAAA,WACE/9C,KAAKm1C,sBAAwBtqC,OAAO7K,KAAKm1C,sBACzC,IAAI0I,EAAW79C,KAAKo2C,kBAAkB,IACtCuH,wBAAwB39C,KAAKmmB,IAAK03B,GAClCnH,4BAA4B12C,KAAKmmB,IAAK03B,IAGxC3I,EAAAjzC,UAAA+7C,kBAAA,SACErvC,EACA8pB,GAEA,IAAIwlB,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkB3d,GACnC,OAAO0lB,2BAA2Bn+C,KAAKmmB,IAAK83B,EAAOC,IAGrDhJ,EAAAjzC,UAAAm8C,eAAA,SACEzvC,EACA8pB,GAEA,IAAIwlB,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkB3d,GACnC,OAAO4lB,wBAAwBr+C,KAAKmmB,IAAK83B,EAAOC,IAGlDhJ,EAAAjzC,UAAAq8C,gBAAA,SACE3vC,EACA8pB,GAEA,IAAIwlB,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkB3d,GACnC,OAAO8lB,yBAAyBv+C,KAAKmmB,IAAK83B,EAAOC,IAGnDhJ,EAAAjzC,UAAAu8C,gBAAA,SACE7vC,EACA8pB,GAEA,IAAIwlB,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkB3d,GACnC,OAAOgmB,yBAAyBz+C,KAAKmmB,IAAK83B,EAAOC,IAGnDhJ,EAAAjzC,UAAAy8C,aAAA,SAAajmB,GACX,IAAI0d,EAAOn2C,KAAKo2C,kBAAkB3d,GAClCkmB,sBAAsB3+C,KAAKmmB,IAAKgwB,IAGlCjB,EAAAjzC,UAAA28C,kBAAA,SACEjwC,EACAkwC,EACAC,EACAC,GAEA,IAAId,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkByI,GAC/BG,EAAQh/C,KAAKo2C,kBAAkB0I,GACnC,OAAOG,2BAA2Bj/C,KAAKmmB,IAAK83B,EAAOC,EAAOc,EAAOD,IAGnE7J,EAAAjzC,UAAAi9C,eAAA,SACEvwC,EACAkwC,EACAC,GAEA,IAAIb,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkByI,GAC/BG,EAAQh/C,KAAKo2C,kBAAkB0I,GACnC,OAAOK,wBAAwBn/C,KAAKmmB,IAAK83B,EAAOC,EAAOc,IAGzD9J,EAAAjzC,UAAAm9C,gBAAA,SACEzwC,EACAkwC,EACAC,EACAO,QAAA,IAAAA,OAAA,GAEA,IAAIpB,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkByI,GAC/BG,EAAQh/C,KAAKo2C,kBAAkB0I,GACnC,OAAOQ,yBAAyBt/C,KAAKmmB,IAAK83B,EAAOC,EAAOc,EAAOK,IAGjEnK,EAAAjzC,UAAAs9C,gBAAA,SACE5wC,EACAkwC,EACAC,EACAU,GAEA,IAAIvB,EAAQj+C,KAAKo2C,kBAAkBznC,GAC/BuvC,EAAQl+C,KAAKo2C,kBAAkByI,GAC/BG,EAAQh/C,KAAKo2C,kBAAkB0I,GACnC,OAAOW,yBAAyBz/C,KAAKmmB,IAAK83B,EAAOC,EAAOc,EAAOQ,IAMjEtK,EAAAjzC,UAAAy9C,UAAA,SACEC,EACAC,EACAC,EACAj1B,EACApU,EACA6oC,QADA,IAAA7oC,MAAA,WACA,IAAA6oC,OAAA,GAQA,IANA,IAAIlJ,EAAOn2C,KAAKo2C,kBAAkB5/B,GAC9BrH,EAAI0wC,EAAS/0C,OACbg1C,EAAO,IAAI74C,MAAakI,GACxB4wC,EAAO,IAAI94C,MAAUkI,GACrB6wC,EAAO,IAAI/4C,MAAqBkI,GAChC8wC,EAAO,IAAIh5C,MAAakI,GACnB9O,EAAI,EAAGA,EAAI8O,IAAK9O,EAAG,CAC1B,IAAIiP,EAASuwC,EAASx/C,GAAGiP,OACrBC,EAASswC,EAASx/C,GAAGkP,OACzBuwC,EAAKz/C,GAAKw1C,EAAavmC,GACvBywC,EAAK1/C,GAAK,EACV2/C,EAAK3/C,GAAKuqB,GAAUnhB,EAAAL,OAAOmJ,OACvBvS,KAAKqD,IAAI68C,QAAQ3wC,GAAS4wC,SAAS5wC,IACnCvP,KAAKoD,IAAI88C,QAAQ3wC,IACrB0wC,EAAK5/C,GAAKiP,EAAOxE,OAEnB,IAAIs1C,EAAQ/J,EAAcyJ,GACtBO,EAAQxK,EAAakK,GACrBO,EAAQjK,EAAc2J,GACtBO,EAAQlK,EAAc4J,GAC1B,IACEO,mBAAmBxgD,KAAKmmB,IAAKw5B,EAASC,EAASzJ,EAAMiK,EAAOC,EAAOC,EAAOC,EAAOpxC,EAAGkwC,WAEpF7J,OAAO/sC,KAAK83C,GACZ/K,OAAO/sC,KAAK63C,GACZ9K,OAAO/sC,KAAK43C,GACZ7K,OAAO/sC,KAAK23C,GACZ,IAAS//C,EAAI8O,EAAI,EAAG9O,GAAK,IAAKA,EAAGm1C,OAAO/sC,KAAKq3C,EAAKz/C,MAItD60C,EAAAjzC,UAAAw+C,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAItF,EAAWsF,EAAM51C,OACjBoqB,EAAQ,IAAIjuB,MAAam0C,GACpB/6C,EAAI,EAAGA,EAAI+6C,IAAY/6C,EAC9B60B,EAAM70B,GAAKL,KAAKo2C,kBAAkBsK,EAAMrgD,IAE1C,IAAIu1C,EAAOS,EAAcnhB,GACzB,IACEyrB,0BAA0B3gD,KAAKmmB,IAAKw5B,EAASC,EAAShK,EAAMwF,WAE5D5F,OAAO/sC,KAAKmtC,KAIhBV,EAAAjzC,UAAA2+C,SAAA,SAASC,GACPC,kBAAkB9gD,KAAKmmB,IAAK06B,IAG9B3L,EAAAjzC,UAAA8+C,iBAAA,WACE,OAAOC,6BAGT9L,EAAAjzC,UAAAg/C,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5BhM,EAAAjzC,UAAAm/C,eAAA,WACE,OAAOC,2BAGTnM,EAAAjzC,UAAAq/C,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1BhM,EAAAjzC,UAAAu/C,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBvM,EAAAjzC,UAAA0/C,YAAA,WACE,OAAOC,2BAA2B5hD,KAAKmmB,MAGzC+uB,EAAAjzC,UAAA4/C,YAAA,SAAYC,GACVC,2BAA2B/hD,KAAKmmB,IAAK27B,IAGvC5M,EAAAjzC,UAAA+/C,SAAA,SAASnB,QAAA,IAAAA,MAAA,GACHA,EACFoB,0BAA0BpB,EAAM7gD,KAAKmmB,KAErC+7B,wBAAwBliD,KAAKmmB,MAIjC+uB,EAAAjzC,UAAAkgD,UAAA,SAAUC,EAAkBvB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAIzF,EAAWgH,EAAOt3C,OAClBoqB,EAAQ,IAAIjuB,MAAam0C,GACpB/6C,EAAI,EAAGA,EAAI+6C,IAAY/6C,EAC9B60B,EAAM70B,GAAKgiD,EAAYD,EAAO/hD,IAEhC,IAAIu1C,EAAOS,EAAcnhB,GACzB,IACM2rB,EACFyB,2BAA2BzB,EAAM7gD,KAAKmmB,IAAKyvB,EAAMwF,GAEjDmH,yBAAyBviD,KAAKmmB,IAAKyvB,EAAMwF,WAG3C5F,OAAO/sC,KAAKmtC,GACZ,IAASv1C,EAAI+6C,EAAU/6C,GAAK,IAAKA,EAAGm1C,OAAO/sC,KAAKysB,EAAM70B,MAM1D60C,EAAAjzC,UAAAugD,qBAAA,SAAqBpwB,GAEnB,IAAIqwB,EAAwBzB,4BACxB0B,EAAsBrB,0BACtBsB,EAAoBC,wBACxBzB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIxlC,EAAO2mC,2BAA2BzwB,GAClCyuB,EAAO7gD,KAAK49C,qBAAqB1hC,EAAM,KAAMkW,GAC7C8C,EAAQl1B,KAAKo1C,sBAkBjB,OAjBKlgB,IACHl1B,KAAKo1C,sBAAwBlgB,EAAQmhB,EAAc,CACjDr2C,KAAKo2C,kBAAkB,UACvBp2C,KAAKo2C,kBAAkB,iBAG3BkM,2BAA2BzB,EAAM7gD,KAAKmmB,IAAK+O,EAAO,GAClD9C,EAAO0wB,yBAAyBjC,GAC5BkC,yBAAyB3wB,IAASiO,EAAa2iB,SACjD5wB,EAAO6wB,wBAAwB7wB,IAEjCpyB,KAAK+9C,0BAGLoD,0BAA0BsB,GAC1BlB,wBAAwBmB,GACxBhB,sBAAsBiB,GACfvwB,GAGT8iB,EAAAjzC,UAAAihD,SAAA,WACE,OAA4C,GAArCC,wBAAwBnjD,KAAKmmB,MAGtC+uB,EAAAjzC,UAAAmhD,UAAA,WACEC,yBAAyBrjD,KAAKmmB,MAGhC+uB,EAAAjzC,UAAAqhD,SAAA,SAASC,GACP,IAAI5M,EAAM32C,KAAKu1C,IACf1qC,OAAO6qC,0BAA4B,IACnC,IAAIS,EAAOkM,EAAYkB,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgC/M,EAAK32C,KAAKmmB,IAAKgwB,GAC/CqN,EAAYG,EAAQhN,GACpB,IAAIiN,EAAcD,EAAQhN,EAAM,GAChC8M,EAAeE,EAAQhN,EAAM,GAC7B,IAAIkN,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OA2jBV,SAAoBxL,EAAYztC,GAE9B,IADA,IAAI+4C,EAAM,IAAIh8C,WAAWiD,GAChBzK,EAAW,EAAGA,EAAIyK,IAAUzK,EACnCwjD,EAAIxjD,GAAKg4C,KAASE,EAAMl4C,GAE1B,OAAOwjD,EAhkBUG,CAAWR,EAAWI,GACnCC,EAAI97B,UAAYk8B,EAAWR,GACpBI,UAEH1N,GAAMX,OAAO/sC,KAAK0tC,GAClBqN,GAAWhO,OAAO/sC,KAAK+6C,GACvBC,GAAcjO,OAAO/sC,KAAKg7C,KAIlCvO,EAAAjzC,UAAAiiD,OAAA,WACE,MAAM,IAAI7qC,MAAM,oBAGlB67B,EAAAjzC,UAAAkiD,QAAA,WACE,MAAM,IAAI9qC,MAAM,oBAKV67B,EAAAjzC,UAAAm0C,kBAAR,SAA0BgO,GACxB,GAAW,MAAPA,EAAa,OAAO,EACxB,IAAI/O,EAAgBr1C,KAAKq1C,cACzB,GAAIA,EAAc/jC,IAAI8yC,GAAM,OAAc/O,EAAcn0C,IAAIkjD,GAC5D,IAAI7L,EAAM8J,EAAY+B,GAEtB,OADA/O,EAAc3mC,IAAI01C,EAAK7L,GAChBA,GAGTrD,EAAAjzC,UAAAoiD,QAAA,mBACEx5C,OAAO7K,KAAKmmB,SACZ,IAAgB,IAAApC,EAAAnP,EAAA5U,KAAKq1C,cAAc76B,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAA,CAAtC,IAAIyjC,EAAGl9B,EAAA/Z,MAAiCk0C,OAAO/sC,KAAK8vC,qGACzDv4C,KAAKq1C,cAAgB,IAAIjuC,IACzBouC,OAAO/sC,KAAKzI,KAAKu1C,KACjBC,OAAO/sC,KAAKzI,KAAKo1C,uBACjBp1C,KAAKo1C,sBAAwB,EAC7BkP,uBAAuBtkD,KAAKmmB,KAC5BnmB,KAAKmmB,IAAM,GAGb+uB,EAAAjzC,UAAAsiD,eAAA,WACE,OAAOC,EAAS7iD,OAAO3B,OAGzBk1C,EAAAjzC,UAAAwiD,gBAAA,SACEryB,EACAsyB,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBvhD,IAAIwhD,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEJ,OALAH,GAAY,EAKJ5B,yBAAyB3wB,IAC/B,KAAKiO,EAAa0kB,MAChB,OAAQlC,2BAA2BzwB,IACjC,KAAKgO,EAAWh6B,IACd,OAAOpG,KAAKoD,IAAI4hD,0BAA0B5yB,IAE5C,KAAKgO,EAAW/5B,IACd,OAAOrG,KAAKqD,IACV4hD,6BAA6B7yB,GAC7B8yB,8BAA8B9yB,IAGlC,KAAKgO,EAAWv5B,IACd,OAAO7G,KAAK6D,IAAIshD,0BAA0B/yB,IAE5C,KAAKgO,EAAWt5B,IACd,OAAO9G,KAAK8D,IAAIshD,0BAA0BhzB,IAE5C,KAAKgO,EAAWr5B,KAEd,OAAO,EAET,QACE,MAAM,IAAIsS,MAAM,0BAItB,KAAKgnB,EAAaglB,SAChB,OAAOrN,kBAAkBh4C,KAAKmmB,IAC5Bm/B,0BAA0BlzB,GAC1BywB,2BAA2BzwB,IAG/B,KAAKiO,EAAaklB,UAChB,IAAIC,EAAaC,0BAA0BrzB,GAC3C,IAAKozB,EAAY,MACjB,OAAOpN,mBAAmBp4C,KAAKmmB,IAAKq/B,EAAY3C,2BAA2BzwB,IAE7E,KAAKiO,EAAaqlB,KAChB,KAAMb,EAAU7kD,KAAKykD,gBAAgBkB,oBAAoBvzB,GAAOsyB,EAAeC,IAC7E,MAEF,OACEiB,sBAAsBxzB,GAClBymB,oBAAoB74C,KAAKmmB,IACvB0/B,sBAAsBzzB,GACtB0zB,uBAAuB1zB,GACvBywB,2BAA2BzwB,GAC3ByyB,GAEFpM,cAAcz4C,KAAKmmB,IACjB0/B,sBAAsBzzB,GACtB2zB,sBAAsB3zB,GAAQ,EAAI,EAClC0zB,uBAAuB1zB,GACvB4zB,sBAAsB5zB,GACtBywB,2BAA2BzwB,GAC3ByyB,GAIV,KAAKxkB,EAAa4lB,MAChB,KAAMpB,EAAU7kD,KAAKykD,gBAAgByB,uBAAuB9zB,GAAOsyB,EAAeC,IAChF,MAEF,OAAOnN,eAAex3C,KAAKmmB,IAAKggC,oBAAoB/zB,GAAOyyB,GAE7D,KAAKxkB,EAAa+lB,OAChB,KAAMvB,EAAU7kD,KAAKykD,gBAAgB4B,uBAAuBj0B,GAAOsyB,EAAeC,IAChF,MAEF,KAAMG,EAAU9kD,KAAKykD,gBAAgB6B,wBAAwBl0B,GAAOsyB,EAAeC,IACjF,MAEF,OAAOjN,gBAAgB13C,KAAKmmB,IAAKogC,qBAAqBn0B,GAAOyyB,EAASC,GAG1E,OAAO,GAKT5P,EAAAjzC,UAAAukD,iBAAA,SAAiB5lD,GACf,IAAIu1C,EAAOkM,EAAYzhD,GACvB,IACE,OAAO6lD,oCAAoCzmD,KAAKmmB,IAAKgwB,WAErDX,OAAO/sC,KAAK0tC,KAIhBjB,EAAAjzC,UAAAykD,iBAAA,SAAiBzhC,GACf,OAAOg/B,EAAW0C,oCAAoC3mD,KAAKmmB,IAAKlB,KAGlEiwB,EAAAjzC,UAAAgmB,iBAAA,SACE44B,EACAzuB,EACAw0B,EACAC,EACAC,GAEAC,kCAAkClG,EAAMzuB,EAAMw0B,EAAWC,EAAYC,IAzUvD5R,EAAA8R,kBAAkC,EA2UpD9R,EA14BA,GA84BA,SAAgB+R,EAAgB70B,GAC9B,OAAO2wB,yBAAyB3wB,GA/4BrB1yB,EAAAw1C,SA84Bbx1C,EAAAunD,kBAIAvnD,EAAAwnD,kBAAA,SAAkC90B,GAChC,OAAOywB,2BAA2BzwB,IAGpC1yB,EAAAynD,iBAAA,SAAiC/0B,GAC/B,OAAO4yB,0BAA0B5yB,IAGnC1yB,EAAA0nD,oBAAA,SAAoCh1B,GAClC,OAAO6yB,6BAA6B7yB,IAGtC1yB,EAAA2nD,qBAAA,SAAqCj1B,GACnC,OAAO8yB,8BAA8B9yB,IAGvC1yB,EAAA4nD,iBAAA,SAAiCl1B,GAC/B,OAAO+yB,0BAA0B/yB,IAGnC1yB,EAAA6nD,iBAAA,SAAiCn1B,GAC/B,OAAOgzB,0BAA0BhzB,IAGnC1yB,EAAA8nD,iBAAA,SAAiCp1B,GAC/B,OAAOkzB,0BAA0BlzB,IAGnC1yB,EAAA+nD,iBAAA,SAAiCr1B,GAC/B,OAAOs1B,0BAA0Bt1B,IAGnC1yB,EAAAioD,iBAAA,SAAiCv1B,GAC/B,OAAOw1B,0BAA0Bx1B,IAGnC1yB,EAAAmoD,WAAA,SAA2Bz1B,GACzB,OAAO01B,uBAAuB11B,IAGhC1yB,EAAAqoD,iBAAA,SAAiC31B,GAC/B,OAAO6xB,EAAWwB,0BAA0BrzB,KAG9C1yB,EAAAsoD,YAAA,SAA4B51B,GAC1B,OAAOm0B,qBAAqBn0B,IAG9B1yB,EAAAuoD,cAAA,SAA8B71B,GAC5B,OAAOi0B,uBAAuBj0B,IAGhC1yB,EAAAwoD,eAAA,SAA+B91B,GAC7B,OAAOk0B,wBAAwBl0B,IAGjC1yB,EAAAyoD,WAAA,SAA2B/1B,GACzB,OAAO+zB,oBAAoB/zB,IAG7B1yB,EAAA0oD,cAAA,SAA8Bh2B,GAC5B,OAAO8zB,uBAAuB9zB,IAGhC1yB,EAAA2oD,aAAA,SAA6Bj2B,GAC3B,OAAOyzB,sBAAsBzzB,IAG/B1yB,EAAA4oD,cAAA,SAA8Bl2B,GAC5B,OAAO0zB,uBAAuB1zB,IAGhC1yB,EAAA6oD,WAAA,SAA2Bn2B,GACzB,OAAOuzB,oBAAoBvzB,IAG7B1yB,EAAA8oD,aAAA,SAA6Bp2B,GAC3B,OAAO2zB,sBAAsB3zB,IAG/B1yB,EAAA+oD,cAAA,SAA8Br2B,GAC5B,OAAOs2B,uBAAuBt2B,IAGhC1yB,EAAAipD,eAAA,SAA+Bv2B,GAC7B,OAAOw2B,wBAAwBx2B,IAGjC1yB,EAAAmpD,YAAA,SAA4Bz2B,GAC1B,OAAO02B,qBAAqB12B,IAG9B1yB,EAAAqpD,cAAA,SAA8B32B,GAC5B,OAAO42B,uBAAuB52B,IAGhC1yB,EAAAupD,aAAA,SAA6B72B,GAC3B,OAAO6xB,EAAWiF,sBAAsB92B,KAG1C1yB,EAAAypD,mBAAA,SAAmC/2B,GACjC,OAAOg3B,6BAA6Bh3B,IAGtC1yB,EAAA2pD,cAAA,SAA8Bj3B,EAAqBnN,GACjD,OAAOqkC,uBAAuBl3B,EAAMnN,IAGtCvlB,EAAA6pD,eAAA,SAA+Bn3B,GAC7B,OAAOo3B,wBAAwBp3B,IAGjC1yB,EAAA+pD,UAAA,SAA0Br3B,GACxB,OAAOs3B,qBAAqBt3B,IAG9B1yB,EAAAiqD,WAAA,SAA2Bv3B,GACzB,OAAOw3B,sBAAsBx3B,IAG/B1yB,EAAAmqD,YAAA,SAA4Bz3B,GAC1B,OAAO6xB,EAAW6F,qBAAqB13B,KAGzC1yB,EAAAqqD,YAAA,SAA4B33B,GAC1B,OAAO43B,qBAAqB53B,IAG9B1yB,EAAAuqD,aAAA,SAA6B73B,GAC3B,OAAO6xB,EAAWiG,sBAAsB93B,KAG1C1yB,EAAAyqD,kBAAA,SAAkC/3B,GAChC,OAAOg4B,2BAA2Bh4B,IAGpC1yB,EAAA2qD,cAAA,SAA8Bj4B,GAC5B,OAAOk4B,yBAAyBl4B,IAGlC1yB,EAAA6qD,cAAA,SAA8Bn4B,GAC5B,OAAOo4B,0BAA0Bp4B,IAGnC1yB,EAAA+qD,mBAAA,SAAmCr4B,GACjC,OAAOs4B,4BAA4Bt4B,IAGrC1yB,EAAAirD,aAAA,SAA6Bv4B,GAC3B,OAAOw4B,sBAAsBx4B,IAG/B1yB,EAAAmrD,eAAA,SAA+Bz4B,GAC7B,OAAO6wB,wBAAwB7wB,IAGjC1yB,EAAAorD,cAAA,SAA8B14B,GAC5B,OAAO6xB,EAAW8G,uBAAuB34B,KAG3C1yB,EAAAsrD,oBAAA,SAAoC54B,GAClC,OAAO64B,4BAA4B74B,IAGrC1yB,EAAAwrD,eAAA,SAA+B94B,EAAqBnN,GAClD,OAAOkmC,wBAAwB/4B,EAAMnN,IAGvCvlB,EAAA0rD,UAAA,SAA0Bh5B,GACxB,OAAOi5B,mBAAmBj5B,IAG5B1yB,EAAA4rD,oBAAA,SAAoCl5B,GAClC,OAAOm5B,4BAA4Bn5B,IAGrC1yB,EAAA8rD,eAAA,SAA+Bp5B,EAAqBnN,GAClD,OAAOwmC,wBAAwBr5B,EAAMnN,IAGvCvlB,EAAAgsD,YAAA,SAA4Bt5B,GAC1B,OAAO6xB,EAAW0H,4BAA4Bv5B,KAKhD1yB,EAAAksD,gBAAA,SAAgC/K,GAC9B,OAAOiC,yBAAyBjC,IAGlCnhD,EAAAmsD,gBAAA,SAAgChL,GAC9B,OAAOoD,EAAW6H,yBAAyBjL,KAG7CnhD,EAAAqsD,sBAAA,SAAsClL,GACpC,OAAOmL,8BAA8BnL,IAGvCnhD,EAAAusD,qBAAA,SAAqCpL,EAAmB57B,GACtD,OAAOinC,0BAA0BrL,EAAM57B,IAGzCvlB,EAAAysD,sBAAA,SAAsCtL,GACpC,OAAOuL,2BAA2BvL,IAGpC,IAAA2D,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAA7iD,OAAP,SAAchC,GACZ,IAAI0sD,EAAW,IAAI7H,EAGnB,OAFA6H,EAAS1sD,OAASA,EAClB0sD,EAASlmC,IAAMmmC,gBAAgB3sD,EAAOwmB,KAC/BkmC,GAKT7H,EAAAviD,UAAAsqD,SAAA,SAASt+B,GACP,OAAOu+B,kBAAkBxsD,KAAKmmB,IAAK8H,IAGrCu2B,EAAAviD,UAAAwqD,UAAA,SACEC,EACAC,EACA92B,EACA5H,QADA,IAAA4H,MAAA,QACA,IAAA5H,MAAA,GAEA2+B,mBAAmBF,EAAMC,EAAI92B,EAAW5H,IAG1Cu2B,EAAAviD,UAAA4qD,mBAAA,SAAmB5+B,EAAqB4H,GACtC,OAAOi3B,4BAA4B9sD,KAAKmmB,IAAK8H,EAAM4H,IAGrD2uB,EAAAviD,UAAA8qD,mBAAA,SACEL,EACAC,EACAK,EACA/+B,QAAA,IAAAA,MAAA,GAEA,IAAI2nB,EAAOS,EAAc2W,GACzB,IACEC,4BAA4BP,EAAMC,EAAI/W,EAAMoX,EAAQliD,OAAQmjB,WAE5DunB,OAAO/sC,KAAKmtC,KAIhB4O,EAAAviD,UAAAirD,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0BrtD,KAAKmmB,IAAKgnC,EAAOC,IAEtD5I,EAhDA,GA4FA,SAAS3O,EAAayX,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIxiD,OAChBytC,EAAM/C,OAAOC,SAAS8X,GACtBpR,EAAM5D,EACDl4C,EAAI,EAAGA,EAAIktD,IAAaltD,EAC/B+2C,MAAU+E,IAAOmR,EAAIjtD,IAEvB,OAAOk4C,EAGT,SAASlC,EAAcmX,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIjV,EAAM/C,OAAOC,SAAS+X,EAAK1iD,QAAU,GACrCqxC,EAAM5D,EACDl4C,EAAI,EAAG8O,EAAIq+C,EAAK1iD,OAAQzK,EAAI8O,IAAK9O,EAAG,CAC3C,IAAIotD,EAAMD,EAAKntD,GAEf+2C,MAAU+E,EAAyB,IAAdsR,GACrBrW,MAAU+E,EAAM,EAAKsR,GAAS,EAAK,KACnCrW,MAAU+E,EAAM,EAAKsR,GAAQ,GAAM,KACnCrW,MAAU+E,EAAM,EAAKsR,IAAQ,IAC7BtR,GAAO,EAET,OAAO5D,EAGT,SAASV,EAAc6V,GACrB,OAAOrX,EAAcqX,GA2BvB,SAASrL,EAAY+B,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAI7L,EAAM/C,OAAOC,SA1BnB,SAA0B2O,GAExB,IADA,IAAIr1B,EAAM,EACD1uB,EAAI,EAAG8O,EAAIi1C,EAAIt5C,OAAQzK,EAAI8O,IAAK9O,EAAG,CAC1C,IAAIstD,EAAIvJ,EAAIl5C,WAAW7K,GACnBstD,GAAK,OAAUA,GAAK,OAAUttD,EAAI,EAAI8O,IACxCw+C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBvJ,EAAIl5C,aAAa7K,IAEpDstD,GAAK,MACL5+B,EAEFA,GADS4+B,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAO5+B,EAKmB6+B,CAAiBxJ,GAAO,GAE9CjI,EAAM5D,EACDl4C,EAAI,EAAG8O,EAAIi1C,EAAIt5C,OAAQzK,EAAI8O,IAAK9O,EAAG,CAC1C,IAAIstD,EAAIvJ,EAAIl5C,WAAW7K,GACnBstD,GAAK,OAAUA,GAAK,OAAUttD,EAAI,EAAI8O,IACxCw+C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBvJ,EAAIl5C,aAAa7K,IAEpDstD,GAAK,IACPvW,MAAU+E,IAAOwR,GACRA,GAAK,MACdvW,MAAU+E,IAAQ,IAASwR,IAAM,GACjCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,OACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,SACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,UACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,KAE3BvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAI/B,OADAvW,MAAU+E,EAAK,GACR5D,EAGT,SAASoL,EAAQpL,GACf,OACGF,KAASE,GACTF,KAASE,EAAM,IAAO,EACtBF,KAASE,EAAM,IAAM,GACrBF,KAASE,EAAM,IAAM,GAY1B,SAAgB0L,EAAW1L,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEIsV,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIjnD,MAIP4mD,EAAKxV,KAASE,MACR,IAALsV,GAINC,EAAuB,GAAlBzV,KAASE,KACK,MAAT,IAALsV,IAILE,EAAuB,GAAlB1V,KAASE,KACK,MAAT,IAALsV,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlB3V,KAASE,KACK,MAAT,IAALsV,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlB5V,KAASE,KAEZsV,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlB5V,KAASE,OAKpB2V,EAAI3vC,KAAKsvC,IApBPK,EAAI3vC,MAAY,GAALsvC,IAAY,EAAKC,IAL5BI,EAAI3vC,KAAKsvC,GAmCb,OAAO7mD,OAAOmnD,eAAeD,GA1PlBxuD,EAAA8kD,WA+Mb9kD,EAAAukD,aA+CA,IAAAH,EAAA,WAKA,OALA,gBAAapkD,EAAAokD,eAQbpkD,EAAA0uD,yBAAA,SAAgBA,EAAyBh8B,GAEvC,GAAIywB,2BAA2BzwB,IAASgO,EAAWiuB,YAAa,OAAO,EAEvE,OAAQtL,yBAAyB3wB,IAC/B,KAAKiO,EAAaguB,YAClB,KAAKhuB,EAAa2iB,OAAQ,OAAO,EACjC,KAAK3iB,EAAaiuB,MAAO,OAA2C,GAApClE,2BAA2Bh4B,GAC3D,KAAKiO,EAAakuB,MAChB,IAAKrF,sBAAsB92B,GAAO,CAChC,IAAIo8B,EAAcpF,6BAA6Bh3B,GAC/C,OAAOo8B,EAAc,GAAKJ,EAAyB9E,uBAAuBl3B,EAAMo8B,EAAc,KAIpG,OAAO,GAIT9uD,EAAA+uD,SAAA,SAA4Br8B,EAAqBs8B,EAAS3lD,GACxD,OAAQk+C,EAAgB70B,IACtB,KAAKiO,EAAakuB,MAChB,IAAK,IAAIluD,EAAI,EAAGyB,EAAIsnD,6BAA6Bh3B,GAAO/xB,EAAIyB,IAAKzB,EAC/D0I,EAAMugD,uBAAuBl3B,EAAM/xB,GAAIquD,GAEzC,MAEF,KAAKruB,EAAasuB,GAChB5lD,EAAMygD,wBAAwBp3B,GAAOs8B,GACrC3lD,EAAM2gD,qBAAqBt3B,GAAOs8B,GAClC,IAAIz1B,EAAU2wB,sBAAsBx3B,GAChC6G,GAASlwB,EAAMkwB,EAASy1B,GAC5B,MAEF,KAAKruB,EAAauuB,KAChB7lD,EAAMihD,qBAAqB53B,GAAOs8B,GAClC,MAEF,KAAKruB,EAAaiuB,MAChB,IAAIz4B,EAAYu0B,2BAA2Bh4B,GACvCyD,GAAW9sB,EAAM8sB,EAAW64B,GAChC,MAEF,KAAKruB,EAAawuB,OAChB9lD,EAAM+lD,4BAA4B18B,GAAOs8B,GACzC,MAEF,KAAKruB,EAAa0uB,KAChB,IAAS1uD,EAAI,EAAGyB,EAAImpD,4BAA4B74B,GAAO/xB,EAAIyB,IAAKzB,EAC9D0I,EAAMoiD,wBAAwB/4B,EAAM/xB,GAAIquD,GAE1C,MAEF,KAAKruB,EAAa2uB,aAChB,IAAS3uD,EAAI,EAAGyB,EAAImtD,oCAAoC78B,GAAO/xB,EAAIyB,IAAKzB,EACtE0I,EAAMmmD,gCAAgC98B,EAAM/xB,GAAIquD,GAElD,MAEF,KAAKruB,EAAaglB,SAChB,MAEF,KAAKhlB,EAAa8uB,SAChBpmD,EAAM6+C,0BAA0Bx1B,GAAOs8B,GACvC,MAEF,KAAKruB,EAAaklB,UAChB,MAEF,KAAKllB,EAAa+uB,UAChBrmD,EAAMsmD,2BAA2Bj9B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAaqlB,KAChB38C,EAAM48C,oBAAoBvzB,GAAOs8B,GACjC,MAEF,KAAKruB,EAAaivB,MAChBvmD,EAAM+/C,qBAAqB12B,GAAOs8B,GAClC3lD,EAAMigD,uBAAuB52B,GAAOs8B,GACpC,MAEF,KAAKruB,EAAakvB,UAChBxmD,EAAMymD,yBAAyBp9B,GAAOs8B,GACtC3lD,EAAM0mD,2BAA2Br9B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAaqvB,cAChB3mD,EAAM4mD,6BAA6Bv9B,GAAOs8B,GAC1C3lD,EAAM6mD,kCAAkCx9B,GAAOs8B,GAC/C3lD,EAAM8mD,qCAAqCz9B,GAAOs8B,GAClD,MAEF,KAAKruB,EAAayvB,WAChB/mD,EAAMgnD,0BAA0B39B,GAAOs8B,GACvC3lD,EAAMinD,+BAA+B59B,GAAOs8B,GAC5C3lD,EAAMknD,8BAA8B79B,GAAOs8B,GAC3C,MAEF,KAAKruB,EAAa6vB,aAChBnnD,EAAMonD,4BAA4B/9B,GAAOs8B,GACzC,MAEF,KAAKruB,EAAa+vB,YAChBrnD,EAAMsnD,2BAA2Bj+B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAaiwB,YAChBvnD,EAAMwnD,2BAA2Bn+B,GAAOs8B,GACxC3lD,EAAMynD,6BAA6Bp+B,GAAOs8B,GAC1C,MAEF,KAAKruB,EAAaowB,YAChB1nD,EAAM2nD,4BAA4Bt+B,GAAOs8B,GACzC3lD,EAAM4nD,6BAA6Bv+B,GAAOs8B,GAC1C,MAEF,KAAKruB,EAAauwB,cAChB7nD,EAAM8nD,8BAA8Bz+B,GAAOs8B,GAC3C3lD,EAAM+nD,+BAA+B1+B,GAAOs8B,GAC5C3lD,EAAMgoD,8BAA8B3+B,GAAOs8B,GAC3C,MAEF,KAAKruB,EAAa2wB,UAChBjoD,EAAMkoD,yBAAyB7+B,GAAOs8B,GACtC3lD,EAAMmoD,2BAA2B9+B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAa8wB,WAChBpoD,EAAMqoD,2BAA2Bh/B,GAAOs8B,GACxC3lD,EAAMsoD,6BAA6Bj/B,GAAOs8B,GAC1C3lD,EAAMuoD,2BAA2Bl/B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAakxB,SAChB,MAEF,KAAKlxB,EAAamxB,WAChBzoD,EAAM0oD,2BAA2Br/B,GAAOs8B,GACxC3lD,EAAM2oD,6BAA6Bt/B,GAAOs8B,GAC1C3lD,EAAM4oD,2BAA2Bv/B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAauxB,WAChB7oD,EAAM8oD,2BAA2Bz/B,GAAOs8B,GACxC3lD,EAAM+oD,4BAA4B1/B,GAAOs8B,GACzC3lD,EAAMgpD,2BAA2B3/B,GAAOs8B,GACxC,MAEF,KAAKruB,EAAa0kB,MAChB,MAEF,KAAK1kB,EAAa4lB,MAChBl9C,EAAMm9C,uBAAuB9zB,GAAOs8B,GACpC,MAEF,KAAKruB,EAAa+lB,OAChBr9C,EAAMs9C,uBAAuBj0B,GAAOs8B,GACpC3lD,EAAMu9C,wBAAwBl0B,GAAOs8B,GACrC,MAEF,KAAKruB,EAAa2xB,OAChBjpD,EAAMuhD,yBAAyBl4B,GAAOs8B,GACtC3lD,EAAMyhD,0BAA0Bp4B,GAAOs8B,GACvC3lD,EAAM2hD,4BAA4Bt4B,GAAOs8B,GACzC,MAEF,KAAKruB,EAAa4xB,KAChBlpD,EAAM6hD,sBAAsBx4B,GAAOs8B,GACnC,MAEF,KAAKruB,EAAa2iB,OAChBj6C,EAAMk6C,wBAAwB7wB,GAAOs8B,GACrC,MAEF,KAAKruB,EAAa6xB,KAChB,IAAS7xD,EAAI,EAAGyB,EAAIypD,4BAA4Bn5B,GAAO/xB,EAAIyB,IAAKzB,EAC9D0I,EAAM0iD,wBAAwBr5B,EAAM/xB,GAAIquD,GAE1C,MAEF,KAAKruB,EAAa8xB,IAGlB,KAAK9xB,EAAaguB,YAChB,MAEF,QAASxjD,QAAO,GAElB,OAAO,kFC76DT,IAAAunD,EAAAjyD,EAAA,GAOAkyD,EAAAlyD,EAAA,IAOA,SAAkBmyD,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAKAA,IAAA,gBA7CF,CAAkB5yD,EAAA4yD,WAAA5yD,EAAA4yD,SAAQ,KAiD1B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,sBAvBF,CAAkB7yD,EAAA6yD,YAAA7yD,EAAA6yD,UAAS,KA0B3B,IAAMC,EAAY,IAAI3qD,WAAW,IAGjC6J,EAAA,WAoBE,SAAAA,EAAY4B,EAAgBzD,EAAkBgsC,GAHtC77C,KAAAyyD,mBAAkC,KAIxCzyD,KAAKsT,KAAOA,EACZtT,KAAK6P,MAAQA,EACb7P,KAAK67C,KAAOA,EACZ77C,KAAK0yD,SAAgBC,KAAe9W,EAAO,GAC3C77C,KAAKksB,eAAiB,KACtBlsB,KAAK4yD,mBAAqB,KAC1B5yD,KAAK6yD,gBAAkB7yD,KA6Z3B,OAzZEe,OAAAC,eAAI0Q,EAAAzP,UAAA,UAAO,KAAX,WACE,OAAQjC,KAAKsT,MACX,OAAkB,OAAO5B,EAAKxO,GAC9B,OAAmB,OAAOwO,EAAKvO,IAC/B,QACA,OAAmB,OAAOuO,EAAKtO,IAC/B,QACA,OAAmB,OAAOsO,EAAKrO,IAC/B,OAAqB,OAAoB,IAAbrD,KAAK67C,KAAanqC,EAAKohD,QAAUphD,EAAKqhD,QAClE,OAAkB,OAAOrhD,EAAKnO,GAC9B,OAAmB,OAAOmO,EAAKlO,IAC/B,OAAmB,OAAOkO,EAAKjO,IAC/B,OAAmB,OAAOiO,EAAKhO,IAC/B,OAAqB,OAAoB,IAAb1D,KAAK67C,KAAanqC,EAAKshD,QAAUthD,EAAKuhD,QAClE,QACA,QAAS,OAAOvhD,EAAKtO,sCAKzBrC,OAAAC,eAAI0Q,EAAAzP,UAAA,aAAU,KAAd,WACE,OAAa,IAATjC,KAAKsT,KAA8B5B,EAAKwhD,KACrClzD,sCAITe,OAAAC,eAAI0Q,EAAAzP,UAAA,YAAS,KAAb,WACE,OAAO,GAAKkxD,IAASnzD,KAAK0yD,2CAI5B3xD,OAAAC,eAAI0Q,EAAAzP,UAAA,YAAS,KAAb,WACE,IAAIiqB,EAAiBlsB,KAAKksB,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAe7T,aAAa+5C,EAAA/kD,eAAeoL,4CAIhF1X,OAAAC,eAAI0Q,EAAAzP,UAAA,cAAW,KAAf,WACE,IAAIiqB,EAAiBlsB,KAAKksB,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAe7T,aAAa+5C,EAAA/kD,eAAeoL,4CAI/E/G,EAAAzP,UAAAmxD,yBAAA,SAAyBC,GACvB,OAAOA,EAAWxX,KAAO77C,KAAK67C,MAIhCnqC,EAAAzP,UAAAqxD,wBAAA,SAAwBD,GACtB,IAAIxX,EAAO77C,KAAKuc,GAAE,GAAuBvc,KAAK67C,KAAO77C,KAAK67C,KAAO,EACjE,OAAO,IAAQwX,EAAWxX,KAAOA,GAInCnqC,EAAAzP,UAAAsa,GAAA,SAAG1M,GAA0B,OAAQ7P,KAAK6P,MAAQA,IAAUA,GAE5D6B,EAAAzP,UAAA6c,MAAA,SAAMjP,GAA0B,OAA+B,IAAvB7P,KAAK6P,MAAQA,IAGrD6B,EAAAzP,UAAA+nB,QAAA,SAAQupC,GACN1oD,OAAgB,GAAT7K,KAAKsT,OAA2BtT,KAAKksB,gBAC5C,IAAI23B,EAAM,IAAInyC,EAAK1R,KAAKsT,MAAmB,IAAbtT,KAAK6P,MAAwB,IAAwB7P,KAAK67C,MAExF,OADAgI,EAAI33B,eAAiBqnC,EACd1P,GAITnyC,EAAAzP,UAAAglB,WAAA,SAAWlW,GACTlG,OAAgB,GAAT7K,KAAKsT,OAAyBtT,KAAK4yD,oBAC1C,IAAI/O,EAAM,IAAInyC,EAAK1R,KAAKsT,MAAmB,IAAbtT,KAAK6P,MAAwB,IAAwB7P,KAAK67C,MAExF,OADAgI,EAAI+O,mBAAqB7hD,EAClB8yC,GAITnyC,EAAAzP,UAAAuxD,WAAA,WASE,OARA3oD,OAAO7K,KAAKuc,GAAE,MACTvc,KAAKyyD,qBACR5nD,QAAQ7K,KAAKuc,GAAE,MACfvc,KAAKyyD,mBAAqB,IAAI/gD,EAAK1R,KAAKsT,KAAgB,IAAVtT,KAAK6P,MAA4B7P,KAAK67C,MACpF77C,KAAKyyD,mBAAmBI,gBAAkB7yD,KAC1CA,KAAKyyD,mBAAmBvmC,eAAiBlsB,KAAKksB,eAC9ClsB,KAAKyyD,mBAAmBG,mBAAqB5yD,KAAK4yD,oBAE7C5yD,KAAKyyD,oBAId/gD,EAAAzP,UAAA0oB,eAAA,SAAeC,EAAc6oC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,QAL2B,IAAAJ,OAAA,GAKvBzzD,KAAKuc,GAAE,MACT,GAAIqO,EAAOrO,GAAE,QACNvc,KAAKuc,GAAE,MAAwBqO,EAAOrO,GAAE,MAC3C,GAAIm3C,EAAe1zD,KAAKksB,gBACtB,GAAIynC,EAAc/oC,EAAOsB,eACvB,OAAOwnC,EAAa/oC,eAAegpC,QAEhC,IAAIC,EAAkB5zD,KAAK4yD,sBAC5BiB,EAAiBjpC,EAAOgoC,oBAC1B,OAAOgB,EAAgBjpC,eAAekpC,QAKzC,IAAKjpC,EAAOrO,GAAE,KACnB,GAAIvc,KAAKuc,GAAE,GACT,GAAIqO,EAAOrO,GAAE,IACX,IACGk3C,GACDzzD,MAAQ0R,EAAK9N,MACb5D,KAAKuc,GAAE,IAAsBqO,EAAOrO,GAAE,GAEtC,OAAOvc,KAAK67C,MAAQjxB,EAAOixB,SAExB,IAAe,IAAXjxB,EAAOtX,KAChB,OAAOtT,KAAK67C,MAAQ,GACf,GAAe,IAAXjxB,EAAOtX,KAChB,OAAOtT,KAAK67C,MAAQ,QAEjB,GAAI77C,KAAKuc,GAAE,IAChB,GAAIqO,EAAOrO,GAAE,GACX,OAAOvc,KAAK67C,MAAQjxB,EAAOixB,UAExB,GAAI77C,KAAKuc,GAAE,OACZqO,EAAOrO,GAAE,MACX,OAAOvc,KAAK67C,MAAQjxB,EAAOixB,KAIjC,OAAO,GAITnqC,EAAAzP,UAAA6xD,uBAAA,SAAuBlpC,EAAc6oC,GACnC,YADmC,IAAAA,OAAA,GAC/BzzD,KAAKuc,GAAE,KAA8Bvc,KAAK2qB,eAAeC,IACpDA,EAAOrO,GAAE,OACdvc,KAAKuc,GAAE,GACFqO,EAAOrO,GAAE,IAAuBqO,EAAOixB,MAAQ77C,KAAK67C,QACxD4X,GAAwBzzD,KAAKuc,GAAE,IAAsBqO,EAAOrO,GAAE,IAG5Dvc,KAAKsT,MAAQsX,EAAOtX,OAItB5B,EAAAqiD,kBAAP,SAAyB7gC,EAAYC,EAAa6gC,GAChD,OAAI7gC,EAAMxI,eAAeuI,EAAM8gC,GAA+B9gC,EACrDA,EAAKvI,eAAewI,EAAO6gC,GAA+B7gC,EAC5D,MAITzhB,EAAAzP,UAAA+b,SAAA,WACE,GAAIhe,KAAKuc,GAAE,KAAuB,CAChC,IAAI2P,EAAiBlsB,KAAKksB,eAC1B,GAAIA,EACF,OAAOlsB,KAAKuc,GAAE,KACV2P,EAAevd,aAAe,UAC9Bud,EAAevd,aAErB,IAAIikD,EAAqB5yD,KAAK4yD,mBAC9B,GAAIA,EACF,OAAO5yD,KAAKuc,GAAE,KACV,IAAMq2C,EAAmB50C,WAAa,WACtC40C,EAAmB50C,WAEzBnT,QAAO,GAET,OAAQ7K,KAAKsT,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAASzI,QAAO,GAChB,QAAoB,MAAO,SAO/B6G,EAAAzP,UAAAgyD,aAAA,WACE,OAAQj0D,KAAKsT,MACX,QAAS,OAAO++C,EAAAjyB,WAAWh6B,IAC3B,OACA,OAAmB,OAAOisD,EAAAjyB,WAAW/5B,IACrC,OACA,OAAqB,OAAoB,IAAbrG,KAAK67C,KAAawW,EAAAjyB,WAAW/5B,IAAMgsD,EAAAjyB,WAAWh6B,IAC1E,QAAmB,OAAOisD,EAAAjyB,WAAWv5B,IACrC,QAAmB,OAAOwrD,EAAAjyB,WAAWt5B,IACrC,QAAoB,OAAOurD,EAAAjyB,WAAWr5B,KACtC,QAAqB,OAAOsrD,EAAAjyB,WAAWsY,OAK3ChnC,EAAAzP,UAAAiyD,aAAA,SAAav0D,GACX,OAAQK,KAAKsT,MACX,QAAoBzI,QAAO,GAC3B,QAAS,OAAOlL,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK67C,KAAY,OAAOl8C,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,GACrC,QAAoB,OAAOnE,EAAOoE,KAAKyuD,KAK3C9gD,EAAAzP,UAAAkyD,YAAA,SAAYx0D,GACV,OAAQK,KAAKsT,MACX,QACA,QAAoBzI,QAAO,GAC3B,QAAS,OAAOlL,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK67C,KAAY,OAAOl8C,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,KAKzC4N,EAAAzP,UAAAmyD,eAAA,SAAez0D,GACb,OAAQK,KAAKsT,MACX,QACA,QAAoBzI,QAAO,GAC3B,QAAS,OAAOlL,EAAOyD,KAAK,GAC5B,OACA,OAAqB,GAAiB,IAAbpD,KAAK67C,KAAY,OAAOl8C,EAAOyD,KAAK,GAC7D,OACA,OAAmB,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,QAAmB,OAAO1D,EAAOkE,KAAK,GACtC,QAAmB,OAAOlE,EAAOmE,KAAK,KAK1C4N,EAAAzP,UAAAwmB,kBAAA,WACE,OAAQzoB,KAAKsT,MAEX,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,MAAO,IAC3B,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAbtT,KAAK67C,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,IAC3B,QAAoB,MAAO,IAC3B,QAAShxC,QAAO,GAElB,MAAO,KAMO6G,EAAAxO,GAAY,IAAIwO,EAAI,EAClC,IAGmB,GAILA,EAAAvO,IAAY,IAAIuO,EAAI,EAClC,IAGkB,IAIJA,EAAAtO,IAAY,IAAIsO,EAAI,EAClC,IAEkB,IAIJA,EAAArO,IAAY,IAAIqO,EAAI,EAClC,IAGkB,IAIJA,EAAAqhD,QAAgB,IAAIrhD,EAAI,EACtC,IAGkB,IAIJA,EAAAohD,QAAgB,IAAIphD,EAAI,EACtC,IAIkB,IAIJA,EAAAnO,GAAW,IAAImO,EAAI,EACjC,IAGmB,GAILA,EAAAlO,IAAY,IAAIkO,EAAI,EAClC,IAGkB,IAIJA,EAAAjO,IAAY,IAAIiO,EAAI,EAClC,IAEkB,IAIJA,EAAAhO,IAAY,IAAIgO,EAAI,EAClC,IAGkB,IAIJA,EAAAuhD,QAAgB,IAAIvhD,EAAI,EACtC,IAGkB,IAIJA,EAAAshD,QAAgB,IAAIthD,EAAI,EACtC,IAIkB,IAIJA,EAAA9N,KAAa,IAAI8N,EAAI,GACnC,IAGmB,GAILA,EAAA7N,IAAY,IAAI6N,EAAI,GAClC,IAEkB,IAIJA,EAAA5N,IAAY,IAAI4N,EAAI,GAClC,IAGkB,IAIJA,EAAA3N,KAAa,IAAI2N,EAAI,GACnC,KACiB,KAIHA,EAAAG,KAAa,IAAIH,EAAI,KAAgC,GAGrDA,EAAAwhD,KAAa,IAAIxhD,EAAKA,EAAKtO,IAAIkQ,KAAM5B,EAAKtO,IAAIyM,MAAO6B,EAAKtO,IAAIy4C,MAChFnqC,EAxbA,GAAahS,EAAAgS,OA2bbhS,EAAA20D,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMxpD,OACjB+4C,EAAM,IAAI58C,MAAkBstD,GACvBl0D,EAAI,EAAGA,EAAIk0D,IAAYl0D,EAAGwjD,EAAIxjD,GAAKi0D,EAAMj0D,GAAG4zD,eACrD,OAAOpQ,GAITnkD,EAAA80D,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMxpD,OACrB,IAAKypD,EAAU,MAAO,GAEtB,IADA,IAAIplC,EAAK,IAAIloB,MAAcstD,GAClBl0D,EAAI,EAAGA,EAAIk0D,IAAYl0D,EAAG8uB,EAAG9uB,GAAKi0D,EAAMj0D,GAAG2d,WACpD,OAAOmR,EAAGvW,KAAK,MAIjB,IAAA6K,EAAA,WAoBE,SAAAA,EACE4D,EACA4J,EACA7J,QAFA,IAAAC,MAAA,WACA,IAAA4J,MAAA,WACA,IAAA7J,MAAA,MARFpnB,KAAAy0D,qBAA8C,KAU5Cz0D,KAAKqnB,eAAiBA,GAAkC,GACxDrnB,KAAK00D,eAAiB,KACtB10D,KAAK20D,mBAAqB,EAC1B30D,KAAKixB,WAAaA,GAA0Bvf,EAAKG,KACjD7R,KAAKonB,SAAWA,EAChBpnB,KAAK40D,SAAU,EACf50D,KAAKkc,KAAOxK,EAAKjO,IAAIwjB,WAAWjnB,MAoGpC,OAjGEyjB,EAAAxhB,UAAA4yD,iBAAA,SAAiBhyC,GACf,IAAI+H,EAAS5qB,KAAKy0D,qBAGlB,OAFK7pC,EACA/f,OAAO+f,EAAO/H,SAAWA,GADjB7iB,KAAKy0D,qBAAuB7pC,EAAS,IAAIwnC,EAAA9pC,eAAetoB,KAAM6iB,GAEpE+H,GAITnH,EAAAxhB,UAAAulB,iBAAA,SAAiBvC,GACf,IAAIyvC,EAAiB10D,KAAK00D,eAC1B,OAAOA,GAAkBA,EAAe5pD,OAASma,EAC7CyvC,EAAezvC,GACf6vC,EAAwB7vC,IAI9BxB,EAAAxhB,UAAA0oB,eAAA,SAAeC,GAIb,IAAImqC,EAAe/0D,KAAKonB,SACpB4tC,EAAiBpqC,EAAOxD,SAC5B,GAAI2tC,GACF,IAAMC,IAAkBD,EAAapqC,eAAeqqC,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIh1D,KAAK40D,SAAWhqC,EAAOgqC,QAAS,OAAO,EAG3C,IAAIK,EAAqBj1D,KAAKqnB,eAC1B6tC,EAAuBtqC,EAAOvD,eAC9B8tC,EAAgBF,EAAmBnqD,OACvC,GAAIqqD,GAAiBD,EAAqBpqD,OAAQ,OAAO,EACzD,IAAK,IAAIzK,EAAI,EAAGA,EAAI80D,IAAiB90D,EAAG,CACtC,IAAI+0D,EAAoBH,EAAmB50D,GACvCg1D,EAAsBH,EAAqB70D,GAC/C,IAAK+0D,EAAkBzqC,eAAe0qC,GAAsB,OAAO,EAIrE,IAAIC,EAAiBt1D,KAAKixB,WACtBskC,EAAmB3qC,EAAOqG,WAC9B,OAAOqkC,GAAkBC,GAAoBD,EAAe3qC,eAAe4qC,IAItE9xC,EAAA+xC,oBAAP,SAA2BnuC,EAA+B4J,EAAkB7J,QAAA,IAAAA,MAAA,MAC1E,IAAI+H,EAAK,GAGT,GAFAA,EAAG5Q,KAAK0S,EAAWxI,qBACfrB,GAAU+H,EAAG5Q,KAAK6I,EAASqB,qBAC3BpB,EACF,IAAK,IAAIhnB,EAAI,EAAG8O,EAAIkY,EAAevc,OAAQzK,EAAI8O,IAAK9O,EAAG8uB,EAAG5Q,KAAK8I,EAAehnB,GAAGooB,qBAEnF,MAAO,WAAa0G,EAAGvW,KAAK,KAI9B6K,EAAAxhB,UAAAwmB,kBAAA,WACE,OAAOhF,EAAU+xC,oBAAoBx1D,KAAKqnB,eAAgBrnB,KAAKixB,WAAYjxB,KAAKonB,WAIlF3D,EAAAxhB,UAAA+b,SAAA,WACE,IAAImR,EAAK,IAAIloB,MACbkoB,EAAG5Q,KAAK,KACR,IAAI0G,EAAQ,EACRmC,EAAWpnB,KAAKonB,SAChBA,IACF+H,EAAG5Q,KAAK,UACR1T,QAAQuc,EAASwrC,oBACjBzjC,EAAG5Q,KAAK6I,EAASpJ,YACjBiH,EAAQ,GAEV,IAAI+L,EAAahxB,KAAKqnB,eAClB8tC,EAAgBnkC,EAAWlmB,OAC/B,GAAIqqD,EAKF,IAJA,IAAIjgC,EAAQl1B,KAAK00D,eACbtZ,EAAWlmB,EAAQA,EAAMpqB,OAAS,EAClC2qD,EAAgBz1D,KAAK20D,mBACrBe,EAAY11D,KAAK40D,QAAUO,EAAgB,GAAK,EAC3C90D,EAAI,EAAGA,EAAI80D,IAAiB90D,IAAK4kB,EACpCA,GAAOkK,EAAG5Q,KAAK,MACfle,GAAKq1D,GAAWvmC,EAAG5Q,KAAK,OACxBle,EAAI+6C,EAAUjsB,EAAG5Q,KAAgB2W,EAAO70B,IACvC8uB,EAAG5Q,KAAKu2C,EAAwBz0D,IACjCA,GAAKo1D,GAAiBp1D,GAAKq1D,EAAWvmC,EAAG5Q,KAAK,OAC7C4Q,EAAG5Q,KAAK,MACb4Q,EAAG5Q,KAAKyS,EAAW3wB,GAAG2d,YAK1B,OAFAmR,EAAG5Q,KAAK,SACR4Q,EAAG5Q,KAAKve,KAAKixB,WAAWjT,YACjBmR,EAAGvW,KAAK,KAEnB6K,EAnIA,GAAa/jB,EAAA+jB,YAwIb,IAAIkyC,EAA+C,KAGnD,SAAgBb,EAAwB7vC,GACjC0wC,IAA6BA,EAA8B,IAChE,IAAK,IAAIt1D,EAAIs1D,EAA4B7qD,OAAQzK,GAAK4kB,IAAS5kB,EAC7Ds1D,EAA4Bp3C,KAAK,OAASle,EAAE2d,SAAS,KAEvD,OAAO23C,EAA4B1wC,EAAQ,GAL7CvlB,EAAAo1D,ybC/qBA,IAuBYjlC,EAwIA+lC,EA/JZlsD,EAAAvJ,EAAA,GAMAyJ,EAAAzJ,EAAA,GAKA0J,EAAA1J,EAAA,GA0JA,SAAgB01D,EAAiBhgD,GAE/B,OADAhL,OAAOgL,EAAK/K,QACJ+K,EAAK3K,WAAW,IACtB,QACE,OAAQ2K,GACN,IAAK,WAAY,OAAOga,EAAMnQ,SAC9B,IAAK,KAAM,OAAOmQ,EAAMimC,GACxB,IAAK,QAAS,OAAOjmC,EAAMkmC,MAC3B,IAAK,QAAS,OAAOlmC,EAAMmmC,MAE7B,MAEF,QACE,OAAQngD,GACN,IAAK,QAAS,OAAOga,EAAMiP,MAE7B,MAEF,QACE,OAAQjpB,GACN,IAAK,OAAQ,OAAOga,EAAMomC,KAC1B,IAAK,QAAS,OAAOpmC,EAAMqmC,MAC3B,IAAK,QAAS,OAAOrmC,EAAM/T,MAC3B,IAAK,WAAY,OAAO+T,EAAMkP,SAC9B,IAAK,QAAS,OAAOlP,EAAMnT,MAC3B,IAAK,cAAe,OAAOmT,EAAM/P,YAEnC,MAEF,SACE,OAAQjK,GACN,IAAK,WAAY,OAAOga,EAAMsmC,SAC9B,IAAK,UAAW,OAAOtmC,EAAMnN,QAC7B,IAAK,UAAW,OAAOmN,EAAMumC,QAC7B,IAAK,SAAU,OAAOvmC,EAAMwmC,OAC5B,IAAK,KAAM,OAAOxmC,EAAMmP,GAE1B,MAEF,SACE,OAAQnpB,GACN,IAAK,OAAQ,OAAOga,EAAMymC,KAC1B,IAAK,OAAQ,OAAOzmC,EAAMxL,KAC1B,IAAK,SAAU,OAAOwL,EAAM7d,OAC5B,IAAK,UAAW,OAAO6d,EAAM0mC,QAE/B,MAEF,SACE,OAAQ1gD,GACN,IAAK,QAAS,OAAOga,EAAMI,MAC3B,IAAK,UAAW,OAAOJ,EAAM2mC,QAC7B,IAAK,MAAO,OAAO3mC,EAAMwP,IACzB,IAAK,OAAQ,OAAOxP,EAAM4mC,KAC1B,IAAK,WAAY,OAAO5mC,EAAMjU,SAEhC,MAEF,SACE,OAAQ/F,GACN,IAAK,MAAO,OAAOga,EAAM9Q,IAE3B,MAEF,SACE,OAAQlJ,GACN,IAAK,KAAM,OAAOga,EAAM2P,GACxB,IAAK,aAAc,OAAO3P,EAAM6mC,WAChC,IAAK,SAAU,OAAO7mC,EAAMlc,OAC5B,IAAK,KAAM,OAAOkc,EAAM8mC,GACxB,IAAK,aAAc,OAAO9mC,EAAM2N,WAChC,IAAK,YAAa,OAAO3N,EAAMnG,UAC/B,IAAK,KAAM,OAAOmG,EAAM+mC,GAE1B,MAEF,SACE,OAAQ/gD,GACN,IAAK,QAAS,OAAOga,EAAMgnC,MAE7B,MAEF,SACE,OAAQhhD,GACN,IAAK,MAAO,OAAOga,EAAMinC,IAE3B,MAEF,SACE,OAAQjhD,GACN,IAAK,SAAU,OAAOga,EAAMknC,OAE9B,MAEF,SACE,OAAQlhD,GACN,IAAK,YAAa,OAAOga,EAAMzL,UAC/B,IAAK,MAAO,OAAOyL,EAAM6N,IACzB,IAAK,OAAQ,OAAO7N,EAAME,KAE5B,MAEF,SACE,OAAQla,GACN,IAAK,KAAM,OAAOga,EAAMmnC,GAE1B,MAEF,SACE,OAAQnhD,GACN,IAAK,UAAW,OAAOga,EAAMonC,QAC7B,IAAK,UAAW,OAAOpnC,EAAMqnC,QAC7B,IAAK,YAAa,OAAOrnC,EAAMsnC,UAC/B,IAAK,SAAU,OAAOtnC,EAAMunC,OAE9B,MAEF,SACE,OAAQvhD,GACN,IAAK,WAAY,OAAOga,EAAMvQ,SAC9B,IAAK,SAAU,OAAOuQ,EAAM6P,OAE9B,MAEF,SACE,OAAQ7pB,GACN,IAAK,MAAO,OAAOga,EAAM7Q,IACzB,IAAK,SAAU,OAAO6Q,EAAMzQ,OAC5B,IAAK,QAAS,OAAOyQ,EAAMY,MAC3B,IAAK,SAAU,OAAOZ,EAAM+P,OAE9B,MAEF,SACE,OAAQ/pB,GACN,IAAK,OAAQ,OAAOga,EAAMiO,KAC1B,IAAK,QAAS,OAAOjO,EAAMgQ,MAC3B,IAAK,OAAQ,OAAOhQ,EAAMG,KAC1B,IAAK,MAAO,OAAOH,EAAMiQ,IACzB,IAAK,OAAQ,OAAOjQ,EAAMwnC,KAC1B,IAAK,SAAU,OAAOxnC,EAAMynC,OAE9B,MAEF,SACE,OAAQzhD,GACN,IAAK,MAAO,OAAOga,EAAM0nC,IACzB,IAAK,OAAQ,OAAO1nC,EAAMmQ,KAE5B,MAEF,SACE,OAAQnqB,GACN,IAAK,QAAS,OAAOga,EAAMoQ,MAC3B,IAAK,OAAQ,OAAOpQ,EAAM2nC,KAE5B,MAEF,SACE,OAAQ3hD,GACN,IAAK,QAAS,OAAOga,EAAM4nC,OAKjC,OAAO5nC,EAAM1iB,QAGf,SAAgBuqD,EAAsBC,GACpC,OAAQA,GACN,KAAK9nC,EAAMnQ,SACX,KAAKmQ,EAAMimC,GACX,KAAKjmC,EAAM/P,YACX,KAAK+P,EAAMnN,QACX,KAAKmN,EAAMwmC,OACX,KAAKxmC,EAAM4mC,KACX,KAAK5mC,EAAMwP,IACX,KAAKxP,EAAM9Q,IACX,KAAK8Q,EAAM2N,WACX,KAAK3N,EAAM+mC,GACX,KAAK/mC,EAAMgnC,MACX,KAAKhnC,EAAMknC,OACX,KAAKlnC,EAAMzL,UACX,KAAKyL,EAAME,KACX,KAAKF,EAAMvQ,SACX,KAAKuQ,EAAM7Q,IACX,KAAK6Q,EAAMwnC,KACX,KAAKxnC,EAAMmQ,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYnQ,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAnwB,EAAAmwB,QAAAnwB,EAAAmwB,MAAK,KAwIjB,SAAY+lC,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAAl2D,EAAAk2D,qBAAAl2D,EAAAk2D,mBAAkB,KAM9Bl2D,EAAAm2D,mBAwKAn2D,EAAAg4D,wBAwBAh4D,EAAAk4D,4BAAA,SAA4Ch3D,GAE1C,OADAiK,OAAOjK,EAAKkK,QACJlK,EAAKsK,WAAW,IACtB,SAAiB,MAAe,UAARtK,EACxB,SAAiB,MAAe,OAARA,EACxB,SAAiB,MAAe,cAARA,EACxB,SAAiB,MAAe,QAARA,EACxB,SAAiB,MAAe,QAARA,EAE1B,OAAO,GAGTlB,EAAAm4D,sBAAA,SAAsCF,GACpC,OAAQA,GACN,KAAK9nC,EAAMwmC,OAAQ,MAAO,SAC1B,KAAKxmC,EAAM8mC,GAAI,MAAO,KACtB,KAAK9mC,EAAM2N,WAAY,MAAO,aAC9B,KAAK3N,EAAM6N,IAAK,MAAO,MACvB,KAAK7N,EAAMynC,OAAQ,MAAO,SAC1B,KAAKznC,EAAMmQ,KAAM,MAAO,OACxB,KAAKnQ,EAAM4nC,MAAO,MAAO,QACzB,KAAK5nC,EAAMioC,YAAa,MAAO,MAC/B,KAAKjoC,EAAMyN,MAAO,MAAO,IACzB,KAAKzN,EAAMkoC,SAAU,MAAO,IAC5B,KAAKloC,EAAMmoC,YAAa,MAAO,IAC/B,KAAKnoC,EAAMooC,gBAAiB,MAAO,KACnC,KAAKpoC,EAAMqoC,mBAAoB,MAAO,KACtC,KAAKroC,EAAMsoC,cAAe,MAAO,KACjC,KAAKtoC,EAAMuoC,mBAAoB,MAAO,KACtC,KAAKvoC,EAAMwoC,qBAAsB,MAAO,MACxC,KAAKxoC,EAAMyoC,0BAA2B,MAAO,MAC7C,KAAKzoC,EAAMnjB,KAAM,MAAO,IACxB,KAAKmjB,EAAMjjB,MAAO,MAAO,IACzB,KAAKijB,EAAM0oC,kBAAmB,MAAO,KACrC,KAAK1oC,EAAM2oC,SAAU,MAAO,IAC5B,KAAK3oC,EAAM4oC,MAAO,MAAO,IACzB,KAAK5oC,EAAM6oC,QAAS,MAAO,IAC3B,KAAK7oC,EAAM8oC,UAAW,MAAO,KAC7B,KAAK9oC,EAAM+oC,YAAa,MAAO,KAC/B,KAAK/oC,EAAMgpC,kBAAmB,MAAO,KACrC,KAAKhpC,EAAMipC,wBAAyB,MAAO,KAC3C,KAAKjpC,EAAMkpC,oCAAqC,MAAO,MACvD,KAAKlpC,EAAMmpC,UAAW,MAAO,IAC7B,KAAKnpC,EAAMopC,IAAK,MAAO,IACvB,KAAKppC,EAAMqpC,MAAO,MAAO,IACzB,KAAKrpC,EAAMspC,YAAa,MAAO,IAC/B,KAAKtpC,EAAMupC,MAAO,MAAO,IACzB,KAAKvpC,EAAMwpC,oBAAqB,MAAO,KACvC,KAAKxpC,EAAMypC,QAAS,MAAO,KAC3B,KAAKzpC,EAAM0pC,OAAQ,MAAO,IAC1B,KAAK1pC,EAAM2pC,YAAa,MAAO,KAC/B,KAAK3pC,EAAM4pC,aAAc,MAAO,KAChC,KAAK5pC,EAAM6pC,gBAAiB,MAAO,KACnC,KAAK7pC,EAAM8pC,yBAA0B,MAAO,MAC5C,KAAK9pC,EAAM+pC,aAAc,MAAO,KAChC,KAAK/pC,EAAMgqC,eAAgB,MAAO,KAClC,KAAKhqC,EAAMiqC,yBAA0B,MAAO,MAC5C,KAAKjqC,EAAMkqC,+BAAgC,MAAO,MAClD,KAAKlqC,EAAMmqC,2CAA4C,MAAO,OAC9D,KAAKnqC,EAAMoqC,iBAAkB,MAAO,KACpC,KAAKpqC,EAAMqqC,WAAY,MAAO,KAC9B,KAAKrqC,EAAMsqC,aAAc,MAAO,KAChC,QAEE,OADAtvD,QAAO,GACA,KAKb,IAAA8N,EAAA,WAUE,SAAAA,EAAYvJ,EAAgB4f,EAAYC,GA6CxCjvB,KAAAkoB,aAAsB,EA5CpBloB,KAAKoP,OAASA,EACdpP,KAAKgvB,MAAQA,EACbhvB,KAAKivB,IAAMA,EA2Cf,OAxCStW,EAAAC,KAAP,SAAYwhD,EAAUC,GACpB,GAAID,EAAEhrD,QAAUirD,EAAEjrD,OAAQ,MAAM,IAAIiK,MAAM,mBAC1C,OAAO,IAAIV,EAAMyhD,EAAEhrD,OACjBgrD,EAAEprC,MAAQqrC,EAAErrC,MAAQorC,EAAEprC,MAAQqrC,EAAErrC,MAChCorC,EAAEnrC,IAAMorC,EAAEprC,IAAMmrC,EAAEnrC,IAAMorC,EAAEprC,MAI9BluB,OAAAC,eAAI2X,EAAA1W,UAAA,UAAO,KAAX,WACE,OAAO,IAAI0W,EAAM3Y,KAAKoP,OAAQpP,KAAKgvB,MAAOhvB,KAAKgvB,wCAGjDjuB,OAAAC,eAAI2X,EAAA1W,UAAA,QAAK,KAAT,WACE,OAAO,IAAI0W,EAAM3Y,KAAKoP,OAAQpP,KAAKivB,IAAKjvB,KAAKivB,sCAG/CluB,OAAAC,eAAI2X,EAAA1W,UAAA,OAAI,KAAR,WAGE,IAFA,IAAI4T,EAAO7V,KAAKoP,OAAOyG,KACnBuS,EAAO,EACFmW,EAAMv+B,KAAKgvB,MAAOuP,GAAO,IAAKA,EACb,IAApB1oB,EAAK3K,WAAWqzB,IAA2BnW,IAEjD,OAAOA,mCAGTrnB,OAAAC,eAAI2X,EAAA1W,UAAA,SAAM,KAAV,WAGE,IAFA,IAAI4T,EAAO7V,KAAKoP,OAAOyG,KACnBwS,EAAS,EACJkW,EAAMv+B,KAAKgvB,MAAQ,EAAGuP,GAAO,GACZ,IAApB1oB,EAAK3K,WAAWqzB,KADqBA,IAEvClW,EAEJ,OAAOA,mCAGT1P,EAAA1W,UAAA+b,SAAA,WACE,OAAOhe,KAAKoP,OAAOyG,KAAK8L,UAAU3hB,KAAKgvB,MAAOhvB,KAAKivB,MAIvDtW,EAxDA,GAAajZ,EAAAiZ,QAgEb,IAAA2hD,EAAA,SAAA/sD,GAgBE,SAAA+sD,EAAYlrD,EAAgB5B,QAAA,IAAAA,MAAA,MAA5B,IAAAC,EACEF,EAAA/M,KAAAR,KAAMwN,IAAYxN,KAdpByN,EAAAwhB,IAAW,EAEXxhB,EAAA8wB,IAAW,EACX9wB,EAAAkqD,OAAgB,EAChBlqD,EAAA8sD,SAAgB,EAEhB9sD,EAAA+sD,WAAoB,EACpB/sD,EAAAgtD,aAAoB,EACpBhtD,EAAAitD,oBAA2B,EAE3BjtD,EAAAktD,UAAmC,KAMjCltD,EAAK2B,OAASA,EACd3B,EAAK8wB,IAAM,EACX9wB,EAAKwhB,IAAM7f,EAAOyG,KAAK/K,OACvB2C,EAAKD,YAAcA,GAAe,IAAIvG,MAEtC,IAAIgoB,EAAMxhB,EAAKwhB,IACXpZ,EAAOzG,EAAOyG,KAWlB,GAPEpI,EAAK8wB,IAAMtP,GACc,OAAzBpZ,EAAK3K,WAAWuC,EAAK8wB,QAEnB9wB,EAAK8wB,IAKP9wB,EAAK8wB,IAAM,EAAItP,GACU,IAAzBpZ,EAAK3K,WAAWuC,EAAK8wB,MACQ,IAA7B1oB,EAAK3K,WAAWuC,EAAK8wB,IAAM,GAG3B,IADA9wB,EAAK8wB,KAAO,EAEV9wB,EAAK8wB,IAAMtP,GACc,IAAzBpZ,EAAK3K,WAAWuC,EAAK8wB,QAEnB9wB,EAAK8wB,aA8iCf,OA5lC+BzvB,EAAAwrD,EAAA/sD,GAoD7B+sD,EAAAr4D,UAAA6S,KAAA,SAAK8lD,GAEH,YAFG,IAAAA,MAAyChF,EAAmBQ,SAC/Dp2D,KAAKw6D,WAAa,EACXx6D,KAAK23D,MAAQ33D,KAAK66D,WAAWD,IAG9BN,EAAAr4D,UAAA44D,WAAR,SACED,EACAE,QADA,IAAAF,MAAyChF,EAAmBQ,cAC5D,IAAA0E,MAAsB13D,IAAIwhD,WAI1B,IAFA,IAAI31B,EAAMjvB,KAAKivB,IACXpZ,EAAO7V,KAAKoP,OAAOyG,KAChB7V,KAAKu+B,IAAMtP,GAAK,CACrBjvB,KAAKu6D,SAAWv6D,KAAKu+B,IACrB,IAAI79B,EAAImV,EAAK3K,WAAWlL,KAAKu+B,KAC7B,OAAQ79B,GACN,QACE,OACIV,KAAKu+B,IAAMtP,GACY,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,MACpB,MAGL,QACA,OACA,QACA,QACA,UACIv+B,KAAKu+B,IACP,MAEF,QAEE,QADEv+B,KAAKu+B,IAELu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,GACR,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IAELu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,GACR,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAMyoC,2BAERzoC,EAAMuoC,oBAERvoC,EAAMspC,YAEf,QACA,QACA,QACE,OAAOtpC,EAAMkrC,cAEf,QAEE,QADE/6D,KAAKu+B,IAELu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,GACR,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAMgqC,gBAERhqC,EAAM6oC,QAEf,QAEE,KADE14D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IACA1O,EAAMwpC,oBAEf,GAAO,IAAH2B,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAMoqC,iBAGjB,OAAOpqC,EAAMmpC,UAEf,QAEE,QADEh5D,KAAKu+B,IACA1O,EAAMorC,UAEf,QAEE,QADEj7D,KAAKu+B,IACA1O,EAAMqrC,WAEf,QAEE,KADEl7D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IACA1O,EAAM6pC,gBAEf,GAAO,IAAHsB,EAEF,QADEh7D,KAAKu+B,IAELu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,GACR,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAM8pC,0BAER9pC,EAAM0oC,kBAGjB,OAAO1oC,EAAM2oC,SAEf,QAEE,KADEx4D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IACA1O,EAAM8oC,UAEf,GAAO,IAAHqC,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAM2pC,YAGjB,OAAO3pC,EAAMnjB,KAEf,QAEE,QADE1M,KAAKu+B,IACA1O,EAAMyN,MAEf,QAEE,KADEt9B,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IACA1O,EAAM+oC,YAEf,GAAO,IAAHoC,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAM4pC,aAGjB,OAAO5pC,EAAMjjB,MAEf,QAEE,KADE5M,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CACxC,IAAI+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,KAC/B,GAAI10B,EAAAsxD,eAAeH,GAEjB,QADEh7D,KAAKu+B,IACA1O,EAAMurC,aAEf,GACEN,EAAiB,GAAK96D,KAAKu+B,IAAM,EAAItP,GAClC,IAAH+rC,GAC6B,IAA7BnlD,EAAK3K,WAAWlL,KAAKu+B,IAAM,GAG3B,OADAv+B,KAAKu+B,KAAO,EACL1O,EAAMioC,YAGjB,OAAOjoC,EAAMwrC,IAEf,QACE,IAAIC,EAAkBt7D,KAAKu+B,IAE3B,KADEv+B,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MACJ,CACzB,IAAIrM,EAActoB,EAAAkzB,YAAYy+B,KAQ9B,IANEv7D,KAAKu+B,IAAM,EAAItP,GACc,IAA7BpZ,EAAK3K,WAAWlL,KAAKu+B,IAAM,OAEzBv+B,KAAKu+B,IACPrM,EAActoB,EAAAkzB,YAAY0+B,UAEnBx7D,KAAKu+B,IAAMtP,GAClB,GAA6B,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,KAA2B,GAChDv+B,KAAKu+B,IACP,MAGAv+B,KAAK26D,WACP36D,KAAK26D,UACHzoC,EACArc,EAAK8L,UAAU25C,EAAiBt7D,KAAKu+B,KACrCv+B,KAAK+P,MAAMurD,EAAiBt7D,KAAKu+B,MAGrC,MAEF,GAAO,IAAHy8B,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJz7D,KAAKu+B,IAAMtP,GAElB,GACG,KAFHvuB,EAAImV,EAAK3K,WAAWlL,KAAKu+B,OAGvBv+B,KAAKu+B,IAAM,EAAItP,GACc,IAA7BpZ,EAAK3K,WAAWlL,KAAKu+B,IAAM,GAC3B,CACAv+B,KAAKu+B,KAAO,EACZk9B,GAAS,EACT,MAGCA,EAKMz7D,KAAK26D,WACd36D,KAAK26D,UACH/wD,EAAAkzB,YAAY+B,MACZhpB,EAAK8L,UAAU25C,EAAiBt7D,KAAKu+B,KACrCv+B,KAAK+P,MAAMurD,EAAiBt7D,KAAKu+B,MARnCv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf17D,KAAK+P,MAAM/P,KAAKu+B,KAAM,MAS1B,MAEF,GAAO,IAAHy8B,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAM+pC,aAGjB,OAAO/pC,EAAM4oC,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOz4D,KAAK27D,cACR9rC,EAAM+rC,eACN/rC,EAAMurC,aAEZ,QAEE,QADEp7D,KAAKu+B,IACA1O,EAAMgsC,MAEf,QAEE,QADE77D,KAAKu+B,IACA1O,EAAMisC,UAEf,QAEE,KADE97D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IAELu8B,EAAiB,GACjB96D,KAAKu+B,IAAMtP,GACc,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAMiqC,0BAERjqC,EAAMgpC,kBAEf,GAAO,IAAHmC,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAMooC,gBAGjB,OAAOpoC,EAAMkoC,SAEf,QAEE,KADE/3D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IAELu8B,EAAiB,GACjB96D,KAAKu+B,IAAMtP,GACc,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAMwoC,sBAERxoC,EAAMsoC,cAEf,GAAO,IAAH6C,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAMksC,mBAGjB,OAAOlsC,EAAM0pC,OAEf,QAEE,KADEv5D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MACE,CAE/B,KADEv+B,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,KADP+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAGzB,QADEv+B,KAAKu+B,IAELu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,GACR,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAMmqC,4CAERnqC,EAAMkpC,oCAEf,GAAO,IAAHiC,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAMkqC,+BAGjB,OAAOlqC,EAAMipC,wBAEf,GAAO,IAAHkC,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAMqoC,mBAGjB,OAAOroC,EAAMmoC,YAEf,QAEE,QADEh4D,KAAKu+B,IACA1O,EAAMmsC,SAEf,QAEE,QADEh8D,KAAKu+B,IACA1O,EAAMosC,YAEf,QAEE,QADEj8D,KAAKu+B,IACA1O,EAAMqsC,aAEf,QAEE,QADEl8D,KAAKu+B,IAELu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,GACR,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACA1O,EAAMsqC,cAERtqC,EAAMqpC,MAEf,SAEE,QADEl5D,KAAKu+B,IACA1O,EAAMssC,UAEf,SAEE,KADEn8D,KAAKu+B,IACHu8B,EAAiB,GAAK96D,KAAKu+B,IAAMtP,EAAK,CAExC,GAAO,MADH+rC,EAAMnlD,EAAK3K,WAAWlL,KAAKu+B,MAG7B,QADEv+B,KAAKu+B,IACA1O,EAAMypC,QAEf,GAAO,IAAH0B,EAEF,QADEh7D,KAAKu+B,IACA1O,EAAMqqC,WAGjB,OAAOrqC,EAAMopC,IAEf,SAEE,QADEj5D,KAAKu+B,IACA1O,EAAMusC,WAEf,SAEE,QADEp8D,KAAKu+B,IACA1O,EAAMupC,MAEf,QAEE,QADEp5D,KAAKu+B,IACA1O,EAAMwsC,GAEf,QACE,GAAIxyD,EAAAyyD,kBAAkB57D,GAAI,CACxB,GAAImJ,EAAA0yD,mBAAmB77D,GAAI,CAEzB,IADA,IAAI87D,EAAYx8D,KAAKu+B,MAEjBv+B,KAAKu+B,IAAMtP,GACbplB,EAAA4yD,iBAAiB/7D,EAAImV,EAAK3K,WAAWlL,KAAKu+B,OAE1C,IAAK10B,EAAA0yD,mBAAmB77D,GAEtB,OADAV,KAAKu+B,IAAMi+B,EACJ3sC,EAAMM,WAGjB,IACIusC,EAAe7G,EADDhgD,EAAK8L,UAAU66C,EAAWx8D,KAAKu+B,MAEjD,GACEm+B,IAAiB7sC,EAAM1iB,SACvBytD,IAAuBhF,EAAmB+G,SAExC/B,IAAuBhF,EAAmBgH,SAC1ClF,EAAsBgF,IAGxB,OAAOA,EAET18D,KAAKu+B,IAAMi+B,EAEb,OAAO3sC,EAAMM,WACR,GAAItmB,EAAAgzD,aAAan8D,GAAI,GACxBV,KAAKu+B,IACP,MAOF,OALAv+B,KAAKuV,MACH7L,EAAA8L,eAAesnD,kBACf98D,KAAK+P,MAAM/P,KAAKu+B,IAAKv+B,KAAKu+B,IAAM,MAEhCv+B,KAAKu+B,IACA1O,EAAM1iB,SAInB,OAAO0iB,EAAMktC,WAGfzC,EAAAr4D,UAAA+6D,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyChF,EAAmBQ,cAC5D,IAAA8G,MAAyB95D,IAAIwhD,WAE7B,IAAI/uC,EAAO7V,KAAKoP,OAAOyG,KACvB,GAAI7V,KAAKw6D,UAAY,EAAG,CACtB,IAAIgC,EAAYx8D,KAAKu+B,IACjB4+B,EAAcn9D,KAAK23D,MACnByF,EAAiBp9D,KAAKu6D,SAG1B,GAFAv6D,KAAKw6D,UAAYx6D,KAAK66D,WAAWD,EAAoBsC,GACrDl9D,KAAKy6D,aAAez6D,KAAKu6D,SACrB0C,EAAgB,CAClBj9D,KAAK06D,oBAAqB,EAC1B,IAAK,IAAIn8B,EAAMi+B,EAAWvtC,EAAMjvB,KAAKy6D,aAAcl8B,EAAMtP,IAAOsP,EAC9D,GAAI10B,EAAAqlB,YAAYrZ,EAAK3K,WAAWqzB,IAAO,CACrCv+B,KAAK06D,oBAAqB,EAC1B,OAIN16D,KAAKu+B,IAAMi+B,EACXx8D,KAAK23D,MAAQwF,EACbn9D,KAAKu6D,SAAW6C,EAElB,OAAOp9D,KAAKw6D,WAGdF,EAAAr4D,UAAAo7D,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyChF,EAAmBgH,QAClE58D,KAAKs9D,KAAKztC,EAAMM,WAAYyqC,IAGrCN,EAAAr4D,UAAAq7D,KAAA,SAAK3F,EAAciD,QAAA,IAAAA,MAAyChF,EAAmBQ,SAC7E,IAAIoG,EAAYx8D,KAAKu+B,IACjB4+B,EAAcn9D,KAAK23D,MACnByF,EAAiBp9D,KAAKu6D,SACtB2C,EAAoB95D,IAAIwhD,UAC5B,OAAQ+S,GACN,KAAK9nC,EAAMmoC,YACTkF,EAAoB,EAKxB,OADAl9D,KAAK23D,MAAQ33D,KAAK66D,WAAWD,EAAoBsC,GAC7Cl9D,KAAK23D,OAASA,GAChB33D,KAAKw6D,WAAa,GACX,IAEPx6D,KAAKu+B,IAAMi+B,EACXx8D,KAAK23D,MAAQwF,EACbn9D,KAAKu6D,SAAW6C,GACT,IAIX9C,EAAAr4D,UAAAs7D,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMj/B,IAAMv+B,KAAKu+B,IACjBi/B,EAAM7F,MAAQ33D,KAAK23D,MACnB6F,EAAMjD,SAAWv6D,KAAKu6D,SACfiD,GAGTlD,EAAAr4D,UAAA07D,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAr4D,UAAA27D,MAAA,SAAMJ,GACJx9D,KAAKu+B,IAAMi/B,EAAMj/B,IACjBv+B,KAAK23D,MAAQ6F,EAAM7F,MACnB33D,KAAKu6D,SAAWiD,EAAMjD,SACtBv6D,KAAKw6D,WAAa,GAGpBF,EAAAr4D,UAAA8N,MAAA,SAAMif,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQhvB,KAAKu6D,SACbtrC,EAAMjvB,KAAKu+B,KACFtP,EAAM,IACfA,EAAMD,GAED,IAAIrW,EAAM3Y,KAAKoP,OAAQ4f,EAAOC,IAGvCqrC,EAAAr4D,UAAA47D,eAAA,WAIE,IAHA,IAAIhoD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbtP,EAAMjvB,KAAKivB,MAEXjvB,KAAKu+B,IAAMtP,GACbplB,EAAA4yD,iBAAiB5mD,EAAK3K,WAAWlL,KAAKu+B,QAExC,OAAO1oB,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,MAGpC+7B,EAAAr4D,UAAAgiD,WAAA,WAME,IALA,IAAIpuC,EAAO7V,KAAKoP,OAAOyG,KACnBioD,EAAQjoD,EAAK3K,WAAWlL,KAAKu+B,OAC7BvP,EAAQhvB,KAAKu+B,IACbtP,EAAMjvB,KAAKivB,IACXgnB,EAAS,KACA,CACX,GAAIj2C,KAAKu+B,KAAOtP,EAAK,CACnBgnB,GAAUpgC,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,KACrCv+B,KAAKuV,MACH7L,EAAA8L,eAAeuoD,4BACf/9D,KAAK+P,MAAMif,EAAQ,EAAGC,IAExB,MAEF,IAAIvuB,EAAImV,EAAK3K,WAAWlL,KAAKu+B,KAC7B,GAAI79B,GAAKo9D,EAAO,CACd7nB,GAAUpgC,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,OACrC,MAEF,GAAK,IAAD79B,EAAJ,CAMA,GAAImJ,EAAAqlB,YAAYxuB,IAAW,IAALo9D,EAA4B,CAChD7nB,GAAUpgC,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,KACrCv+B,KAAKuV,MACH7L,EAAA8L,eAAeuoD,4BACf/9D,KAAK+P,MAAMif,EAAQ,EAAGhvB,KAAKu+B,MAE7B,QAEAv+B,KAAKu+B,SAbL0X,GAAUpgC,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,KACrC0X,GAAUj2C,KAAKg+D,qBACfhvC,EAAQhvB,KAAKu+B,IAajB,OAAO0X,GAGTqkB,EAAAr4D,UAAA+7D,mBAAA,WACE,IAAI/uC,EAAMjvB,KAAKivB,IACf,KAAMjvB,KAAKu+B,KAAOtP,EAKhB,OAJAjvB,KAAKuV,MACH7L,EAAA8L,eAAeyoD,uBACfj+D,KAAK+P,MAAMkf,IAEN,GAGT,IAAIpZ,EAAO7V,KAAKoP,OAAOyG,KACnBnV,EAAImV,EAAK3K,WAAWlL,KAAKu+B,OAC7B,OAAQ79B,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKu+B,IAAMtP,GACc,KAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IACAv+B,KAAKk+D,6BAEPl+D,KAAKm+D,oBAEd,QAEIn+D,KAAKu+B,IAAMtP,GACc,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,QAEnBv+B,KAAKu+B,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOv3B,OAAOo3D,aAAa19D,KAIxC45D,EAAAr4D,UAAAo8D,kBAAA,WAKE,IAJA,IAAIxoD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbtP,EAAMjvB,KAAKivB,IACXqvC,GAAU,IACD,CACX,GAAIt+D,KAAKu+B,KAAOtP,EAAK,CACnBjvB,KAAKuV,MACH7L,EAAA8L,eAAe+oD,wCACfv+D,KAAK+P,MAAMif,EAAOC,IAEpB,MAEF,GAA6B,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,KAAzB,CAKA,IAAI79B,EAAImV,EAAK3K,WAAWlL,KAAKu+B,KAC7B,IAAK+/B,GAAY,IAAD59D,EAAqB,MACrC,GAAImJ,EAAAqlB,YAAYxuB,GAAI,CAClBV,KAAKuV,MACH7L,EAAA8L,eAAe+oD,wCACfv+D,KAAK+P,MAAMif,EAAOhvB,KAAKu+B,MAEzB,QAEAv+B,KAAKu+B,IACP+/B,GAAU,QAdNt+D,KAAKu+B,IACP+/B,GAAU,EAed,OAAOzoD,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,MAGpC+7B,EAAAr4D,UAAAu8D,gBAAA,WAKE,IAJA,IAAI3oD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbtP,EAAMjvB,KAAKivB,IACXpf,EAAQ,EACL7P,KAAKu+B,IAAMtP,GAAK,CACrB,IAAIvuB,EAASmV,EAAK3K,WAAWlL,KAAKu+B,KAClC,IAAK10B,EAAA4yD,iBAAiB/7D,GAAI,MAI1B,SAHEV,KAAKu+B,IAGC79B,GACN,SACEmP,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF7P,KAAKuV,MACH7L,EAAA8L,eAAeipD,iCACfz+D,KAAK+P,MAAMif,EAAOhvB,KAAKu+B,MAGpB1oB,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,MAGpC+7B,EAAAr4D,UAAA05D,YAAA,WACE,IAAI1sC,EAAMjvB,KAAKivB,IACXpZ,EAAO7V,KAAKoP,OAAOyG,KACvB,GAAI7V,KAAKu+B,IAAM,EAAItP,GAAgC,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,KAC7C,OAAQ1oB,EAAK3K,WAAWlL,KAAKu+B,IAAM,IACjC,SACA,QACA,QACA,QACA,SACA,QAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMv+B,KAAKu+B,IACRA,EAAMtP,GAAK,CAChB,IAAIvuB,EAAImV,EAAK3K,WAAWqzB,GACxB,GAAK,IAAD79B,GAAsB,KAADA,GAAoB,IAADA,EAAiB,OAAO,EACpE,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7D69B,IAEF,OAAO,GAGT+7B,EAAAr4D,UAAAy8D,YAAA,WACE,IAAI7oD,EAAO7V,KAAKoP,OAAOyG,KACvB,GAAI7V,KAAKu+B,IAAM,EAAIv+B,KAAKivB,KAAgC,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,KAAqB,CACvE,OAAQ1oB,EAAK3K,WAAWlL,KAAKu+B,IAAM,IACjC,SACA,QAEE,OADAv+B,KAAKu+B,KAAO,EACLv+B,KAAK2+D,iBAEd,QACA,QAEE,OADA3+D,KAAKu+B,KAAO,EACLv+B,KAAK4+D,oBAEd,SACA,QAEE,OADA5+D,KAAKu+B,KAAO,EACLv+B,KAAK6+D,mBAGhB,GAAIh1D,EAAAi1D,aAAajpD,EAAK3K,WAAWlL,KAAKu+B,IAAM,IAAK,CAC/C,IAAIvP,EAAQhvB,KAAKu+B,MACfv+B,KAAKu+B,IACP,IAAIj9B,EAAQtB,KAAK6+D,mBAKjB,OAJA7+D,KAAKuV,MACH7L,EAAA8L,eAAeupD,8CACf/+D,KAAK+P,MAAMif,EAAOhvB,KAAKu+B,MAElBj9B,GAGX,OAAOtB,KAAKg/D,sBAGd1E,EAAAr4D,UAAA08D,eAAA,WAOE,IANA,IAAI9oD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbj9B,EAAQ+Q,QAAQ,GAChB4sD,EAAQ5sD,QAAQ,GAChB6sD,EAASlwC,EACTC,EAAMjvB,KAAKivB,IACRjvB,KAAKu+B,IAAMtP,GAAK,CACrB,IAAIsP,EAAMv+B,KAAKu+B,IACX79B,EAAImV,EAAK3K,WAAWqzB,GACxB,GAAI79B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ69D,QACNC,QAAQ99D,EAAO29D,GACf5sD,QAAQ3R,EAAC,UAEL,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQ69D,QACNC,QAAQ99D,EAAO29D,GACf5sD,QAAQ,GAAK3R,EAAC,UAEX,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQ69D,QACNC,QAAQ99D,EAAO29D,GACf5sD,QAAQ,GAAK3R,EAAC,SAEX,IAAK,IAADA,EAWT,MAVIw+D,GAAU3gC,GACZv+B,KAAKuV,MACH2pD,GAAUlwC,EACNtlB,EAAA8L,eAAe6pD,wCACf31D,EAAA8L,eAAe8pD,0DACnBt/D,KAAK+P,MAAMwuB,IAGf2gC,EAAS3gC,EAAM,EAIjBv+B,KAAKu+B,IAAMA,EAAM,EAanB,OAXIv+B,KAAKu+B,KAAOvP,EACdhvB,KAAKuV,MACH7L,EAAA8L,eAAe+pD,2BACfv/D,KAAK+P,MAAMif,IAEJkwC,GAAUl/D,KAAKu+B,KACxBv+B,KAAKuV,MACH7L,EAAA8L,eAAe6pD,wCACfr/D,KAAK+P,MAAMmvD,EAAS,IAGjB59D,GAGTg5D,EAAAr4D,UAAA+8D,mBAAA,WAOE,IANA,IAAInpD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbtP,EAAMjvB,KAAKivB,IACX3tB,EAAQ+Q,QAAQ,GAChBmtD,EAASntD,QAAQ,IACjB6sD,EAASlwC,EACNhvB,KAAKu+B,IAAMtP,GAAK,CACrB,IAAIsP,EAAMv+B,KAAKu+B,IACX79B,EAAImV,EAAK3K,WAAWqzB,GACxB,GAAI79B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ69D,QACNM,QAAQn+D,EAAOk+D,GACfntD,QAAQ3R,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIw+D,GAAU3gC,GACZv+B,KAAKuV,MACH2pD,GAAUlwC,EACNtlB,EAAA8L,eAAe6pD,wCACf31D,EAAA8L,eAAe8pD,0DACnBt/D,KAAK+P,MAAMwuB,IAGf2gC,EAAS3gC,EAAM,EAIjBv+B,KAAKu+B,IAAMA,EAAM,EAanB,OAXIv+B,KAAKu+B,KAAOvP,EACdhvB,KAAKuV,MACH7L,EAAA8L,eAAekqD,eACf1/D,KAAK+P,MAAMif,IAEJkwC,GAAUl/D,KAAKu+B,KACxBv+B,KAAKuV,MACH7L,EAAA8L,eAAe6pD,wCACfr/D,KAAK+P,MAAMmvD,EAAS,IAGjB59D,GAGTg5D,EAAAr4D,UAAA48D,iBAAA,WAOE,IANA,IAAIhpD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbj9B,EAAQ+Q,QAAQ,GAChBstD,EAAQttD,QAAQ,GAChB6sD,EAASlwC,EACTC,EAAMjvB,KAAKivB,IACRjvB,KAAKu+B,IAAMtP,GAAK,CACrB,IAAIsP,EAAMv+B,KAAKu+B,IACX79B,EAAImV,EAAK3K,WAAWqzB,GACxB,GAAI79B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ69D,QACNC,QAAQ99D,EAAOq+D,GACfttD,QAAQ3R,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIw+D,GAAU3gC,GACZv+B,KAAKuV,MACH2pD,GAAUlwC,EACNtlB,EAAA8L,eAAe6pD,wCACf31D,EAAA8L,eAAe8pD,0DACnBt/D,KAAK+P,MAAMwuB,IAGf2gC,EAAS3gC,EAAM,IAIfv+B,KAAKu+B,IAaT,OAXIv+B,KAAKu+B,KAAOvP,EACdhvB,KAAKuV,MACH7L,EAAA8L,eAAeoqD,qBACf5/D,KAAK+P,MAAMif,IAEJkwC,GAAUl/D,KAAKu+B,KACxBv+B,KAAKuV,MACH7L,EAAA8L,eAAe6pD,wCACfr/D,KAAK+P,MAAMmvD,EAAS,IAGjB59D,GAGTg5D,EAAAr4D,UAAA28D,kBAAA,WAOE,IANA,IAAI/oD,EAAO7V,KAAKoP,OAAOyG,KACnBmZ,EAAQhvB,KAAKu+B,IACbj9B,EAAQ+Q,QAAQ,GAChBwtD,EAAQxtD,QAAQ,GAChB6sD,EAASlwC,EACTC,EAAMjvB,KAAKivB,IACRjvB,KAAKu+B,IAAMtP,GAAK,CACrB,IAAIsP,EAAMv+B,KAAKu+B,IACX79B,EAAImV,EAAK3K,WAAWqzB,GACxB,GAAK,IAAD79B,EAEFY,EAAQ89D,QAAQ99D,EAAOu+D,QAClB,GAAK,IAADn/D,EAETY,EAAQ69D,QACNC,QAAQ99D,EAAOu+D,GACfA,OAEG,IAAK,IAADn/D,EAWT,MAVIw+D,GAAU3gC,GACZv+B,KAAKuV,MACH2pD,GAAUlwC,EACNtlB,EAAA8L,eAAe6pD,wCACf31D,EAAA8L,eAAe8pD,0DACnBt/D,KAAK+P,MAAMwuB,IAGf2gC,EAAS3gC,EAAM,EAIjBv+B,KAAKu+B,IAAMA,EAAM,EAanB,OAXIv+B,KAAKu+B,KAAOvP,EACdhvB,KAAKuV,MACH7L,EAAA8L,eAAesqD,sBACf9/D,KAAK+P,MAAMif,IAEJkwC,GAAUl/D,KAAKu+B,KACxBv+B,KAAKuV,MACH7L,EAAA8L,eAAe6pD,wCACfr/D,KAAK+P,MAAMmvD,EAAS,IAGjB59D,GAGTg5D,EAAAr4D,UAAA89D,UAAA,WAWE,OAAO//D,KAAKggE,oBAGd1F,EAAAr4D,UAAA+9D,iBAAA,WAKE,IAHA,IAAIhxC,EAAQhvB,KAAKu+B,IACbtP,EAAMjvB,KAAKivB,IACXpZ,EAAO7V,KAAKoP,OAAOyG,KAChB7V,KAAKu+B,IAAMtP,GAAOplB,EAAAsxD,eAAetlD,EAAK3K,WAAWlL,KAAKu+B,SACzDv+B,KAAKu+B,IAET,GAAIv+B,KAAKu+B,IAAMtP,GAAgC,IAAzBpZ,EAAK3K,WAAWlL,KAAKu+B,KAEzC,MADEv+B,KAAKu+B,IACAv+B,KAAKu+B,IAAMtP,GAAOplB,EAAAsxD,eAAetlD,EAAK3K,WAAWlL,KAAKu+B,SACzDv+B,KAAKu+B,IAGX,GAAIv+B,KAAKu+B,IAAMtP,EAAK,CAClB,IAAIvuB,EAAImV,EAAK3K,WAAWlL,KAAKu+B,KAC7B,GAAK,KAAD79B,GAAoB,IAADA,EAQrB,OANIV,KAAKu+B,IAAMtP,GACkB,KAA9BvuB,EAAImV,EAAK3K,WAAWlL,KAAKu+B,OAA4B,IAAD79B,GACrDmJ,EAAAsxD,eAAetlD,EAAK3K,WAAWlL,KAAKu+B,IAAM,QAExCv+B,KAAKu+B,IAEFv+B,KAAKu+B,IAAMtP,GAAOplB,EAAAsxD,eAAetlD,EAAK3K,WAAWlL,KAAKu+B,SACzDv+B,KAAKu+B,IAIb,OAAO0hC,WAAWpqD,EAAK8L,UAAUqN,EAAOhvB,KAAKu+B,OAG/C+7B,EAAAr4D,UAAAi+D,aAAA,WACE,MAAM,IAAI7mD,MAAM,oBAGlBihD,EAAAr4D,UAAAk8D,kBAAA,WAKE,IAJA,IAAIgC,EAAS,EACT7+D,EAAQ,EACR2tB,EAAMjvB,KAAKivB,IACXpZ,EAAO7V,KAAKoP,OAAOyG,KAChB7V,KAAKu+B,IAAMtP,GAAK,CACrB,IAAIvuB,EAAImV,EAAK3K,WAAWlL,KAAKu+B,OAC7B,GAAI79B,GAAC,IAAmBA,GAAC,GACvBY,GAASA,GAAS,GAAKZ,EAAC,QACnB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKuV,MACH7L,EAAA8L,eAAe+pD,2BACfv/D,KAAK+P,MAAM/P,KAAKu+B,IAAM,EAAGv+B,KAAKu+B,MAEzB,GANPj9B,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVy/D,EAAa,MAErB,OAAIA,GACFngE,KAAKuV,MACH7L,EAAA8L,eAAeyoD,uBACfj+D,KAAK+P,MAAM/P,KAAKu+B,MAEX,IAEFv3B,OAAOo3D,aAAa98D,IAGrBg5D,EAAAr4D,UAAAi8D,0BAAR,WACE,IAAIlvC,EAAQhvB,KAAKu+B,IACbj9B,EAAQtB,KAAK2+D,iBACbyB,EAAUlgB,QAAQ5+C,GAClB++D,GAAU,EAEdx1D,QAAQs1C,SAAS7+C,IACb8+D,EAAU,UACZpgE,KAAKuV,MACH7L,EAAA8L,eAAe8qD,4EACftgE,KAAK+P,MAAMif,EAAOhvB,KAAKu+B,MAEzB8hC,GAAU,GAGZ,IAAIpxC,EAAMjvB,KAAKivB,IACXpZ,EAAO7V,KAAKoP,OAAOyG,KAiBvB,OAhBI7V,KAAKu+B,KAAOtP,GACdjvB,KAAKuV,MACH7L,EAAA8L,eAAeyoD,uBACfj+D,KAAK+P,MAAMif,EAAOC,IAEpBoxC,GAAU,GACwB,KAAzBxqD,EAAK3K,WAAWlL,KAAKu+B,OAC5Bv+B,KAAKu+B,KAEPv+B,KAAKuV,MACH7L,EAAA8L,eAAe+qD,qCACfvgE,KAAK+P,MAAMif,EAAOhvB,KAAKu+B,MAEzB8hC,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbp5D,OAAOo3D,aAAagC,GACpBp5D,OAAOo3D,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B9F,EAAAr4D,UAAAu+D,OAAA,aAEFlG,EA5lCA,CAA+B5wD,EAAAiZ,mBAAlBjjB,EAAA46D,YA+lCb,IAAAoD,EAAA,WAOA,OAPA,gBAAah+D,EAAAg+D,QAUb,IAAID,EAA8B,oBC5lDlC,IAAAgD,EAGAA,EAAA,WACA,OAAAzgE,KADA,GAIA,IAEAygE,KAAA,IAAAvvD,SAAA,iBACC,MAAAwvD,GAED,iBAAAC,SAAAF,EAAAE,QAOAhhE,EAAAD,QAAA+gE,44BCdA,IAoFYG,EApFZl3D,EAAAvJ,EAAA,GAKAiyD,EAAAjyD,EAAA,GAuBAyJ,EAAAzJ,EAAA,GA6BAwJ,EAAAxJ,EAAA,GAQAsJ,EAAAtJ,EAAA,GAKA0J,EAAA1J,EAAA,GAKAyvB,EAAAzvB,EAAA,GAIA0gE,EAAA1gE,EAAA,KAKA,SAAYygE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAAlhE,EAAAkhE,aAAAlhE,EAAAkhE,WAAU,KAQtB,IAAA/xD,EAAA,SAAAtB,GAWE,SAAAsB,EAEEgU,GAFF,IAAApV,EAIEF,EAAA/M,KAAAR,KAAM6iB,EAAQrV,cAAYxN,YAT5ByN,EAAAqzD,sBAA2C,KAE3CrzD,EAAAszD,yBAA+C,KAQ7CtzD,EAAKoV,QAAUA,IAkvDnB,OAlwD8B/T,EAAAD,EAAAtB,GAoB5BsB,EAAA5M,UAAA++D,YAAA,SAEEhvC,EAEAivC,EAEAn7C,EAEAo7C,GAIA,QANA,IAAAp7C,MAAA,WAEA,IAAAo7C,MAAyBN,EAAWO,QAIhCnvC,EAAK1e,MAAQ1J,EAAA2J,SAAS0oB,aAAc,CACtC,IAAI/K,EAAsCc,EAAMd,iBAC5C9J,EAAwB,KAC5B,GAAI8J,KACF9J,EAAWpnB,KAAKghE,YACd9vC,EACA+vC,EACAn7C,EACAo7C,IAEa,OAAO,KAQxB,IANA,IAAIE,EAAoCpvC,EAAMhB,WAC1CmkC,EAAgBiM,EAAet2D,OAC/Buc,EAAiB,IAAIpgB,MAAYkuD,GACjCT,EAAiB,IAAIztD,MAAckuD,GACnCR,EAAqB,EACrBC,GAAU,EACLv0D,EAAI,EAAGA,EAAI80D,IAAiB90D,EAAG,CACtC,IAAIghE,EAAgBD,EAAe/gE,GACnC,OAAQghE,EAAc3vC,eACpB,KAAK9nB,EAAAuyB,cAAci6B,QACjBzB,EAAqBt0D,EAAI,EACzB,MAEF,KAAKuJ,EAAAuyB,cAAcmlC,KACjBz2D,OAAOxK,GAAK80D,GACZP,GAAU,EAId,IAAI2M,EAAoBF,EAAcnlD,KACtC,GAAItS,EAAAu2B,cAAcohC,GAOhB,OANIL,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfD,EAAkBxxD,OAGf,KAET,IAAIuX,EAAgBtnB,KAAKghE,YACvBO,EACAN,EACAn7C,EACAo7C,GAEF,IAAK55C,EAAe,OAAO,KAC3BD,EAAehnB,GAAKinB,EACpBotC,EAAer0D,GAAKghE,EAAczgE,KAAKiV,KAEzC,IAAI4rD,EAAoCzvC,EAAMf,WAC9C,GAAIrnB,EAAAu2B,cAAcshC,GAOhB,OANIP,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfC,EAAe1xD,OAGZ,KAET,IAAIkhB,OAAU,EACd,GAAIwwC,GAOF,KANAxwC,EAAajxB,KAAKghE,YAChBS,EACAR,EACAn7C,EACAo7C,IAEe,OAAO,UAExBjwC,EAAatnB,EAAA+H,KAAKG,KAEpB,IAAId,EAAY,IAAIpH,EAAA8Z,UAAU4D,EAAgB4J,EAAY7J,GAI1D,OAHArW,EAAU2jD,eAAiBA,EAC3B3jD,EAAU4jD,mBAAqBA,EAC/B5jD,EAAU6jD,QAAUA,EACb5iC,EAAKlB,WAAa/f,EAAUmL,KAAKs3C,aAAeziD,EAAUmL,KAInErR,OAAOmnB,EAAK1e,MAAQ1J,EAAA2J,SAASyoB,WAC7B,IAAI0lC,EAA0B1vC,EAC1BpB,EAAW8wC,EAAS9gE,KACpB+gE,EAAoBD,EAASl4C,cAC7Bo4C,GAAgBhxC,EAAS9b,KAG7B,GAAI8sD,GACE97C,GAA2BA,EAAwBxU,IAAIsf,EAASxgB,WAAWyF,MAAO,CACpF,IAAIqG,EAAO4J,EAAwB5kB,IAAI0vB,EAASxgB,WAAWyF,MAS3D,OAR0B,OAAtB8rD,GAA8BA,EAAkB72D,QAC9Co2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACf7vC,EAAKjiB,MAAOmM,EAAK8B,YAInBgU,EAAKlB,YACF5U,EAAKK,GAAE,MACN2kD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAessD,gCACf9vC,EAAKjiB,MAAOmM,EAAK8B,YAIhB9B,EAAKs3C,cAEPt3C,EAKX,IAAIvG,EAAU3V,KAAKmY,gBAAgByY,EAAUqwC,EAASC,GACtD,IAAKvrD,EAAS,OAAO,KAGrB,GAAIA,EAAQmN,WACVnN,EAAUA,EAAQmN,eAEb,CAEL,GAAInN,EAAQrC,MAAQ8+C,EAAAhlD,YAAYiX,KAiB9B,OAhB0B,OAAtBs9C,GAA8BA,EAAkB72D,QAC9Co2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACf7vC,EAAKjiB,MAAO4F,EAAQhH,cAItBqjB,EAAKlB,YACHowC,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAessD,gCACf9vC,EAAKjiB,MAAO4F,EAAQ/U,MAInB+I,EAAA+H,KAAKtO,IAId,GAAIuS,EAAQrC,MAAQ8+C,EAAAhlD,YAAYiK,gBAAiB,CAC/C,IAAIuO,EAAW5lB,KAAK+hE,8BACFpsD,EAChBgsD,EACAV,EACAp3D,EAAAm4D,QAAqBl8C,GACrBkM,GAEF,OAAKpM,EACEoM,EAAKlB,WAAalL,EAAS1J,KAAKs3C,aAAe5tC,EAAS1J,KADzC,MAM1B,GAAIvG,EAAQrC,MAAQ8+C,EAAAhlD,YAAY6W,eAAgB,CAG9C,GAAItO,EAAQ4G,GAAG9S,EAAApH,YAAYkhB,UAAW,CACV,OAAtBo+C,GAA8BA,EAAkB72D,QAC9Co2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACf7vC,EAAKjiB,MAAO4F,EAAQhH,cAI1B,IAAIszD,EAAwBtsD,EAASuG,KACrC,GAAI8V,EAAKlB,WAAY,CACnB,GAAKmxC,EAAK1lD,GAAE,KAQV,OAAO0lD,EAAKzO,aAPR0N,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAessD,gCACfJ,EAAS9gE,KAAKmP,MAAO6gB,EAASxgB,WAAWyF,MAOjD,OAAOosD,EAIT,GAAIL,EACF,OAAQhxC,EAASxgB,WAAWkiB,QAC1B,KAAK7oB,EAAAzG,cAAc8B,OAAQ,OAAO9E,KAAKkiE,yBAAyBR,EAAUT,EAASn7C,EAAyBo7C,GAC5G,KAAKz3D,EAAAzG,cAAc+B,QAAS,OAAO/E,KAAKmiE,0BAA0BT,EAAUT,EAASn7C,EAAyBo7C,GAC9G,KAAKz3D,EAAAzG,cAAcgC,QAAS,OAAOhF,KAAKoiE,0BAA0BV,EAAUT,EAASn7C,EAAyBo7C,GAKlH,IAAI52C,EAAsC3U,EAAS2U,mBAEnD,GAAIA,GASF,IARgBtqB,KAAKqiE,qBACnB/3C,EACAq3C,EACAV,EACAn7C,EAA0Bjc,EAAAm4D,QAAQl8C,GAClCkM,EACAkvC,GAEkB,OAAO,UAClBS,GAAqBA,EAAkB72D,QAChD9K,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACfH,EAAS3xD,MAAO6gB,EAASxgB,WAAWyF,MAUxC,KANIqG,EAAOlc,KAAKghE,YACGrrD,EAAS+rD,SAC1B/rD,EACAmQ,EACAo7C,IAES,OAAO,KAClB,GAAIlvC,EAAKlB,WAAY,CACnB,GAAK5U,EAAKK,GAAE,KAQV,OAAOL,EAAKs3C,aAPR0N,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAessD,gCACfJ,EAAS9gE,KAAKmP,MAAO6gB,EAASxgB,WAAWyF,MAOjD,OAAOqG,EAQT,OANIglD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfZ,EAAS9gE,KAAKmP,MAAO6gB,EAASxgB,WAAWyF,MAGtC,MAGDhH,EAAA5M,UAAAigE,yBAAR,SAEER,EAEAT,EAEAn7C,EAEAo7C,QAFA,IAAAp7C,MAAA,WAEA,IAAAo7C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAASl4C,cACjC,IAAMm4C,GAAiD,GAA5BA,EAAkB72D,OAO3C,OANIo2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe+sD,oCACfb,EAAS3xD,MAAO,KAAM4xD,EAAoBA,EAAkB72D,OAAS,GAAGkT,SAAS,KAG9E,KAET,IAAIwkD,EAAexiE,KAAKghE,YAAYW,EAAkB,GAAIV,EAASn7C,EAAyBo7C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,OAAQA,EAAalvD,MACnB,OACA,OACA,OAAmB,OAAO3J,EAAA+H,KAAKtO,IAC/B,OAAqB,IAAKpD,KAAK6iB,QAAQrR,QAAQc,SAAU,OAAO3I,EAAA+H,KAAKtO,IACrE,OAAmB,OAAOuG,EAAA+H,KAAKrO,IAC/B,OACA,OACA,OACA,QAAoB,OAAOsG,EAAA+H,KAAKjO,IAChC,OAAqB,IAAKzD,KAAK6iB,QAAQrR,QAAQc,SAAU,OAAO3I,EAAA+H,KAAKjO,IACrE,OAAmB,OAAOkG,EAAA+H,KAAKhO,IAC/B,QAAmB,OAAOiG,EAAA+H,KAAK7N,IAC/B,QAAmB,OAAO8F,EAAA+H,KAAK5N,IAC/B,QAAoB,OAAO6F,EAAA+H,KAAK3N,KAChC,QAAoB,OAAO4F,EAAA+H,KAAKG,KAChC,QAAShH,QAAO,GAElB,OAAO,MAGDgE,EAAA5M,UAAAkgE,0BAAR,SAEET,EAEAT,EAEAn7C,EAEAo7C,QAFA,IAAAp7C,MAAA,WAEA,IAAAo7C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAASl4C,cACjC,IAAMm4C,GAAiD,GAA5BA,EAAkB72D,OAO3C,OANIo2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe+sD,oCACfb,EAAS3xD,MAAO,KAAM4xD,EAAoBA,EAAkB72D,OAAS,GAAGkT,SAAS,KAG9E,KAET,IAAIwkD,EAAexiE,KAAKghE,YAAYW,EAAkB,GAAIV,EAASn7C,EAAyBo7C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,IAAIt2C,EAAiBs2C,EAAat2C,eAClC,IAAKA,EAOH,OANIg1C,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACfd,EAAkB,GAAG5xD,MAAOyyD,EAAaxkD,YAGtC,KAET,IAAI+M,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa2B,aAC1D,OAAI4f,EACEA,EAASxO,GAAG9S,EAAApH,YAAY+c,SAC1BvU,OAAmD,GAA5CkgB,EAASha,UAAUsW,eAAevc,QAClCigB,EAASha,UAAUsW,eAAe,KAEzCxc,OAAmD,GAA5CkgB,EAASha,UAAUsW,eAAevc,QAClCigB,EAASha,UAAUsW,eAAe,KAGzC65C,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACfd,EAAkB,GAAG5xD,MAAOyyD,EAAaxkD,YAGtC,OAGDnP,EAAA5M,UAAAmgE,0BAAR,SAEEV,EAEAT,EAEAn7C,EAEAo7C,QAFA,IAAAp7C,MAAA,WAEA,IAAAo7C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAASl4C,cACjC,IAAMm4C,GAAiD,GAA5BA,EAAkB72D,OAO3C,OANIo2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe+sD,oCACfb,EAAS3xD,MAAO,KAAM4xD,EAAoBA,EAAkB72D,OAAS,GAAGkT,SAAS,KAG9E,KAET,IAAIwkD,EAAexiE,KAAKghE,YAAYW,EAAkB,GAAIV,EAASn7C,EAAyBo7C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,IAAIt2C,EAAiBs2C,EAAat2C,eAClC,IAAKA,EAOH,OANIg1C,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACfd,EAAkB,GAAG5xD,MAAOyyD,EAAaxkD,YAGtC,KAGT,IAAI+M,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa2B,aAC1D,OAAI4f,EAAiBA,EAASha,UAAUkgB,YACpCiwC,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACfd,EAAkB,GAAG5xD,MAAOyyD,EAAaxkD,YAGtC,OAITnP,EAAA5M,UAAAkW,gBAAA,SAEEyY,EAEAqwC,EAEAC,QAAA,IAAAA,MAAaN,EAAWO,QAExB,IAAIxrD,EAAUsrD,EAAQt9C,OAAOiN,EAASxgB,WAAWyF,MACjD,IAAKF,EAOH,OANIurD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACf1xC,EAAS7gB,MAAO6gB,EAASxgB,WAAWyF,MAGjC,KAIT,IAFA,IAAI6sD,EAAO9xC,EACP9b,EAAO8b,EAAS9b,KACbA,GAAM,CACX,KAAMa,EAAUA,EAAQgB,aAAa7B,EAAK1E,WAAWyF,OAOnD,OANIqrD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACf7tD,EAAK/E,MAAO+E,EAAK1E,WAAWyF,KAAM6sD,EAAKtyD,WAAWyF,MAG/C,KAET6sD,EAAO5tD,EACPA,EAAOA,EAAKA,KAEd,OAAOa,GAIT9G,EAAA5M,UAAAogE,qBAAA,SAEEl+C,EAEAw9C,EAEAV,EAEAn7C,EAEA88C,EAEA1B,QAJA,IAAAp7C,MAA4Cjc,EAAAm4D,gBAE5C,IAAAY,MAAA,WAEA,IAAA1B,MAAyBN,EAAWO,QAIpC,IAFA,IAAI0B,EAAoB,EACpBC,EAAoB,EACfziE,EAAI,EAAG8O,EAAIgV,EAAerZ,OAAQzK,EAAI8O,IAAK9O,EAC7C8jB,EAAe9jB,GAAGgxB,eAAewxC,IACpCC,EAEJ,IAAIC,EAAgBpB,EAAoBA,EAAkB72D,OAAS,EACnE,GAAIi4D,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXA9iE,KAAKuV,MACH7L,EAAA8L,eAAe+sD,oCACfQ,EACIn5D,EAAA+O,MAAMC,KACc+oD,EAAmB,GAAG5xD,MACtB4xD,EAAmBoB,EAAgB,GAAGhzD,OAE1DlF,OAAO+3D,GAAuB7yD,OACjCgzD,EAAgBF,EAAoBA,EAAoBC,GAAmB9kD,SAAS,IACrF+kD,EAAc/kD,SAAS,KAElB,KAET,IAAIwL,EAAgB,IAAIviB,MAAY67D,GACpC,IAASziE,EAAI,EAAGA,EAAIyiE,IAAqBziE,EAAG,CAC1C,IAAI6b,EAAO7b,EAAI0iE,EACX/iE,KAAKghE,YACeW,EAAmBthE,GACrC4gE,EACAn7C,EACAo7C,GAEFlhE,KAAKghE,YACHn2D,OAAOsZ,EAAe9jB,GAAGgxB,aACzB4vC,EACAn7C,EACAo7C,GAEN,IAAKhlD,EAAM,OAAO,KAElB4J,EAAwBpX,IAAIyV,EAAe9jB,GAAGO,KAAKiV,KAAMqG,GACzDsN,EAAcnpB,GAAK6b,EAErB,OAAOsN,GAIT3a,EAAA5M,UAAA+gE,kBAAA,SAEE5yD,EAEAqX,EAEAw5C,EAEAC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IACIxrD,EADA/U,EAAOwP,EAAWyF,KAEtB,OAAI4R,IACE9R,EAAU8R,EAAK9D,OAAO/iB,KACxBZ,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzBprD,GAGPsrD,IACEtrD,EAAUsrD,EAAQt9C,OAAO/iB,KAC3BZ,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzBprD,IAGPA,EAAU3V,KAAK6iB,QAAQhM,aAAajW,KACtCZ,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzBprD,IAELurD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACflyD,EAAWL,MAAOnP,GAGf,OAITiO,EAAA5M,UAAAghE,yBAAA,SAAyBzmD,EAAgB0kD,GACvC,QADuC,IAAAA,MAAyBN,EAAWO,QACvE3kD,EAAOD,GAAG9S,EAAApH,YAAYkhB,UAAW,OAAO,EAC5C,IAAIm+C,EAAWllD,EAAOklD,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIxlD,EAAOlc,KAAKghE,YACdU,EACAllD,EAAOxL,OACP,KACAkwD,GAEF,QAAKhlD,IACLM,EAAOL,QAAQD,IACR,IAITrN,EAAA5M,UAAAihE,gCAAA,SAEEC,EAEA17C,EAEA27C,EAEAlC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBF,EAAetwC,WAClCjI,EAAS5qB,KAAKsjE,kBAAkBD,EAAkB57C,EAAM27C,EAAgBlC,GAC5E,IAAKt2C,EAAQ,OAAO,KACpB,IAAI24C,EAAeJ,EAAenhE,SAAS6T,KAG3C,OAAQ+U,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY+Q,OAAQ,IAAKne,KAAKijE,yBAAiCr4C,EAAQs2C,GAAa,OAAO,KAChG,KAAK9O,EAAAhlD,YAAY8X,MACjB,KAAKktC,EAAAhlD,YAAYyO,MACf,IAAIK,EAA6B0O,EAAQ1O,KAEzC,GAF+CrR,OAAOqR,GAAQvS,EAAA+H,KAAKG,QAC/Dqa,EAAiBhQ,EAAKgQ,gBACL,CACnB,IAAIle,EAAchO,KAAK6iB,QAAQ7U,YAC/B,GAAKkO,EAAKK,GAAE,OAAyBvO,EAAYsD,IAAI4K,EAAK5I,MAOxD,OAJAtT,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACfQ,EAAenhE,SAAS+N,MAAOwzD,EAAoC34C,EAAQ1O,KAAK8B,YAE3E,KANPkO,EAAiBle,EAAY9M,IAAIgb,EAAK5I,MAS1CsX,EAASsB,EACT,MAEF,KAAKkmC,EAAAhlD,YAAYoO,mBAOf,KANIwN,EAAiBhpB,KAAKkb,gBACxBrQ,OAA2B+f,EAAQnP,iBACnC,KACA5R,EAAAm4D,UACAd,IAEmB,OAAO,KAE5B,KADIh1C,EAAiBlD,EAAejY,UAAUkgB,WAAW/E,gBAMvD,OAJAlsB,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACfQ,EAAenhE,SAAS+N,MAAOwzD,EAAcv6C,EAAejY,UAAUkgB,WAAWjT,YAE5E,KAET4M,EAASsB,EACT,MAEF,KAAKkmC,EAAAhlD,YAAYuO,SACf,IAAIqN,EAEJ,KADIkD,GADAlD,EAAiBne,OAAkB+f,EAAQ5B,iBACXjY,UAAUkgB,WAAW/E,gBAMvD,OAJAlsB,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACfQ,EAAenhE,SAAS+N,MAAOwzD,EAAcv6C,EAAejY,UAAUkgB,WAAWjT,YAE5E,KAET4M,EAASsB,EACT,MAEF,KAAKkmC,EAAAhlD,YAAY0O,MACf,IAAImY,EAAoBj0B,KAAK+gE,yBAC7B,GAAI9sC,EAAmB,CAGnB,IAAIuvC,EAAqB54C,EAAQF,eAAe0nC,EAAA5oD,aAAa2B,aAC7D,IAAKq4D,EAKH,OAJAxjE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACfxuC,EAAkBlkB,MAAe6a,EAAQjc,cAEpC,KAET,IAAI80D,EAAYD,EAAWzyD,UAAUkgB,WAIvC,KADI/E,EAAiBu3C,EAAUv3C,gBACV,CACfle,EAAchO,KAAK6iB,QAAQ7U,YAC/B,GAAKy1D,EAAUlnD,GAAE,OAAyBvO,EAAYsD,IAAImyD,EAAUnwD,MAOlE,OAJAtT,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACfQ,EAAenhE,SAAS+N,MAAOwzD,EAAcE,EAAUzlD,YAElD,KANPkO,EAAiBle,EAAY9M,IAAIuiE,EAAUnwD,MAS/CsX,EAASsB,EAEX,MAEF,KAAKkmC,EAAAhlD,YAAY6N,mBACf,IAAI6H,EAAa8H,EAAO9H,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAWvG,GAAG9S,EAAApH,YAAYkhB,UAAW,CACxC,IAAImgD,EAAe1jE,KAAKghE,YAAYl+C,EAAW4+C,SAAU5+C,EAAW9R,OAAQ,KAAMkwD,GAC9EwC,GAAc5gD,EAAW3G,QAAQunD,GAEvC,IAAIx3C,KAAiBpJ,EAAW5G,KAAKgQ,kBACjBtB,EAASsB,EAAejqB,WAC5C,OAMN,OAAQ2oB,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAYiK,gBACjB,KAAK+6C,EAAAhlD,YAAY0O,MACf,OAAG,CAED,IADIC,EAAU6O,EAAO7O,UACNA,EAAQzK,IAAIiyD,GAGzB,OAFAvjE,KAAK8gE,sBAAwBuC,EAC7BrjE,KAAK+gE,yBAA2B,KACzBhlD,EAAQ7a,IAAIqiE,GAGrB,GAAI34C,EAAOtX,MAAQ8+C,EAAAhlD,YAAYiK,gBAAiB,CAC9C,IAAqBuT,EAAQxS,cAG3B,MAFAwS,EAA0CA,EAAQxS,kBAK/C,IAAIwS,EAAOtX,MAAQ8+C,EAAAhlD,YAAY0O,MAOpC,MANA,IAAY8O,EAAQnB,KAGlB,MAFAmB,EAAwBA,EAAQnB,MAQtC,MAEF,QACE,IAAI1N,EACJ,IADIA,EAAU6O,EAAO7O,UACNA,EAAQzK,IAAIiyD,GAGzB,OAFAvjE,KAAK8gE,sBAAwBuC,EAC7BrjE,KAAK+gE,yBAA2B,KACzBhlD,EAAQ7a,IAAIqiE,GAUzB,OAJAvjE,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACfQ,EAAenhE,SAAS+N,MAAOwzD,EAAc34C,EAAOjc,cAE/C,MAITE,EAAA5M,UAAA0hE,+BAAA,SAEEC,EAEAn8C,EAEA27C,EAEAlC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBO,EAAc/wC,WACjCjI,EAAS5qB,KAAKsjE,kBAAkBD,EAAkB57C,EAAM27C,EAAgBlC,GAC5E,IAAKt2C,EAAQ,OAAO,KACpB,OAAQA,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY+Q,OAAQ,IAAKne,KAAKijE,yBAAiCr4C,EAAQs2C,GAAa,OAAO,KAChG,KAAK9O,EAAAhlD,YAAY8X,MACjB,KAAKktC,EAAAhlD,YAAYyO,MAEf,GAAI+O,EAD6BA,EAAQ1O,KACvBgQ,eAGhB,OAFAlsB,KAAK8gE,sBAAwBuC,EAC7BrjE,KAAK+gE,yBAA2B6C,EAAc3vC,kBACvCrJ,EAET,MAEF,KAAKwnC,EAAAhlD,YAAY0O,MAGb,IAAI0nD,EAAqB54C,EAAQF,eAAe0nC,EAAA5oD,aAAa2B,aAC7D,IAAKq4D,EAOH,OANItC,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACfmB,EAAc7zD,MAAe6a,EAAQjc,cAGlC,KAET,IAAI80D,EAAYD,EAAWzyD,UAAUkgB,WAEvC,OAAIoyC,EAAiB/vD,MAAQ1J,EAAA2J,SAAS+c,eAChC1F,EAAS64C,EAAUv3C,iBACrBlsB,KAAK8gE,sBAAwBuC,EAC7BrjE,KAAK+gE,yBAA2B6C,EAAc3vC,kBACvCrJ,GAEF,MAET5qB,KAAK8gE,sBAAwBuC,EAC7BrjE,KAAK+gE,yBAA2B6C,EAAc3vC,kBACvCrJ,GASX,OANIs2C,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf6iD,EAAiBtzD,OAGd,MAITlB,EAAA5M,UAAA4hE,4BAAA,SAEEC,EAEAV,GAEA,IAAKA,EAAe7mD,GAAE,KAEpB,OAAQ6mD,EAAe9vD,MACrB,OACE,GAAIywD,UAAUD,GAAW,OAAOn6D,EAAA+H,KAAKxO,GACrC,MAEF,OACE,GAAI8gE,UAAUF,GAAW,OAAOn6D,EAAA+H,KAAKnO,GACrC,MAEF,OACE,GAAI0gE,WAAWH,GAAW,OAAOn6D,EAAA+H,KAAKvO,IACtC,MAEF,OACE,GAAI+gE,WAAWJ,GAAW,OAAOn6D,EAAA+H,KAAKlO,IACtC,MAEF,OACE,GAAI2gE,WAAWL,GAAW,OAAOn6D,EAAA+H,KAAKtO,IACtC,MAEF,OACE,GAAIghE,WAAWN,GAAW,OAAOn6D,EAAA+H,KAAKjO,IACtC,MAEF,QACE,GAAI4gE,YAAYP,GAAW,OAAOn6D,EAAA+H,KAAK9N,KACvC,MAEF,OACE,IAAK5D,KAAK6iB,QAAQrR,QAAQc,SAAU,CAClC,GAAI6xD,WAAWL,GAAW,OAAOn6D,EAAA+H,KAAKqhD,QACtC,MAEF,OAAOppD,EAAA+H,KAAKohD,QAEd,OACE,IAAK9yD,KAAK6iB,QAAQrR,QAAQc,SAAU,CAClC,GAAI8xD,WAAWN,GAAW,OAAOn6D,EAAA+H,KAAKuhD,QACtC,MAEF,OAAOtpD,EAAA+H,KAAKshD,QAEd,OAAmB,OAAOrpD,EAAA+H,KAAKrO,IAC/B,OAAmB,OAAOsG,EAAA+H,KAAKhO,IAC/B,QAAmB,OAAOiG,EAAA+H,KAAK7N,IAC/B,QAAmB,OAAO8F,EAAA+H,KAAK5N,IAC/B,QAAoB,MACpB,QAAS+G,QAAO,GAIpB,OAAIs5D,WAAWL,GAAkBn6D,EAAA+H,KAAKtO,IAClCghE,WAAWN,GAAkBn6D,EAAA+H,KAAKjO,IAC/BkG,EAAA+H,KAAKrO,KAIdwL,EAAA5M,UAAAqhE,kBAAA,SAEEzwC,EAEApL,EAEA27C,EAEAlC,GAEA,SAJA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAE7BtuC,EAAWvf,MAAQ1J,EAAA2J,SAASgd,eACjCsC,EAAuCA,EAAYA,WAErD,OAAQA,EAAWvf,MACjB,KAAK1J,EAAA2J,SAAS6c,UACZ,OAAOpwB,KAAKskE,2BACWzxC,EACrBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAAS0qB,YACZ,OAAOj+B,KAAKukE,6BACa1xC,EACvBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAASyqB,aACZ,OAAOh+B,KAAKwkE,8BACc3xC,EACxBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAAS6pB,OACZ,OAAOp9B,KAAKykE,wBACQ5xC,EAClBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAASuqB,KACZ,OAAO99B,KAAK0kE,sBACM7xC,EAChBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAASkd,MACZ,OAAOzwB,KAAK2kE,uBACO9xC,EACjBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAAS4c,WACZ,OAAOnwB,KAAKgjE,kBACYnwC,EACtBpL,EAAMA,EAAKm9C,eAAgB1D,GAG/B,KAAKt3D,EAAA2J,SAAS6M,QACZ,OAAOpgB,KAAK6kE,yBACShyC,EACnBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAASid,eACZ,OAAOxwB,KAAKkjE,gCACgBrwC,EAC1BpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAAS+c,cACZ,OAAOtwB,KAAK2jE,+BACe9wC,EACzBpL,EAAM27C,EAAgBlC,GAG1B,KAAKt3D,EAAA2J,SAAS8c,KACZ,OAAOrwB,KAAK8kE,sBACMjyC,EAChBpL,EAAM27C,EAAgBlC,GAW5B,OANIA,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAGR,MAITlB,EAAA5M,UAAAqiE,2BAAA,SAEEzxC,EAEApL,EAEA27C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAEhCtuC,EAAWD,eAAiBhpB,EAAAuzB,cAAc4nC,QAC5C,OAAO/kE,KAAKsjE,kBACVzwC,EAAWA,WACXpL,EACA27C,EACAlC,GAGJ,IAAIhlD,EAAOlc,KAAKghE,YACdn2D,OAAOgoB,EAAWC,QAClBrL,EAAKm9C,eACLn9C,EAAK3B,wBACLo7C,GAEF,IAAKhlD,EAAM,OAAO,KAClB,IAAIvG,EAA0BuG,EAAKgQ,eACnC,IAAKvW,EAAS,CACZ,IAAI5E,EAAYmL,EAAK02C,mBACrB,IAAK7hD,EAAW,OAAO,KACvB4E,EAAU5E,EAAU8jD,iBAAiB70D,KAAK6iB,SAI5C,OAFA7iB,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzBprD,GAIT9G,EAAA5M,UAAAsiE,6BAAA,SAEE1xC,EAEApL,EAEA27C,EAEAlC,QAFA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAEpC,IAAIzqC,EAAU7D,EAAW6D,QAEzB,OAAQ7D,EAAWI,UACjB,KAAKrD,EAAAC,MAAMjjB,MAET,GAAI8pB,EAAQpjB,MAAQ1J,EAAA2J,SAAS6M,SAA+BsW,EAASrW,aAAezW,EAAA0W,YAAYmd,QAAS,CACvG,IAAIvhB,EAAOlc,KAAK6jE,4BACdmB,QAAQC,SAAqCvuC,EAASp1B,OACtD8hE,GAGF,OADIp1D,EAAchO,KAAK6iB,QAAQ7U,aACZsD,IAAI4K,EAAK5I,MAAQtF,EAAY9M,IAAIgb,EAAK5I,MAAS,KAEpE,OAAOtT,KAAKsjE,kBACV5sC,EACAjP,EACA27C,EACAlC,GAGJ,KAAKtxC,EAAAC,MAAMnjB,KACX,KAAKkjB,EAAAC,MAAM8oC,UACX,KAAK/oC,EAAAC,MAAM+oC,YACT,OAAO54D,KAAKsjE,kBACVzwC,EAAW6D,QACXjP,EACA27C,EACAlC,GAGJ,KAAKtxC,EAAAC,MAAMspC,YACT,IAAInrD,EACJ,OADIA,EAAchO,KAAK6iB,QAAQ7U,aACZsD,IAAG,IAAkBtD,EAAY9M,IAAG,IAAmB,KAE5E,KAAK0uB,EAAAC,MAAMupC,MAOT,IANsBp5D,KAAKsjE,kBACzBzwC,EAAW6D,QACXjP,EACA27C,EACAlC,GAEoB,OAAO,KAE7B,MAEF,QAASr2D,QAAO,GAQlB,OANIq2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAGR,MAITlB,EAAA5M,UAAAuiE,8BAAA,SAEE3xC,EAEApL,EAEA27C,EAEAlC,GAGA,YALA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAG5BtuC,EAAWI,UACjB,KAAKrD,EAAAC,MAAM8oC,UACX,KAAK/oC,EAAAC,MAAM+oC,YACT,OAAO54D,KAAKsjE,kBACVzwC,EAAW6D,QACXjP,EACA27C,EACAlC,GAGJ,QAASr2D,QAAO,GAQlB,OANIq2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAGR,MAITlB,EAAA5M,UAAAwiE,wBAAA,SAEE5xC,EAEApL,EAEA27C,EAEAlC,GASA,YAXA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAGhCD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAGR,MAITlB,EAAA5M,UAAAyiE,sBAAA,SAEE7xC,EAEApL,EAEA27C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAEhC15C,EAAKlL,GAAE,OAA4B,CACrC,IAAI2oD,EAAYz9C,EAAK09C,YAAY17D,EAAAzG,cAAcoC,OAC/C,GAAI8/D,EAGF,OAFAllE,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzBmE,EAGX,IAAIl0D,EAASyW,EAAKm9C,eAAe5zD,OACjC,OAAIA,GACFhR,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzB/vD,IAELkwD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe4vD,+CACfvyC,EAAW9iB,OAGR,OAITlB,EAAA5M,UAAA0iE,uBAAA,SAEE9xC,EAEApL,EAEA27C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAEhC15C,EAAKlL,GAAE,OAA4B,CACrC,IAAI8oD,EAAa59C,EAAK09C,YAAY17D,EAAAzG,cAAcqC,QAChD,GAAIggE,EAGF,OAFArlE,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzBsE,EAGX,IAAIr0D,EAAyByW,EAAKm9C,eAAe5zD,OACjD,OAAIA,GAAUA,EAAOsC,MAAQ8+C,EAAAhlD,YAAY0O,QAAU9K,EAAiBA,EAAQyY,OAC1EzpB,KAAK8gE,sBAAwB,KAC7B9gE,KAAK+gE,yBAA2B,KACzB/vD,IAELkwD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAe8vD,iDACfzyC,EAAW9iB,OAGR,OAITlB,EAAA5M,UAAA4iE,yBAAA,SAEEhyC,EAEApL,EAEA27C,EAEAlC,GAEA,YAJA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAE5BtuC,EAAWxS,aACjB,KAAKzW,EAAA0W,YAAYmd,QACfz9B,KAAK8gE,sBAAwBjuC,EAC7B7yB,KAAK+gE,yBAA2B,KAChC,IAAIwE,EAAcvlE,KAAK6jE,4BACMhxC,EAAYvxB,MACvC8hE,GAGF,OADIp1D,EAAchO,KAAK6iB,QAAQ7U,aACZsD,IAAIi0D,EAAYjyD,MAAQtF,EAAY9M,IAAIqkE,EAAYjyD,MAAS,KAElF,KAAK1J,EAAA0W,YAAYid,MACfv9B,KAAK8gE,sBAAwBjuC,EAC7B7yB,KAAK+gE,yBAA2B,KAChC,IACI/yD,EADAu3D,EAAcnC,GAAkBz5D,EAAA+H,KAAK7N,IAAM8F,EAAA+H,KAAK7N,IAAM8F,EAAA+H,KAAK5N,IAE/D,OADIkK,EAAchO,KAAK6iB,QAAQ7U,aACZsD,IAAIi0D,EAAYjyD,MAAQtF,EAAY9M,IAAIqkE,EAAYjyD,MAAS,KAElF,KAAK1J,EAAA0W,YAAYC,OAGf,OAFAvgB,KAAK8gE,sBAAwBjuC,EAC7B7yB,KAAK+gE,yBAA2B,KACzB/gE,KAAK6iB,QAAQ5L,eAWxB,OANIiqD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAGR,MAITlB,EAAA5M,UAAA6iE,sBAAA,SAEEjyC,EAEApL,EAEA27C,EAEAlC,QAFA,IAAAkC,MAAuBz5D,EAAA+H,KAAKG,WAE5B,IAAAqvD,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBxwC,EAAWA,WAC9BjI,EAAS5qB,KAAKsjE,kBAChBD,EACA57C,EACA27C,EACAlC,GAGF,IAAKt2C,EAAQ,OAAO,KACpB,GAAIA,EAAOtX,MAAQ8+C,EAAAhlD,YAAY6N,mBAAoB,CAEjD,GACsB2P,EAAQjc,cAAgBkyD,EAAA2E,eAAe36C,WAC3DgI,EAAW3S,UAAUpV,OAAS,EAE9B,OAAO9K,KAAKsjE,kBAAkBzwC,EAAW3S,UAAU,GAAIuH,EAAM27C,EAAgBlC,GAG/E,IAAIt7C,EAAW5lB,KAAKylE,iCACC76C,EACnBiI,EAAWrJ,cACX/B,EAAKm9C,eACL/6D,EAAAm4D,QAAQv6C,EAAK3B,yBACb+M,EACAquC,GAEF,IAAKt7C,EAAU,OAAO,KACtB,IAAIqL,EAAarL,EAAS7U,UAAUkgB,WAChCsiC,EAAYtiC,EAAW/E,eAC3B,GAAIqnC,EAGF,OAAOA,EAEP,IAAIxiD,EAAYkgB,EAAW2hC,mBAC3B,GAAI7hD,EAIF,OAHqBA,EAAU8jD,iBAAiB70D,KAAK6iB,SAKrD,IAAI7U,EAAchO,KAAK6iB,QAAQ7U,YAC/B,OAAKijB,EAAW1U,GAAE,MAAyBvO,EAAYsD,IAAI2f,EAAW3d,MAC7DtF,EAAY9M,IAAI+vB,EAAW3d,OAIpC4tD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAekwD,uGACfrC,EAAiBtzD,MAAO6a,EAAOjc,cAG5B,MAQT,OANIuyD,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAGR,MAITlB,EAAA5M,UAAAiZ,gBAAA,SAEEjZ,EAEAunB,EAEA1D,EAEAo7C,QAFA,IAAAp7C,MAA4Cjc,EAAAm4D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIwE,EAAe1jE,EAAU+O,OAAOsC,MAAQ8+C,EAAAhlD,YAAYoO,mBACpDvZ,EAAU+O,OAAOA,OACjB/O,EAAU+O,OACVxB,EAA8B,KAC9BkW,EAAc8D,EAAgB7f,EAAA6qD,cAAchrC,GAAiB,GAGjE,GAAIvnB,EAAUsa,GAAG9S,EAAApH,YAAYggB,UAAW,CAMtC,GALAxX,OAAO86D,EAAaryD,MAAQ8+C,EAAAhlD,YAAY0O,OACxCtM,EAAuBm2D,EAGnBC,EAAmB3jE,EAAUwjB,oBAAoBC,GAC/B,OAAOkgD,EAG7B,IAAIC,EAAqBr2D,EAAcga,cACvC,GAAIq8C,EAAoB,CACtB,IAAIC,EAAsBj7D,OAAO2E,EAAcvN,UAAUqoB,oBACrDy7C,EAAwBD,EAAoBh7D,OAChDD,OAAOk7D,GAAyBD,EAAoBh7D,QACpD,IAAK,IAAIzK,EAAI,EAAGA,EAAI0lE,IAAyB1lE,EAAG,CAC9C,IAAI2lE,EAAyBF,EAAoBzlE,GAAGO,KAAKiV,KACpDiQ,EAAwBxU,IAAI00D,IAC/BlgD,EAAwBpX,IACtBs3D,EACAH,EAAmBxlE,UAKtB,CAEL,IAAIulE,EACJ,GAFA/6D,OAAO86D,EAAaryD,MAAQ8+C,EAAAhlD,YAAY0O,OACpC8pD,EAAmB3jE,EAAUwjB,oBAAoBC,GAC/B,OAAOkgD,EAI/B,IAEIK,EAFAC,EAAgBjkE,EAAUkkE,iBAC1B77C,EAAqBroB,EAAUqoB,mBAEnC,GAAId,IAAkBy8C,EAA2Bz8C,EAAc1e,QAAS,CACtED,OAAOyf,GAAsB27C,GAA4B37C,EAAmBxf,QAC5E,IAASzK,EAAI,EAAGA,EAAI4lE,IAA4B5lE,EAC9CylB,EAAwBpX,IACA4b,EAAoBjqB,GAAGO,KAAKiV,KAClD2T,EAAcnpB,SAIlBwK,QAAQyf,GAAmD,GAA7BA,EAAmBxf,QAInD,IAAIsc,EAAwB,KACxB8J,EAAmBg1C,EAAch1C,iBACrC,GAAIA,EAAkB,CAOpB,KANA9J,EAAWpnB,KAAKghE,YACd9vC,EACAjvB,EAAU+O,OACV8U,EACAo7C,IAEa,OAAO,KACtBp7C,EAAwBpX,IAAIjF,EAAAzG,cAAcoC,MAAOgiB,QACxC5X,IACT4X,EAAW5X,EAAc0M,KACzB4J,EAAwBpX,IAAIjF,EAAAzG,cAAcoC,MAAOgiB,IAInD,IA8BI6J,EA9BAm1C,EAAsBF,EAAcl1C,WACpCq1C,EAAyBD,EAAoBt7D,OAC7Cuc,EAAiB,IAAIpgB,MAAYo/D,GACjC3R,EAAiB,IAAIztD,MAAco/D,GACnC1R,EAAqB,EACzB,IAASt0D,EAAI,EAAGA,EAAIgmE,IAA0BhmE,EAAG,CAC/C,IAAIimE,EAAuBF,EAAoB/lE,GAC3CimE,EAAqB50C,eAAiB9nB,EAAAuyB,cAAci6B,UACtDzB,EAAqBt0D,EAAI,GAE3B,IAAIqhE,EAAW4E,EAAqBpqD,KACpC,GAAItS,EAAAu2B,cAAcuhC,GAKhB,OAJA1hE,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfE,EAAS3xD,OAEJ,KAET,IAAIuX,EAAgBtnB,KAAKghE,YACvBU,EACAz/D,EAAU+O,OACV8U,EACAo7C,GAEF,IAAK55C,EAAe,OAAO,KAC3BD,EAAehnB,GAAKinB,EACpBotC,EAAer0D,GAAKimE,EAAqB1lE,KAAKiV,KAKhD,GAAI5T,EAAUsa,GAAG9S,EAAApH,YAAY2c,KAC3BiS,EAAatnB,EAAA+H,KAAKG,UACb,GAAI5P,EAAUsa,GAAG9S,EAAApH,YAAYyd,aAClCmR,EAAapmB,OAAO2E,GAAe0M,SAC9B,CACDwlD,EAAWwE,EAAcj1C,WAC7B,GAAIrnB,EAAAu2B,cAAcuhC,GAKhB,OAJA1hE,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfE,EAAS3xD,OAEJ,KAET,IAAImM,EAAOlc,KAAKghE,YACdU,EACAz/D,EAAU+O,OACV8U,EACAo7C,GAEF,IAAKhlD,EAAM,OAAO,KAClB+U,EAAa/U,EAGf,IAAInL,EAAY,IAAIpH,EAAA8Z,UAAU4D,EAAgB4J,EAAY7J,GAC1DrW,EAAU2jD,eAAiBA,EAC3B3jD,EAAU4jD,mBAAqBA,EAE/B,IAAI9uC,EAAyB5jB,EAAUrB,KACnC8kB,EAAY5a,SAAQ+a,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAIwsC,EAAAlhD,SACjB2U,EACA5jB,EACA8O,EACA+U,GAGF,OADA7jB,EAAU0jB,oBAAoBD,EAAaE,GACpCA,GAIT/W,EAAA5M,UAAAwjE,iCAAA,SAEExjE,EAEA0/D,EAEAV,EAEAn7C,EAEAygD,EAEArF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIwE,EAAe1jE,EAAU+O,OAAOsC,MAAQ8+C,EAAAhlD,YAAYoO,mBACpDvZ,EAAU+O,OAAOA,OACjB/O,EAAU+O,OACVw1D,EAAuC,KAG3C,GAAIvkE,EAAUsa,GAAG9S,EAAApH,YAAY4P,SAAU,CAGrC,GAAIhQ,EAAUsa,GAAG9S,EAAApH,YAAYggB,UAAW,CACtCxX,OAAO86D,EAAaryD,MAAQ8+C,EAAAhlD,YAAY0O,OACxC,IAAI+pD,EAA6BF,EAAcn8C,cAC/C,GAAIq8C,EAAoB,CACtB,IAAIv7C,EAAqBzf,OAAe86D,EAAc1jE,UAAUqoB,oBAC5Dy7C,EAAwBF,EAAmB/6D,OAC/CD,OAAOk7D,GAAyBz7C,EAAmBxf,QACnD,IAAK,IAAIzK,EAAI,EAAGA,EAAI0lE,IAAyB1lE,EAC3CylB,EAAwBpX,IACtB4b,EAAmBjqB,GAAGO,KAAKiV,KAC3BgwD,EAAmBxlE,KAc3B,KARAmmE,EAAwBxmE,KAAKqiE,qBAC3Bx3D,OAAO5I,EAAUqoB,oBACjBq3C,EACAV,EACAn7C,EACAygD,EACArF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB72D,OAOlD,OANIo2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACf0E,EAAWx2D,MAAO9N,EAAU0M,cAGzB,KAKX,OAAO3O,KAAKkb,gBACVjZ,EACAukE,EACA1gD,EACAo7C,IAKJryD,EAAA5M,UAAA+Y,aAAA,SAEE/Y,EAEAunB,EAEA1D,EAEAo7C,wBAFA,IAAAp7C,MAA4Cjc,EAAAm4D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIz7C,EAAc8D,EAAgB7f,EAAA6qD,cAAchrC,GAAiB,GAG7D5D,EAAW3jB,EAAUwjB,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAI4D,EAAe,CACjB,IACIi9C,GADAn8C,EAAqBzf,OAAO5I,EAAUqoB,qBACCxf,OACvCyf,EAAmBf,EAAc1e,OACrCD,OAAO0f,GAAoBk8C,GAC3B,IAAK,IAAIpmE,EAAI,EAAGA,EAAIkqB,IAAoBlqB,EACtCylB,EAAwBpX,IAAI4b,EAAmBjqB,GAAGO,KAAKiV,KAAM2T,EAAcnpB,QAExE,CACL,IAAIiqB,EAAqBroB,EAAUqoB,mBACnCzf,SAASyf,GAAsBA,EAAmBxf,SAIpD,IAAIsN,EAAgBnW,EAAUmW,cAC1BsuD,EAA0B,KAC9B,GAAItuD,EAAe,CACjB,IAAIH,EAAcpN,OAAO5I,EAAUgW,aASnC,KARAyuD,EAAY1mE,KAAK+hE,8BACf3pD,EACAH,EAAYuR,cACZvnB,EAAU+O,OACVnH,EAAAm4D,QAAQl8C,GACR7N,EACAipD,IAEc,OAAO,KAIzB,IAAIyF,EAAwB1kE,EAAUrB,KAClC8kB,EAAY5a,SAAQ67D,GAAyB,IAAMjhD,EAAc,MACrEE,EAAW,IAAIwsC,EAAA7oC,MAAMo9C,EAAuB1kE,EAAWunB,EAAek9C,IAC7D5gD,wBAA0BA,EACnC7jB,EAAU0jB,oBAAoBD,EAAaE,GAG3C,IAAIiD,EAAoB,EACxB,GAAI69C,EAAW,CAEb,GADIE,EAAcF,EAAU3qD,QACX,EACXX,EAAkBwK,EAAS7J,WACT6J,EAAS7J,QAAUX,EAAkB,IAAIhU,SAC/D,IAAyC,IAAAy/D,EAAAjyD,EAAAgyD,GAAWE,EAAAD,EAAA/xD,QAAAgyD,EAAA/xD,KAAA+xD,EAAAD,EAAA/xD,OAAE,CAA7C,IAAAwG,EAAArG,EAAA6xD,EAAAxlE,MAAA,GAACylE,EAAAzrD,EAAA,GAAgB0rD,EAAA1rD,EAAA,GACxBF,EAAgB1M,IAAIq4D,EAAgBC,sGAGxCn+C,EAAe69C,EAAU/8C,oBAI3B,IAAIs9C,EAA2BhlE,EAAUmZ,gBACzC,GAAI6rD,MACF,IAAmB,IAAAjrD,EAAApH,EAAAqyD,EAAyBzsD,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAAjD,IAAIyG,EAAMU,EAAA3a,MACb,OAAQia,EAAOjI,MAGb,KAAK8+C,EAAAhlD,YAAYsb,gBACf,IAAItN,EACJ,GADIA,EAAkBwK,EAAS7J,SAE1B,GAAIX,EAAgB9J,IAAIiK,EAAO3a,MAAO,CACzCZ,KAAKuV,MACH7L,EAAA8L,eAAeyH,uBACE1B,EAAQ/C,eAAezI,MACxCwL,EAAO3a,MAET,YAPoBglB,EAAS7J,QAAUX,EAAkB,IAAIhU,IAS/D,IAAI8/D,EAAiC3rD,EAAQmmD,SACzCyF,EAAyB,KAE7B,GAAKD,EAoBHC,EAAYnnE,KAAKghE,YACfkG,EACAjlE,EAAU+O,OACV4U,EAASE,wBACTo7C,OAxBgB,CAEhB,IAAI0F,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAU3qD,UACT6qD,EAAYt1D,IAAqBiK,EAAQ3a,MAAO,CACjE,IAAIwmE,EAAYR,EAAY1lE,IAAqBqa,EAAQ3a,MACpDwmE,EAAU7qD,GAAG9S,EAAApH,YAAY60D,WAC5BrsD,OAAOu8D,EAAU9zD,MAAQ8+C,EAAAhlD,YAAYyO,OACrCsrD,EAAoBC,EAAWlrD,MAIhCirD,GACCjG,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACEjmD,EAAQ/C,eAAezI,MAAMs3D,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAIlV,EAAAxpC,MAAsBrN,EAAQqK,EAAUuhD,GAChEt8D,OAAOhB,EAAAmjB,WAAWm6C,EAAUzU,WAC5B,IAAIhW,EAAOyqB,EAAUzU,SAAW,EAC5B7pC,EAAe6zB,IAAM7zB,EAAuC,GAAvBA,EAAe6zB,IACxD4qB,EAAcz+C,aAAeA,EAC7BA,GAAgBs+C,EAAUzU,SAC1B9sC,EAAS9T,IAAIyJ,EAAO3a,KAAM0mE,GAC1B,MAEF,KAAKlV,EAAAhlD,YAAY6N,mBACf,IAAIssD,EAAqChsD,EAAQgK,QAAQK,GACzDA,EAAS9T,IAAIy1D,EAAe3mE,KAAM2mE,GAClC,MAEF,KAAKnV,EAAAhlD,YAAYoO,mBACf,IAAIgsD,EAAmB,IAAIpV,EAAArpC,SAA4BxN,EAAQqK,GAC3DnK,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIuN,EAAiBhpB,KAAKkb,gBACxBO,EAAgB8J,QAAQK,GACxB,KACA/b,EAAAm4D,QAAQp8C,EAASE,yBACjBo7C,GAEEl4C,IACFw+C,EAAiBx+C,eAAiBA,EAClCw+C,EAAiBrrD,QAAQ6M,EAAejY,UAAUkgB,aAGtD,IAAIvV,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIuN,EAAiBjpB,KAAKkb,gBACxBQ,EAAgB6J,QAAQK,GACxB,KACA/b,EAAAm4D,QAAQp8C,EAASE,yBACjBo7C,GAEEj4C,IACFu+C,EAAiBv+C,eAAiBA,EAC7Bu+C,EAAiBjrD,GAAG9S,EAAApH,YAAYkhB,YACnC1Y,OAAyD,GAAlDoe,EAAelY,UAAUsW,eAAevc,QAC/C08D,EAAiBrrD,QAAQ8M,EAAelY,UAAUsW,eAAe,MAIvEzB,EAAS9T,IAAI01D,EAAiB5mE,KAAM4mE,GACpC,MAEF,QAAS38D,QAAO,sGAMtB+a,EAAS+D,oBAAsBd,EAI7B,IAAI4+C,EAAgB7hD,EAASjP,aAAalN,EAAAzG,cAAcsC,aACxD,GAAImiE,GAAiBA,EAAcz2D,SAAW4U,EAAU,CACtD/a,OAAO48D,EAAcn0D,MAAQ8+C,EAAAhlD,YAAY6N,oBACzC,IAAIysD,EAAe1nE,KAAKkb,gBACHusD,EACnB,KACA7hD,EAASE,wBACTo7C,GAEEwG,IAAc9hD,EAASgE,oBAAgC89C,OAK/D,IAAsC,IAAA1yD,EAAAJ,EAAA3S,EAAUye,oBAAkBvK,GAAAnB,EAAAF,QAAAqB,GAAApB,KAAAoB,GAAAnB,EAAAF,OAAE,CAA3D,IAAAyB,GAAAtB,EAAAkB,GAAA7U,MAAA,GAACgS,GAAAiD,GAAA,GAAMoxD,GAAApxD,GAAA,GACd1L,OAAOyI,IAAQ8+C,EAAA5oD,aAAa2D,SAC5B,IAAIy6D,QAAgB,EACpB,GAAID,GAAkBprD,GAAG9S,EAAApH,YAAYggB,UAAW,CAC1CklD,EAAiBI,GAAkBpiD,QAAQK,GAC/CgiD,GAAmB5nE,KAAKkb,gBACtBqsD,EACA,KACA19D,EAAAm4D,UACAd,QAGF0G,GAAmB5nE,KAAKkb,gBACtBysD,GACA,KACA99D,EAAAm4D,UACAd,GAGJ,GAAK0G,GAAL,CACA,IAAInnD,GAAYmF,EAASnF,UACpBA,KAAWmF,EAASnF,UAAYA,GAAY,IAAIrZ,KACrDqZ,GAAU/R,IAAI4E,GAAMs0D,yGAEtB,OAAOhiD,GAIT/W,EAAA5M,UAAA8/D,8BAAA,SAEE9/D,EAEA0/D,EAEAV,EAEAn7C,EAEAygD,EAEArF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIqF,EAAuC,KAG3C,GAAIvkE,EAAUsa,GAAG9S,EAAApH,YAAY4P,UAS3B,KARAu0D,EAAwBxmE,KAAKqiE,qBAC3Bx3D,OAAO5I,EAAUqoB,oBACjBq3C,EACAV,EACAn7C,EACAygD,EACArF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB72D,OAOlD,OANIo2D,GAAcN,EAAWO,QAC3BnhE,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACf0E,EAAWx2D,MAAO9N,EAAU0M,cAGzB,KAKX,OAAO3O,KAAKgb,aACV/Y,EACAukE,EACA1gD,EACAo7C,IAGNryD,EAlwDA,CAA8BnF,EAAAiZ,mBAAjBjjB,EAAAmP,4RC5Fb,IAuIYg5D,EAvIZl+D,EAAAxJ,EAAA,GAMAiyD,EAAAjyD,EAAA,GAQAkyD,EAAAlyD,EAAA,GAuCAsJ,EAAAtJ,EAAA,GAIAuJ,EAAAvJ,EAAA,IASA,SAAkB2nE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,oBAEAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,+BAEAA,IAAA,6BAKAA,IAAA,mDAEAA,IAAA,kDAEAA,IAAA,0DAEAA,IAAA,kDAEAA,IAAA,wDAEAA,IAAA,yDAKAA,IAAA,uCAEAA,IAAA,6CAKAA,IAAA,uCAWAA,IAAA,yCA7DF,CAAkBpoE,EAAAooE,YAAApoE,EAAAooE,UAAS,KAqE3B,SAAYD,GAEVA,IAAA,eAGAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,0BAEAA,IAAA,wBAGAA,IAAA,oDAEAA,IAAA,uDAEAA,IAAA,qDAGAA,IAAA,sCAQAA,IAAA,uCAMAA,IAAA,iCAvCF,CAAYA,EAAAnoE,EAAAmoE,aAAAnoE,EAAAmoE,WAAU,KA0CtB,SAAiBA,GACCA,EAAAjvD,KAAhB,SAAqBsa,EAAkBC,GACrC,OAASD,EAAO20C,EAAWE,gBAAoB50C,EAAQ00C,EAAWE,gBACzD70C,EAAO20C,EAAWG,gBAAoB70C,EAAQ00C,EAAWG,iBAHtE,CAAiBH,EAAAnoE,EAAAmoE,aAAAnoE,EAAAmoE,WAAU,KAQ3B,SAAYI,GAEVA,IAAA,eAGAA,IAAA,6BAEAA,IAAA,yDAGAA,IAAA,qCAGAA,IAAA,qCAbF,CAAYvoE,EAAAuoE,aAAAvoE,EAAAuoE,WAAU,KAetB,SAAiBA,GACCA,EAAArvD,KAAhB,SAAqBsa,EAAkBC,GACrC,OAASD,EAAO+0C,EAAWF,gBAAoB50C,EAAQ80C,EAAWF,gBACzD70C,EAAO+0C,EAAWD,gBAAoB70C,EAAQ80C,EAAWD,iBAHtE,CAAiBtoE,EAAAuoE,aAAAvoE,EAAAuoE,WAAU,KAQ3B,IAAAvgD,EAAA,WAsDE,SAAAA,IArCA1nB,KAAAkoE,aAAyC,KAIzCloE,KAAAmoE,WAA4C,KA6yB9C,OAtyBSzgD,EAAA/lB,OAAP,SAAcymE,GACZ,IAAI3gD,EAAO,IAAIC,EAWf,OAVAD,EAAKzW,OAAS,KACdyW,EAAK5X,MAAK,EACV4X,EAAK2gD,eAAiBA,EACtB3gD,EAAK4gD,cAAgB,KACrB5gD,EAAKT,WAAa,KAClBS,EAAKwJ,WAAam3C,EAAer3D,UAAUkgB,WAC3CxJ,EAAK3B,wBAA0BsiD,EAAetiD,wBAC9C2B,EAAK6gD,WAAa,GAClB7gD,EAAK8gD,eAAiB,KACtB9gD,EAAK+gD,kBAAoB,KAClB/gD,GAIFC,EAAA+gD,aAAP,SAAoBL,EAA0BG,GAC5C,IAAI9gD,EAAOC,EAAK/lB,OAAOymE,GAMvB,OALA3gD,EAAK/Y,IAAG,OACR+Y,EAAK8gD,eAAiBA,EACtB9gD,EAAK+gD,kBAAoBD,EAAe55D,aAAe,aAAe45D,EAAejiD,gBAAgBtI,SAAS,IAC9GyJ,EAAKwJ,WAAas3C,EAAex3D,UAAUkgB,WAC3CxJ,EAAK3B,wBAA0ByiD,EAAeziD,wBACvC2B,GAMT1mB,OAAAC,eAAI0mB,EAAAzlB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKuoE,gBAAkBvoE,KAAKooE,gDAIrC1gD,EAAAzlB,UAAAsa,GAAA,SAAGoB,GAAyB,OAAQ3d,KAAK6P,MAAQ8N,IAASA,GAE1D+J,EAAAzlB,UAAA6c,MAAA,SAAMnB,GAAyB,OAA8B,IAAtB3d,KAAK6P,MAAQ8N,IAEpD+J,EAAAzlB,UAAAyM,IAAA,SAAIiP,GAAyB3d,KAAK6P,OAAS8N,GAE3C+J,EAAAzlB,UAAAghB,MAAA,SAAMtF,GAAyB3d,KAAK6P,QAAU8N,GAG9C+J,EAAAzlB,UAAAymE,KAAA,WACE,IAAIC,EAAS,IAAIjhD,EAWjB,OAVAihD,EAAO33D,OAAShR,KAChB2oE,EAAO94D,MAAQ7P,KAAK6P,MACpB84D,EAAOP,eAAiBpoE,KAAKooE,eAC7BO,EAAON,cAAgBroE,KAAKqoE,cAC5BM,EAAO3hD,WAAahnB,KAAKgnB,WACzB2hD,EAAO13C,WAAajxB,KAAKixB,WACzB03C,EAAO7iD,wBAA0B9lB,KAAK8lB,wBACtC6iD,EAAOL,WAAatoE,KAAKsoE,WAAWM,QACpCD,EAAOJ,eAAiBvoE,KAAKuoE,eAC7BI,EAAOH,kBAAoBxoE,KAAKwoE,kBACzBG,GAITjhD,EAAAzlB,UAAA4mE,aAAA,SAAa3sD,EAAY+P,QAAA,IAAAA,MAAA,MACvB,IACI68C,EASA3hD,EAVAihD,EAAiBpoE,KAAKooE,eAE1B,OAAQlsD,EAAK+3C,gBACX,KAAK5B,EAAAjyB,WAAWh6B,IAAO0iE,EAAQV,EAAe3hD,SAAU,MACxD,KAAK4rC,EAAAjyB,WAAW/5B,IAAOyiE,EAAQV,EAAe1hD,SAAU,MACxD,KAAK2rC,EAAAjyB,WAAWv5B,IAAOiiE,EAAQV,EAAezhD,SAAU,MACxD,KAAK0rC,EAAAjyB,WAAWt5B,IAAOgiE,EAAQV,EAAexhD,SAAU,MACxD,KAAKyrC,EAAAjyB,WAAWr5B,KAAQ+hE,EAAQV,EAAevhD,UAAW,MAC1D,QAAS,MAAM,IAAIxN,MAAM,0BAG3B,GAAI4S,EAAQ,CACV,GAAI68C,GAASA,EAAMh+D,OACjB,IAAK,IAAIzK,EAAI,EAAG8O,EAAI25D,EAAMh+D,OAAQzK,EAAI8O,IAAK9O,EACzC,IAAK4rB,EAAO3a,IAAIw3D,EAAMzoE,GAAG4kB,OAAQ,CAC/BkC,EAAQ2hD,EAAMzoE,GAEd,IADA,IAAI0oE,EAAID,EAAMh+D,OAAS,EAChBzK,EAAI0oE,GAAGl+C,UAAUi+C,EAAMzoE,GAAKyoE,EAAY,EAANzoE,MAKzC,OAJAyoE,EAAMh+D,OAASi+D,EACf5hD,EAAMjL,KAAOA,EACbiL,EAAMtX,MAAQpG,EAAApH,YAAYyN,KAC1B9P,KAAKgpE,eAAe7hD,EAAMlC,OAAO,GAC1BkC,EAIbA,EAAQihD,EAAexgD,SAAS1L,QAE5B4sD,GAASA,EAAMh+D,SACjBqc,EAAQ2hD,EAAMG,OACR/sD,KAAOA,EACbiL,EAAMtX,MAAQpG,EAAApH,YAAYyN,MAE1BqX,EAAQihD,EAAexgD,SAAS1L,GAIpC,OADAlc,KAAKgpE,eAAe7hD,EAAMlC,OAAO,GAC1BkC,GAITO,EAAAzlB,UAAAinE,oBAAA,SAAoBhtD,EAAY+P,QAAA,IAAAA,MAAA,MAC9B,IAAI9E,EAAQnnB,KAAK6oE,aAAa3sD,EAAM+P,GACpC9E,EAAMzY,IAAIjF,EAAApH,YAAY8mE,QACtB,IAAIjB,EAAeloE,KAAKkoE,aAIxB,OAHKA,IAAcloE,KAAKkoE,aAAeA,EAAe,IAAI9gE,KAC1D8gE,EAAax5D,IAAI,QAAW1O,KAAKooE,eAAe5hD,oBAAsBW,GACtEnnB,KAAKopE,aAAajiD,EAAMlC,MAAO4iD,EAAWwB,UACnCliD,GAITO,EAAAzlB,UAAAqnE,cAAA,SAAcniD,GACZ,IAAIA,EAAM5K,GAAG9S,EAAApH,YAAYsiB,SAAzB,CACA9Z,OAAOsc,EAAMlC,OAAS,GACtB,IACI6jD,EADAV,EAAiBpoE,KAAKooE,eAG1B,OADAv9D,OAAqB,MAAdsc,EAAMjL,MACEiL,EAAMjL,KAAM+3C,gBACzB,KAAK5B,EAAAjyB,WAAWh6B,IACd0iE,EAAQV,EAAe3hD,WAAa2hD,EAAe3hD,SAAW,IAC9D,MAEF,KAAK4rC,EAAAjyB,WAAW/5B,IACdyiE,EAAQV,EAAe1hD,WAAa0hD,EAAe1hD,SAAW,IAC9D,MAEF,KAAK2rC,EAAAjyB,WAAWv5B,IACdiiE,EAAQV,EAAezhD,WAAayhD,EAAezhD,SAAW,IAC9D,MAEF,KAAK0rC,EAAAjyB,WAAWt5B,IACdgiE,EAAQV,EAAexhD,WAAawhD,EAAexhD,SAAW,IAC9D,MAEF,KAAKyrC,EAAAjyB,WAAWr5B,KACd+hE,EAAQV,EAAevhD,YAAcuhD,EAAevhD,UAAY,IAChE,MAEF,QAAS,MAAM,IAAIxN,MAAM,0BAE3BxO,OAAOsc,EAAMlC,OAAS,GACtB6jD,EAAMvqD,KAAK4I,KAIbO,EAAAzlB,UAAAsnE,oBAAA,SAAoBrtD,EAAY+P,QAAA,IAAAA,MAAA,MAC9B,IAAI9E,EAAQnnB,KAAK6oE,aAAa3sD,EAAM+P,GAEpC,OADAjsB,KAAKspE,cAAcniD,GACZA,GAITO,EAAAzlB,UAAAunE,eAAA,SAAe5oE,GACb,IAAIsnE,EAAeloE,KAAKkoE,aACxB,OAAIA,GAAgBA,EAAa52D,IAAI1Q,GAAcsnE,EAAahnE,IAAIN,GAC7D,MAIT8mB,EAAAzlB,UAAAwnE,eAAA,SAAe7oE,EAAcsb,EAAY+P,QAAA,IAAAA,MAAA,MACvC,IAAIy9C,EAAc1pE,KAAK6oE,aAAa3sD,EAAM+P,GACtCi8C,EAAeloE,KAAKkoE,aAKxB,OAJKA,EACAr9D,QAAQq9D,EAAa52D,IAAI1Q,IADXZ,KAAKkoE,aAAeA,EAAe,IAAI9gE,IAE1DsiE,EAAYh7D,IAAIjF,EAAApH,YAAY8mE,QAC5BjB,EAAax5D,IAAI9N,EAAM8oE,GAChBA,GAIThiD,EAAAzlB,UAAA0nE,eAAA,SAAe/oE,EAAcsb,EAAY+I,EAAYshD,GACnD,QADmD,IAAAA,MAAA,MAC9CvmE,KAAKkoE,aACL,CACH,IAAI0B,EAAgB5pE,KAAKkoE,aAAahnE,IAAIN,GAC1C,GAAIgpE,EAOF,OANIrD,GACFvmE,KAAKooE,eAAevlD,QAAQtN,MAC1B7L,EAAA8L,eAAeyH,uBACfspD,EAAWx2D,OAGR65D,OAVa5pE,KAAKkoE,aAAe,IAAI9gE,IAahDyD,OAAOoa,EAAQjlB,KAAKooE,eAAepiD,cAAclb,QACjD,IAAI++D,EAAc,IAAIzX,EAAAptC,MAAMpkB,EAAMqkB,EAAO/I,EAAMlc,KAAKooE,gBAGpD,OADApoE,KAAKkoE,aAAax5D,IAAI9N,EAAMipE,GACrBA,GAITniD,EAAAzlB,UAAA6nE,iBAAA,mBACE,GAAI9pE,KAAKkoE,aAAc,KACrB,IAAwB,IAAAnkD,EAAAnP,EAAA5U,KAAKkoE,aAAa1tD,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAA/C,IAAI40D,EAAWruD,EAAA/Z,MACdooE,EAAYntD,GAAG9S,EAAApH,YAAY8mE,SAC7BnpE,KAAKspE,cAAcI,qGAGvB1pE,KAAKkoE,aAAe,OAKxBxgD,EAAAzlB,UAAAkjE,YAAA,SAAYvkE,GACV,IACImpE,EADA/mD,EAAuBhjB,KAE3B,GAAG,IAAK+pE,EAAQ/mD,EAAQklD,eAAkB6B,EAAMz4D,IAAI1Q,GAAQ,OAAOmpE,EAAM7oE,IAAIN,SACtEoiB,EAAUA,EAAQhS,QACzB,OAAOhR,KAAKooE,eAAeriD,aAAa7kB,IAAIN,IAI9C8mB,EAAAzlB,UAAA0hB,OAAA,SAAO/iB,GACL,IAAI+U,EAAU3V,KAAKmlE,YAAYvkE,GAC/B,OAAI+U,GACG3V,KAAK4kE,eAAejhD,OAAO/iB,IAIpC8mB,EAAAzlB,UAAA+nE,YAAA,SAAY/kD,EAAYtH,EAAkBssD,GACxC,YADwC,IAAAA,OAAA,GACpChlD,EAAQ,EAAUglD,EAEfhlD,EADUjlB,KAAKsoE,WACIx9D,SAAW+f,UAAU7qB,KAAKsoE,WAAWrjD,IAAUtH,IAASA,GAIpF+J,EAAAzlB,UAAAioE,eAAA,SAAejlD,EAAYtH,EAAkBssD,GAC3C,YAD2C,IAAAA,OAAA,GACvChlD,EAAQ,EAAUglD,EAEfhlD,EADUjlB,KAAKsoE,WACIx9D,QAAwD,IAA7C+f,UAAU7qB,KAAKsoE,WAAWrjD,IAAUtH,IAI3E+J,EAAAzlB,UAAAmnE,aAAA,SAAankD,EAAYtH,GACvB,KAAIsH,EAAQ,GAAZ,CACA,IAAIqjD,EAAatoE,KAAKsoE,WAClBz4D,EAAQoV,EAAQqjD,EAAWx9D,OAAS+f,UAAUy9C,EAAWrjD,IAAU,EACvEjlB,KAAKsoE,WAAWrjD,GAASpV,EAAQ8N,IAInC+J,EAAAzlB,UAAA+mE,eAAA,SAAe/jD,EAAYtH,GACzB,KAAIsH,EAAQ,GAAZ,CACA,IAAIqjD,EAAatoE,KAAKsoE,WAClBz4D,EAAQoV,EAAQqjD,EAAWx9D,OAAS+f,UAAUy9C,EAAWrjD,IAAU,EACvEjlB,KAAKsoE,WAAWrjD,GAASpV,GAAS8N,IAIpC+J,EAAAzlB,UAAAkoE,eAAA,WACE,IAAI/B,EAAiBpoE,KAAKooE,eACtBz4D,EAAKy4D,EAAethD,cACpBsjD,EAAQhC,EAAerhD,WAG3B,OAFKqjD,EACAA,EAAM7rD,KAAK5O,GADJy4D,EAAerhD,WAAa,CAAEpX,GAEnCy4D,EAAephD,WAAarX,EAAGqO,SAAS,KAIjD0J,EAAAzlB,UAAAooE,cAAA,WACE,IAAIjC,EAAiBpoE,KAAKooE,eACtBgC,EAAQv/D,OAAOu9D,EAAerhD,YAC9Bjc,EAASD,OAAOu/D,EAAMt/D,QAC1Bs/D,EAAMnB,MACFn+D,EAAS,EACXs9D,EAAephD,WAAaojD,EAAMt/D,EAAS,GAAGkT,SAAS,KAEvDoqD,EAAephD,WAAa,KAC5BohD,EAAerhD,WAAa,OAKhCW,EAAAzlB,UAAAqoE,QAAA,SAAQt+C,GACNhsB,KAAK6P,OAAuB,MAAdmc,EAAMnc,MACpB7P,KAAKsoE,WAAat8C,EAAMs8C,YAI1B5gD,EAAAzlB,UAAAsoE,mBAAA,SAAmBv+C,GACbA,EAAMzP,GAAE,IACVvc,KAAK0O,IAAG,KAENsd,EAAMzP,GAAE,IACVvc,KAAK0O,IAAG,MAENsd,EAAMzP,GAAE,KAAsByP,EAAMhF,YAAchnB,KAAKgnB,YACzDhnB,KAAK0O,IAAG,MAENsd,EAAMzP,GAAE,KAAyByP,EAAMq8C,eAAiBroE,KAAKqoE,eAC/DroE,KAAK0O,IAAG,MAENsd,EAAMzP,GAAE,KACVvc,KAAK0O,IAAG,OAGV,IADA,IAAI45D,EAAat8C,EAAMs8C,WACdjoE,EAAI,EAAG8O,EAAIm5D,EAAWx9D,OAAQzK,EAAI8O,IAAK9O,EAAG,CACjD,IAAIwP,EAAQy4D,EAAWjoE,GACnBwP,EAAQg4D,EAAWwB,UAAUrpE,KAAKopE,aAAa/oE,EAAGwnE,EAAW2C,wBAC7D36D,EAAQg4D,EAAW4C,UAAUzqE,KAAKopE,aAAa/oE,EAAGwnE,EAAW6C,wBAC7D76D,EAAQg4D,EAAW8C,WAAW3qE,KAAKopE,aAAa/oE,EAAGwnE,EAAW+C,2BAKtEljD,EAAAzlB,UAAA4oE,cAAA,SAAc33C,EAAYC,GAExBnzB,KAAK0O,IAAIwkB,EAAKrjB,MAAQsjB,EAAMtjB,MAAK,KAGjC7P,KAAK0O,IAAc,MAAVwkB,EAAKrjB,OACd7P,KAAK0O,IAAe,MAAXykB,EAAMtjB,OAGf7P,KAAKuqE,mBAAmBr3C,GACxBlzB,KAAKuqE,mBAAmBp3C,GAQxB,IALA,IAAI23C,EAAiB53C,EAAKo1C,WACtByC,EAAoBD,EAAehgE,OACnCkgE,EAAkB73C,EAAMm1C,WACxB2C,EAAqBD,EAAgBlgE,OACrCogE,EAAgB,IAAIjkE,MAAkBkkE,IAASJ,EAAmBE,IAC7D5qE,EAAI,EAAGA,EAAI0qE,IAAqB1qE,EACvC6qE,EAAc7qE,GAAKwnE,EAAWjvD,KAC5BiS,UAAUigD,EAAezqE,IACzBA,EAAI4qE,EACApgD,UAAUmgD,EAAgB3qE,IAC1B,GAGR,IAASA,EAAI0qE,EAAmB1qE,EAAI4qE,IAAsB5qE,EACxD6qE,EAAc7qE,GAAKwnE,EAAWjvD,KAC5B,EACAiS,UAAUmgD,EAAgB3qE,KAG9BL,KAAKsoE,WAAa4C,GAIpBxjD,EAAAzlB,UAAAmpE,UAAA,SAAUh5C,EAAqBlW,GAC7B,IAAKA,EAAKK,GAAE,KAAsB,OAAO,EAIzC,OAAQ81C,EAAApL,gBAAgB70B,IACtB,KAAKigC,EAAAhyB,aAAa8uB,SAChB,IAAKkD,EAAAxK,WAAWz1B,GAAO,MAEvB,QADIjL,EAAQnnB,KAAKooE,eAAepiD,cAAcqsC,EAAA5K,iBAAiBr1B,KACjDlW,KAAKK,GAAE,MAAwBvc,KAAKgqE,YAAY7iD,EAAMlC,MAAO4iD,EAAW9C,SAAS,GAEjG,KAAK1S,EAAAhyB,aAAaglB,SAChB,IAAIl+B,EACJ,QADIA,EAAQnnB,KAAKooE,eAAepiD,cAAcqsC,EAAA7K,iBAAiBp1B,KACjDlW,KAAKK,GAAE,MAAwBvc,KAAKgqE,YAAY7iD,EAAMlC,MAAO4iD,EAAW9C,SAAS,GAGnG,OAAO,GAITr9C,EAAAzlB,UAAAopE,qBAAA,SAAqBj5C,GAEnB,OAAQigC,EAAApL,gBAAgB70B,IACtB,KAAKigC,EAAAhyB,aAAa8uB,SAChB,IAAKkD,EAAAxK,WAAWz1B,GAAO,MACvB,IAAIjL,EAAQnnB,KAAKooE,eAAepiD,cAAcqsC,EAAA5K,iBAAiBr1B,IAC/DpyB,KAAKopE,aAAajiD,EAAMlC,MAAO4iD,EAAW9C,SAC1C/kE,KAAKqrE,qBAAqBhZ,EAAA1K,iBAAiBv1B,IAC3C,MAEF,KAAKigC,EAAAhyB,aAAaglB,SACZl+B,EAAQnnB,KAAKooE,eAAepiD,cAAcqsC,EAAA7K,iBAAiBp1B,IAC/DpyB,KAAKopE,aAAajiD,EAAMlC,MAAO4iD,EAAW9C,SAC1C,MAEF,KAAK1S,EAAAhyB,aAAasuB,GAChB,IAAI11B,EAAUo5B,EAAA1I,WAAWv3B,GACzB,IAAK6G,EAAS,MACVo5B,EAAApL,gBAAgBhuB,IAAYo5B,EAAAhyB,aAAa0kB,QAIxCsN,EAAAnL,kBAAkBjuB,IAAYo5B,EAAAjyB,WAAWh6B,KAAoC,GAA7BisD,EAAAlL,iBAAiBluB,IACjEo5B,EAAAnL,kBAAkBjuB,IAAYo5B,EAAAjyB,WAAW/5B,KAAuC,GAAhCgsD,EAAAjL,oBAAoBnuB,IAAkD,GAAjCo5B,EAAAhL,qBAAqBpuB,MAE3Gj5B,KAAKqrE,qBAAqBhZ,EAAA9I,eAAen3B,IACzCpyB,KAAKqrE,qBAAqBhZ,EAAA5I,UAAUr3B,KAGxC,MAEF,KAAKigC,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW/1B,IACjB,KAAKigC,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OACXvrE,KAAKwrE,sBAAsBnZ,EAAAjK,cAAch2B,IAI7C,MAEF,KAAKigC,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY51B,IAClB,KAAKigC,EAAArpB,SAASyiC,MACZ,IAAIv4C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiBj0B,GAClElzB,KAAKqrE,qBAAqBl4C,GACjBk/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiBh0B,IAC1EnzB,KAAKqrE,qBAAqBn4C,GAE5B,MAEF,KAAKm/B,EAAArpB,SAAS0iC,MACRx4C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAuC,GAA7BsN,EAAAjL,oBAAoBl0B,IAA4C,GAA9Bm/B,EAAAhL,qBAAqBn0B,GAEhGm/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAwC,GAA9BsN,EAAAjL,oBAAoBj0B,IAA8C,GAA/Bk/B,EAAAhL,qBAAqBl0B,IAClHnzB,KAAKqrE,qBAAqBn4C,GAF1BlzB,KAAKqrE,qBAAqBl4C,GAI5B,MAEF,KAAKk/B,EAAArpB,SAAS2iC,MACRz4C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiBj0B,GAClElzB,KAAKqrE,qBAAqBl4C,GACjBk/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiBh0B,IAC1EnzB,KAAKqrE,qBAAqBn4C,GAE5B,MAEF,KAAKm/B,EAAArpB,SAAS4iC,MACR14C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAsC,GAA7BsN,EAAAjL,oBAAoBl0B,IAA4C,GAA9Bm/B,EAAAhL,qBAAqBn0B,GACxGlzB,KAAKqrE,qBAAqBl4C,GACjBk/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAuC,GAA9BsN,EAAAjL,oBAAoBj0B,IAA8C,GAA/Bk/B,EAAAhL,qBAAqBl0B,IACjHnzB,KAAKqrE,qBAAqBn4C,GAKhC,MAEF,KAAKm/B,EAAAhyB,aAAa0uB,KAGhB,OAFWsD,EAAAvH,cAAc14B,IAGvB,KAFYpyB,KAAKooE,eAAevlD,QAEnB7I,eAAerL,aAC1B3O,KAAKqrE,qBAAqBhZ,EAAAnH,eAAe94B,EAAM,OAUzD1K,EAAAzlB,UAAAupE,sBAAA,SAAsBp5C,GAEpB,OAAQigC,EAAApL,gBAAgB70B,IACtB,KAAKigC,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW/1B,IACjB,KAAKigC,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OACXvrE,KAAKqrE,qBAAqBhZ,EAAAjK,cAAch2B,IAI5C,MAEF,KAAKigC,EAAAhyB,aAAasuB,GAChB,IAAI31B,EAASq5B,EAAA5I,UAAUr3B,GACvB,GAAIigC,EAAApL,gBAAgBjuB,IAAWq5B,EAAAhyB,aAAa0kB,MAAO,CAEjD,IADcsN,EAAA1I,WAAWv3B,GACX,OAIXigC,EAAAnL,kBAAkBluB,IAAWq5B,EAAAjyB,WAAWh6B,KAAmC,GAA5BisD,EAAAlL,iBAAiBnuB,IAChEq5B,EAAAnL,kBAAkBluB,IAAWq5B,EAAAjyB,WAAW/5B,MAAuC,GAA/BgsD,EAAAjL,oBAAoBpuB,IAAgD,GAAhCq5B,EAAAhL,qBAAqBruB,OAE1Gh5B,KAAKwrE,sBAAsBnZ,EAAA9I,eAAen3B,IAC1CpyB,KAAKwrE,sBAAsBnZ,EAAA1I,WAAWv3B,KAI1C,MAEF,KAAKigC,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY51B,IAElB,KAAKigC,EAAArpB,SAASyiC,MACZ,IAAIv4C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiBj0B,GAClElzB,KAAKqrE,qBAAqBl4C,GACjBk/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiBh0B,IAC1EnzB,KAAKqrE,qBAAqBn4C,GAE5B,MAEF,KAAKm/B,EAAArpB,SAAS0iC,MACRx4C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAsC,GAA7BsN,EAAAjL,oBAAoBl0B,IAA4C,GAA9Bm/B,EAAAhL,qBAAqBn0B,GACxGlzB,KAAKqrE,qBAAqBl4C,GACjBk/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAuC,GAA9BsN,EAAAjL,oBAAoBj0B,IAA8C,GAA/Bk/B,EAAAhL,qBAAqBl0B,IACjHnzB,KAAKqrE,qBAAqBn4C,GAE5B,MAEF,KAAKm/B,EAAArpB,SAAS2iC,MACRz4C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiBj0B,GAClElzB,KAAKqrE,qBAAqBl4C,GACjBk/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiBh0B,IAC1EnzB,KAAKqrE,qBAAqBn4C,GAE5B,MAEF,KAAKm/B,EAAArpB,SAAS4iC,MACR14C,EAAOm/B,EAAApK,cAAc71B,GACrBe,EAAQk/B,EAAAnK,eAAe91B,GACvBigC,EAAApL,gBAAgB/zB,IAASm/B,EAAAhyB,aAAa0kB,OAAuC,GAA7BsN,EAAAjL,oBAAoBl0B,IAA4C,GAA9Bm/B,EAAAhL,qBAAqBn0B,GAEhGm/B,EAAApL,gBAAgB9zB,IAAUk/B,EAAAhyB,aAAa0kB,OAAwC,GAA9BsN,EAAAjL,oBAAoBj0B,IAA8C,GAA/Bk/B,EAAAhL,qBAAqBl0B,IAClHnzB,KAAKqrE,qBAAqBn4C,GAF1BlzB,KAAKqrE,qBAAqBl4C,MAiBtCzL,EAAAzlB,UAAA4pE,YAAA,SAAYz5C,EAAqBlW,GAM/B,GAHArR,OAAOqR,GAAQvS,EAAA+H,KAAKG,OAGfqK,EAAKK,GAAG,IAAsC,OAAO,EAE1D,IAAIma,EACJ,OAAQ27B,EAAApL,gBAAgB70B,IAGtB,KAAKigC,EAAAhyB,aAAaglB,SAChB,IAAIl+B,EAAQnnB,KAAKooE,eAAepiD,cAAcqsC,EAAA7K,iBAAiBp1B,IAC/D,OAAQpyB,KAAKgqE,YAAY7iD,EAAMlC,MAAO4iD,EAAWiE,SAAS,IACnDC,EAAsB5kD,EAAMjL,KAAMA,GAI3C,KAAKm2C,EAAAhyB,aAAa8uB,SAEhB,OADAtkD,OAAOwnD,EAAAxK,WAAWz1B,IACXpyB,KAAK6rE,YAAYxZ,EAAA1K,iBAAiBv1B,GAAOlW,GAIlD,KAAKm2C,EAAAhyB,aAAaklB,UAEhB,IAAIymB,EAASnhE,OAAO7K,KAAKooE,eAAevlD,QAAQhV,eAAe3M,IAAI2J,OAAOwnD,EAAAtK,iBAAiB31B,MAE3F,OADAvnB,OAAOmhE,EAAO14D,MAAQ8+C,EAAAhlD,YAAY+Q,QAC3B4tD,EAAsBlhE,OAAgBmhE,EAAQ9vD,MAAOA,GAG9D,KAAKm2C,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY51B,IAGlB,KAAKigC,EAAArpB,SAASyiC,MACd,KAAKpZ,EAAArpB,SAAS0iC,MACd,KAAKrZ,EAAArpB,SAASijC,MACd,KAAK5Z,EAAArpB,SAASkjC,MACd,KAAK7Z,EAAArpB,SAAS2iC,MACd,KAAKtZ,EAAArpB,SAAS4iC,MACd,KAAKvZ,EAAArpB,SAASmjC,MACd,KAAK9Z,EAAArpB,SAASojC,MACd,KAAK/Z,EAAArpB,SAASqjC,MACd,KAAKha,EAAArpB,SAASsjC,MACd,KAAKja,EAAArpB,SAASujC,MACd,KAAKla,EAAArpB,SAASwjC,MACd,KAAKna,EAAArpB,SAASyjC,MACd,KAAKpa,EAAArpB,SAAS0jC,MACd,KAAKra,EAAArpB,SAAS2jC,MACd,KAAKta,EAAArpB,SAAS4jC,MACd,KAAKva,EAAArpB,SAAS6jC,MACd,KAAKxa,EAAArpB,SAAS8jC,MACd,KAAKza,EAAArpB,SAAS+jC,MACd,KAAK1a,EAAArpB,SAASgkC,MACd,KAAK3a,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASkkC,MACd,KAAK7a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASokC,MACd,KAAK/a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MACd,KAAKjb,EAAArpB,SAASukC,MACd,KAAKlb,EAAArpB,SAASwkC,MACd,KAAKnb,EAAArpB,SAASykC,MACd,KAAKpb,EAAArpB,SAAS0kC,MACd,KAAKrb,EAAArpB,SAAS2kC,MACd,KAAKtb,EAAArpB,SAAS4kC,MAAO,OAAO,EAG5B,KAAKvb,EAAArpB,SAAS6kC,OACZ,QAEIxb,EAAApL,gBAAgBvwB,EAAU27B,EAAApK,cAAc71B,KAAUigC,EAAAhyB,aAAa0kB,QAEhC,GAA7BsN,EAAAlL,iBAAiBzwB,IAEc,GAA7B27B,EAAAlL,iBAAiBzwB,KAChB12B,KAAK6rE,YAAYxZ,EAAAnK,eAAe91B,GAAOlW,KAI5Cm2C,EAAApL,gBAAgBvwB,EAAU27B,EAAAnK,eAAe91B,KAAUigC,EAAAhyB,aAAa0kB,QAEjC,GAA7BsN,EAAAlL,iBAAiBzwB,IAEc,GAA7B27B,EAAAlL,iBAAiBzwB,KAChB12B,KAAK6rE,YAAYxZ,EAAApK,cAAc71B,GAAOlW,KASjD,KAAKm2C,EAAArpB,SAAS8kC,OAGZ,QAGMzb,EAAApL,gBAAgBvwB,EAAU27B,EAAApK,cAAc71B,KAAUigC,EAAAhyB,aAAa0kB,OAC/DsN,EAAAlL,iBAAiBzwB,IAAYxa,EAAKo3C,wBAAwB3pD,EAAA+H,KAAKtO,OAC3DpD,KAAK6rE,YAAYn1C,EAASxa,IAG9Bm2C,EAAApL,gBAAgBvwB,EAAU27B,EAAAnK,eAAe91B,KAAUigC,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBzwB,IAAYxa,EAAKo3C,wBAAwB3pD,EAAA+H,KAAKtO,OAC3DpD,KAAK6rE,YAAYn1C,EAASxa,IAMtC,KAAKm2C,EAAArpB,SAAS+kC,OACZ,IAAI/wB,EAAQ,GAAK9gC,EAAK2/B,KACtB,OAAOwW,EAAApL,gBAAgBvwB,EAAU27B,EAAAnK,eAAe91B,KAAUigC,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBzwB,GAAWsmB,EAIrC,KAAKqV,EAAArpB,SAASglC,OACRhxB,EAAQ,GAAK9gC,EAAK2/B,KACtB,OAAO77C,KAAK6rE,YAAYxZ,EAAApK,cAAc71B,GAAOlW,KAC3Cm2C,EAAApL,gBAAgBvwB,EAAU27B,EAAAnK,eAAe91B,KAAUigC,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBzwB,GAAWsmB,GAMhC,KAAKqV,EAAArpB,SAASilC,OACRjxB,EAAQ,GAAK9gC,EAAK2/B,KACtB,OAAO3/B,EAAKK,GAAE,KAER81C,EAAApL,gBAAgBvwB,EAAU27B,EAAAnK,eAAe91B,KAAUigC,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBzwB,GAAWsmB,GAE9Bh9C,KAAK6rE,YAAYxZ,EAAApK,cAAc71B,GAAOlW,MACpCm2C,EAAApL,gBAAgBvwB,EAAU27B,EAAAnK,eAAe91B,KAAUigC,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiBzwB,IAAYsmB,GAKrC,KAAKqV,EAAArpB,SAASklC,OACd,KAAK7b,EAAArpB,SAASmlC,OACd,KAAK9b,EAAArpB,SAASolC,OACZ,OAAOpuE,KAAK6rE,YAAYxZ,EAAApK,cAAc71B,GAAOlW,IACtClc,KAAK6rE,YAAYxZ,EAAAnK,eAAe91B,GAAOlW,GAGlD,MAGF,KAAKm2C,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW/1B,IAGjB,KAAKigC,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OAAQ,OAAO,EAG5B,KAAKlZ,EAAA3uB,QAAQ2qC,OACb,KAAKhc,EAAA3uB,QAAQ4qC,OACb,KAAKjc,EAAA3uB,QAAQ6qC,UAAW,OAAOryD,EAAK2/B,KAAO,EAE7C,MAIF,KAAKwW,EAAAhyB,aAAa0kB,MAChB,IAAIzjD,EAAa,EACjB,OAAQ+wD,EAAAnL,kBAAkB90B,IACxB,KAAKigC,EAAAjyB,WAAWh6B,IAAO9E,EAAQ+wD,EAAAlL,iBAAiB/0B,GAAO,MACvD,KAAKigC,EAAAjyB,WAAW/5B,IAAO/E,EAAQ+wD,EAAAjL,oBAAoBh1B,GAAO,MAC1D,KAAKigC,EAAAjyB,WAAWv5B,IAAOvF,EAAQ8B,IAAIivD,EAAA/K,iBAAiBl1B,IAAQ,MAC5D,KAAKigC,EAAAjyB,WAAWt5B,IAAOxF,EAAQ8B,IAAIivD,EAAA9K,iBAAiBn1B,IAAQ,MAC5D,QAASvnB,QAAO,GAElB,OAAQqR,EAAK5I,MACX,OAAkB,OAAOhS,EAAQ4B,GAAGsrE,WAAaltE,EAAQ4B,GAAG0hD,UAC5D,OAAmB,OAAOtjD,EAAQ6B,IAAIqrE,WAAaltE,EAAQ6B,IAAIyhD,UAC/D,OAAkB,OAAOtjD,EAAQ,GAAKA,EAAQiC,GAAGqhD,UACjD,OAAmB,OAAOtjD,EAAQ,GAAKA,EAAQkC,IAAIohD,UACnD,QAAoB,OAAuB,KAAP,EAARtjD,GAE9B,MAIF,KAAK+wD,EAAAhyB,aAAaqlB,KAChB,IAAI+oB,OAAQ,EACRn2B,EAAS+Z,EAAA7J,aAAap2B,GAC1B,OAAQigC,EAAAhK,aAAaj2B,IACnB,KAAK,EAAMq8C,EAAWn2B,EAAS3uC,EAAA+H,KAAKxO,GAAMyG,EAAA+H,KAAKnO,GAAK,MACpD,KAAK,EAAMkrE,EAAWn2B,EAAS3uC,EAAA+H,KAAKvO,IAAMwG,EAAA+H,KAAKlO,IAAK,MACpD,QAAWirE,EAAWn2B,EAAS3uC,EAAA+H,KAAKtO,IAAMuG,EAAA+H,KAAKjO,IAEjD,OAAOsoE,EAAsB0C,EAAUvyD,GAMzC,KAAKm2C,EAAAhyB,aAAakuB,MAChB,IAAK8D,EAAApJ,aAAa72B,GAAO,CACvB,IAAIypB,EAAOhxC,OAAOwnD,EAAAlJ,mBAAmB/2B,IACjCs8C,EAAOrc,EAAAhJ,cAAcj3B,EAAMypB,EAAO,GACtC,OAAO77C,KAAK6rE,YAAY6C,EAAMxyD,GAEhC,MAIF,KAAKm2C,EAAAhyB,aAAasuB,GAChB,OAAO3uD,KAAK6rE,YAAYxZ,EAAA5I,UAAUr3B,GAAOlW,IAClClc,KAAK6rE,YAAYhhE,OAAOwnD,EAAA1I,WAAWv3B,IAAQlW,GAIpD,KAAKm2C,EAAAhyB,aAAa2xB,OAChB,OAAOhyD,KAAK6rE,YAAYxZ,EAAAhI,cAAcj4B,GAAOlW,IACtClc,KAAK6rE,YAAYxZ,EAAA9H,cAAcn4B,GAAOlW,GAI/C,KAAKm2C,EAAAhyB,aAAa0uB,KAChB,IACIhhD,EADU/N,KAAKooE,eAAevlD,QACJ9U,gBAC1B4gE,EAAe9jE,OAAOwnD,EAAAvH,cAAc14B,IACxC,GAAIrkB,EAAgBuD,IAAIq9D,GAAe,CACrC,IAAI/oD,EAAW7X,EAAgB7M,IAAIytE,GACnC9jE,OAAO+a,EAAStS,MAAQ8+C,EAAAhlD,YAAYwO,UACpC,IAAIqV,EAAwBrL,EAAU7U,UAAUkgB,WAChD,OAAmBrL,EAAU6B,KAAKlL,GAAE,IAC7BwvD,EAAsB96C,EAAY/U,GAE3C,OAAO,EAIT,KAAKm2C,EAAAhyB,aAAaguB,YAAa,OAAO,EAExC,OAAO,GAGT3mC,EAAAzlB,UAAA+b,SAAA,WAGE,IAFA,IAAI4wD,EAAS,EACT59D,EAAShR,KAAKgR,OACXA,GACLA,EAASA,EAAOA,SACd49D,EAEJ,MAAO,QAAU5uE,KAAK4kE,eAAiB,KAAOgK,EAAO5wD,WAAa,KAEtE0J,EAl0BA,GAq0BA,SAASqkD,EAAsB0C,EAAgB37C,GAC7C,OAAQ27C,EAASlyD,GAAE,IACZkyD,EAAS5yB,KAAO/oB,EAAO+oB,MACvB4yB,EAASlyD,GAAE,IAAsBuW,EAAOvW,GAAE,GAUnD,SAASsyD,EAAoBz8C,EAAqB08C,GAChD,OAAQzc,EAAApL,gBAAgB70B,IACtB,KAAKigC,EAAAhyB,aAAaglB,SAChBypB,EAAKh9D,IAAIugD,EAAA7K,iBAAiBp1B,IAC1B,MAEF,KAAKigC,EAAAhyB,aAAa8uB,SAChB2f,EAAKh9D,IAAIugD,EAAA5K,iBAAiBr1B,IAG5B,QAASigC,EAAA5D,SAASr8B,EAAM08C,EAAMD,IA51BrBnvE,EAAAgoB,OA40BbhoB,EAAAqvE,eAAA,SAA+B38C,EAAqB08C,GAElD,YAFkD,IAAAA,MAAA,IAAqB3nE,KACvEkrD,EAAA5D,SAASr8B,EAAM08C,EAAMD,GACdC,64BC9hCT,IAAAjO,EAAA1gE,EAAA,IASAuJ,EAAAvJ,EAAA,GAKAkyD,EAAAlyD,EAAA,GA4BAsJ,EAAAtJ,EAAA,GAYAiyD,EAAAjyD,EAAA,GAwBA6J,EAAA7J,EAAA,IAOA4J,EAAA5J,EAAA,GAIAyvB,EAAAzvB,EAAA,GAKAyJ,EAAAzJ,EAAA,GA+DAwJ,EAAAxJ,EAAA,GAQA0J,EAAA1J,EAAA,GAYA6uE,EAAA,oBAAAA,IAGEhvE,KAAA4qB,OAAiBnhB,EAAAL,OAAOoJ,OAExBxS,KAAAyS,UAAiB,EAEjBzS,KAAAivE,cAAqB,EAErBjvE,KAAAkvE,aAAoB,EAEpBlvE,KAAAmvE,aAAoB,EAEpBnvE,KAAA+nB,WAAkB,EAElB/nB,KAAAovE,eAAsB,EAEtBpvE,KAAA0S,WAAkB,EAElB1S,KAAA8Y,cAA2C,KAE3C9Y,KAAAqvE,SAAQ,EAGRrvE,KAAA2S,kBAAyB,EAEzB3S,KAAA4S,gBAAuB,EA0BzB,OAvBE7R,OAAAC,eAAIguE,EAAA/sE,UAAA,WAAQ,KAAZ,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAOmJ,wCAI/BxR,OAAAC,eAAIguE,EAAA/sE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAOmJ,OAAS5I,EAAA+H,KAAKshD,QAAUrpD,EAAA+H,KAAKuhD,yCAI5DlyD,OAAAC,eAAIguE,EAAA/sE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAOmJ,OAAS5I,EAAA+H,KAAKohD,QAAUnpD,EAAA+H,KAAKqhD,yCAI5DhyD,OAAAC,eAAIguE,EAAA/sE,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK4qB,QAAUnhB,EAAAL,OAAOmJ,OAAS8/C,EAAAjyB,WAAW/5B,IAAMgsD,EAAAjyB,WAAWh6B,qCAIpE4oE,EAAA/sE,UAAAkQ,WAAA,SAAWm9D,GACT,OAAoC,IAA5BtvE,KAAKqvE,SAAWC,IAE5BN,EApDA,GAAatvE,EAAAsvE,UAuDb,SAAkBO,GAChBA,IAAA,eAGAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,yBAGAA,IAAA,yBAEAA,IAAA,8BAEAA,IAAA,kCAfF,CAAkB7vE,EAAA6vE,cAAA7vE,EAAA6vE,YAAW,KAmB7B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,eAEAA,IAAA,eAEAA,IAAA,+BAEAA,IAAA,+BATF,CAAkB9vE,EAAA8vE,kBAAA9vE,EAAA8vE,gBAAe,KAajC,IAgkRIC,EACAC,EAjkRJC,EAAA,SAAApiE,GA2CE,SAAAoiE,EAAY9sD,EAAkBrR,QAAA,IAAAA,MAAA,MAA9B,IAAA/D,EACEF,EAAA/M,KAAAR,KAAM6iB,EAAQrV,cAAYxN,KA/B5ByN,EAAAmiE,uBAAqC,GAErCniE,EAAAoiE,YAA2B,KAE3BpiE,EAAAqiE,YAAoBnmE,EAAA+H,KAAKG,KAMzBpE,EAAAsiE,eAAkC,GAElCtiE,EAAAuiE,eAA4C,IAAI5oE,IAEhDqG,EAAAwiE,cAA0B,CAAE,QAE5BxiE,EAAAyiE,QAAqB,EAErBziE,EAAA0iE,QAAuB,EAEvB1iE,EAAA2iE,gBAAe,EAEf3iE,EAAA4iE,oBAA0C,IAAIlpE,IA8wFtCsG,EAAA6iE,eAAkC,KAClC7iE,EAAA8iE,eAAkC,KAClC9iE,EAAA+iE,eAAkC,KAClC/iE,EAAAgjE,eAAkC,KAvwFxChjE,EAAKoV,QAAUA,EACfpV,EAAKmB,SAAWiU,EAAQjU,SACnB4C,IAASA,EAAU,IAAIw9D,GAC5BvhE,EAAK+D,QAAUA,EACf/D,EAAKob,aAAexW,QAGlB84D,IAAI35D,EAAQkB,WAAY,IAE1BjF,EAAK9N,OAAS0yD,EAAAnd,OAAOvzC,SACrB,IAAImgD,EAAqC,SACrCr0C,EAAK+D,QAAQW,WAAU,MAAmB2vC,GAAgBuQ,EAAAvxB,aAAa4vC,SACvEjjE,EAAK+D,QAAQW,WAAU,KAA0B2vC,GAAgBuQ,EAAAvxB,aAAa6vC,gBAE9EljE,EAAK+D,QAAQW,WAAU,KAAgB2vC,GAAgBuQ,EAAAvxB,aAAa8vC,SACpEnjE,EAAK+D,QAAQW,WAAU,KAAuB2vC,GAAgBuQ,EAAAvxB,aAAa+vC,YAC3EpjE,EAAK+D,QAAQW,WAAU,KAA0B2vC,GAAgBuQ,EAAAvxB,aAAagwC,SAElFrjE,EAAK9N,OAAOkiD,YAAYC,KAk8Q5B,OAjgR8BhzC,EAAA6gE,EAAApiE,GAsCrBoiE,EAAAoB,QAAP,SAAeluD,EAAkBrR,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIm+D,EAAS9sD,EAASrR,GAASu/D,WA4BxCpB,EAAA1tE,UAAA8uE,QAAA,uBACMv/D,EAAUxR,KAAKwR,QACf7R,EAASK,KAAKL,OACdkjB,EAAU7iB,KAAK6iB,QAGnBA,EAAQtR,WAAWC,GAGnB,IAAIw/D,EAAwBnuD,EAAQ/R,mBAAmB,QAAS,IAAInH,EAAA8Z,UAAU,GAAI9Z,EAAA+H,KAAKG,OACvFm/D,EAAsBriE,aAAe,QACrC,IAAIsiE,EAAoB,IAAIhqE,MAC5BjH,KAAKkxE,YAAcF,EAAsBvpD,KACzCznB,KAAKmxE,YAAcF,EAGfz/D,EAAQc,UACV3S,EAAOu9C,UAAU2jB,EAAA2E,eAAe4L,UAAW/e,EAAAjyB,WAAW/5B,KAAK,EAAM1G,EAAO0D,IAAI,IAC5E1D,EAAOu9C,UAAU2jB,EAAA2E,eAAe6L,UAAWhf,EAAAjyB,WAAW/5B,KAAK,EAAM1G,EAAO0D,IAAI,MAE5E1D,EAAOu9C,UAAU2jB,EAAA2E,eAAe4L,UAAW/e,EAAAjyB,WAAWh6B,KAAK,EAAMzG,EAAOyD,IAAI,IAC5EzD,EAAOu9C,UAAU2jB,EAAA2E,eAAe6L,UAAWhf,EAAAjyB,WAAWh6B,KAAK,EAAMzG,EAAOyD,IAAI,KAI9E,IAAIkuE,EAAQzuD,EAAQjV,gBACpB,IAAiB,IAAAyN,EAAAzG,EAAA08D,EAAM92D,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAE,EAAxB5B,EAAIoI,EAAAha,OACF8N,OAAOsL,UACd1a,KAAKuxE,YAAYr+D,GACjBlT,KAAKwxE,eAAet+D,sGAKxB,IAAIu+D,GAAgBR,EAAkBnmE,OAClCskE,EAAgB59D,EAAQ49D,cAC5B,IAAKqC,GAAgBrC,EAAe,CAClC,IAAIr+D,EAAYigE,EAAsBjgE,WACjC0gE,GAAgBrC,IACnBzvE,EAAOu9C,UAAU2jB,EAAA2E,eAAekM,QAASrf,EAAAjyB,WAAWh6B,KAAK,EAAMzG,EAAOyD,IAAI,IAC1E6tE,EAAkBU,QAChBhyE,EAAO+6C,GACL/6C,EAAOw4C,WAAW0oB,EAAA2E,eAAekM,QAASrf,EAAAjyB,WAAWh6B,KACrDzG,EAAOm7C,SACPn7C,EAAOo6C,WAAW8mB,EAAA2E,eAAekM,QAAS/xE,EAAOyD,IAAI,OAI3D,IAAIwuE,EAAUjyE,EAAO49C,YACnByzB,EAAsBriE,aACtB3O,KAAK6xE,mBACH9gE,EAAUsW,eACVtW,EAAUkgB,WACVlgB,EAAUqW,UAEZzd,EAAA0qD,mBAAmB2c,EAAsB/qD,kBACzCtmB,EAAOs6C,MAAM,KAAMg3B,IAErBD,EAAsBlpD,SAASnoB,EAAQiyE,GAClCxC,EACAzvE,EAAOq+C,kBAAkBgzB,EAAsBriE,aAAc,WAD9ChP,EAAOihD,SAASgxB,GAKd,EAApB5xE,KAAKowE,iBAAgDvP,EAAAiR,oBAAoB9xE,MACrD,EAApBA,KAAKowE,iBAAgDvP,EAAAkR,oBAAoB/xE,MAC7EL,EAAO09C,aAAawjB,EAAA2E,eAAe6L,WACX,EAApBrxE,KAAKowE,iBAAwCvP,EAAAmR,YAAYhyE,MAG7D,IAAI6oB,EAAe7oB,KAAK6oB,aACxBA,EAAeopD,UAAUppD,EAAcrX,EAAQI,UAAU8gD,UACzD1yD,KAAK6oB,aAAeA,EACpBlpB,EAAO09C,aAAawjB,EAAA2E,eAAe4L,WACX,EAApBpxE,KAAKowE,kBACH5+D,EAAQc,SACV3S,EAAOu9C,UACL2jB,EAAA2E,eAAe4L,UACf/e,EAAAjyB,WAAW/5B,KACX,EACA1G,EAAO0D,IAAI68C,QAAQr3B,GAAes3B,SAASt3B,KAG7ClpB,EAAOu9C,UACL2jB,EAAA2E,eAAe4L,UACf/e,EAAAjyB,WAAWh6B,KACX,EACAzG,EAAOyD,IAAI88C,QAAQr3B,MAMzB,IAAIqpD,EAAiB1gE,EAAQW,WAAU,KAAqBX,EAAQ09D,aAAe,EACnFvvE,EAAO+/C,UACL1/C,KAAKwR,QAAQkB,YAAiC1S,KAAK+vE,eAAejlE,OAC9Do1C,QAAQiyB,UAAUF,UAAUppD,EAAc,OAAUxW,QAAQ,GAAI,KAChE,EACJ6/D,EAAiB1gE,EAAQ09D,aAAe7c,EAAAnd,OAAO8R,iBAC/ChnD,KAAK+vE,eACLv+D,EAAQoZ,OACR,SACAsnD,GAIE1gE,EAAQy9D,cAActvE,EAAOy/C,gBAAgB,IAAK,MAAO,SAAU8yB,GAGvE,IAAIjC,EAAgBjwE,KAAKiwE,cACzBtwE,EAAO8gD,iBAAiBwvB,EAAcnlE,OAAQ,WAAYmlE,GAC1DtwE,EAAO49C,YAAY,OAAQv9C,KAAK6xE,mBAAmB,KAAMloE,EAAA+H,KAAKG,MAAO,KAAMlS,EAAOs6C,MAAM,KAAM,KAG1FzoC,EAAQ29D,aAAaxvE,EAAOu/C,eAAe,IAAK,MAAO,aAG3D,IAAiB,IAAAljC,EAAApH,EAAA5U,KAAK6iB,QAAQjV,YAAY4M,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAA/C,IAAI5B,KAAI+I,EAAA3a,OACF8N,OAAOsL,SAAS1a,KAAKoyE,oBAAoBl/D,qGAEpD,OAAOvT,GAIDgwE,EAAA1tE,UAAAmwE,oBAAR,SAA4Bl/D,WACtB6I,EAAU7I,EAAKxT,QACnB,GAAIqc,MAAS,IAA2B,IAAAs2D,EAAAz9D,EAAAmH,GAAOu2D,EAAAD,EAAAv9D,QAAAw9D,EAAAv9D,KAAAu9D,EAAAD,EAAAv9D,OAAA,CAAzB,IAAAiP,EAAA9O,EAAAq9D,EAAAhxE,MAAA,GAACV,EAAAmjB,EAAA,GAAMxI,EAAAwI,EAAA,GAAoB/jB,KAAKuyE,mBAAmB3xE,EAAM2a,qGAC/E,IAAIrG,EAAchC,EAAKgC,YACvB,GAAIA,EACF,IAAK,IAAI7U,EAAI,EAAG8O,EAAI+F,EAAYpK,OAAQzK,EAAI8O,IAAK9O,EAAGL,KAAKoyE,oBAAoBl9D,EAAY7U,KAKrFsvE,EAAA1tE,UAAAswE,mBAAR,SAA2B3xE,EAAc+U,EAAkB68D,uBACzD,YADyD,IAAAA,MAAA,IACjD78D,EAAQrC,MAGd,KAAK8+C,EAAAhlD,YAAY6N,mBAEf,GADIkK,EAAgCxP,EAASwP,cAE3C,IAAqB,IAAAnJ,EAAApH,EAAAuQ,EAAU3K,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAApC,IAAI8Q,EAAQ3J,EAAA3a,MACXqtE,EAAe/tE,EACnB,GAAIglB,EAASrJ,GAAG9S,EAAApH,YAAY4P,SAE1B08D,IADI8D,EAAW7sD,EAASjX,cACCgT,UAAU8wD,EAASj0C,YAAY,MAE1Dx+B,KAAKuyE,mBAAmB5D,EAAc/oD,EAAU4sD,qGAGpD,MAEF,KAAKpgB,EAAAhlD,YAAYiK,gBACf,IAAI8N,EACJ,GADIA,EAA6BxP,EAASwP,cAExC,IAAqB,IAAAnQ,EAAAJ,EAAAuQ,EAAU3K,UAAQrE,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAApC,IAGG29D,EAHC7sD,EAAQzP,EAAA7U,MACXqtE,EAAe/tE,EACnB,GAAIglB,EAASrJ,GAAG9S,EAAApH,YAAY4P,SAE1B08D,IADI8D,EAAW7sD,EAASjX,cACCgT,UAAU8wD,EAASj0C,YAAY,MAE1Dx+B,KAAKuyE,mBAAmB5D,EAAc/oD,EAAU4sD,qGAGpD,MAEF,KAAKpgB,EAAAhlD,YAAYoO,mBACf,IAAI3a,EAA6B8U,EAAS8F,gBACtCi3D,EAA6B/8D,EAAS+F,gBACtC7a,GAAQb,KAAKuyE,mBAAmB9oE,EAAAjH,cAAgB5B,EAAMC,EAAQ2xE,GAC9DE,GAAQ1yE,KAAKuyE,mBAAmB9oE,EAAAhH,cAAgB7B,EAAM8xE,EAAQF,GAClE,MAIF,KAAKpgB,EAAAhlD,YAAY+Q,OACDxI,EAAQ4G,GAAG9S,EAAApH,YAAYqa,QAAU/G,EAAQ4G,GAAG9S,EAAApH,YAAY+c,OAAS3V,EAAApH,YAAYid,WAC1Etf,KAAKwR,QAAQW,WAAU,GAMtCnS,KAAKL,OAAO6+C,gBAAgB7oC,EAAQhH,aAAc6jE,EAAS5xE,GAL3DZ,KAAKuV,MACH7L,EAAA8L,eAAem9D,+BACNh9D,EAAS6C,eAAezI,OAKrC,MAEF,KAAKqiD,EAAAhlD,YAAYyX,UACElP,EAASmP,aAAgB9kB,KAAKwR,QAAQW,WAAU,GAM/DnS,KAAKL,OAAO6+C,gBAAgB7oC,EAAQhH,aAAc6jE,EAAS5xE,GAL3DZ,KAAKuV,MACH7L,EAAA8L,eAAem9D,+BACHh9D,EAAS6C,eAAezI,OAKxC,MAEF,KAAKqiD,EAAAhlD,YAAYwO,SACf,IACI7K,GADA6U,EAAqBjQ,GACA5E,UACrBA,EAAU4jD,mBAAqB5jD,EAAUsW,eAAevc,SAE1D8a,EAAW5lB,KAAK4yE,iBAAiBhtD,GACjC5lB,KAAK6yE,iBAEHjtD,EAASrJ,GAAG9S,EAAApH,YAAYywE,WAAW9yE,KAAKL,OAAOq+C,kBAAkBp4B,EAASjX,aAAc6jE,EAAS5xE,GACrG,MAEF,KAAKwxD,EAAAhlD,YAAYuO,UACX9a,EAAoB8U,EAASqT,iBACrBhpB,KAAKuyE,mBAAmB9oE,EAAAjH,cAAgB5B,EAAMC,EAAQ2xE,IAC9DE,EAAoB/8D,EAASsT,iBACrBjpB,KAAKuyE,mBAAmB9oE,EAAAhH,cAAgB7B,EAAM8xE,EAAQF,GAClE,MAEF,KAAKpgB,EAAAhlD,YAAYyO,MACf7b,KAAK+yE,wBAAwBP,EAAS/oE,EAAAjH,cAAgB5B,EAAa+U,GAC9DA,EAAQ4G,GAAG9S,EAAApH,YAAYid,WAC1Btf,KAAKgzE,wBAAwBR,EAAS/oE,EAAAhH,cAAgB7B,EAAa+U,GAErE,MAEF,KAAKy8C,EAAAhlD,YAAY0O,MAEf,IAAanG,EAASuG,KAAK+2D,YAAa,CACtC,IAAItzE,EAASK,KAAKL,OACdgP,EAAuBgH,EAAShH,aACpChP,EAAOu9C,UAAUvuC,EAAc0jD,EAAAjyB,WAAWh6B,KAAK,EAAOzG,EAAOyD,IAAYuS,EAAShG,KAClFhQ,EAAO6+C,gBAAgB7vC,EAAc6jE,EAAS5xE,GAEhD,MAIF,KAAKwxD,EAAAhlD,YAAYiX,KACjB,KAAK+tC,EAAAhlD,YAAYgX,UACjB,KAAKguC,EAAAhlD,YAAY2V,KACjB,KAAKqvC,EAAAhlD,YAAY6W,eAAgB,MAEjC,QAASpZ,QAAO,GAIlB,IAAIkR,EAAUpG,EAAQoG,QACtB,GAAIA,EAAS,CACX,IAAIm3D,EAAYV,EAAS5xE,GAAQ+U,EAAQrC,MAAQ8+C,EAAAhlD,YAAY0O,MACzDrS,EAAA/G,mBACA+G,EAAA9G,kBAEJ,GACEgT,EAAQrC,MAAQ8+C,EAAAhlD,YAAYgX,WAC5BzO,EAAQrC,MAAQ8+C,EAAAhlD,YAAY2V,SAE5B,IAAmB,IAAAxM,EAAA3B,EAAAmH,EAAQvB,UAAQvB,EAAA1C,EAAAzB,QAAAmE,EAAAlE,KAAAkE,EAAA1C,EAAAzB,OAAE,EAA5ByG,EAAMtC,EAAA3X,OACDib,GAAG9S,EAAApH,YAAY2P,SAC3BhS,KAAKuyE,mBAAmBh3D,EAAO3a,KAAM2a,EAAQ23D,8GAG/C,IAAmB,IAAA34D,EAAA3F,EAAAmH,EAAQvB,UAAQC,EAAAF,EAAAzF,QAAA2F,EAAA1F,KAAA0F,EAAAF,EAAAzF,OAAE,CAAhC,IAAIyG,KAAMd,EAAAnZ,OACFib,GAAG9S,EAAApH,YAAY60D,UAC1Bl3D,KAAKuyE,mBAAmBh3D,EAAO3a,KAAM2a,EAAQ23D,wGAO7CvD,EAAA1tE,UAAA8wE,wBAAR,SAAgCnyE,EAAcsqB,GAC5C,IAAIvrB,EAASK,KAAKL,OACduc,EAAOgP,EAAMhP,KACbtK,EAAY5R,KAAKwR,QAAQI,UACzBuhE,EAAWxzE,EAAO04C,KAAKn8B,EAAKw2C,SAAUx2C,EAAKK,GAAE,GAC/C5c,EAAOo4C,UAAU,EAAGnmC,EAAUqiD,gBAC9B/3C,EAAK+3C,eAAgB/oC,EAAMrC,cAGzB3M,EAAKk3D,YAAWD,EAAWnzE,KAAKqzE,WAAWF,IAC/CxzE,EAAO49C,YACL38C,EACAZ,KAAK6xE,mBAAmB,KAAM31D,EAAMtK,GACpC,KACAuhE,GAEFxzE,EAAOq+C,kBAAkBp9C,EAAMA,IAIzB+uE,EAAA1tE,UAAA+wE,wBAAR,SAAgCpyE,EAAcsqB,GAC5C,IAAIvrB,EAASK,KAAKL,OACduc,EAAOgP,EAAMhP,KACbo3D,EAAap3D,EAAK+3C,eAClBriD,EAAY5R,KAAKwR,QAAQI,UACzB2hE,EAAiB3hE,EAAUqiD,eAC3Buf,EAAY7zE,EAAOo4C,UAAU,EAAGu7B,GAChCp3D,EAAKk3D,YACPI,EAAYxzE,KAAKyzE,kBACf9zE,EAAO04C,KAAKn8B,EAAKw2C,UAAU,EACzB/yD,EAAOo4C,UAAU,EAAGw7B,GACpBD,EAAYpoD,EAAMrC,cAEpB2qD,IAGJ7zE,EAAO49C,YACL38C,EACAZ,KAAK6xE,mBAAmB,CAAE31D,GAAQvS,EAAA+H,KAAKG,KAAMD,GAC7C,KACAjS,EAAOy3C,MACLl7B,EAAKw2C,SACL/yD,EAAOo4C,UAAU,EAAGw7B,GACpBC,EACAF,EACApoD,EAAMrC,eAGVlpB,EAAOq+C,kBAAkBp9C,EAAMA,IAMjC+uE,EAAA1tE,UAAAyxE,eAAA,SAAe/9D,EAAkBg+D,GAC/B,YAD+B,IAAAA,OAAA,GACvBh+D,EAAQrC,MACd,KAAK8+C,EAAAhlD,YAAY+Q,OACfne,KAAK4zE,cAAsBj+D,GAC3B,MAEF,KAAKy8C,EAAAhlD,YAAYiX,KACfrkB,KAAK6zE,YAAkBl+D,GACvB,MAEF,KAAKy8C,EAAAhlD,YAAY6N,mBACVtF,EAAQ4G,GAAG9S,EAAApH,YAAY4P,UAC1BjS,KAAK8zE,kCAAqDn+D,EAAS,IAErE,MAEF,KAAKy8C,EAAAhlD,YAAYiK,gBACV1B,EAAQ4G,GAAG9S,EAAApH,YAAY4P,UAC1BjS,KAAK+zE,+BAA+Cp+D,EAAS,IAE/D,MAEF,KAAKy8C,EAAAhlD,YAAYoO,mBACf,IAAIC,EAAsC9F,EAAS8F,gBAC/CA,GACFzb,KAAK8zE,kCAAkCr4D,EAAiB,IAE1D,IAAIC,EAAsC/F,EAAS+F,gBAC/CA,GACF1b,KAAK8zE,kCAAkCp4D,EAAiB,IAE1D,MAEF,KAAK02C,EAAAhlD,YAAYgX,UACjB,KAAKguC,EAAAhlD,YAAY6W,eACjB,KAAKmuC,EAAAhlD,YAAYyX,UAAW,MAC5B,QAASha,QAAO,EAAOunD,EAAAhlD,YAAYuI,EAAQrC,OAEzCqgE,GAAgB3zE,KAAK2zE,eAAeh+D,IAI1Cg6D,EAAA1tE,UAAA0xE,eAAA,SAAeh+D,WACToG,EAAUpG,EAAQoG,QACtB,GAAIA,MAAS,IAAoB,IAAAgI,EAAAnP,EAAAmH,EAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAA,CAA/B,IAAIk/D,EAAO34D,EAAA/Z,MAAsBtB,KAAK0zE,eAAeM,uGAIzErE,EAAA1tE,UAAAuvE,eAAA,SAAet+D,eACTxT,EAAUwT,EAAKxT,QACnB,GAAIA,MAAS,IAAoB,IAAA2b,EAAAzG,EAAAlV,EAAQ8a,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAA,CAA/B,IAAIa,EAAO2F,EAAAha,MAAsBtB,KAAK0zE,eAAe/9D,qGACvE,IAAIT,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAA++D,EAAAr/D,EAAAM,GAAWg/D,EAAAD,EAAAn/D,QAAAo/D,EAAAn/D,KAAAm/D,EAAAD,EAAAn/D,OAAE,CAA/B,IAAIK,EAAU++D,EAAA5yE,MACjBtB,KAAKuxE,YAAYp8D,GACjBnV,KAAKwxE,eAAer8D,uGAQ1Bw6D,EAAA1tE,UAAAkyE,kBAAA,SAAkBC,EAAwC7N,GACxD,IAAIrzD,EAEAmhE,EADAzmE,EAAc5N,KAAK6iB,QAAQjV,YAE/B,GAAIA,EAAY0D,IAAI8iE,GAClBlhE,EAAOtF,EAAY1M,IAAIkzE,OAClB,KAAIxmE,EAAY0D,IAAI+iE,EAAgBD,EAAiC3qE,EAAA1G,cAO1E,YAJA/C,KAAKuV,MACH7L,EAAA8L,eAAeC,iBACf8wD,EAAWx2D,MAAOqkE,GAJpBlhE,EAAOtF,EAAY1M,IAAImzE,GAQzBr0E,KAAKuxE,YAAYr+D,IAInBy8D,EAAA1tE,UAAAsvE,YAAA,SAAYr+D,GACV,IAAIA,EAAKqJ,GAAG9S,EAAApH,YAAYywE,UAAxB,CACA5/D,EAAKxE,IAAIjF,EAAApH,YAAYywE,UAGrB,IAAItvD,EAAgBtQ,EAAKsQ,cACrB8wD,EAAet0E,KAAKmxE,YACpBF,EAAoB,IAAIhqE,MAC5BjH,KAAKmxE,YAAcF,EAGnB,IAAIsD,EAAev0E,KAAKkxE,YACpBzpD,EAAOjE,EAAciE,KACzBznB,KAAKkxE,YAAczpD,EACnB,IAAK,IAAItU,EAAaD,EAAK9D,OAAO+D,WAAY9S,EAAI,EAAG8O,EAAIgE,EAAWrI,OAAQzK,EAAI8O,IAAK9O,EACnFL,KAAKw0E,yBAAyBrhE,EAAW9S,GAAI4wE,GAO/C,GALAjxE,KAAKy0E,mBAAmBhtD,EAAMwpD,GAC9BjxE,KAAKkxE,YAAcqD,EACnBv0E,KAAKmxE,YAAcmD,EAGfrD,EAAkBnmE,OAAQ,CAC5B,IAAInL,EAASK,KAAKL,OACdkoB,EAASrE,EAAcwC,cACvB0uD,EAAY7sD,EAAO/c,OACnB0yC,EAAW,IAAIv2C,MAAkBytE,GACrC,IAASr0E,EAAI,EAAGA,EAAIq0E,IAAar0E,EAAGm9C,EAASn9C,GAAKwnB,EAAOxnB,GAAG6b,KAAK+3C,eACjEt0D,EAAO49C,YACL/5B,EAAc7U,aACd3O,KAAK6xE,mBAAmBruD,EAAczS,UAAUsW,eAAgB7D,EAAczS,UAAUkgB,YACxFusB,EACAyzB,EAAkBnmE,OAAS,EACvBnL,EAAOs6C,MAAM,KAAMg3B,GACnBA,EAAkB,IAExBqD,EAAa/1D,KACX5e,EAAOa,KAAKgjB,EAAc7U,aAAc,KAAM0jD,EAAAjyB,WAAWsY,UAO/Di3B,EAAA1tE,UAAA2xE,cAAA,SAAcp3D,GACZ,GAAIA,EAAOD,GAAG9S,EAAApH,YAAYywE,UAAW,OAAO,EAC5Ct2D,EAAO9N,IAAIjF,EAAApH,YAAYywE,UAEvB,IAAInzE,EAASK,KAAKL,OACdg1E,EAA0B,EAC1BC,GAA+B,EAC/BlT,EAAWllD,EAAOklD,SAClBmT,EAAkBr4D,EAAOq4D,gBAE7B,IAAKr4D,EAAOD,GAAG9S,EAAApH,YAAYkhB,UAGzB,GAAIm+C,EAAU,CACZ,IAAIgC,EAAe1jE,KAAK4O,SAASoyD,YAAYU,EAAUllD,EAAOxL,QAC9D,IAAK0yD,EAAc,OAAO,EAC1B,GAAIA,GAAgB/5D,EAAA+H,KAAKG,KAKvB,OAJA7R,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfE,EAAS3xD,QAEJ,EAETyM,EAAOL,QAAQunD,OAGV,KAAImR,EAyBT,OAJA70E,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfhlD,EAAOhE,eAAezI,MAAMs3D,QAEvB,EAxBP,IAAIkN,EAAev0E,KAAKkxE,YASxB,GARI10D,EAAOnE,aAAa+5C,EAAA/kD,eAAemS,QACrCxf,KAAKkxE,YAAc10D,EAAOtJ,KAAKsQ,cAAciE,MAE/CktD,EAAW30E,KAAK80E,kBAAkBD,EAAiBlrE,EAAA+H,KAAKwhD,KACtD,IAEElzD,KAAKqwE,oBAAoB/+D,IAAIqjE,KAAWC,GAAyB,GACrE50E,KAAKkxE,YAAcqD,EACfv0E,KAAK8vE,aAAenmE,EAAA+H,KAAKG,KAK3B,OAJA7R,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACfF,EAAgB9kE,MAAO/P,KAAK8vE,YAAY9xD,WAAY,WAE/C,EAETxB,EAAOL,QAAQnc,KAAK8vE,aAaxB,GAAItzD,EAAOD,GAAG9S,EAAApH,YAAY8f,UAAY3F,EAAOnE,aAAa+5C,EAAA/kD,eAAe6E,SAGvE,OAFIsK,EAAO7N,cAAgBkyD,EAAA2E,eAAe4L,UAAWpxE,KAAKowE,iBAAe,EAChE5zD,EAAO7N,cAAgBkyD,EAAA2E,eAAe6L,YAAWrxE,KAAKowE,iBAAe,IACvE,EAGT,IAAIl0D,EAAOM,EAAON,KACdo3D,EAAap3D,EAAK+3C,eAClB+gB,EAAqBx4D,EAAOD,GAAG9S,EAAApH,YAAYqa,QAAUF,EAAOD,GAAG9S,EAAApH,YAAY+c,OAAS3V,EAAApH,YAAYid,UAChG21D,EAAmBz4D,EAAOnE,aAAa+5C,EAAA/kD,eAAekS,QAG1D,GAAI/C,EAAOD,GAAG9S,EAAApH,YAAY8f,SAGxB,OAAI6yD,GAAsBh1E,KAAKwR,QAAQW,WAAU,IAC/CqK,EAAO9N,IAAIjF,EAAApH,YAAY6yE,eACvBC,EAAiB34D,EAAQA,EAAOnL,aAChC1R,EAAO4/C,gBACL/iC,EAAO7N,aACP8gE,EACAC,EACA4D,GAEF92D,EAAO9N,IAAIjF,EAAApH,YAAYywE,WAChB,IAIP9yE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfhE,EAAOnL,YAAYtB,QAGhB,GAKT,IAAIqlE,GAAoB,EAGxB,GAAIP,EAAiB,CACnB,IAAKF,EAAU,CACTJ,EAAev0E,KAAKkxE,YACpB10D,EAAOnE,aAAa+5C,EAAA/kD,eAAemS,QACrCxf,KAAKkxE,YAAc10D,EAAOtJ,KAAKsQ,cAAciE,MAE/CktD,EAAW30E,KAAK80E,kBAAkBD,EAAiB34D,EACjD,IAEElc,KAAKqwE,oBAAoB/+D,IAAIqjE,KAAWC,GAAyB,GACrE50E,KAAKkxE,YAAcqD,EAarB,GAVIliB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QACxCiwB,GACFL,EAAWh1E,EAAO6iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QAAOqwB,GAAoB,IAEzEA,GAAoB,GAKpBH,EACF,GAAIG,EACFp1E,KAAKyvB,QACH/lB,EAAA8L,eAAe6/D,gCACfR,EAAgB9kE,WAEb,CAGL,OAFAlF,OAAOwnD,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,OAClCsN,EAAAnL,kBAAkBytB,IAE/B,KAAKtiB,EAAAjyB,WAAWh6B,IACdoW,EAAOgI,kBAAiB,EACxBhI,EAAOkI,qBAAuBrS,QAAQggD,EAAAlL,iBAAiBwtB,GAAW,GAClE,MAEF,KAAKtiB,EAAAjyB,WAAW/5B,IACdmW,EAAOgI,kBAAiB,EACxBhI,EAAOkI,qBAAuBrS,QAC5BggD,EAAAjL,oBAAoButB,GACpBtiB,EAAAhL,qBAAqBstB,IAEvB,MAEF,KAAKtiB,EAAAjyB,WAAWv5B,IACd2V,EAAOgI,kBAAiB,EACxBhI,EAAOoI,mBAAqBytC,EAAA/K,iBAAiBqtB,GAC7C,MAEF,KAAKtiB,EAAAjyB,WAAWt5B,IACd0V,EAAOgI,kBAAiB,EACxBhI,EAAOoI,mBAAqBytC,EAAA9K,iBAAiBotB,GAC7C,MAEF,QAEE,OADA9pE,QAAO,IACA,EAGX2R,EAAO9N,IAAIjF,EAAApH,YAAYsiB,eAM3BgwD,EAAWz4D,EAAKg4C,aAAav0D,GAG/B,IAAIgP,EAAe6N,EAAO7N,aAiB1B,OAfIymE,GACEH,GACFj1E,KAAKuV,MACH7L,EAAA8L,eAAeuI,8BACflT,OAAOjB,EAAAs2B,cAAct2B,EAAAmB,cAAcwU,OAAQ/C,EAAO84D,iBAAiBvlE,MAAO,UAG9EpQ,EAAOu9C,UAAUvuC,EAAc2kE,GAAY,EAAMp3D,EAAKg4C,aAAav0D,IAC/Duc,EAAKk3D,YAAcwB,IAAwBD,EAAW30E,KAAKqzE,WAAWsB,IAC1E30E,KAAKmxE,YAAY5yD,KACf5e,EAAOo6C,WAAWprC,EAAcgmE,KAExBM,GACVt1E,EAAOu9C,UAAUvuC,EAAc2kE,GAAa0B,EAAoBL,IAE3D,GAKThF,EAAA1tE,UAAA4xE,YAAA,SAAYl+D,WACV,GAAIA,EAAQ4G,GAAG9S,EAAApH,YAAYywE,UAAW,OAAO,EAC7Cn9D,EAAQjH,IAAIjF,EAAApH,YAAYywE,UAExB,IAAInzE,EAASK,KAAKL,OAClBK,KAAK6vE,YAAcl6D,EACnB,IAAI4/D,EAAkC,KAClCC,GAAqB,EACrBC,EAAW9/D,EAAQ4G,GAAG9S,EAAApH,YAAYqa,QAAU/G,EAAQ0C,aAAa+5C,EAAA/kD,eAAekS,QAEpF,GAAI5J,EAAQoG,YACV,IAAmB,IAAAgI,EAAAnP,EAAAe,EAAQoG,QAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAAxC,IAAIyG,EAAMF,EAAA/Z,MACb,GAAIia,EAAOjI,MAAQ8+C,EAAAhlD,YAAYyX,UAA/B,CACA,IAAI6wD,GAAc,EACdjoB,EAAiBlyC,EACjBo6D,EAAYloB,EAAIkoB,UACpBloB,EAAI/+C,IAAIjF,EAAApH,YAAYywE,UACpB,IAAIyB,EAAev0E,KAAKkxE,YACpBv7D,EAAQ0C,aAAa+5C,EAAA/kD,eAAemS,QACtCxf,KAAKkxE,YAAcv7D,EAAQzC,KAAKsQ,cAAciE,MAEhD,IAAIktD,OAAQ,EACRgB,GACFhB,EAAW30E,KAAK80E,kBAAkBa,EAAWhsE,EAAA+H,KAAKtO,IAAG,GAGjDivD,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QAC5C4vB,EAAWh1E,EAAO6iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QACxCpvC,EAAQ4G,GAAG9S,EAAApH,YAAYqa,QACzB1c,KAAKuV,MACH7L,EAAA8L,eAAeogE,0EACfD,EAAU5lE,OAGd2lE,GAAc,KAGQ,MAAjBH,EACTZ,EAAWh1E,EAAOyD,IAAI,IAElBoyE,GACFx1E,KAAKuV,MACH7L,EAAA8L,eAAeqgE,kCACHt6D,EAAQ/C,eAAezI,MAAMs3D,OAG7CsN,EAAWh1E,EAAO83C,OAAO4a,EAAArpB,SAAS8sC,OAChCn2E,EAAOw4C,WAAWo9B,EAAc5mE,aAAc0jD,EAAAjyB,WAAWh6B,KACzDzG,EAAOyD,IAAI,IAEbuxE,EAAWh1E,EAAO6iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,QACxCpvC,EAAQ4G,GAAG9S,EAAApH,YAAYqa,QACzB1c,KAAKuV,MACH7L,EAAA8L,eAAeogE,0EACfr6D,EAAOlK,YAAYtB,OAGvB2lE,GAAc,IAGlB11E,KAAKkxE,YAAcqD,EACfmB,GACF/1E,EAAOu9C,UAAUuQ,EAAI9+C,aAAc0jD,EAAAjyB,WAAWh6B,KAAK,EAAMzG,EAAOyD,IAAI,IACpEpD,KAAKmxE,YAAY5yD,KACfve,KAAK+1E,qBAAqBtoB,EAAKknB,GAAU,IAE3Ca,GAAqB,IAEjBC,GACFhoB,EAAI9wC,wBAAwBtK,QAAQggD,EAAAlL,iBAAiBwtB,IAAYhrE,EAAA+H,KAAKtO,KAClEqqD,EAAIlxC,GAAG9S,EAAApH,YAAY8Y,gBACrBxb,EAAOu9C,UAAUuQ,EAAI9+C,aAAc0jD,EAAAjyB,WAAWh6B,KAAK,EAAOuuE,IAG5Dh1E,EAAOu9C,UAAUuQ,EAAI9+C,aAAc0jD,EAAAjyB,WAAWh6B,KAAK,EAAOuuE,GAE5DlnB,EAAI3oC,aAAc,EAClB0wD,GAAqB,GAEvBD,EAA2B9nB,qGAI/B,OADAztD,KAAK6vE,YAAc,MACZ,GAMTF,EAAA1tE,UAAA6xE,kCAAA,SACE7xE,EACAunB,EACA1D,EACA88C,GAEA,QAHA,IAAA98C,MAA4Cjc,EAAAm4D,gBAC5C,IAAAY,MAAA,MAEI3gE,EAAUoW,aAAa+5C,EAAA/kD,eAAe6E,SAAU,OAAO,KAC3D,IAAI0T,EAAW5lB,KAAK4O,SAAS62D,iCAC3BxjE,EACAunB,EACAvnB,EAAU+O,OACV8U,EACA88C,GAAyB3gE,EAAUoP,aAErC,OAAKuU,GACA5lB,KAAKg2E,gBAAgBpwD,GACnBA,EAFe,MAMxB+pD,EAAA1tE,UAAA4vE,mBAAA,SACExqD,EACA4J,EACA7J,QAAA,IAAAA,MAAA,MAEA,IACI8uB,EADAif,EAAgB9tC,EAAiBA,EAAevc,OAAS,EAEzDma,EAAQ,EAQZ,GAPImC,IACF8uB,EAAa,IAAIjvC,MAAM,EAAIkuD,IAChB,GAAK/tC,EAAS6sC,eACzBhvC,EAAQ,GAERixB,EAAa,IAAIjvC,MAAMkuD,GAErB9tC,EACF,IAAK,IAAIhnB,EAAI,EAAGA,EAAI80D,IAAiB90D,IAAK4kB,EACxCixB,EAAWjxB,GAASoC,EAAehnB,GAAG4zD,eAG1C,IAAIgiB,EAAahlD,EAAWgjC,eACxBt0D,EAASK,KAAKL,OACdm+C,EAAUn+C,EAAO42C,2BAA2B0/B,EAAY//B,GAC5D,IAAK4H,EAAS,CACZ,IAAIl9C,EAAO+I,EAAA8Z,UAAU+xC,oBAAoBnuC,EAAgB4J,EAAY7J,GACrE02B,EAAUn+C,EAAOq2C,gBAAgBp1C,EAAMq1E,EAAY//B,GAErD,OAAO4H,GAIT6xB,EAAA1tE,UAAAi0E,oBAAA,SAEEtwD,EAEAuwD,QAAA,IAAAA,MAAA,MAEA,IAAIx2E,EAASK,KAAKL,OACdy2E,EAAWvrE,OAAO+a,EAAS3jB,UAAUm0E,UACrCnlD,EAAarL,EAAS7U,UAAUkgB,WAChCxJ,EAAOznB,KAAKkxE,YAGhB,GAAIkF,EAAS9iE,MAAQ1J,EAAA2J,SAASsrB,MAC5Bs3C,EAAQn2E,KAAKq2E,kBAAmCD,EAAUjjE,YAAY,EAAMgjE,OACvE,CAELtrE,OAAOurE,EAAS9iE,MAAQ1J,EAAA2J,SAAS6rB,YAGjCv0B,OAAO+a,EAAS3jB,UAAUqjB,WAG1Bza,QAAQ+a,EAAS9G,MAAMrV,EAAApH,YAAYyd,YAAcrW,EAAApH,YAAY0c,IAAMtV,EAAApH,YAAY2c,IAAMvV,EAAApH,YAAYi0E,OAEjG,IAAIlkD,EAAOpyB,KAAK80E,kBAAwCsB,EAAUvjD,WAAY5B,EAAU,GAKxF,GAFKklD,EACAA,EAAM53D,KAAK6T,GADJ+jD,EAAQ,CAAE/jD,IAEjB3K,EAAKlL,GAAE,KAAwB,CAClC,IAAIg6D,EAAcJ,EAAMrrE,OACxB9K,KAAKw2E,oBAAoB/uD,EAAM0uD,GAC/Bn2E,KAAKy0E,mBAAmBhtD,EAAM0uD,GAC9B,IAAItK,EAAcpkD,EAAKokD,YAAYz5C,EAAMnB,GACrCwlD,EAAUhvD,EAAK2jD,UAAUh5C,EAAMnB,GACnC,GAAIklD,EAAMrrE,OAASyrE,EAAa,CAC9B,IAAIG,EAAOjvD,EAAK8hD,oBAAoBt4C,GAC/B46C,GAAapkD,EAAK2hD,aAAasN,EAAKzxD,MAAOjb,EAAA69D,WAAWiE,SACvD2K,GAAShvD,EAAK2hD,aAAasN,EAAKzxD,MAAOjb,EAAA69D,WAAW9C,SACtDoR,EAAMI,EAAc,GAAK52E,EAAOk6C,UAAU68B,EAAKzxD,MAAOmN,GACtD+jD,EAAM53D,KAAK5e,EAAOo4C,UAAU2+B,EAAKzxD,MAAOgM,EAAWgjC,iBAEhD4X,GAAapkD,EAAK/Y,IAAG,GACtB+nE,GAAShvD,EAAK/Y,IAAG,GACrB+Y,EAAK/Y,IAAI,MAKb,GAAIkX,EAASrJ,GAAG9S,EAAApH,YAAYyd,aAAc,CACxC,IAAIyzD,EAAiBvzE,KAAKwR,QAAQ+hE,eAClC1oE,OAAO+a,EAASrJ,GAAG9S,EAAApH,YAAYggB,WAC/B,IAAI7S,EAAgB3E,OAAO+a,EAAS5U,QAEpC,GAF6CnG,OAAO2E,EAAc8D,MAAQ8+C,EAAAhlD,YAAY0O,QAEjF2L,EAAKlL,GAAE,KAAwB,CAClC,IAAI2oD,EAAYr6D,OAAO4c,EAAK09C,YAAY17D,EAAAzG,cAAcoC,QAGjDqiB,EAAKlL,GAAE,MAMV45D,EAAM53D,KACJ5e,EAAO+6C,GACL/6C,EAAO23C,MAAMi8B,GAAkBlhB,EAAAjyB,WAAW/5B,IAAMgsD,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OACvE3rE,EAAOo4C,UAAUmtB,EAAUjgD,MAAOsuD,IAEpC5zE,EAAOk6C,UAAUqrB,EAAUjgD,MACzBjlB,KAAKqzE,WACHrzE,KAAK22E,eAAsBnnE,OAKnCxP,KAAK42E,wBAA+BpnE,EAAe2mE,IAErDn2E,KAAKw2E,oBAAoB/uD,EAAM0uD,GAC/Bn2E,KAAKy0E,mBAAmBhtD,EAAM0uD,GAC9BA,EAAM53D,KAAK5e,EAAOo4C,UAAUmtB,EAAUjgD,MAAOjlB,KAAKwR,QAAQ+hE,iBAC1D9rD,EAAK/Y,IAAI,KAICc,EAAeia,OAAShC,EAAKlL,GAAE,MACzCvc,KAAKuV,MACH7L,EAAA8L,eAAeqhE,2DACfjxD,EAAS3jB,UAAUoP,YAAYtB,YAK1BkhB,GAActnB,EAAA+H,KAAKG,MAAS4V,EAAKlL,GAAE,MAC5Cvc,KAAKuV,MACH7L,EAAA8L,eAAeshE,+DACflxD,EAAS3jB,UAAUkkE,iBAAiBl1C,WAAWlhB,OAInD,OAAOomE,GAITxG,EAAA1tE,UAAA+zE,gBAAA,SAAgBpwD,GACd,GAAIA,EAASrJ,GAAG9S,EAAApH,YAAYywE,UAAW,OAAO,EAC9CjoE,SAAS+a,EAASrJ,GAAG9S,EAAApH,YAAY8f,UAAYyD,EAASvN,aAAa+5C,EAAA/kD,eAAe6E,WAElF,IAAI6kE,EAAe/2E,KAAK8vE,YACxBlqD,EAASlX,IAAIjF,EAAApH,YAAYywE,UAEzB,IAKIlB,EALAjyE,EAASK,KAAKL,OACdoR,EAAY6U,EAAS7U,UACrBqlE,EAAWxwD,EAAS3jB,UAAUm0E,SAE9Bt4B,EAAU99C,KAAK6xE,mBAAmB9gE,EAAUsW,eAAgBtW,EAAUkgB,WAAYlgB,EAAUqW,UAIhG,GAAIgvD,EAAU,CAWZ,GARIxwD,EAASrJ,GAAG9S,EAAApH,YAAY8f,UAC1BniB,KAAKuV,MACH7L,EAAA8L,eAAewhE,yDACfpxD,EAASpN,eAAezI,OAKxB6V,EAASvN,aAAa+5C,EAAA/kD,eAAe+U,UAAW,CAClD,IAAIkzD,EAAiB1vD,EAAS0vD,eAC1B53D,EAAY7S,OAAOjB,EAAAs2B,cAAct2B,EAAAmB,cAAcqX,SAAUkzD,IAC7Dt1E,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf9C,EAAU3N,OAKd,IAAIwkE,EAAev0E,KAAKkxE,YACpBzpD,EAAO7B,EAAS6B,KACpBznB,KAAKkxE,YAAczpD,EACnB,IAAI0uD,EAAQ,IAAIlvE,MAGZge,EAAQ,EACGlU,EAAUqW,YAGrBnC,EAGJ,IADA,IAAIoC,EAAiBtW,EAAUsW,eACtBhnB,EAAI,EAAG8O,EAAIkY,EAAevc,OAAQzK,EAAI8O,IAAK9O,IAAK4kB,EAAO,CAC9D,IAAI/I,EAAOmL,EAAehnB,GACtB6b,EAAKk3D,YACP+C,EAAM53D,KACJ5e,EAAO26C,KACLt6C,KAAKqzE,WACH1zE,EAAOo4C,UAAU9yB,EAAO/I,EAAK+3C,mBAInCxsC,EAAK2hD,aAAankD,EAAOjb,EAAA69D,WAAWwB,WAIxCrpE,KAAKk2E,oBAAoBtwD,EAAUuwD,GAC9B1uD,EAAKlL,GAAE,OACVvc,KAAKw2E,oBAAoB/uD,EAAM0uD,GAC/Bn2E,KAAKy0E,mBAAmBhtD,EAAM0uD,IAEhCn2E,KAAKkxE,YAAcqD,EAGnB3C,EAAUjyE,EAAO49C,YACf33B,EAASjX,aACTmvC,EACAn0C,EAAA0qD,mBAAmBzuC,EAASK,kBAC5BgxD,EAAQt3E,EAAQw2E,EAAOvwD,EAAS7U,UAAUkgB,WAAWgjC,sBAKlDruC,EAASrJ,GAAG9S,EAAApH,YAAY8f,UAC3BniB,KAAKuV,MACH7L,EAAA8L,eAAe0hE,gFACftxD,EAASpN,eAAezI,OAI5B6V,EAASlX,IAAIjF,EAAApH,YAAY6yE,eACzBC,EAAiBvvD,EAAUA,EAASvU,aAGpCugE,EAAUjyE,EAAOi/C,kBACfh5B,EAASjX,aACT8gE,EACAC,EACA5xB,GAMJ,OAFAl4B,EAASkC,SAASnoB,EAAQiyE,GAC1B5xE,KAAK8vE,YAAciH,GACZ,GAKTpH,EAAA1tE,UAAA8xE,+BAAA,SACE9xE,EACAunB,EACA1D,EACA88C,QADA,IAAA98C,MAA4Cjc,EAAAm4D,gBAC5C,IAAAY,MAAA,MAEA,IAAIh9C,EAAW5lB,KAAK4O,SAASmzD,8BAC3B9/D,EACAunB,EACAvnB,EAAU+O,OACV8U,EACA88C,GAAyB3gE,EAAUoP,aAEhCuU,GACL5lB,KAAKm3E,aAAavxD,IAGpB+pD,EAAA1tE,UAAAk1E,aAAA,SAAavxD,eACX,GAAIA,EAASrJ,GAAG9S,EAAApH,YAAYywE,UAAW,OAAO,EAC9CltD,EAASlX,IAAIjF,EAAApH,YAAYywE,UACzB,IACIsE,EADYxxD,EAAS3jB,UACuB8Z,QAChD,GAAIq7D,MACF,IAAoB,IAAA/7D,EAAAzG,EAAAwiE,EAAc58D,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAE,CAC1C,QADOa,EAAO2F,EAAAha,OACEgS,MACd,KAAK8+C,EAAAhlD,YAAY+Q,OACfne,KAAK4zE,cAAsBj+D,GAC3B,MAEF,KAAKy8C,EAAAhlD,YAAY6N,mBAEQtF,EAAS4G,GAAG9S,EAAApH,YAAY4P,UAE7CjS,KAAK8zE,kCACgBn+D,EACnB,GACA9L,EAAAm4D,UACoBrsD,EAAS6C,gBAGjC,MAEF,KAAK45C,EAAAhlD,YAAYoO,oBACX3a,EAA6B8U,EAAS8F,kBAExCzb,KAAK8zE,kCACHjzE,EACA,GACAgJ,EAAAm4D,UACAnhE,EAAO2X,iBAGPk6D,EAA6B/8D,EAAS+F,kBAExC1b,KAAK8zE,kCACHpB,EACA,GACA7oE,EAAAm4D,UACA0Q,EAAOl6D,gBAGX,MAEF,KAAK45C,EAAAhlD,YAAYuO,6GAKvB,IAAI+rD,EAAe9hD,EAASgE,oBACxB89C,GAAc1nE,KAAKg2E,gBAAgBtO,GACvC,IAAItsD,EAAkBwK,EAAS7J,QAC/B,GAAIX,MACF,IAAoB,IAAAY,EAAApH,EAAAwG,EAAgBZ,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAAzC,IAAIa,EACP,QADOA,EAAOsG,EAAA3a,OACEgS,MACd,KAAK8+C,EAAAhlD,YAAY6N,mBAEQtF,EAAS4G,GAAG9S,EAAApH,YAAY4P,UAE7CjS,KAAK8zE,kCACgBn+D,EACnB,GACA9L,EAAAm4D,QAAqBp8C,EAASE,yBACVnQ,EAAStE,YAAYzQ,MAG7C,MAEF,KAAKwxD,EAAAhlD,YAAYsb,gBACf/S,EAAQjH,IAAIjF,EAAApH,YAAYywE,UACxB,MAEF,KAAK1gB,EAAAhlD,YAAYuO,SACf,IAAI9a,EAEA6xE,GAFA7xE,EAAoB8U,EAASqT,iBACrBhpB,KAAKg2E,gBAAgBn1E,IAC7B6xE,EAAoB/8D,EAASsT,iBACrBjpB,KAAKg2E,gBAAgBtD,sGAMzC,OAAO,GAGT/C,EAAA1tE,UAAAo1E,4BAAA,SACEhmE,EACAmY,EACA1D,EACA88C,QADA,IAAA98C,MAAA,WACA,IAAA88C,MAAA,MAGA5iE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfnP,EAAYtB,QAOhB4/D,EAAA1tE,UAAAq1E,iBAAA,SAAiBhoE,EAAoBioE,QAAA,IAAAA,MAAA,GACnC,IAAI1uD,EAAeopD,UAAUjyE,KAAK6oB,aAAc0uD,GAC5CtiC,EAAUod,EAAArd,cAAcrzC,OAAO2N,EAAQuZ,GAG3C,OAFA7oB,KAAK+vE,eAAexxD,KAAK02B,GACzBj1C,KAAK6oB,aAAes2C,QAAQt2C,EAAcxW,QAAQ/C,EAAOxE,OAAQ,IAC1DmqC,GAIT06B,EAAA1tE,UAAAu1E,mBAAA,SAAmBC,GACjB,IAGIC,EAHA70D,EAAU7iB,KAAK6iB,QACf80D,EAAe90D,EAAQ+0D,kBACvB3gE,EAAiBpM,OAAOgY,EAAQ5L,gBAEhC4oC,EAAW7/C,KAAKgwE,eACpB,GAAInwB,EAASvuC,IAAImmE,GACfC,EAAgB73B,EAAS3+C,IAAIu2E,OACxB,CACL,IAAI3sE,EAAS2sE,EAAY3sE,OACrBwE,EAAS,IAAIzH,WAAW8vE,GAAgB7sE,GAAU,IACtD+X,EAAQxT,mBAAmBC,EAAQ,EAAG2H,EAAgBnM,GAAU,GAChE,IAAK,IAAIzK,EAAI,EAAGA,EAAIyK,IAAUzK,EAC5BwJ,EAAAyhB,SAASmsD,EAAYvsE,WAAW7K,GAAIiP,EAAQqoE,GAAgBt3E,GAAK,IAEnEq3E,EAAgB13E,KAAKs3E,iBAAiBhoE,GACtCuwC,EAASnxC,IAAI+oE,EAAaC,GAE5B,IAAIvxD,EAAMg5C,QAAQuY,EAAcnoE,OAAQ8C,QAAQslE,IAEhD,OADA33E,KAAK8vE,YAAc74D,EAAeiF,KAC9Blc,KAAKwR,QAAQc,SACRtS,KAAKL,OAAO0D,IAAI68C,QAAQ/5B,GAAMg6B,SAASh6B,KAE9Ctb,OAAOu5D,WAAWj+C,IACXnmB,KAAKL,OAAOyD,IAAI88C,QAAQ/5B,MAInCwpD,EAAA1tE,UAAA41E,wBAAA,SAAwBC,EAAmBt9D,GACzC,IAAIqI,EAAU7iB,KAAK6iB,QACf/X,EAAS0P,EAAO1P,OAChB4nD,EAAWolB,EAAYplB,SACvBqlB,EAAajtE,EAAS4nD,EACtBslB,EAAiBntE,OAAOgY,EAAQ9L,qBAChC6gE,EAAoB/0D,EAAQ+0D,kBAE5BK,EAAM,IAAIpwE,WAAW+vE,EAAoBG,GAC7Cl1D,EAAQxT,mBAAmB4oE,EAAK,EAAGD,EAAgBD,GACnD,IAAIx5C,EAAMq5C,EACNtE,EAAawE,EAAY7jB,eAC7B,OAAQqf,GACN,KAAKjhB,EAAAjyB,WAAWh6B,IACd,OAAQssD,GACN,KAAK,EACH,IAAK,IAAIryD,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC/B,IAAIiB,EAAQkZ,EAAOna,GACnBwK,OAAOwnD,EAAAnL,kBAAkB5lD,IAAUgyE,GACnCzoE,OAAOwnD,EAAApL,gBAAgB3lD,IAAU+wD,EAAAhyB,aAAa0kB,OAC9Cl7C,EAAAwhB,QAAQgnC,EAAAlL,iBAAiB7lD,GAAQ22E,EAAK15C,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAASl+B,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQkZ,EAAOna,GACnBwK,OAAOwnD,EAAAnL,kBAAkB5lD,IAAUgyE,GACnCzoE,OAAOwnD,EAAApL,gBAAgB3lD,IAAU+wD,EAAAhyB,aAAa0kB,OAC9Cl7C,EAAAyhB,SAAS+mC,EAAAlL,iBAAiB7lD,GAAQ22E,EAAK15C,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAASl+B,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQkZ,EAAOna,GACnBwK,OAAOwnD,EAAAnL,kBAAkB5lD,IAAUgyE,GACnCzoE,OAAOwnD,EAAApL,gBAAgB3lD,IAAU+wD,EAAAhyB,aAAa0kB,OAC9Cl7C,EAAA6F,SAAS2iD,EAAAlL,iBAAiB7lD,GAAQ22E,EAAK15C,GACvCA,GAAO,EAET,MAEF,QAAS1zB,QAAO,GAElB,MAEF,KAAKwnD,EAAAjyB,WAAW/5B,IACd,IAAShG,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQkZ,EAAOna,GACnBwK,OAAOwnD,EAAAnL,kBAAkB5lD,IAAUgyE,GACnCzoE,OAAOwnD,EAAApL,gBAAgB3lD,IAAU+wD,EAAAhyB,aAAa0kB,OAC9Cl7C,EAAAquE,SAAS7lE,QAAQggD,EAAAjL,oBAAoB9lD,GAAQ+wD,EAAAhL,qBAAqB/lD,IAAS22E,EAAK15C,GAChFA,GAAO,EAET,MAEF,KAAK8zB,EAAAjyB,WAAWv5B,IACd,IAASxG,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQkZ,EAAOna,GACnBwK,OAAOwnD,EAAAnL,kBAAkB5lD,IAAUgyE,GACnCzoE,OAAOwnD,EAAApL,gBAAgB3lD,IAAU+wD,EAAAhyB,aAAa0kB,OAC9Cl7C,EAAA0hB,SAAS8mC,EAAA/K,iBAAiBhmD,GAAQ22E,EAAK15C,GACvCA,GAAO,EAET,MAEF,KAAK8zB,EAAAjyB,WAAWt5B,IACd,IAASzG,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC3BiB,EAAQkZ,EAAOna,GACnBwK,OAAOwnD,EAAAnL,kBAAkB5lD,IAAUgyE,GACnCzoE,OAAOwnD,EAAApL,gBAAgB3lD,IAAU+wD,EAAAhyB,aAAa0kB,OAC9Cl7C,EAAA2hB,SAAS6mC,EAAA9K,iBAAiBjmD,GAAQ22E,EAAK15C,GACvCA,GAAO,EAET,MAEF,QAAS1zB,QAAO,GAIlB,OAFAA,OAAO0zB,GAAO05C,EAAIntE,QAEX9K,KAAKs3E,iBAAiBW,IAG/BtI,EAAA1tE,UAAAk2E,wBAAA,SAAwBL,EAAmBM,GACzC,IAAIv1D,EAAU7iB,KAAK6iB,QACf+0D,EAAoB/0D,EAAQ+0D,kBAC5Bt+D,EAAiBzO,OAAOgY,EAAQvJ,gBAChC++D,EAAgBxtE,OAAO7K,KAAK4O,SAASoM,aAAa1B,EAAgB,CAAEw+D,KACpEQ,EAAoBD,EAAc1uD,oBAClC4uD,EAAeH,EAAc9oE,OAAOxE,OAAS8sE,EAC7CY,EAAcp1E,IAAIm1E,EAAeT,EAAYplB,UAE7CulB,EAAM,IAAIpwE,WAAW+vE,EAAoBU,GAC7Cz1D,EAAQxT,mBAAmB4oE,EAAK,EAAGI,EAAeC,GAElD,IAAIG,EAAkBv4B,QAAQk4B,EAAc7oE,QAAUqoE,EAOtD,OANA/sE,QAAQgY,EAAQrR,QAAQc,UACxBzH,OAAOwtE,EAAcltD,WAAW,OAAQstD,EAAiBR,EAAKL,IAC9D/sE,OAAOwtE,EAAcltD,WAAW,YAAastD,EAAiBR,EAAKL,IACnE/sE,OAAOwtE,EAAcltD,WAAW,aAAcotD,EAAcN,EAAKL,IACjE/sE,OAAOwtE,EAAcltD,WAAW,UAAWqtD,EAAaP,EAAKL,IAEtD53E,KAAKs3E,iBAAiBW,IAM/BtI,EAAA1tE,UAAAy2E,yBAAA,SAAyB73B,GAEvB,GADAh2C,OAAOg2C,EAAKtkC,GAAG9S,EAAApH,YAAYywE,WACvBjyB,EAAKz6B,oBAAsB,EAC7B,OAAOy6B,EAAKz6B,mBAEd,IAAI6pD,EAAgBjwE,KAAKiwE,cACrBhrD,EAAQgrD,EAAcnlE,OAO1B,OANK+1C,EAAKtkC,GAAG9S,EAAApH,YAAYs2E,aAAe93B,EAAK9vC,UAAU4jD,mBAAqB9T,EAAK9vC,UAAUsW,eAAevc,SAExG+1C,EAAO7gD,KAAK4yE,iBAAiB/xB,IAE/BovB,EAAc1xD,KAAKsiC,EAAKlyC,cACxBkyC,EAAKz6B,mBAAqBnB,EACnBA,GAKT0qD,EAAA1tE,UAAAuyE,yBAAA,SAAyBnhE,EAAsBgS,GAI7C,OAHIhS,EAAUC,MAAQ1J,EAAA2J,SAASE,gBAC7BJ,EAAqCA,EAAWhC,aAE1CgC,EAAUC,MAChB,KAAK1J,EAAA2J,SAASQ,iBAEZ,IADA,IACS1T,EAAI,EAAG8O,GADZypE,EAAsCvlE,EAAW0I,SAChBjR,OAAQzK,EAAI8O,IAAK9O,EACpDL,KAAKw0E,yBAAyBoE,EAAiBv4E,GAAIglB,GAErD,MAEF,KAAKzb,EAAA2J,SAASU,gBACZ,IAAI0B,EAAU3V,KAAK6iB,QAAQzR,wBAAyCiC,GACpExI,OAAO8K,EAAQrC,MAAQ8+C,EAAAhlD,YAAYiX,MAC9B1O,EAAQ0C,aAAa+5C,EAAA/kD,eAAemS,OAAOxf,KAAK6zE,YAAkBl+D,GACvE,MAEF,KAAK/L,EAAA2J,SAASgB,qBACZ,IAAIqkE,EACJ,IAASv4E,EAAI,EAAG8O,GADZypE,EAA0CvlE,EAAW0I,SACpBjR,OAAQzK,EAAI8O,IAAK9O,EACpDL,KAAKw0E,yBAAyBoE,EAAiBv4E,GAAIglB,GAErD,MAEF,KAAKzb,EAAA2J,SAASM,SACZ,IAAIkO,EAAmC1O,EAAW0O,aAClD,IAAS1hB,EAAI,EAAG8O,EAAI4S,EAAajX,OAAQzK,EAAI8O,IAAK9O,EAAG,CAC/CsV,EAAU3V,KAAK6iB,QAAQzR,wBAAwB2Q,EAAa1hB,IAChEwK,OAAO8K,EAAQrC,MAAQ8+C,EAAAhlD,YAAY+Q,QAEhCxI,EAAQ4G,GAAG9S,EAAApH,YAAY8f,UACvBxM,EAAQ0C,aAAa+5C,EAAA/kD,eAAemS,OACrCxf,KAAK4zE,cAAsBj+D,GAE/B,MAEF,KAAK/L,EAAA2J,SAASoL,kBACRhJ,EAAU3V,KAAK6iB,QAAQzR,wBAA0CiC,IACzDC,MAAQ8+C,EAAAhlD,YAAY+Q,SACzBxI,EAAQ0C,aAAa+5C,EAAA/kD,eAAemS,OAAOxf,KAAK4zE,cAAsBj+D,IAE7E,MAEF,KAAK/L,EAAA2J,SAASvB,OACuC,MAA7BqB,EAAWnE,gBAC/BlP,KAAKm0E,kBACuB9gE,EAAWnE,eACMmE,EAAWuO,MAG1D,MAEF,KAAKhY,EAAA2J,SAASI,OACZ3T,KAAKm0E,kBACe9gE,EAAWnE,eACXmE,EAAWuO,MAE/B,MAEF,KAAKhY,EAAA2J,SAASY,oBACd,KAAKvK,EAAA2J,SAASsL,kBACd,KAAKjV,EAAA2J,SAASc,qBACd,KAAKzK,EAAA2J,SAAS4L,0BACd,KAAKvV,EAAA2J,SAASkB,gBAAiB,MAC/B,QACE,IAAIod,EAAO7xB,KAAK64E,iBAAiBxlE,GAC7Bg/C,EAAApL,gBAAgBp1B,IAASwgC,EAAAhyB,aAAa8xB,KAAK9sC,EAAK9G,KAAKsT,KAM/D89C,EAAA1tE,UAAA42E,iBAAA,SACExlE,EACAylE,QAAA,IAAAA,OAAA,GAEA,IACIjnD,EADAlyB,EAASK,KAAKL,OAElB,OAAQ0T,EAAUC,MAChB,KAAK1J,EAAA2J,SAASsrB,MACZhN,EAAO7xB,KAAK+4E,sBAAsC1lE,GAClD,MAEF,KAAKzJ,EAAA2J,SAASurB,MACZjN,EAAO7xB,KAAKg5E,sBAAsC3lE,GAClD,MAEF,KAAKzJ,EAAA2J,SAASwrB,SACZlN,EAAO7xB,KAAKi5E,yBAA4C5lE,GACxD,MAEF,KAAKzJ,EAAA2J,SAASyrB,GACZnN,EAAO7xB,KAAKk5E,mBAAgC7lE,GAC5C,MAEF,KAAKzJ,EAAA2J,SAAStQ,MACZ4uB,EAAO7xB,KAAKm5E,sBAAsC9lE,GAClD,MAEF,KAAKzJ,EAAA2J,SAAS6rB,WACZvN,EAAO7xB,KAAKo5E,2BAAgD/lE,GAC5D,MAEF,KAAKzJ,EAAA2J,SAAS8rB,IACZxN,EAAO7xB,KAAKq5E,oBAAkChmE,GAC9C,MAEF,KAAKzJ,EAAA2J,SAASisB,GACZ3N,EAAO7xB,KAAKs5E,mBAAgCjmE,GAC5C,MAEF,KAAKzJ,EAAA2J,SAASmsB,OACZ7N,EAAO7xB,KAAKu5E,uBAAwClmE,EAAWylE,GAC/D,MAEF,KAAKlvE,EAAA2J,SAASqsB,OACZ/N,EAAO7xB,KAAKw5E,uBAAwCnmE,GACpD,MAEF,KAAKzJ,EAAA2J,SAASssB,MACZhO,EAAO7xB,KAAKy5E,sBAAsCpmE,GAClD,MAEF,KAAKzJ,EAAA2J,SAASusB,IACZjO,EAAO7xB,KAAK05E,oBAAkCrmE,GAC9C,MAEF,KAAKzJ,EAAA2J,SAASM,UACZge,EAAO7xB,KAAK25E,yBAA4CtmE,MAC7Cwe,EAAOlyB,EAAOi7C,OACzB,MAEF,KAAKhxC,EAAA2J,SAASysB,KACZnO,EAAO7xB,KAAK45E,qBAAoCvmE,GAChD,MAEF,KAAKzJ,EAAA2J,SAAS0sB,MACZpO,EAAO7xB,KAAK65E,sBAAsCxmE,GAClD,MAEF,KAAKzJ,EAAA2J,SAASkB,gBAEZzU,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfnN,EAAUtD,OAEZ8hB,EAAOlyB,EAAO+7C,cACd,MAEF,QACE7wC,QAAO,GACPgnB,EAAOlyB,EAAO+7C,cAIlB,OADI17C,KAAKwR,QAAQuW,WAAW/nB,KAAK85E,iBAAiBjoD,EAAMxe,EAAUtD,OAC3D8hB,GAGT89C,EAAA1tE,UAAAo0E,kBAAA,SACEljE,EACA4mE,EACA5D,QADA,IAAA4D,OAAA,QACA,IAAA5D,MAAA,MAEA,IAAI6D,EAAgB7mE,EAAWrI,OAC1BqrE,KACHA,EAAQ,IAAIlvE,MAAqB+yE,IAC3BlvE,OAAS,GAIjB,IAFA,IAAInL,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACP7wE,EAAI,EAAGA,EAAI25E,IAAiB35E,EAAG,CACtC,IAAIwxB,EAAO7xB,KAAK64E,iBAAiB1lE,EAAW9S,GAAI05E,GAAU15E,GAAK25E,EAAgB,GAC/E,OAAQ3nB,EAAApL,gBAAgBp1B,IACtB,KAAKwgC,EAAAhyB,aAAakuB,MAChB,IAAK8D,EAAApJ,aAAap3B,GAAO,CACvB,IAAK,IAAIze,EAAI,EAAGjE,EAAIkjD,EAAAlJ,mBAAmBt3B,GAAOze,EAAIjE,IAAKiE,EAAG+iE,EAAM53D,KAAK8zC,EAAAhJ,cAAcx3B,EAAMze,IACzF,MAIJ,QAAS+iE,EAAM53D,KAAKsT,GACpB,KAAKwgC,EAAAhyB,aAAa8xB,KAEpB,GAAI1qC,EAAK3I,MAAM,KAA0C,CACnDuzC,EAAAjE,yBAAyBv8B,IAAOskD,EAAM53D,KAAK5e,EAAO+7C,eACtD,OAGJ,OAAOy6B,GAGTxG,EAAA1tE,UAAA82E,sBAAA,SACE1lE,GAEA,IAAIF,EAAaE,EAAUF,WACvB8mE,EAAYj6E,KAAKkxE,YACjBgJ,EAAYD,EAAUvR,OAC1B1oE,KAAKkxE,YAAcgJ,EAEnB,IAAI/D,EAAQn2E,KAAKq2E,kBAAkBljE,GAKnC,OAJK+mE,EAAUp7D,MAAM,MAA0C9e,KAAKw2E,oBAAoB0D,EAAW/D,GACnG+D,EAAUpQ,mBACVmQ,EAAU3P,QAAQ4P,GAClBl6E,KAAKkxE,YAAc+I,EACZhD,EAAQj3E,KAAKL,OAAQw2E,EAAO9jB,EAAAjyB,WAAWsY,OAGhDi3B,EAAA1tE,UAAA+2E,sBAAA,SACE3lE,GAEA,IAAI1T,EAASK,KAAKL,OAClB,GAAI0T,EAAU4jB,MAKZ,OAJAj3B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfnN,EAAU4jB,MAAMlnB,OAEXpQ,EAAO+7C,cAEhB,IAAIj0B,EAAOznB,KAAKkxE,YACZlqD,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJAhnB,KAAKuV,MACH7L,EAAA8L,eAAe2kE,qFACf9mE,EAAUtD,OAELpQ,EAAO+7C,cAEhB,IAAIy6B,EAAQ,IAAIlvE,MAChBjH,KAAKw2E,oBAAoB/uD,EAAM0uD,GAE/B,IADA,IAAInlE,EAASyW,EAAKzW,OACA,OAAXA,GAAmBA,EAAOgW,YAAcA,GAC7ChnB,KAAKw2E,oBAAoBxlE,EAAQmlE,GAAwB,GACzDnlE,EAASA,EAAOA,OAKlB,OAHAyW,EAAKqiD,mBACLqM,EAAM53D,KAAK5e,EAAOy6C,GAAGpzB,IACrBS,EAAK/Y,IAAG,IACDuoE,EAAQt3E,EAAQw2E,EAAO9jB,EAAAjyB,WAAWsY,OAG3Ci3B,EAAA1tE,UAAAg3E,yBAAA,SACE5lE,GAEA,IAAI1T,EAASK,KAAKL,OACds3B,EAAQ5jB,EAAU4jB,MACtB,GAAIA,EAKF,OAJAj3B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfyW,EAAMlnB,OAEDpQ,EAAO+7C,cAGhB,IAAIj0B,EAAOznB,KAAKkxE,YACZ7I,EAAgB5gD,EAAK4gD,cACzB,GAAqB,MAAjBA,EAKF,OAJAroE,KAAKuV,MACH7L,EAAA8L,eAAe4kE,8EACf/mE,EAAUtD,OAELpQ,EAAO+7C,cAEhBj0B,EAAK/Y,IAAI,KACT,IAAIynE,EAAQ,IAAIlvE,MAChBjH,KAAKw2E,oBAAoB/uD,EAAM0uD,GAE/B,IADA,IAAInzD,EAAuByE,EAAKzW,OACzBgS,GAAWA,EAAQqlD,gBAAkBA,GAC1CroE,KAAKw2E,oBAAoBxzD,EAASmzD,GAAwB,GAC1DnzD,EAAUA,EAAQhS,OAIpB,OAFAyW,EAAKqiD,mBACLqM,EAAM53D,KAAK5e,EAAOy6C,GAAGiuB,IACd4O,EAAQt3E,EAAQw2E,EAAO9jB,EAAAjyB,WAAWsY,OAG3Ci3B,EAAA1tE,UAAAi3E,mBAAA,SACE7lE,GAEA,IAAI1T,EAASK,KAAKL,OAEds6E,EAAYj6E,KAAKkxE,YACjBj6C,EAAQgjD,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1B1oE,KAAKkxE,YAAcgJ,EACnB,IAAIlzD,EAAa,SAAWiQ,EAC5BijD,EAAUlzD,WAAaA,EACvB,IAAIqhD,EAAgB,YAAcpxC,EAClCijD,EAAU7R,cAAgBA,EAE1B,IAAI8N,EAAQ,IAAIlvE,MACZoM,EAAUA,UAAUC,MAAQ1J,EAAA2J,SAASsrB,MACvC7+B,KAAKq2E,kBAAmChjE,EAAUA,UAAWF,YAAY,EAAOgjE,GAEhFA,EAAM53D,KACJve,KAAK64E,iBAAiBxlE,EAAUA,YAGpC,IAAIgnE,EAAW16E,EAAO6iD,qBACpBxiD,KAAKs6E,cACHt6E,KAAK80E,kBAAkBzhE,EAAUwiB,UAAWlsB,EAAA+H,KAAKtO,KACjDpD,KAAK8vE,cAGLyK,GAAc,EACdloB,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,QAC5Cl6C,OAAOwnD,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAWh6B,KAC5CisD,EAAAlL,iBAAiBkzB,KAAWE,GAAc,IAEjD,IAAIC,EAAaN,EAAU39D,GAAE,KACzBk+D,EAAYP,EAAUp7D,MAAM,MAC5B47D,EAASR,EAAUp7D,MAAM,MAQzB67D,GAAgBH,IAAeN,EAAU39D,GAAE,IAE3Co+D,IAAiBJ,GACnBpE,EAAM53D,KAAK5e,EAAOy6C,GAAGiuB,EAAegS,IAEtC,IAAIjoD,EAAO6kD,EAAQt3E,EAAQw2E,EAAO9jB,EAAAjyB,WAAWsY,MAoB7C,OAnBIiiC,IAAiBJ,GAAeE,KAClCroD,EAAOzyB,EAAO66C,KAAK6tB,EAAej2C,IAEhCsoD,IACFtoD,EAAOzyB,EAAOs6C,MAAMjzB,EAAY,CAAEoL,KAI/BooD,GAAYx6E,KAAKw2E,oBAAoB0D,EAAW/D,GACrD+D,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAUj3D,MACR,OAKFg3D,EAAU3P,QAAQ4P,GAClBl6E,KAAKkxE,YAAc+I,EACZ7nD,GAGTu9C,EAAA1tE,UAAAk3E,sBAAA,SACE9lE,GAEA,OAAOrT,KAAKL,OAAOi7C,OAGrB+0B,EAAA1tE,UAAAm3E,2BAAA,SACE/lE,GAEA,OAAOrT,KAAK80E,kBAAkBzhE,EAAUwf,WAAYlpB,EAAA+H,KAAKG,KAAI,IAG/D89D,EAAA1tE,UAAAo3E,oBAAA,SACEhmE,GAEA,IAAI1T,EAASK,KAAKL,OAGds6E,EAAYj6E,KAAKkxE,YACjBj6C,EAAQgjD,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1B1oE,KAAKkxE,YAAcgJ,EAGnB,IAAIz1D,EAAcpR,EAAUoR,YACxBkwD,EAA0B,EAC1BlwD,IAAakwD,EAAW30E,KAAK64E,iBAAiBp0D,IAGlD,IAAI41D,EAA0B,EAC1BO,GAAa,EACjB,GAAIvnE,EAAUwiB,WAQZ,GAPAwkD,EAAW16E,EAAO6iD,qBAChBxiD,KAAKs6E,cACHt6E,KAAK80E,kBAA8BzhE,EAAUwiB,UAAWlsB,EAAA+H,KAAK9N,MAC7D5D,KAAK8vE,cAILzd,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,MAAO,CAEnD,GADAl6C,OAAOwnD,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAWh6B,KACH,GAA1CisD,EAAAlL,iBAAiBkzB,GAA4B,CAC/C,IAAIQ,EAAQ,IAAI5zE,MAMhB,OALI0tE,GAAUkG,EAAMt8D,KAAKo2D,GACzB30E,KAAKw2E,oBAAoB0D,EAAWW,GACpCX,EAAUpQ,mBACVmQ,EAAU5P,gBACVrqE,KAAKkxE,YAAc+I,EACZhD,EAAQt3E,EAAQk7E,EAAOxoB,EAAAjyB,WAAWsY,MAE3CkiC,GAAa,QAGfP,EAAW16E,EAAOyD,IAAI,GACtBw3E,GAAa,EAEfV,EAAU7O,qBAAqBgP,GAG/B,IAAIvgD,EAAczmB,EAAUymB,YACxBghD,EAA0B,EAC1BhhD,IAAaghD,EAAW96E,KAAK80E,kBAAkBh7C,EAAanwB,EAAA+H,KAAKG,KAAM,IAG3E,IAAImV,EAAakzD,EAAUlzD,WAAa,SAAWiQ,EAAOijD,EAAUlzD,WAAaA,EACjFkzD,EAAUlzD,WAAaA,EACvB,IAAIqhD,EAAgB,YAAcpxC,EAClCijD,EAAU7R,cAAgBA,EAC1B,IAAI0S,EAAY,QAAU9jD,EACtB+jD,EAAgB3nE,EAAUA,UAC1B8iE,EAAQ,IAAIlvE,MACZ+zE,EAAc1nE,MAAQ1J,EAAA2J,SAASsrB,MACjC7+B,KAAKq2E,kBAAmC2E,EAAe7nE,YAAY,EAAOgjE,GAE1EA,EAAM53D,KAAKve,KAAK64E,iBAAiBmC,IAEnC,IA6BI5oD,EA7BAooD,EAAaN,EAAU39D,GAAE,KACzBk+D,EAAYP,EAAUp7D,MAAM,MAC5B47D,EAASR,EAAUp7D,MAAM,MAazB67D,GAAgBH,IAAeN,EAAU39D,GAAE,IAC3C0+D,GAAcL,GAAcF,EAE5BlgC,EAAO,IAAIvzC,MAIf,GAHK2zE,GACHpgC,EAAKj8B,KAAK5e,EAAOy6C,GAAGpzB,EAAYrnB,EAAO23C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQ+O,KAE3DI,GACEtE,EAAMrrE,OAAS,GAAKunD,EAAApL,gBAAgBkvB,EAAM,KAAO9jB,EAAAhyB,aAAaiuB,QAChE9T,EAAKj8B,KAAK5e,EAAOs6C,MAAMouB,EAAe8N,SAGxC,IAAK,IAAI91E,EAAI,EAAG8O,EAAIgnE,EAAMrrE,OAAQzK,EAAI8O,IAAK9O,EAAGm6C,EAAKj8B,KAAK43D,EAAM91E,IAmChE,OAhCIs6E,GAAgBF,GACdK,GAAUtgC,EAAKj8B,KAAKu8D,GACxB96E,KAAKw2E,oBAAoB0D,EAAW1/B,GACpCA,EAAKj8B,KAAK5e,EAAOy6C,GAAG2gC,IAElB3oD,EADEuiD,EACKh1E,EAAOs6C,MAAMghC,EAAaj0D,EAAa,KAAM,CAClD2tD,EACAh1E,EAAO66C,KAAKugC,EAAWp7E,EAAOs6C,MAAM,KAAMO,MAGrC76C,EAAOs6C,MAAMghC,EAAaj0D,EAAa,KAAM,CAClDrnB,EAAO66C,KAAKugC,EAAW9D,EAAQt3E,EAAQ66C,EAAM6X,EAAAjyB,WAAWsY,WAIxDi8B,GAAUn6B,EAAKm3B,QAAQgD,GAC3B30E,KAAKw2E,oBAAoB0D,EAAW1/B,GACpCpoB,EAAOzyB,EAAOs6C,MAAMghC,EAAaj0D,EAAa,KAAMwzB,IAItD0/B,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAUj3D,MACR,OAKE23D,EAAYX,EAAU3P,QAAQ4P,GAC7BD,EAAU1P,mBAAmB2P,GAClCl6E,KAAKkxE,YAAc+I,EACZ7nD,GAGTu9C,EAAA1tE,UAAAq3E,mBAAA,SACEjmE,GAEA,IAAI1T,EAASK,KAAKL,OACdq5B,EAAS3lB,EAAU2lB,OACnBC,EAAU5lB,EAAU4lB,QACpBghD,EAAYj6E,KAAKkxE,YAGjBmJ,EAAW16E,EAAO6iD,qBACpBxiD,KAAKs6E,cACHt6E,KAAK80E,kBAAkBzhE,EAAUwiB,UAAWlsB,EAAA+H,KAAK9N,MACjD5D,KAAK8vE,cAKT,GACEzd,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,OAC1CsN,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAWh6B,IAE1C,OAAOisD,EAAAlL,iBAAiBkzB,GACpBr6E,KAAK64E,iBAAiB7/C,GACtBC,EACEj5B,KAAK64E,iBAAiB5/C,GACtBt5B,EAAOi7C,MAIf,IAAIsgC,EAAc,IAAIj0E,MAClBk0E,EAAalB,EAAUvR,OAY3B,GAXA1oE,KAAKkxE,YAAciK,EACnBA,EAAW9P,qBAAqBgP,GAC5BrhD,EAAO1lB,MAAQ1J,EAAA2J,SAASsrB,MAC1B7+B,KAAKq2E,kBAAmCr9C,EAAQ7lB,YAAY,EAAO+nE,GAEnEA,EAAY38D,KAAKve,KAAK64E,iBAAiB7/C,IAEpCmiD,EAAWr8D,MAAM,MAA0C9e,KAAKw2E,oBAAoB2E,EAAYD,GACrGC,EAAWrR,mBACX9pE,KAAKkxE,YAAc+I,EAEfhhD,EAAS,CACX,IAAImiD,EAAcnB,EAAUvR,OAC5B1oE,KAAKkxE,YAAckK,EACnBA,EAAY5P,sBAAsB6O,GAClC,IAAIgB,EAAe,IAAIp0E,MAUvB,OATIgyB,EAAQ3lB,MAAQ1J,EAAA2J,SAASsrB,MAC3B7+B,KAAKq2E,kBAAmCp9C,EAAS9lB,YAAY,EAAOkoE,GAEpEA,EAAa98D,KAAKve,KAAK64E,iBAAiB5/C,IAErCmiD,EAAYt8D,MAAM,MAA0C9e,KAAKw2E,oBAAoB4E,EAAaC,GACvGD,EAAYtR,mBACZ9pE,KAAKkxE,YAAc+I,EACnBA,EAAUpP,cAAcsQ,EAAYC,GAC7Bz7E,EAAO+6C,GAAG2/B,EACfpD,EAAQt3E,EAAQu7E,EAAa7oB,EAAAjyB,WAAWsY,MACxCu+B,EAAQt3E,EAAQ07E,EAAchpB,EAAAjyB,WAAWsY,OAK3C,OAFAuhC,EAAU1P,mBAAmB4Q,GACzBA,EAAW5+D,GAAE,MAAwB09D,EAAUzO,sBAAsB6O,GAClE16E,EAAO+6C,GAAG2/B,EACfpD,EAAQt3E,EAAQu7E,EAAa7oB,EAAAjyB,WAAWsY,QAU9Ci3B,EAAA1tE,UAAAs3E,uBAAA,SACElmE,EACAylE,GAEA,IAAIn5E,EAASK,KAAKL,OACdyyB,EAAsB,EACtB3K,EAAOznB,KAAKkxE,YACZjgD,EAAaxJ,EAAKwJ,WAGtBxJ,EAAK/Y,IAAI,KAET,IAAI4sE,EAAkBjoE,EAAU/R,MAChC,GAAIg6E,EAAiB,CACnB,GAAIrqD,GAActnB,EAAA+H,KAAKG,KAMrB,OALA7R,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACfuG,EAAgBvrE,MAAO/P,KAAK8vE,YAAY9xD,WAAYiT,EAAWjT,YAEjEhe,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAO+7C,cAEhB,IAAI6/B,EAAW,EACX9zD,EAAKm9C,eAAeroD,GAAG9S,EAAApH,YAAY8Y,iBAAgBogE,GAAW,GAClEnpD,EAAOpyB,KAAK80E,kBAAkBwG,EAAiBrqD,EAAuB,GAAXsqD,GAItDv7E,KAAKqwE,oBAAoB/+D,IAAI8gB,IAC5BnB,EAAWmiD,WACT/gB,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAaglB,UACpC59B,EAAKyiD,eAAe7X,EAAA7K,iBAAiBp1B,GAAOpoB,EAAA69D,WAAW2T,gBACzD/zD,EAAKuhD,eAAe3W,EAAA7K,iBAAiBp1B,GAAOpoB,EAAA69D,WAAW2T,cACvDx7E,KAAKqwE,oBAAoBv+D,IAAIsgB,IAOhC3K,EAAKokD,YAAYz5C,EAAMnB,IAAaxJ,EAAK/Y,IAAG,GAC7C+Y,EAAK2jD,UAAUh5C,EAAMnB,IAAaxJ,EAAK/Y,IAAG,QAErCuiB,GAActnB,EAAA+H,KAAKG,OAC5B7R,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACf1hE,EAAUtD,MAAO,OAAQkhB,EAAWjT,YAEtCoU,EAAOzyB,EAAO+7C,eAGhB,IAAIy6B,EAAQ,IAAIlvE,MAOhB,GANAjH,KAAKw2E,oBAAoB/uD,EAAM0uD,GAC/Bn2E,KAAKy0E,mBAAmBhtD,EAAM0uD,GAG1BllD,EAAWmiD,YAAcpzE,KAAKqwE,oBAAoB/+D,IAAI8gB,KAAOA,EAAOpyB,KAAKqzE,WAAWjhD,IAEpFnB,GAActnB,EAAA+H,KAAKG,MAAQskE,EAAMrrE,OAAQ,CAC3C,IAAI4rE,EAAOjvD,EAAK8hD,oBAAoBt4C,GAChCxJ,EAAK2jD,UAAUh5C,EAAMnB,IAAaxJ,EAAK2hD,aAAasN,EAAKzxD,MAAOjb,EAAA69D,WAAW9C,SAC/EoR,EAAMxE,QACJhyE,EAAOk6C,UAAU68B,EAAKzxD,MAAOmN,IAE/BA,EAAOzyB,EAAOo4C,UAAU2+B,EAAKzxD,MAAOgM,EAAWgjC,gBAKjD,OAHAxsC,EAAKqiD,mBAGDgP,GAAgB1mD,GAAQnB,GAActnB,EAAA+H,KAAKG,KACxCskE,EAAMrrE,QACXqrE,EAAM53D,KAAK6T,GACJzyB,EAAOs6C,MAAM,KAAMk8B,EAAOllD,EAAWgjC,iBAFlB7hC,EAMxB3K,EAAKlL,GAAE,OACJ45D,EAAMrrE,QACXqrE,EAAM53D,KAAK5e,EAAOy6C,GAAGvvC,OAAO4c,EAAK+gD,mBAAoB,EAAGp2C,IAEjDzyB,EAAOs6C,MAAM,KAAMk8B,IAHAx2E,EAAOy6C,GAAGvvC,OAAO4c,EAAK+gD,mBAAoB,EAAGp2C,GAOpE+jD,EAAMrrE,QACXqrE,EAAM53D,KAAK5e,EAAOm7C,OAAO1oB,IAClBzyB,EAAOs6C,MAAM,KAAMk8B,IAFAx2E,EAAOm7C,OAAO1oB,IAK1Cu9C,EAAA1tE,UAAAu3E,uBAAA,SACEnmE,GAEA,IAAI1T,EAASK,KAAKL,OAEdg7B,EAAQtnB,EAAUsnB,MAClB8gD,EAAW9gD,EAAM7vB,OACrB,IAAK2wE,EACH,OAAOz7E,KAAK80E,kBAAkBzhE,EAAUwiB,UAAWlsB,EAAA+H,KAAKG,KAAI,GAM9D,IAAIooE,EAAYj6E,KAAKkxE,YACjBjQ,EAAUgZ,EAAU9P,iBAGpBuR,EAAYzB,EAAUpR,aAAal/D,EAAA+H,KAAKjO,KACxCk4E,EAAiBD,EAAUz2D,MAG3By1D,EAAS,IAAIzzE,MAAqB,EAAIw0E,GAC1Cf,EAAO,GAAK/6E,EAAOk6C,UACjB8hC,EACA37E,KAAK80E,kBAAkBzhE,EAAUwiB,UAAWlsB,EAAA+H,KAAKjO,IAAG,IAQtD,IAFA,IAAIm4E,EAAa,EACbC,GAAgB,EACXx7E,EAAI,EAAGA,EAAIo7E,IAAYp7E,EAAG,CACjC,IACI42B,EADQ0D,EAAMt6B,GACA42B,MACdA,EACFyjD,EAAOkB,KAAgBj8E,EAAOy6C,GAAG,OAAS/5C,EAAE2d,SAAS,IAAM,IAAMijD,EAC/DthE,EAAO83C,OAAO4a,EAAArpB,SAASyiC,MACrB9rE,EAAOo4C,UAAU4jC,EAAgBtpB,EAAAjyB,WAAWh6B,KAC5CpG,KAAK80E,kBAAkB79C,EAAOttB,EAAA+H,KAAKjO,IAAG,KAM1Co4E,EAAex7E,EAInB45E,EAAU3Q,cAAcoS,GAGxBhB,EAAOkB,GAAcj8E,EAAOy6C,IAAIyhC,GAAgB,EAC1C,OAASA,EAAa79D,SAAS,IAC/B,SACA,IAAMijD,GAGZ,IAAI6a,EAAen8E,EAAOs6C,MAAM,SAAWgnB,EAASyZ,EAAQroB,EAAAjyB,WAAWsY,MACnEqjC,EAAiB,IACjBC,EAAoB,EACxB,IAAS37E,EAAI,EAAGA,EAAIo7E,IAAYp7E,EAAG,CACjC,IACI8S,EADQwnB,EAAMt6B,GACK8S,WACnB6mE,EAAgB7mE,EAAWrI,OAG3BovE,EAAYD,EAAUvR,OAC1B1oE,KAAKkxE,YAAcgJ,EACnB,IAAIlzD,EAAa,SAAWi6C,EAC5BiZ,EAAUlzD,WAAaA,EAEvB,IAAIi1D,EAAS57E,GAAKo7E,EAAW,EACzBS,EAAYD,EAASj1D,EAAa,QAAU3mB,EAAI,GAAG2d,SAAS,IAAM,IAAMijD,EACxEkV,EAAQ,IAAIlvE,MAAqB,EAAI+yE,GACzC7D,EAAM,GAAK2F,EAGX,IAFA,IAAIK,EAAQ,EACR3B,GAAa,EACRpnE,EAAI,EAAGA,EAAI4mE,IAAiB5mE,EAAG,CACtC,IAAIye,EAAO7xB,KAAK64E,iBAAiB1lE,EAAWC,IAI5C,GAHIi/C,EAAApL,gBAAgBp1B,IAASwgC,EAAAhyB,aAAa8xB,MACxCgkB,EAAMgG,KAAWtqD,GAEfqoD,EAAUp7D,MAAM,KAA0C,CACxDo7D,EAAU39D,GAAE,OAAwBi+D,GAAa,GACrD,OAGJrE,EAAMrrE,OAASqxE,GACX3B,GAAcyB,GAAU/B,EAAUp7D,MAAM,SAC1Ci9D,GAAqB7B,EAAUrqE,OAEjCmsE,GAAoC,MAAf9B,EAAUrqE,MAG1B2qE,GAAYx6E,KAAKw2E,oBAAoB0D,EAAW/D,GACrD+D,EAAUj3D,MACR,MAGFi3D,EAAUpQ,mBACV9pE,KAAKkxE,YAAc+I,EACnB6B,EAAen8E,EAAOs6C,MAAMiiC,EAAW/F,EAAO9jB,EAAAjyB,WAAWsY,MAQ3D,OANAuhC,EAAU5P,gBAGNwR,GAAgB,IAAG5B,EAAUpqE,QAA6B,GAApBksE,GAC1C9B,EAAUpqE,QAA6B,KAApBmsE,EAEZF,GAGTnM,EAAA1tE,UAAAw3E,sBAAA,SACEpmE,GAEA,IAAIoU,EAAOznB,KAAKkxE,YAGhBzpD,EAAK/Y,IAAI,KAET,IAAIynE,EAAQ,IAAIlvE,MAChBjH,KAAKy0E,mBAAmBhtD,EAAM0uD,GAG9B,IAAI70E,EAAQ+R,EAAU/R,MAClB4sB,EAA6B,KACjC,GAAI5sB,EAAMgS,MAAQ1J,EAAA2J,SAASmqB,IAAK,CAC9B,IAAI0+C,EAA0B96E,EAAO4e,UACjCk8D,EAAQtxE,SAAQojB,EAAUkuD,EAAQ,IAIxC,OAFAjG,EAAM53D,KAAKsiD,EAAAwb,aAAar8E,KAAMkuB,EAAS7a,IAEhC4jE,EAAQj3E,KAAKL,OAAQw2E,EAAO9jB,EAAAjyB,WAAWsY,OAGhDi3B,EAAA1tE,UAAAy3E,oBAAA,SACErmE,GAQA,OAJArT,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfnN,EAAUtD,OAEL/P,KAAKL,OAAO+7C,eAIrBi0B,EAAA1tE,UAAA03E,yBAAA,SACEtmE,GASA,IAPA,IAAI1T,EAASK,KAAKL,OACdoiB,EAAe1O,EAAU0O,aACzBu6D,EAAkBv6D,EAAajX,OAC/B2c,EAAOznB,KAAKkxE,YACZqL,EAAe,IAAIt1E,MACnB2H,EAAW5O,KAAK4O,SAEXvO,EAAI,EAAGA,EAAIi8E,IAAmBj8E,EAAG,CACxC,IAAIgR,EAAc0Q,EAAa1hB,GAC3BO,EAAOyQ,EAAYzQ,KAAKiV,KACxBqG,EAAoB,KACpBy4D,EAA0B,EAC1BC,GAAyB,EAG7B,GAAIvjE,EAAY6K,KAAM,CAMpB,KALAA,EAAOtN,EAASoyD,YACd3vD,EAAY6K,KACZuL,EAAKm9C,eACLn9C,EAAK3B,0BAEI,SACPzU,EAAYoT,cACdkwD,EAAW30E,KAAK80E,kBAAkBzjE,EAAYoT,YAAavI,EACzD,IAEF04D,EAAyB50E,KAAKqwE,oBAAoB/+D,IAAIqjE,QAInD,KAAItjE,EAAYoT,YAehB,CACLzkB,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfnwD,EAAYzQ,KAAKmP,MAAMs3D,OAEzB,SAfA,GAJAsN,EAAW30E,KAAK80E,kBAAkBzjE,EAAYoT,YAAa9a,EAAA+H,KAAKwhD,KAAI,IAGpE0hB,EAAyB50E,KAAKqwE,oBAAoB/+D,IAAIqjE,GAClD30E,KAAK8vE,aAAenmE,EAAA+H,KAAKG,KAAM,CACjC7R,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACf1jE,EAAYtB,MAAO/P,KAAK8vE,YAAY9xD,WAAY,UAElD,SAEF9B,EAAOlc,KAAK8vE,YAYd,IAAI0M,EAAUnrE,EAAYkL,GAAG9S,EAAApH,YAAYqa,OACrCmD,GAAW,EACf,GAAI28D,EACF,GAAI7H,GAEF,GADAA,EAAWh1E,EAAO6iD,qBAAqBmyB,GACnCtiB,EAAApL,gBAAgB0tB,IAAatiB,EAAAhyB,aAAa0kB,MAAO,CACnD,IAAI59B,EAAQ,IAAIirC,EAAAptC,MAAMpkB,GAAO,EAAGsb,EAAMuL,EAAK2gD,gBAC3C,OAAQ/V,EAAAnL,kBAAkBytB,IACxB,KAAKtiB,EAAAjyB,WAAWh6B,IACd+gB,EAAMxK,wBACJtK,QACEggD,EAAAlL,iBAAiBwtB,GACjB,GAEFz4D,GAEF,MAEF,KAAKm2C,EAAAjyB,WAAW/5B,IACd8gB,EAAMxK,wBACJtK,QACEggD,EAAAjL,oBAAoButB,GACpBtiB,EAAAhL,qBAAqBstB,IAEvBz4D,GAEF,MAEF,KAAKm2C,EAAAjyB,WAAWv5B,IACdsgB,EAAMtK,sBAA2Bw1C,EAAA/K,iBAAiBqtB,GAAWz4D,GAC7D,MAEF,KAAKm2C,EAAAjyB,WAAWt5B,IACdqgB,EAAMtK,sBAAsBw1C,EAAA9K,iBAAiBotB,GAAWz4D,GACxD,MAEF,QAEE,OADArR,QAAO,GACAlL,EAAO+7C,cAIlB,IAAIwsB,EAAezgD,EAAKygD,aACxB,GAAKA,GACA,GAAIA,EAAa52D,IAAI1Q,GAKxB,OAJAZ,KAAKuV,MACH7L,EAAA8L,eAAeyH,uBACf5L,EAAYzQ,KAAKmP,MAAOnP,GAEnBZ,KAAKL,OAAO+7C,mBANFj0B,EAAKygD,aAAeA,EAAe,IAAI9gE,IAQ1D8gE,EAAax5D,IAAI9N,EAAMumB,GACvBtH,GAAW,QAGb7f,KAAKuV,MACH7L,EAAA8L,eAAeinE,wCACfprE,EAAYtB,OAMlB,IAAK8P,EAAU,CACTsH,OAAK,EACT,GACE9V,EAAYyN,MAAMrV,EAAApH,YAAYy0D,IAAMrtD,EAAApH,YAAYqa,QAChD+K,EAAKlL,GAAE,OACP,CACA,IAAIqtD,EAAgBniD,EAAK+hD,eAAe5oE,GACpCgpE,GACF5pE,KAAKuV,MACH7L,EAAA8L,eAAeyH,uBACf5L,EAAYzQ,KAAKmP,MAAOsB,EAAYzQ,KAAKiV,MAE3CsR,EAAQyiD,GAERziD,EAAQM,EAAKgiD,eAAe7oE,EAAMsb,GAEhCsgE,GAAS/0D,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAW6U,cAClD,CACL,GAAIj1D,EAAK09C,YAAYvkE,GAAO,CAC1BZ,KAAKuV,MACH7L,EAAA8L,eAAeyH,uBACf5L,EAAYzQ,KAAKmP,MAAOnP,GAE1B,SAEFumB,EAAQM,EAAK2gD,eAAexgD,SAAS1L,EAAMtb,EAAMyQ,GAC7CmrE,GAAS/0D,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAW6U,UAEzD,IAAItJ,EAAYl3D,EAAKk3D,UACjBuB,GACEltD,EAAK2jD,UAAUuJ,EAAUz4D,IAAOuL,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAW9C,SAC1EqO,GACF3rD,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAWwB,UAC1CkT,EAAah+D,KACX5e,EAAOk6C,UAAU1yB,EAAMlC,MACrB2vD,EACID,EACA30E,KAAKqzE,WAAWsB,OAIxB4H,EAAah+D,KACX5e,EAAOk6C,UAAU1yB,EAAMlC,MAAO0vD,IAE5BxtD,EAAMjL,KAAKK,GAAG,MACXkL,EAAKokD,YAAY8I,EAAUz4D,GAC3BuL,EAAKuhD,eAAe7hD,EAAMlC,MAAOjb,EAAA69D,WAAWiE,SADVrkD,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAWiE,YAKjFsH,GAMFmJ,EAAah+D,KACX5e,EAAOk6C,UAAU1yB,EAAMlC,MACrB/I,EAAKg4C,aAAav0D,KAGtB8nB,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAW2C,yBACjCrjD,EAAMjL,KAAKK,GAAG,KACvBkL,EAAK2hD,aAAajiD,EAAMlC,MAAOjb,EAAA69D,WAAWiE,UAKlD,OAA8B,GAAvByQ,EAAazxE,OAChB,EACAmsE,EAAQt3E,EAAQ48E,EAAclqB,EAAAjyB,WAAWsY,OAG/Ci3B,EAAA1tE,UAAA23E,qBAAA,SACEvmE,GAEA,OAAOrT,KAAK80E,kBAAkBzhE,EAAUwf,WAAYlpB,EAAA+H,KAAKG,KACvD,KAIJ89D,EAAA1tE,UAAA43E,sBAAA,SACExmE,GAEA,IAAI1T,EAASK,KAAKL,OACds6E,EAAYj6E,KAAKkxE,YAGjBmJ,EAAW16E,EAAO6iD,qBACpBxiD,KAAKs6E,cACHt6E,KAAK80E,kBAAkBzhE,EAAUwiB,UAAWlsB,EAAA+H,KAAK9N,MACjD5D,KAAK8vE,cAKL8K,GAAa,EACjB,GAAIvoB,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,MAAO,CAEnD,GADAl6C,OAAOwnD,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAWh6B,MAC5CisD,EAAAlL,iBAAiBkzB,GAAW,OAAO16E,EAAOi7C,MAC/CggC,GAAa,EAIf,IAAI3jD,EAAQgjD,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1B1oE,KAAKkxE,YAAcgJ,EACnB,IAAIlzD,EAAa,SAAWiQ,EAC5BijD,EAAUlzD,WAAaA,EACvB,IAAIqhD,EAAgB,YAAcpxC,EAClCijD,EAAU7R,cAAgBA,EAC1B6R,EAAU7O,qBAAqBgP,GAC/B,IAAIlE,EAAQ,IAAIlvE,MACZoM,EAAUA,UAAUC,MAAQ1J,EAAA2J,SAASsrB,MACvC7+B,KAAKq2E,kBAAmChjE,EAAUA,UAAWF,YAAY,EAAOgjE,GAEhFA,EAAM53D,KAAKve,KAAK64E,iBAAiBxlE,EAAUA,YAE7C,IASIsnE,GATaT,EAAU39D,GAAE,OASM29D,EAAU39D,GAAE,IAE3Co+D,IACF36E,KAAKw2E,oBAAoB0D,EAAW/D,GACpCA,EAAM53D,KAAK5e,EAAOy6C,GAAGiuB,KAElBuS,GACHzE,EAAMxE,QAAQhyE,EAAOy6C,GAAGpzB,EAAYrnB,EAAO23C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQ+O,KAEnE,IAAIjoD,EAAO6kD,EAAQt3E,EAAQw2E,EAAO9jB,EAAAjyB,WAAWsY,MAoB7C,OAnBIiiC,GAAgBT,EAAUp7D,MAAM,SAClCsT,EAAOzyB,EAAO66C,KAAK6tB,EAAej2C,IAE/BwoD,IAAcV,EAAUp7D,MAAM,QACjCsT,EAAOzyB,EAAOs6C,MAAMjzB,EAAY,CAAEoL,KAIpC8nD,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAUj3D,MACR,OAKE23D,EAAYX,EAAU3P,QAAQ4P,GAC7BD,EAAU1P,mBAAmB2P,GAClCl6E,KAAKkxE,YAAc+I,EACZ7nD,GAMTu9C,EAAA1tE,UAAA06E,sBAAA,SACEhnE,EACAytD,EACAmY,GAEA1wE,OAAO8K,EAAQ4G,GAAG9S,EAAApH,YAAYsiB,UAC9B,IAAIzI,EAAOvG,EAAQuG,KACnB,SACkB,EAAdq/D,IACFr/D,EAAKK,GAAE,IACP6mD,EAAe7mD,GAAE,IACjBL,EAAK2/B,KAAOunB,EAAevnB,MACtB77C,KAAK8vE,YAAc1M,GAAgB9vD,MACnCtT,KAAK8vE,YAAc5zD,GAAM5I,MAE9B,OACA,OACE,IAAI0pC,EAAQ9gC,EAAKk3C,yBAAyBzpD,EAAA+H,KAAKtO,KAC/C,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBuS,EAAQ6O,kBACJ07B,QAAQvqC,EAAQ+O,uBAAyBs4B,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIN,EAAO/mC,EAAQuG,KAAKo3C,wBAAwB3pD,EAAA+H,KAAKtO,KACrD,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBuS,EAAQ6O,kBACJ07B,QAAQvqC,EAAQ+O,sBAAwBg4B,EACxC,GAGR,OACA,OACE,OAAO18C,KAAKL,OAAOyD,IACQ,GAAzBuS,EAAQ6O,kBACJ07B,QAAQvqC,EAAQ+O,sBAChB,GAGR,OACA,OACE,IAAK/O,EAAQkN,QAAQrR,QAAQc,SAC3B,OAAOtS,KAAKL,OAAOyD,IACQ,GAAzBuS,EAAQ6O,kBACJ07B,QAAQvqC,EAAQ+O,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzB/O,EAAQ6O,kBACXxkB,KAAKL,OAAO0D,IACV68C,QAAQvqC,EAAQ+O,sBAChBy7B,SAASxqC,EAAQ+O,uBAEnB1kB,KAAKL,OAAO0D,IAAI,GAEtB,QAEE,IAAMsS,EAAQ0C,aAAa+5C,EAAA/kD,eAAe6E,UAAYkxD,GAAkBz5D,EAAA+H,KAAK7N,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0B6R,EAASiP,oBAGxD5kB,KAAK8vE,YAAcnmE,EAAA+H,KAAK7N,IAE1B,QACE,OAAO7D,KAAKL,OAAOkE,IAA0B8R,EAASiP,oBAExD,QAEE,OADA/Z,QAAO,GACA7K,KAAKL,OAAO+7C,gBAKzBi0B,EAAA1tE,UAAA6yE,kBAAA,SACEjiD,EACAuwC,EACAmY,GAGA,IAAInpD,EAGJ,YANA,IAAAmpD,MAAA,GAEAv7E,KAAK8vE,YAAc1M,EAGfA,GAAkBz5D,EAAA+H,KAAKG,OAAM0pE,GAAW,GACpC1oD,EAAWvf,MACjB,KAAK1J,EAAA2J,SAAS6c,UACZgC,EAAOpyB,KAAK48E,2BAAgD/pD,EAAYuwC,EAAgBmY,GACxF,MAEF,KAAK3xE,EAAA2J,SAAS6pB,OACZhL,EAAOpyB,KAAK68E,wBAA0ChqD,EAAYuwC,EAAgBmY,GAClF,MAEF,KAAK3xE,EAAA2J,SAAS8c,KACZ+B,EAAOpyB,KAAK88E,sBAAsCjqD,EAAYuwC,EAAgBmY,GAC9E,MAEF,KAAK3xE,EAAA2J,SAAS+pB,MACZlL,EAAOpyB,KAAK+8E,uBAAwClqD,EAAYuwC,EAAgBmY,GAChF,MAEF,KAAK3xE,EAAA2J,SAAS+c,cACZ8B,EAAOpyB,KAAKg9E,+BAAwDnqD,EAAYuwC,EAAgBmY,GAChG,MAEF,KAAK3xE,EAAA2J,SAASqI,SACZwW,EAAOpyB,KAAKi9E,0BAA8CpqD,EAAYuwC,EAAexQ,mBAAoB2oB,GACzG,MAEF,KAAK3xE,EAAA2J,SAAS4c,WACd,KAAKvmB,EAAA2J,SAAS0c,MACd,KAAKrmB,EAAA2J,SAASwc,KACd,KAAKnmB,EAAA2J,SAASuqB,KACd,KAAKl0B,EAAA2J,SAASkd,MACd,KAAK7mB,EAAA2J,SAASyc,KACZoC,EAAOpyB,KAAKk9E,4BAAkDrqD,EAAYuwC,EAAgBmY,GAC1F,MAEF,KAAK3xE,EAAA2J,SAASiqB,WACZpL,EAAOpyB,KAAKm9E,4BAAkDtqD,EAAYuwC,EAAgBmY,GAC1F,MAEF,KAAK3xE,EAAA2J,SAAS6M,QACZgS,EAAOpyB,KAAKo9E,yBAA4CvqD,EAAYuwC,EAAgBmY,GACpF,MAEF,KAAK3xE,EAAA2J,SAASmqB,IACZtL,EAAOpyB,KAAKq9E,qBAAoCxqD,EAAYuwC,EAAgBmY,GAC5E,MAEF,KAAK3xE,EAAA2J,SAASgd,cACZ6B,EAAOpyB,KAAK80E,kBAA4CjiD,EAAYA,WAAYuwC,EAAgBmY,GAChG,MAEF,KAAK3xE,EAAA2J,SAASid,eACZ4B,EAAOpyB,KAAKs9E,gCAA0DzqD,EAAYuwC,EAAgBmY,GAClG,MAEF,KAAK3xE,EAAA2J,SAASsqB,QACZzL,EAAOpyB,KAAKu9E,yBAA4C1qD,EAAYuwC,EAAgBmY,GACpF,MAEF,KAAK3xE,EAAA2J,SAASyqB,aACZ5L,EAAOpyB,KAAKw9E,8BAAsD3qD,EAAYuwC,EAAgBmY,GAC9F,MAEF,KAAK3xE,EAAA2J,SAAS0qB,YACZ7L,EAAOpyB,KAAKy9E,6BAAoD5qD,EAAYuwC,EAAgBmY,GAC5F,MAEF,QACEv7E,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEbqiB,EAAOpyB,KAAKL,OAAO+7C,cAQvB,IAAIo0B,EAAc9vE,KAAK8vE,YACnB4N,EAAgD,IAA7B,EAAXnC,GAgBZ,OAfIzL,GAAe1M,IACF,EAAXmY,GACFnpD,EAAOpyB,KAAK29E,kBAAkBvrD,EAAM09C,EAAa1M,GAAgB,EAAMsa,EAAM7qD,GAC7E6qD,GAAO,EACP19E,KAAK8vE,YAAc1M,GACC,EAAXmY,IACTnpD,EAAOpyB,KAAK29E,kBAAkBvrD,EAAM09C,EAAa1M,GAAgB,EAAOsa,EAAM7qD,GAC9E6qD,GAAO,EACP19E,KAAK8vE,YAAc1M,IAGnBsa,IAAMtrD,EAAOpyB,KAAK49E,uBAAuBxrD,EAAM09C,IAG/C9vE,KAAKwR,QAAQuW,WAAW/nB,KAAK85E,iBAAiB1nD,EAAMS,EAAW9iB,OAC5DqiB,GAITu9C,EAAA1tE,UAAAugD,qBAAA,SACE3vB,EACAuwC,EACAmY,GAEA,YAFA,IAAAA,MAAA,GAEOv7E,KAAKL,OAAO6iD,qBACjBxiD,KAAK80E,kBAAkBjiD,EAAYuwC,EAAgBmY,KAIvD5L,EAAA1tE,UAAA07E,kBAAA,SACEvrD,EAEAq8C,EAEA37C,EAEA+qD,EAEAH,EACAnX,GAEA,IAAI5mE,EAASK,KAAKL,OAGlB,OAAiB,IAAb8uE,EAASn7D,MACXzI,OAAkB,IAAXioB,EAAOxf,MACdtT,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACfxO,EAAWx2D,MAAO0+D,EAASzwD,WAAY8U,EAAO9U,YAEzCre,EAAO+7C,eAID,IAAX5oB,EAAOxf,KAA8B3T,EAAO26C,KAAKloB,IAEjDpyB,KAAKkxE,YAAY9F,UAAUh5C,EAAMq8C,KAAWA,EAAWA,EAAS5b,iBAE/D4b,EAAS9jD,eAAemI,IACtB+qD,IACCpP,EAAS5b,iBAAmB//B,EAC9B9yB,KAAKuV,MACH7L,EAAA8L,eAAesoE,wBACfvX,EAAWx2D,OAGb/P,KAAKuV,MACH7L,EAAA8L,eAAeuoE,sDACfxX,EAAWx2D,MAAO0+D,EAASzwD,WAAY8U,EAAO9U,aAMlDywD,EAASlyD,GAAE,GAGTuW,EAAOvW,GAAE,GACM,IAAbkyD,EAASn7D,KAGI,IAAXwf,EAAOxf,OACT8e,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQs6C,WAAY5rD,IAMtB,IAAXU,EAAOxf,OAChB8e,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQu6C,UAAW7rD,IAMhCU,EAAOvW,GAAE,GAGD,IAAbkyD,EAASn7D,KACPwf,GAAUnpB,EAAA+H,KAAK9N,MACjBwuB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASmjC,MAAO/5C,EAAMzyB,EAAOkE,IAAI,IACtD65E,GAAO,GAGLtrD,EAFOU,EAAOvW,GAAE,GACduW,EAAOvW,GAAE,IACJ5c,EAAO23C,MAAM+a,EAAA3uB,QAAQw6C,cAAe9rD,GAEpCzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQy6C,cAAe/rD,GAGzCU,EAAOvW,GAAE,IACJ5c,EAAO23C,MAAM+a,EAAA3uB,QAAQ06C,cAAehsD,GAEpCzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ26C,cAAejsD,GAM3CU,GAAUnpB,EAAA+H,KAAK9N,MACjBwuB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASojC,MAAOh6C,EAAMzyB,EAAOmE,IAAI,IACtD45E,GAAO,GAGLtrD,EAFOU,EAAOvW,GAAE,GACduW,EAAOvW,GAAE,IACJ5c,EAAO23C,MAAM+a,EAAA3uB,QAAQ46C,cAAelsD,GAEpCzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ66C,cAAensD,GAGzCU,EAAOvW,GAAE,IACJ5c,EAAO23C,MAAM+a,EAAA3uB,QAAQ86C,cAAepsD,GAEpCzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ+6C,cAAersD,IAOjDvnB,OAAmB,GAAZioB,EAAOjjB,MAAyB,sBACvCuiB,EAAOzyB,EAAO26C,KAAKloB,IAIZq8C,EAASlyD,GAAE,IAAuBuW,EAAOvW,GAAE,GAKhD6V,EAFW,IAAXU,EAAOxf,KACLm7D,EAASlyD,GAAE,IACN5c,EAAO23C,MACZm3B,EAASlyD,GAAE,GACP81C,EAAA3uB,QAAQg7C,gBACRrsB,EAAA3uB,QAAQi7C,gBACZvsD,GAGKzyB,EAAO23C,MACZm3B,EAASlyD,GAAE,GACP81C,EAAA3uB,QAAQk7C,gBACRvsB,EAAA3uB,QAAQm7C,gBACZzsD,GAMAq8C,EAASlyD,GAAE,IACN5c,EAAO23C,MACZm3B,EAASlyD,GAAE,GACP81C,EAAA3uB,QAAQo7C,gBACRzsB,EAAA3uB,QAAQq7C,gBACZ3sD,GAGKzyB,EAAO23C,MACZm3B,EAASlyD,GAAE,GACP81C,EAAA3uB,QAAQs7C,gBACR3sB,EAAA3uB,QAAQu7C,gBACZ7sD,GAQFq8C,EAASlyD,GAAE,IAGTuW,GAAUnpB,EAAA+H,KAAK9N,MACjBwuB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS4iC,MAAOx5C,EAAMzyB,EAAO0D,IAAI,IACtDq6E,GAAO,GACG5qD,EAAOvW,GAAE,MACnB6V,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQw7C,QAAS9sD,IAI9BU,EAAOvW,GAAE,KAClB6V,EAAOzyB,EAAO23C,MACZm3B,EAASlyD,GAAE,GAAqB81C,EAAA3uB,QAAQy7C,UAAY9sB,EAAA3uB,QAAQ07C,UAC5Dp/E,KAAK49E,uBAAuBxrD,EAAMq8C,IAEpCiP,GAAO,GAKHjP,EAASlyD,GAAE,KAETkyD,EAAS5yB,KAAO/oB,EAAO+oB,OACzBzpB,EAAOpyB,KAAK49E,uBAAuBxrD,EAAMq8C,GACzCiP,GAAO,GAMf19E,KAAK8vE,YAAch9C,EACZ4qD,EACH19E,KAAK49E,uBAAuBxrD,EAAMU,GAClCV,IAGNu9C,EAAA1tE,UAAA26E,2BAAA,SACE/pD,EACAuwC,EACAmY,GAEA,IAAI8D,GAAqC,EAAd9D,EAC3B,OAAQ1oD,EAAWD,eACjB,KAAKhpB,EAAAuzB,cAAcmiD,OACnB,KAAK11E,EAAAuzB,cAAc24B,GACjB,IAAIruC,EAAOznB,KAAKkxE,YACZp+C,EAAS9yB,KAAK4O,SAASoyD,YACzBn2D,OAAOgoB,EAAWC,QAClBrL,EAAKm9C,eACLn9C,EAAK3B,yBAEP,OAAKgN,EACE9yB,KAAK80E,kBAAkBjiD,EAAWA,WAAYC,EAA4B,EAApBusD,GADzCr/E,KAAKL,OAAO+7C,cAGlC,KAAK9xC,EAAAuzB,cAAc4nC,QACjBl6D,QAAQgoB,EAAWC,QACnB,IAAIV,EAAOpyB,KAAK80E,kBAAkBjiD,EAAWA,WAAYuwC,EAAemc,WAAYF,GAChFnjE,EAAOlc,KAAK8vE,YAChB,GAAI9vE,KAAKkxE,YAAY9F,UAAUh5C,EAAMlW,GACnClc,KAAKuvB,KACH7lB,EAAA8L,eAAegqE,yBACf3sD,EAAWA,WAAW9iB,YAEnB,IAAK/P,KAAKwR,QAAQiB,SAAU,CACjC,IAAI9S,EAASK,KAAKL,OAEd8/E,GADAh4D,EAAOznB,KAAKkxE,aACK3H,oBAAoBrtD,GAAM+I,MAC1CwC,EAAKokD,YAAYz5C,EAAMlW,IAAOuL,EAAK2hD,aAAaqW,EAAWz1E,EAAA69D,WAAWiE,SAC3ErkD,EAAK2hD,aAAaqW,EAAWz1E,EAAA69D,WAAW9C,SACxC3yC,EAAOzyB,EAAO+6C,GACZ/6C,EAAOs4C,UAAUwnC,EAAWrtD,GAC5BzyB,EAAOo4C,UAAU0nC,EAAWvjE,EAAK+3C,gBACjCt0D,EAAO+7C,eAIX,OADA17C,KAAK8vE,YAAc9vE,KAAK8vE,YAAYjd,gBAC7BzgC,EAET,QAASvnB,QAAO,GAElB,OAAO7K,KAAKL,OAAO+7C,eAQrBi0B,EAAA1tE,UAAA46E,wBAAA,SACEhqD,EACAuwC,EACAmY,GAEA,IAIImE,EACAC,EACAC,EACAC,EACAC,EAEA1tD,EAVAzyB,EAASK,KAAKL,OACduzB,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnB4sD,GAAW,EAEX9sD,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAKrD,EAAAC,MAAMkoC,SAKT,GAJA2nB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa8C,IAC5C,CACZ8lB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAKrB,GAFAkkC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAEhB,OAlBEgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAUI2sD,EAAWxsE,MACjB,OACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASqjC,MAAOqT,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASujC,MAAOmT,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASujC,MACTla,EAAArpB,SAASqjC,MACbqT,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASsjC,MAAOoT,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASwjC,MACTna,EAAArpB,SAASsjC,MACboT,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASwjC,MAAOkT,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASyjC,MAAOiT,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS0jC,MAAOgT,EAAUE,GAC/C,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB17C,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAEF,KAAKgsB,EAAAC,MAAMmoC,YAKT,GAJA0nB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa0C,IAC5C,CACZkmB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAKrB,GAFAkkC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAEhB,OAlBEgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAUI2sD,EAAWxsE,MACjB,OACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASikC,MAAOyS,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASmkC,MACT9a,EAAArpB,SAASikC,MACbyS,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASmkC,MAAOuS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASkkC,MAAOwS,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASokC,MACT/a,EAAArpB,SAASkkC,MACbwS,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASokC,MAAOsS,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASqkC,MAAOqS,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASskC,MAAOoS,EAAUE,GAC/C,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB17C,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAEF,KAAKgsB,EAAAC,MAAMooC,gBAKT,GAJAynB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa+C,IAC5C,CACZ6lB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAKrB,GAFAkkC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,KAAM4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAEzDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAEhB,OAlBEgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAUI2sD,EAAWxsE,MACjB,OACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS2jC,MAAO+S,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS6jC,MACTxa,EAAArpB,SAAS2jC,MACb+S,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS6jC,MAAO6S,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS4jC,MAAO8S,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS8jC,MACTza,EAAArpB,SAAS4jC,MACb8S,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS8jC,MAAO4S,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS+jC,MAAO2S,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASgkC,MAAO0S,EAAUE,GAC/C,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB17C,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAEF,KAAKgsB,EAAAC,MAAMqoC,mBAKT,GAJAwnB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa2C,IAC5C,CACZimB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAKrB,GAFAkkC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,KAAM4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAEzDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAEhB,OAlBEgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAUI2sD,EAAWxsE,MACjB,OACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASukC,MAAOmS,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASykC,MACTpb,EAAArpB,SAASukC,MACbmS,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASykC,MAAOiS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASwkC,MAAOkS,EAAUE,GAC/C,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS0kC,MACTrb,EAAArpB,SAASwkC,MACbkS,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS0kC,MAAOgS,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS2kC,MAAO+R,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS4kC,MAAO8R,EAAUE,GAC/C,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB17C,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAGF,KAAKgsB,EAAAC,MAAMwoC,qBACX,KAAKzoC,EAAAC,MAAMsoC,cAUT,GAJAunB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ78C,GAAYrD,EAAAC,MAAMsoC,eAAiBn4D,KAAK8vE,YAAYvzD,GAAE,KAExD,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAawC,IAC5C,CACZomB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAQN,GAFA+sD,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAW0sD,EAAS3hE,WAAY6hE,EAAU7hE,YAE/Fhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAEhB,OAlBEgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAUI2sD,EAAWxsE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASyiC,MAAOiU,EAAUE,GAC/C,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS0iC,MACTrZ,EAAArpB,SAASyiC,MACbiU,EACAE,GAEF,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS0iC,MAAOgU,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASijC,MAAOyT,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASkjC,MAAOwT,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQw8C,gBAC1BvgF,EAAO83C,OAAO4a,EAAArpB,SAASm3C,WAAYT,EAAUE,IAE/C,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB17C,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAEF,KAAKgsB,EAAAC,MAAMyoC,0BACX,KAAK1oC,EAAAC,MAAMuoC,mBAKT,GAJAsnB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ78C,GAAYrD,EAAAC,MAAMuoC,oBAAsBp4D,KAAK8vE,YAAYvzD,GAAE,KAE7D,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAayC,IAC5C,CACZmmB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAQN,GAFA+sD,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAW0sD,EAAS3hE,WAAY6hE,EAAU7hE,YAE/Fhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAEhB,OAlBEgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAUI2sD,EAAWxsE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS2iC,MAAO+T,EAAUE,GAC/C,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS4iC,MACTvZ,EAAArpB,SAAS2iC,MACb+T,EACAE,GAEF,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS4iC,MAAO8T,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASmjC,MAAOuT,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASojC,MAAOsT,EAAUE,GAC/C,MAEF,QACExtD,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ08C,gBAC1BzgF,EAAO83C,OAAO4a,EAAArpB,SAASq3C,WAAYX,EAAUE,IAE/C,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB17C,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAEF,KAAKgsB,EAAAC,MAAM0pC,OACT,OAAOv5D,KAAKsgF,kBAAkBptD,EAAMC,EAAOiwC,GAE7C,KAAKxzC,EAAAC,MAAM2pC,YAAaumB,GAAW,EACnC,KAAKnwD,EAAAC,MAAMnjB,KAKT,GAJAgzE,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa+B,KAC5C,CACZ6mB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFH,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,OAC7C,CAGL,GAFAC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS8sC,OAAQ4J,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASu3C,OACTluB,EAAArpB,SAAS8sC,OACb4J,EACAE,GAEF,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASu3C,OAAQb,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASw3C,OAAQd,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASy3C,OAAQf,EAAUE,GAChD,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAM4pC,aAAcsmB,GAAW,EACpC,KAAKnwD,EAAAC,MAAMjjB,MAKT,GAJA8yE,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAagC,KAC5C,CACZ4mB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFH,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,gBACZ,CAGL,GAFA8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS03C,OAAQhB,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACbhB,EACAE,GAEF,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS23C,OAAQjB,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS43C,OAAQlB,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS63C,OAAQnB,EAAUE,GAChD,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAM6pC,gBAAiBqmB,GAAW,EACvC,KAAKnwD,EAAAC,MAAM2oC,SAKT,GAJAknB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAaiC,KAC5C,CACZ2mB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFL,EAAW1/E,KAAK49E,uBAAuB8B,EAAUC,GACjDC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,OAC7C,CAGL,GAFAC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS6kC,OAAQ6R,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS83C,OACTzuB,EAAArpB,SAAS6kC,OACb6R,EACAE,GAEF,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS83C,OAAQpB,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS+3C,OAAQrB,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASg4C,OAAQtB,EAAUE,GAChD,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAM8pC,yBAA0BomB,GAAW,EAChD,KAAKnwD,EAAAC,MAAM0oC,kBAKT,GAJAmnB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAakC,KAC5C,CACZ0mB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,IAAI91B,OAAQ,EAGZ,GAAyB,IAArB5lB,KAAK8vE,YAAYx8D,MAGnB,GAFAssE,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOxpB,EAAA+H,KAAK7N,IAAG,GAClDg8E,EAAY7/E,KAAK8vE,cACXlqD,EAAW5lB,KAAKwwE,gBAAiB,CAErC,KADIyQ,EAAYjhF,KAAK6iB,QAAQhM,aAAapN,EAAAzG,cAAcwE,QACxC,CACdxH,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,SAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAGF,KADIz5C,EAAYg/E,EAAUllE,QAAUklE,EAAUllE,QAAQ7a,IAAIuI,EAAAzG,cAAcqF,KAAO,MAC/D,CACdrI,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,aAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAEF7wC,OAAO5I,EAAUqR,MAAQ8+C,EAAAhlD,YAAY6N,oBACrCjb,KAAKwwE,eAAiB5qD,EAAW5lB,KAAK4O,SAASsM,gBAAmCjZ,EAAW,YAc/F,GARAy9E,EAAW1/E,KAAK29E,kBAAkB+B,EAChC1/E,KAAK8vE,YAAanmE,EAAA+H,KAAK5N,KACvB,GAAO,EACPovB,GAEFysD,EAAW3/E,KAAK8vE,YAChB8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOxpB,EAAA+H,KAAK5N,IAAG,GAClD+7E,EAAY7/E,KAAK8vE,cACXlqD,EAAW5lB,KAAKywE,gBAAiB,CAErC,KADIwQ,EAAYjhF,KAAK6iB,QAAQhM,aAAapN,EAAAzG,cAAcuE,OACxC,CACdvH,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,QAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAGF,KADIz5C,EAAYg/E,EAAUllE,QAAUklE,EAAUllE,QAAQ7a,IAAIuI,EAAAzG,cAAcqF,KAAO,MAC/D,CACdrI,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,YAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAEF7wC,OAAO5I,EAAUqR,MAAQ8+C,EAAAhlD,YAAY6N,oBACrCjb,KAAKywE,eAAiB7qD,EAAW5lB,KAAK4O,SAASsM,gBAAmCjZ,EAAW,MAM/FmwB,EAHIxM,GAAY5lB,KAAKg2E,gBAAgBpwD,GAG9B5lB,KAAKkhF,eAAet7D,EAAU,CAAE85D,EAAUE,GAAa/sD,GAFvDlzB,EAAO+7C,cAIhB,MAEF,KAAK9rB,EAAAC,MAAM+pC,aAAcmmB,GAAW,EACpC,KAAKnwD,EAAAC,MAAM4oC,MAKT,GAJAinB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAamC,KAC5C,CACZymB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFL,EAAW1/E,KAAK49E,uBAAuB8B,EAAUC,GACjDC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,gBACZ,CAGL,GAFA8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASm4C,OAAQzB,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASo4C,OACT/uB,EAAArpB,SAASm4C,OACbzB,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASo4C,OAAQ1B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASklC,OAAQwR,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASq4C,OACThvB,EAAArpB,SAASklC,OACbwR,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASq4C,OAAQ3B,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASs4C,OAAQ5B,EAAUE,GAChD,MAEF,QACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASu4C,OAAQ7B,EAAUE,GAChD,MAEF,QACE/0E,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMgqC,eAAgBkmB,GAAW,EACtC,KAAKnwD,EAAAC,MAAM6oC,QAKT,GAJAgnB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,GACxCuc,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAaoC,KAC5C,CACZwmB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFL,EAAW1/E,KAAK49E,uBAAuB8B,EAAUC,GACjDC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,gBACZ,CAGL,GAFA8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OAIA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASmlC,OAAQuR,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASw4C,OACTnvB,EAAArpB,SAASmlC,OACbuR,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASw4C,OAAQ9B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASolC,OAAQsR,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASy4C,OACTpvB,EAAArpB,SAASolC,OACbsR,EACAE,GAEF,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASy4C,OAAQ/B,EAAUE,GAChD,MAEF,QAEE,KADIh6D,EAAW5lB,KAAKswE,gBACL,CAEb,KADI2Q,EAAYjhF,KAAK6iB,QAAQhM,aAAapN,EAAAzG,cAAcwE,QACxC,CACdxH,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,SAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAGF,KADIz5C,EAAYg/E,EAAUllE,QAAUklE,EAAUllE,QAAQ7a,IAAIuI,EAAAzG,cAAcsF,KAAO,MAC/D,CACdtI,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,aAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAEF7wC,OAAO5I,EAAUqR,MAAQ8+C,EAAAhlD,YAAY6N,oBACrCjb,KAAKswE,eAAiB1qD,EAAW5lB,KAAK4O,SAASsM,gBAAmCjZ,EAAW,MAK7FmwB,EAHIxM,GAAY5lB,KAAKg2E,gBAAgBpwD,GAG9B5lB,KAAKkhF,eAAet7D,EAAU,CAAE85D,EAAUE,GAAa/sD,GAFvDlzB,EAAO+7C,cAIhB,MAEF,QAEE,KADI91B,EAAW5lB,KAAKuwE,gBACL,CACb,IAAI0Q,EASAh/E,EARJ,KADIg/E,EAAYjhF,KAAK6iB,QAAQhM,aAAapN,EAAAzG,cAAcuE,OACxC,CACdvH,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,QAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAGF,KADIz5C,EAAYg/E,EAAUllE,QAAUklE,EAAUllE,QAAQ7a,IAAIuI,EAAAzG,cAAcsF,KAAO,MAC/D,CACdtI,KAAKuV,MACH7L,EAAA8L,eAAe8sD,mBACfzvC,EAAW9iB,MAAO,YAEpBqiB,EAAOzyB,EAAO+7C,cACd,MAEF7wC,OAAO5I,EAAUqR,MAAQ8+C,EAAAhlD,YAAY6N,oBACrCjb,KAAKuwE,eAAiB3qD,EAAW5lB,KAAK4O,SAASsM,gBAAmCjZ,EAAW,MAK7FmwB,EAHIxM,GAAY5lB,KAAKg2E,gBAAgBpwD,GAG9B5lB,KAAKkhF,eAAet7D,EAAU,CAAE85D,EAAUE,GAAa/sD,GAFvDlzB,EAAO+7C,cAIhB,MAEF,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMiqC,yBAA0BimB,GAAW,EAChD,KAAKnwD,EAAAC,MAAMgpC,kBAKT,GAJA6mB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAese,SACvD/B,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAagD,aAC5C,CACZ4lB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAKrB,OAFAkkC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,YACT9vE,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS+kC,OAAQ2R,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS24C,OAAQjC,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS24C,OACTtvB,EAAArpB,SAAS+kC,OACb2R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA5/E,KAAKuV,MACH7L,EAAA8L,eAAeosE,2CACf/uD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAWjzB,KAAK8vE,YAAY9xD,YAE1Ere,EAAO+7C,cAEhB,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMkqC,+BAAgCgmB,GAAW,EACtD,KAAKnwD,EAAAC,MAAMipC,wBAKT,GAJA4mB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAese,SACvD/B,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa4C,aAC5C,CACZgmB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAMrB,OAHAgkC,EAAW1/E,KAAK49E,uBAAuB8B,EAAUC,GACjDC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,YACT9vE,KAAK8vE,YAAYx8D,MACvB,OACA,OAIA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASglC,OAAQ0R,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS64C,OAAQnC,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS64C,OACTxvB,EAAArpB,SAASglC,OACb0R,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASilC,OAAQyR,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS84C,OAAQpC,EAAUE,GAChD,MAEF,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS84C,OACTzvB,EAAArpB,SAASilC,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJA5/E,KAAKuV,MACH7L,EAAA8L,eAAeosE,2CACf/uD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAWjzB,KAAK8vE,YAAY9xD,YAE1Ere,EAAO+7C,cAEhB,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMmqC,2CAA4C+lB,GAAW,EAClE,KAAKnwD,EAAAC,MAAMkpC,oCAKT,GAJA2mB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAese,SACvD/B,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa6C,eAC5C,CACZ+lB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAMrB,OAHAgkC,EAAW1/E,KAAK49E,uBAAuB8B,EAAUC,GACjDC,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,YACT9vE,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASilC,OAAQyR,EAAUE,GAElD,OACA,OACA,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASilC,OAAQyR,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS84C,OAAQpC,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS84C,OACTzvB,EAAArpB,SAASilC,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJA5/E,KAAKuV,MACH7L,EAAA8L,eAAeosE,2CACf/uD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAWjzB,KAAK8vE,YAAY9xD,YAE1Ere,EAAO+7C,cAEhB,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMoqC,iBAAkB8lB,GAAW,EACxC,KAAKnwD,EAAAC,MAAMmpC,UAKT,GAJA0mB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAese,SACvD/B,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAaqC,aAC5C,CACZumB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFH,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,gBACZ,CAGL,GAFA8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS8kC,OAAQ4R,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS+4C,OAAQrC,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS+4C,OACT1vB,EAAArpB,SAAS8kC,OACb4R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA5/E,KAAKuV,MACH7L,EAAA8L,eAAeosE,2CACf/uD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAWjzB,KAAK8vE,YAAY9xD,YAE1Ere,EAAO+7C,cAEhB,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMqqC,WAAY6lB,GAAW,EAClC,KAAKnwD,EAAAC,MAAMopC,IAKT,GAJAymB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAese,SACvD/B,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAasC,YAC5C,CACZsmB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFH,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,gBACZ,CAGL,GAFA8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASg5C,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASg5C,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASi5C,MAAOvC,EAAUE,GAC/C,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASi5C,MACT5vB,EAAArpB,SAASg5C,MACbtC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA5/E,KAAKuV,MACH7L,EAAA8L,eAAeosE,2CACf/uD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAWjzB,KAAK8vE,YAAY9xD,YAE1Ere,EAAO+7C,cAEhB,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMsqC,aAAc4lB,GAAW,EACpC,KAAKnwD,EAAAC,MAAMqpC,MAKT,GAJAwmB,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAese,SACvD/B,EAAW3/E,KAAK8vE,YAGZ9vE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAC5C,IAAI2P,EAEEnB,EADN,GADImB,EAAiByzD,EAASzzD,eAG5B,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAauC,aAC5C,CACZqmB,EAAOpyB,KAAKggF,sBAAsBj1D,EAAUmI,EAAMwsD,EAAUvsD,EAAON,GACnE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAGrB,GAAIqkC,EACFH,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAAQ,GAClDE,EAAY7/E,KAAK8vE,gBACZ,CAGL,GAFA8P,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,GAC1CE,EAAY7/E,KAAK8vE,cACbgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALA7/E,KAAKuV,MACH7L,EAAA8L,eAAeyqE,8CACfptD,EAAW9iB,MAAO,IAAK4vE,EAAS3hE,WAAY6hE,EAAU7hE,YAExDhe,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,cAhBdgkC,EAAW1/E,KAAK29E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP5sD,GAEF0sD,EAAY5/E,KAAK29E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP3sD,GAWN,OAAQnzB,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASk5C,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASk5C,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASm5C,OAAQzC,EAAUE,GAChD,MAEF,OACA,OACExtD,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASm5C,OACT9vB,EAAArpB,SAASk5C,OACbxC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA5/E,KAAKuV,MACH7L,EAAA8L,eAAeosE,2CACf/uD,EAAW9iB,MAAO6f,EAAAioC,sBAAsBhlC,EAAWI,UAAWjzB,KAAK8vE,YAAY9xD,YAE1Ere,EAAO+7C,cAEhB,QACE7wC,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAKF,KAAK9rB,EAAAC,MAAMwpC,oBACT,IAAI5xC,EAAOznB,KAAKkxE,YACZmO,EAAqC,GAAd9D,EAC3BmE,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAemc,WAAYF,GACnEM,EAAW3/E,KAAK8vE,YAEhB,IAAIsS,EAAY36D,EAAKihD,OAOrB,GANA1oE,KAAKkxE,YAAckR,EACnBA,EAAU/W,qBAAqBqU,GAC/BE,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRvc,GAAkBz5D,EAAA+H,KAAK9N,MAAQw/D,GAAkBz5D,EAAA+H,KAAKG,KACxD+tE,EAAY5/E,KAAKqiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACV9pE,KAAKkxE,YAAczpD,EACnBznB,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxBwuB,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAcoF,EAAUC,GAC7B3/E,KAAKs6E,cAAcsF,EAAWC,GAC9BlgF,EAAOyD,IAAI,SAIR,GAAIu8E,EAASvM,UAAW,CAC7B,IAAIkP,EAAyBtiF,KAAKqwE,oBAAoB/+D,IAAIouE,GACtD6C,EAA0BviF,KAAKqwE,oBAAoB/+D,IAAIsuE,GACvDlJ,EAAOjvD,EAAKohD,aAAa8W,GAC7BD,EAAW//E,EAAOs4C,UAAUy+B,EAAKzxD,MAAOy6D,GAIxC,IAAI8C,GAAmB,EACnBF,GAA0BC,EACvBD,GAGH1C,EAAY5/E,KAAKqzE,WAAWuM,GAC5B2C,GAA0B,GAH1BC,GAAmB,EAKC,GAAXjH,IACXqE,EAAY5/E,KAAKyiF,gBAAgB7C,EAAWwC,EAAW36D,IAGzD,IAAIi7D,EAAa,IAAIz7E,MACjBq7E,GACFI,EAAW/Q,QACT3xE,KAAK2iF,YACHhjF,EAAOo4C,UAAU2+B,EAAKzxD,MAAO06D,EAAS1rB,kBAI5C2rB,EAAY5/E,KAAKqiF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUtY,mBACV9pE,KAAKkxE,YAAczpD,EAEnB2K,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAcoF,EAAUC,GAC7BC,EACA4C,EACIxiF,KAAKqzE,WACH1zE,EAAOo4C,UAAU2+B,EAAKzxD,MAAO06D,EAAS1rB,iBAExCt0D,EAAOo4C,UAAU2+B,EAAKzxD,MAAO06D,EAAS1rB,kBAExCquB,GAA0BC,IAAyBviF,KAAKqwE,oBAAoBv+D,IAAIsgB,GAChFskD,GAAMjvD,EAAK6hD,cAAcoN,QAS7B,GALAkJ,EAAY5/E,KAAKqiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACV9pE,KAAKkxE,YAAczpD,EAGf2K,EAAOzyB,EAAO8kD,gBAAgBi7B,GAAU,EAAM,GAChDttD,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAcoF,EAAU1/E,KAAK8vE,aAClC8P,EACAxtD,OAIG,CACL,IAAIspD,EAAYj0D,EAAKohD,aAAa8W,GAC7Bl4D,EAAKokD,YAAY6T,EAAUC,IAAWl4D,EAAK2hD,aAAasS,EAAUz2D,MAAOjb,EAAA69D,WAAWiE,SACrFrkD,EAAK2jD,UAAUsU,EAAUC,IAAWl4D,EAAK2hD,aAAasS,EAAUz2D,MAAOjb,EAAA69D,WAAW9C,SACtF3yC,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAc36E,EAAOs4C,UAAUyjC,EAAUz2D,MAAOy6D,GAAWC,GAChEC,EACAjgF,EAAOo4C,UAAU2jC,EAAUz2D,MAAO06D,EAAS1rB,iBAIjDj0D,KAAK8vE,YAAc6P,EACnB,MAEF,KAAK/vD,EAAAC,MAAMypC,QACL7xC,EAAOznB,KAAKkxE,YACZmO,EAAqC,GAAd9D,EAC3BmE,EAAW1/E,KAAK80E,kBAAkB5hD,EAAMkwC,EAAemc,WAAYF,GACnEM,EAAW3/E,KAAK8vE,YAEZsS,EAAY36D,EAAKihD,OAOrB,GANA1oE,KAAKkxE,YAAckR,EACnBA,EAAU5W,sBAAsBkU,GAChCE,EAAY5/E,KAAK80E,kBAAkB3hD,EAAOwsD,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRvc,GAAkBz5D,EAAA+H,KAAK9N,MAAQw/D,GAAkBz5D,EAAA+H,KAAKG,KACxD+tE,EAAY5/E,KAAKqiF,6BAA6BD,EAAWxC,EAAWD,GACpEyC,EAAUtY,mBACV9pE,KAAKkxE,YAAczpD,EACnBznB,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxBwuB,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAcoF,EAAUC,GAC7BhgF,EAAOyD,IAAI,GACXpD,KAAKs6E,cAAcsF,EAAWC,SAI3B,GAAIF,EAASvM,UAAW,CACzBkP,EAAyBtiF,KAAKqwE,oBAAoB/+D,IAAIouE,GACtD6C,EAA0BviF,KAAKqwE,oBAAoB/+D,IAAIsuE,GACvDlJ,EAAOjvD,EAAKohD,aAAa8W,GAC7BD,EAAW//E,EAAOs4C,UAAUy+B,EAAKzxD,MAAOy6D,GAIxC,IAAIkD,GAAmB,EACnBN,GAA0BC,EACvBD,GAGH1C,EAAY5/E,KAAKqzE,WAAWuM,GAC5B2C,GAA0B,GAH1BK,GAAmB,EAKC,GAAXrH,IACXqE,EAAY5/E,KAAKyiF,gBAAgB7C,EAAWwC,EAAW36D,IAGrDi7D,EAAa,IAAIz7E,MACjBq7E,GAGFI,EAAW/Q,QACT3xE,KAAK2iF,YACHhjF,EAAOo4C,UAAU2+B,EAAKzxD,MAAO06D,EAAS1rB,kBAI5C2rB,EAAY5/E,KAAKqiF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUtY,mBACV9pE,KAAKkxE,YAAczpD,EAEnB2K,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAcoF,EAAUC,GAC7BiD,EACI5iF,KAAKqzE,WACH1zE,EAAOo4C,UAAU2+B,EAAKzxD,MAAO06D,EAAS1rB,iBAExCt0D,EAAOo4C,UAAU2+B,EAAKzxD,MAAO06D,EAAS1rB,gBAC1C2rB,IAEE0C,GAA0BC,IAAyBviF,KAAKqwE,oBAAoBv+D,IAAIsgB,GAChFskD,GAAMjvD,EAAK6hD,cAAcoN,QAS7B,GALAkJ,EAAY5/E,KAAKqiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACV9pE,KAAKkxE,YAAczpD,EAGf2K,EAAOzyB,EAAO8kD,gBAAgBi7B,GAAU,EAAM,GAChDttD,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAcoF,EAAUC,GAC7BvtD,EACAwtD,OAIG,CACDlE,EAAYj0D,EAAK8hD,oBAAoBoW,GACpCl4D,EAAKokD,YAAY6T,EAAUC,IAAWl4D,EAAK2hD,aAAasS,EAAUz2D,MAAOjb,EAAA69D,WAAWiE,SACrFrkD,EAAK2jD,UAAUsU,EAAUC,IAAWl4D,EAAK2hD,aAAasS,EAAUz2D,MAAOjb,EAAA69D,WAAW9C,SACtF3yC,EAAOzyB,EAAO+6C,GACZ16C,KAAKs6E,cAAc36E,EAAOs4C,UAAUyjC,EAAUz2D,MAAOy6D,GAAWC,GAChEhgF,EAAOo4C,UAAU2jC,EAAUz2D,MAAO06D,EAAS1rB,gBAC3C2rB,GAIN5/E,KAAK8vE,YAAc6P,EACnB,MAEF,QACE90E,QAAO,GACPunB,EAAOpyB,KAAKL,OAAO+7C,cAGvB,IAAKqkC,EAAU,OAAO3tD,EACtB,IAAIxjB,EAAW5O,KAAK4O,SAChBgc,EAAS5qB,KAAK4O,SAAS00D,kBAAkBpwC,EAAMlzB,KAAKkxE,aACxD,OAAKtmD,EACE5qB,KAAK6iF,eACVj4D,EACAwH,EACAc,EACAtkB,EAASkyD,sBACTlyD,EAASmyD,yBACTqC,GAAkBz5D,EAAA+H,KAAKG,MAPLlS,EAAO+7C,eAW7Bi0B,EAAA1tE,UAAA6gF,qBAAA,SACElb,EACAtmE,EACAkyE,EACAjN,GAIA,OAAOvmE,KAAKkhF,eAAetZ,EAAkB,CAAE4L,GAAajN,GAAY,IAG1EoJ,EAAA1tE,UAAA+9E,sBAAA,SACEpY,EACA10C,EACAwsD,EACAvsD,EACAozC,GAEA,IAAIsZ,EACJ,GAAIjY,EAAiBrrD,GAAG9S,EAAApH,YAAYggB,UAAW,CAC7C,IAAI7S,EAAgB3E,OAAO+8D,EAAiB52D,QAASnG,OAAO2E,EAAc8D,MAAQ8+C,EAAAhlD,YAAY0O,OAC9F+jE,EAAYjY,EAAiB72D,UAAUsW,eAAe,QAUtDw4D,EAAYjY,EAAiB72D,UAAUsW,eAAe,GAExD,IAAIu4D,EAAY5/E,KAAK80E,kBAAkB3hD,EAAO0sD,EAAS,GACvD,OAAO7/E,KAAKkhF,eAAetZ,EAAkB,CAAE8X,EAAUE,GAAarZ,IAGxEoJ,EAAA1tE,UAAAq+E,kBAAA,SAAkBztD,EAAwByoD,EAA6BlY,GACrE,IACIx0D,EADU5O,KAAK6iB,QACIjU,SACnB6Y,EAAOznB,KAAKkxE,YACZtmD,EAAShc,EAAS00D,kBAAkBzwC,EAAYpL,GACpD,IAAKmD,EAAQ,OAAO5qB,KAAKL,OAAO+7C,cAChC,IAII2X,EAJA0vB,EAAiBn0E,EAASkyD,sBAC1B7sC,EAAoBrlB,EAASmyD,yBAIjC,OAAQn2C,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY+Q,OAEf,IAAKne,KAAK4zE,cAAsBhpD,GAAS,OAAO5qB,KAAKL,OAAO+7C,cAG9D,KAAK0W,EAAAhlD,YAAYyO,MAIjB,KAAKu2C,EAAAhlD,YAAY8X,MACfmuC,EAAmCzoC,EAAQ1O,KAC3C,MAEF,KAAKk2C,EAAAhlD,YAAYoO,mBACf,IAAIE,EAAsCkP,EAAQlP,gBAClD,IAAKA,EAKH,OAJA1b,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACfnwD,EAAW9iB,MAAkB6a,EAAQjc,cAEhC3O,KAAKL,OAAO+7C,cAGrB,KADIzyB,EAAiBjpB,KAAK4O,SAASsM,gBAAgBQ,EAAiB,KAAM7R,EAAAm4D,UAAWj4D,EAAA62D,WAAWO,SAC3E,OAAOnhE,KAAKL,OAAO+7C,cACxC7wC,OAAyD,GAAlDoe,EAAelY,UAAUsW,eAAevc,QAC/CuoD,EAAapqC,EAAelY,UAAUsW,eAAe,GACrD,MAEF,KAAK+qC,EAAAhlD,YAAYuO,SACf,IAAIsN,EACJ,KADIA,EAA4B2B,EAAQ3B,gBAMtC,OAJAjpB,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACfnwD,EAAW9iB,MAAkB6a,EAAQjc,cAEhC3O,KAAKL,OAAO+7C,cAErB7wC,OAAyD,GAAlDoe,EAAelY,UAAUsW,eAAevc,QAC/CuoD,EAAapqC,EAAelY,UAAUsW,eAAe,GACrD,MAEF,KAAK+qC,EAAAhlD,YAAY0O,MACf,GAAImY,EAAmB,CACrB,IAAIgvD,EAAcx7D,EAAKlL,GAAE,OAcrB2mE,EAAqBt4D,EAAQF,eAAe0nC,EAAA5oD,aAAa4B,YAAa63E,GAC1E,IAAKC,EAaH,OAZyBt4D,EAAQF,eAAe0nC,EAAA5oD,aAAa2B,YAAa83E,GAOxEjjF,KAAKuV,MACH7L,EAAA8L,eAAe2tE,+CACftwD,EAAW9iB,MAAe6a,EAAQjc,cAPpC3O,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACf5vC,EAAW9iB,MAAe6a,EAAQjc,cAQ/B3O,KAAKL,OAAO+7C,cAErB7wC,OAAqD,GAA9Cq4E,EAAWnyE,UAAUsW,eAAevc,QAC3CuoD,EAAa6vB,EAAWnyE,UAAUsW,eAAe,GACjD,MAIJ,QAKE,OAJArnB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,cAMvB,OADA7wC,OAAOwoD,GAAc1pD,EAAA+H,KAAKG,MACnB7R,KAAK6iF,eACVj4D,EACA5qB,KAAK80E,kBAAkBwG,EAAiBjoB,EAAY,IACpDxgC,EACAkwD,EACA9uD,EACAmvC,GAAkBz5D,EAAA+H,KAAKG,OAK3B89D,EAAA1tE,UAAA4gF,eAAA,SAEEj4D,EAEA4oD,EAEA8H,EAEAyH,EAEAK,EAEAC,GAEA,IAAI1jF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YAKhB,OAAQtmD,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY8X,MACf,OAAIuC,EAAKuiD,YAAoBp/C,EAAQ3F,MAAOjb,EAAA69D,WAAW6U,UAAU,IAC/D18E,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACf1H,EAAgBvrE,MAAO6a,EAAOjc,cAEhC3O,KAAK8vE,YAAcuT,EAAcz4D,EAAQ1O,KAAOvS,EAAA+H,KAAKG,KAC9ClS,EAAO+7C,eAET17C,KAAKsjF,oBAA2B14D,EAAQ4oD,EAAW6P,GAE5D,KAAKjxB,EAAAhlD,YAAY+Q,OACf,OAAKne,KAAK4zE,cAAsBhpD,GAC5BA,EAAO9L,MAAMrV,EAAApH,YAAYqa,MAAQjT,EAAApH,YAAYid,WAC/Ctf,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACf1H,EAAgBvrE,MAChB6a,EAAOjc,cAET3O,KAAK8vE,YAAcuT,EAAez4D,EAAQ1O,KAAOvS,EAAA+H,KAAKG,KAC/ClS,EAAO+7C,eAET17C,KAAK+1E,qBAA6BnrD,EAAQ4oD,EAAW6P,GAVZ1jF,EAAO+7C,cAYzD,KAAK0W,EAAAhlD,YAAYyO,MACf,IAAIg5D,EAA0BjqD,EAAQiqD,gBACtC,OACUjqD,EAAQrO,GAAG9S,EAAApH,YAAYid,WAE7BmI,EAAKm9C,eAAeroD,GAAG9S,EAAApH,YAAYyd,cACnC+0D,EASG70E,KAAKujF,oBAA2B34D,EACrC4oD,EAEAxzE,KAAK80E,kBAAkBjqE,OAAOk4E,GAAiB/iF,KAAKwR,QAAQI,WAC5DyxE,IAVArjF,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACf1H,EAAgBvrE,MAAe6a,EAAQjc,cAElChP,EAAO+7C,eASlB,KAAK0W,EAAAhlD,YAAYoO,mBACXxb,KAAKqwE,oBAAoB/+D,IAAIkiE,KAAYA,EAAYxzE,KAAKwjF,gBAAgBhQ,EAAW/rD,IACzF,IAAI/L,EAAsCkP,EAAQlP,gBAClD,IAAKA,EAKH,OAJA1b,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACf1H,EAAgBvrE,MAAO6a,EAAOjc,cAEzBhP,EAAO+7C,cAGhB,KADIzyB,EAAiBjpB,KAAK4O,SAASsM,gBAAgBQ,EAAiB,KAAM7R,EAAAm4D,UAAWj4D,EAAA62D,WAAWO,SAC3E,OAAOxhE,EAAO+7C,cAEnC,IAAK2nC,EAAK,OAAOrjF,KAAKkhF,eAAej4D,EAAgB,CAAEuqD,GAAa8H,GAEpE,IAAI7/D,EAAkB5Q,OAA2B+f,EAAQnP,iBAEzD,KADIuN,EAAiBhpB,KAAK4O,SAASsM,gBAAgBO,EAAiB,KAAM5R,EAAAm4D,UAAWj4D,EAAA62D,WAAWO,SAC3E,OAAOxhE,EAAO+7C,cACnC,IACI+nC,GADAxyD,EAAajI,EAAejY,UAAUkgB,YACRgjC,eAClC,OAAOt0D,EAAOs6C,MAAM,KAAM,CACxBj6C,KAAKkhF,eAAej4D,EAAgB,CAAEuqD,GAAa8H,GACnDt7E,KAAKkhF,eAAel4D,EAAgB,KAAMsyD,IACzCmI,GAEL,KAAKrxB,EAAAhlD,YAAYuO,SAEf,IAAIsN,EACJ,GAFIjpB,KAAKqwE,oBAAoB/+D,IAAIkiE,KAAYA,EAAYxzE,KAAKwjF,gBAAgBhQ,EAAW/rD,MACrFwB,EAA4B2B,EAAQ3B,gBAMtC,OAJAjpB,KAAKuV,MACH7L,EAAA8L,eAAewtE,oEACf1H,EAAgBvrE,MAAO6a,EAAOjc,cAEzBhP,EAAO+7C,cAGhB,IAAK2nC,EAAK,CACR,IAAIK,EAAW1jF,KAAK80E,kBAAkBjqE,OAAOk4E,GAAiB/iF,KAAKwR,QAAQI,WAC3E,OAAO5R,KAAKkhF,eAAej4D,EAAgB,CAAEy6D,EAAUlQ,GAAa8H,GAKlEmI,GADAxyD,GADAjI,EAAiBne,OAAkB+f,EAAQ5B,iBACfjY,UAAUkgB,YACRgjC,eAFlC,IAAIjrC,EAGA26D,EAAW3jF,KAAK80E,kBAAkBjqE,OAAOk4E,GAAiB/iF,KAAKwR,QAAQI,WAEvE+pE,EADYl0D,EAAK8hD,oBAAoBt4C,GACVhM,MAC/B,OAAOtlB,EAAOs6C,MAAM,KAAM,CACxBj6C,KAAKkhF,eAAej4D,EAAgB,CAClCtpB,EAAOs4C,UAAU0jC,EAAgBgI,GACjCnQ,GACC8H,GACHt7E,KAAKkhF,eAAel4D,EAAgB,CAClCrpB,EAAOo4C,UAAU4jC,EAAgB8H,IAChCnI,IACFmI,GAEL,KAAKrxB,EAAAhlD,YAAY0O,MAEf,GADI9b,KAAKqwE,oBAAoB/+D,IAAIkiE,KAAYA,EAAYxzE,KAAKwjF,gBAAgBhQ,EAAW/rD,IACrF27D,EAAiB,CACnB,IAAIH,EAAcx7D,EAAKlL,GAAE,OACrBinD,EAAqB54C,EAAQF,eAAe0nC,EAAA5oD,aAAa2B,YAAa83E,GAC1E,IAAKzf,EAKH,OAJAxjE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACf6Y,EAAgBvrE,MAAO6a,EAAOjc,cAEzBhP,EAAO+7C,cAEhB,IAAIwnC,EAAqBt4D,EAAQF,eAAe0nC,EAAA5oD,aAAa4B,YAAa63E,GAC1E,IAAKC,EAMH,OALAljF,KAAKuV,MACH7L,EAAA8L,eAAe2tE,+CACf7H,EAAgBvrE,MAAO6a,EAAOjc,cAEhC3O,KAAK8vE,YAAcuT,EAAM7f,EAAWzyD,UAAUkgB,WAAatnB,EAAA+H,KAAKG,KACzDlS,EAAO+7C,cAEhB,IAAI2X,EAAqBzoC,EAAQ1O,KAE7B0nE,GADAD,EAAW3jF,KAAK80E,kBAAkBjqE,OAAOk4E,GAAiB/iF,KAAKwR,QAAQI,WACzD5R,KAAK80E,kBAAkBsO,EAAiBz5E,EAAA+H,KAAKtO,IAAG,IAClE,GAAIigF,EAAK,CACP,IAAIQ,EAAkBp8D,EAAKohD,aAAaxV,GACpCywB,EAAmBr8D,EAAK8hD,oBAAoBvpE,KAAK8vE,aACjD7+C,EAAauyC,EAAWzyD,UAAUkgB,WAEtC,OADAxJ,EAAK6hD,cAAcua,GACZlkF,EAAOs6C,MAAM,KAAM,CACxBj6C,KAAKkhF,eAAegC,EAAY,CAC9BvjF,EAAOs4C,UAAU4rC,EAAgB5+D,MAAO0+D,GACxChkF,EAAOs4C,UAAU6rC,EAAiB7+D,MAAO2+D,GACzCpQ,GACC8H,GACHt7E,KAAKkhF,eAAe1d,EAAY,CAC9B7jE,EAAOo4C,UAAU8rC,EAAgB5+D,MAAO4+D,EAAgB3nE,KAAK+3C,gBAC7Dt0D,EAAOo4C,UAAU+rC,EAAiB7+D,MAAO6+D,EAAiB5nE,KAAK+3C,iBAC9DqnB,IACFrqD,EAAWgjC,gBAEd,OAAOj0D,KAAKkhF,eAAegC,EAAY,CACrCS,EACAC,EACApQ,GACC8H,IAUX,OAJAt7E,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf86D,EAAgBvrE,OAEXpQ,EAAO+7C,eAIRi0B,EAAA1tE,UAAAqhF,oBAAR,SAEEn8D,EAEAqsD,EAEA6P,GAEA,IAAInnE,EAAOiL,EAAMjL,KACjBrR,OAAOqR,GAAQvS,EAAA+H,KAAKG,MACpB,IAAI4V,EAAOznB,KAAKkxE,YACZhqD,EAAaC,EAAMlC,MAQvB,GANI/I,EAAKK,GAAE,OACLkL,EAAK2jD,UAAUoI,EAAWt3D,GAAOuL,EAAK2hD,aAAaliD,EAAYld,EAAA69D,WAAW9C,SACzEt9C,EAAKuhD,eAAe9hD,EAAYld,EAAA69D,WAAW9C,UAElDt9C,EAAK2hD,aAAaliD,EAAYld,EAAA69D,WAAW8C,WAErCzuD,EAAKk3D,UAAW,CAClB,IAAIzzE,EAASK,KAAKL,OACd2zE,EAAap3D,EAAK+3C,eAEtB,OAAIxsC,EAAKyiD,eAAehjD,EAAYld,EAAA69D,WAAW2T,cACzCx7E,KAAKqwE,oBAAoB/+D,IAAIkiE,IAC/BA,EAAYxzE,KAAK+jF,mBACfpkF,EAAOo4C,UAAU7wB,EAAYosD,GAC7BE,GAEE6P,GACFrjF,KAAK8vE,YAAc5zD,EACZvc,EAAOs4C,UAAU/wB,EAAYssD,KAEpCxzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOk6C,UAAU3yB,EAAYssD,MAGtCA,EAAYxzE,KAAKyzE,kBACf9zE,EAAOo4C,UAAU7wB,EAAYosD,GAC7BE,GAEE6P,GACFrjF,KAAK8vE,YAAc5zD,EACZvc,EAAOs4C,UAAU/wB,EAAYssD,KAEpCxzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOk6C,UAAU3yB,EAAYssD,MAIxC/rD,EAAKuhD,eAAe9hD,EAAYld,EAAA69D,WAAW2C,wBAC3C/iD,EAAK2hD,aAAaliD,EAAYld,EAAA69D,WAAWwB,UACpCrpE,KAAKqwE,oBAAoB/+D,IAAIkiE,KAAYA,EAAYxzE,KAAKqzE,WAAWG,IACtE6P,GACFrjF,KAAK8vE,YAAc5zD,EACZvc,EAAOs4C,UAAU/wB,EAAYssD,KAEpCxzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOk6C,UAAU3yB,EAAYssD,KAQxC,OAJIt3D,EAAKK,GAAG,MACLkL,EAAKokD,YAAY2H,EAAWt3D,GAC5BuL,EAAKuhD,eAAe9hD,EAAYld,EAAA69D,WAAWiE,SADRrkD,EAAK2hD,aAAaliD,EAAYld,EAAA69D,WAAWiE,UAG/EuX,GACFrjF,KAAK8vE,YAAc5zD,EACZlc,KAAKL,OAAOs4C,UAAU/wB,EAAYssD,KAEzCxzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjB7R,KAAKL,OAAOk6C,UAAU3yB,EAAYssD,KAMvC7D,EAAA1tE,UAAA8zE,qBAAR,SAEEv5D,EAEAg3D,EAEA6P,GAEA,IAAI1jF,EAASK,KAAKL,OACduc,EAAOM,EAAON,KAClBrR,OAAOqR,GAAQvS,EAAA+H,KAAKG,MACpB,IAAIyhE,EAAap3D,EAAK+3C,eAEtB,OAAI/3C,EAAKk3D,UACHpzE,KAAKqwE,oBAAoB/+D,IAAIkiE,GAC3B6P,GACFrjF,KAAK8vE,YAAc5zD,EACZvc,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOo6C,WAAWv9B,EAAO7N,aACvB3O,KAAK+jF,mBACHpkF,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,GACvCE,IAGJ7zE,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,IACtCA,KAEHtzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOo6C,WAAWv9B,EAAO7N,aAC9B3O,KAAK+jF,mBACHpkF,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,GACvCE,KAKF6P,GACFrjF,KAAK8vE,YAAc5zD,EACZvc,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOo6C,WAAWv9B,EAAO7N,aACvB3O,KAAKyzE,kBACH9zE,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,GACvCE,IAGJ7zE,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,IACtCA,KAEHtzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOo6C,WAAWv9B,EAAO7N,aAC9B3O,KAAKyzE,kBACH9zE,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,GACvCE,MAMRA,EAAYxzE,KAAK49E,uBAAuBpK,EAAWt3D,GAC/CmnE,GACFrjF,KAAK8vE,YAAc5zD,EACZvc,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOo6C,WAAWv9B,EAAO7N,aAAc6kE,GACvC7zE,EAAOw4C,WAAW37B,EAAO7N,aAAc2kE,IACtCA,KAEHtzE,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOo6C,WAAWv9B,EAAO7N,aAC9B6kE,MAOR7D,EAAA1tE,UAAAshF,oBAAA,SAEEr4D,EAEAsoD,EAEAmQ,EAEAN,GAEA,IAAI1jF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACZ/J,EAAYj8C,EAAMhP,KAClB8nE,EAAkB7c,EAAUlT,eAChCppD,OAAOqgB,EAAMla,OAAOsC,MAAQ8+C,EAAAhlD,YAAY0O,OACxC,IAAIsL,EAAmB8D,EAAMla,OAAQkL,KACjC+nE,EAAiB78D,EAAS6sC,eAE9B,GAAIkT,EAAUiM,WAAahsD,EAASgsD,UAAW,CAC7C,IAAI8Q,EAAWz8D,EAAKohD,aAAazhD,GACjC,GAAIpnB,KAAKqwE,oBAAoB/+D,IAAIkiE,GAAY,CAC3C,GAAI6P,EAAK,CACP,IAAIc,EAAY18D,EAAK8hD,oBAAoBpC,GAKzC,OAJK1/C,EAAKokD,YAAY2H,EAAWrM,IAAY1/C,EAAK2hD,aAAa+a,EAAUl/D,MAAOjb,EAAA69D,WAAWiE,SACvFrkD,EAAK2jD,UAAUoI,EAAWrM,IAAY1/C,EAAK2hD,aAAa+a,EAAUl/D,MAAOjb,EAAA69D,WAAW9C,SACxFt9C,EAAK6hD,cAAc4a,GACnBlkF,KAAK8vE,YAAc3I,EACZxnE,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOy3C,MAAM+vB,EAAUzU,SACrB/yD,EAAOs4C,UAAUisC,EAASj/D,MAAO0+D,GACjC3jF,KAAK+jF,mBACHpkF,EAAO04C,KAAK8uB,EAAUzU,SAAUyU,EAAU5qD,GAAE,GAC1C5c,EAAOo4C,UAAUmsC,EAASj/D,MAAOg/D,GACjCD,EAAiB94D,EAAMrC,cAEzBlpB,EAAOs4C,UAAUksC,EAAUl/D,MAAOuuD,IAEpCwQ,EAAiB94D,EAAMrC,cAEzBlpB,EAAOo4C,UAAUosC,EAAUl/D,MAAO++D,IACjCA,GAIH,OAFAv8D,EAAK6hD,cAAc4a,GACnBlkF,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOy3C,MAAM+vB,EAAUzU,SAC5B/yD,EAAOs4C,UAAUisC,EAASj/D,MAAO0+D,GACjC3jF,KAAK+jF,mBACHpkF,EAAO04C,KAAK8uB,EAAUzU,SAAUyU,EAAU5qD,GAAE,GAC1C5c,EAAOo4C,UAAUmsC,EAASj/D,MAAOg/D,GACjCD,EAAiB94D,EAAMrC,cAEzB2qD,GAEFwQ,EAAiB94D,EAAMrC,cAI3B,GAAIw6D,EAAK,CACHc,EAAY18D,EAAK8hD,oBAAoBpC,GAKzC,OAJK1/C,EAAKokD,YAAY2H,EAAWrM,IAAY1/C,EAAK2hD,aAAa+a,EAAUl/D,MAAOjb,EAAA69D,WAAWiE,SACvFrkD,EAAK2jD,UAAUoI,EAAWrM,IAAY1/C,EAAK2hD,aAAa+a,EAAUl/D,MAAOjb,EAAA69D,WAAW9C,SACxFt9C,EAAK6hD,cAAc4a,GACnBlkF,KAAK8vE,YAAc3I,EACZxnE,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOy3C,MAAM+vB,EAAUzU,SACrB/yD,EAAOs4C,UAAUisC,EAASj/D,MAAO0+D,GACjC3jF,KAAKyzE,kBACH9zE,EAAO04C,KAAK8uB,EAAUzU,SAAUyU,EAAU5qD,GAAE,GAC1C5c,EAAOo4C,UAAUmsC,EAASj/D,MAAOg/D,GACjCD,EAAiB94D,EAAMrC,cAEzBlpB,EAAOs4C,UAAUksC,EAAUl/D,MAAOuuD,IAEpCwQ,EAAiB94D,EAAMrC,cAEzBlpB,EAAOo4C,UAAUosC,EAAUl/D,MAAO++D,IACjCA,GAIH,OAFAv8D,EAAK6hD,cAAc4a,GACnBlkF,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOy3C,MAAM+vB,EAAUzU,SAC5B/yD,EAAOs4C,UAAUisC,EAASj/D,MAAO0+D,GACjC3jF,KAAKyzE,kBACH9zE,EAAO04C,KAAK8uB,EAAUzU,SAAUyU,EAAU5qD,GAAE,GAC1C5c,EAAOo4C,UAAUmsC,EAASj/D,MAAOg/D,GACjCD,EAAiB94D,EAAMrC,cAEzB2qD,GAEFwQ,EAAiB94D,EAAMrC,cAK7B,GAAIw6D,EAAK,CACHc,EAAY18D,EAAK8hD,oBAAoBpC,GAIzC,OAHK1/C,EAAKokD,YAAY2H,EAAWrM,IAAY1/C,EAAK2hD,aAAa+a,EAAUl/D,MAAOjb,EAAA69D,WAAWiE,SACvFrkD,EAAK2jD,UAAUoI,EAAWrM,IAAY1/C,EAAK2hD,aAAa+a,EAAUl/D,MAAOjb,EAAA69D,WAAW9C,SACxF/kE,KAAK8vE,YAAc3I,EACZxnE,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOy3C,MAAM+vB,EAAUzU,SACrBixB,EACAhkF,EAAOs4C,UAAUksC,EAAUl/D,MAAOuuD,GAClCwQ,EAAiB94D,EAAMrC,cAEzBlpB,EAAOo4C,UAAUosC,EAAUl/D,MAAO++D,IACjCA,GAGH,OADAhkF,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOy3C,MAAM+vB,EAAUzU,SAC5BixB,EACAnQ,EACAwQ,EAAiB94D,EAAMrC,eAO/B8mD,EAAA1tE,UAAA66E,sBAAA,SAEEjqD,EAEAuwC,EAEAmY,GAGA,IAAI57E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YAGhB,GAAIr+C,EAAWA,WAAWvf,MAAQ1J,EAAA2J,SAASkd,MAAO,CAChD,IAAI2zD,EAAOpkF,KAAKkxE,YACZtM,EAAiBwf,EAAKxf,eAC1B,IAAKA,EAAeroD,GAAG9S,EAAApH,YAAYyd,aAKjC,OAJA9f,KAAKuV,MACH7L,EAAA8L,eAAe6uE,8FACfxxD,EAAW9iB,OAENpQ,EAAO+7C,cAGhB,IAAIlsC,EAAgB3E,OAAO+5D,EAAe5zD,QAASnG,OAAO2E,EAAc8D,MAAQ8+C,EAAAhlD,YAAY0O,OAC5F,IAAIwoE,EAAoBz5E,OAAe2E,EAAeia,MAClDy7C,EAAYr6D,OAAOu5E,EAAKjf,YAAY17D,EAAAzG,cAAcoC,QAClDmuE,EAAiBvzE,KAAKwR,QAAQ+hE,eAO9BgR,EAAUvkF,KAAKwkF,kBACjBxkF,KAAKykF,kBAAkBH,EAAmBzxD,GAC1CA,EAAW3S,UACX2S,EACAlzB,EAAO+6C,GACL/6C,EAAOo4C,UAAUmtB,EAAUjgD,MAAOsuD,GAClC5zE,EAAOo4C,UAAUmtB,EAAUjgD,MAAOsuD,GAClCvzE,KAAKqzE,WACHrzE,KAAK22E,eAAsBnnE,KAE9B,IAGH3E,OAAO7K,KAAKqwE,oBAAoB/+D,IAAIizE,IACpC,IAAIpO,EAAyB,CAC3Bx2E,EAAOk6C,UAAUqrB,EAAUjgD,MAAOs/D,IAKpC,OAHAvkF,KAAK42E,wBAA+BpnE,EAAe2mE,GAG/CiO,EAAKtlE,MACP,QAGA9e,KAAKuV,MACH7L,EAAA8L,eAAekvE,kFACf7xD,EAAW9iB,OAENpQ,EAAO+7C,gBAEhB0oC,EAAK11E,IAAI,KACT1O,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACjBlS,EAAOs6C,MAAM,KAAMk8B,IAI5B,IAGIplE,EACA4zE,EAJA/5D,EAAS5qB,KAAK4O,SAAS00D,kBAAkBzwC,EAAWA,WAAYpL,GACpE,IAAKmD,EAAQ,OAAOjrB,EAAO+7C,cAI3B,OAAQ9wB,EAAOtX,MAGb,KAAK8+C,EAAAhlD,YAAY6N,mBACf,IAAIhZ,EAA+B2oB,EAC/BpB,EAAgBqJ,EAAWrJ,cAG/B,GAAIvnB,EAAUoW,aAAa+5C,EAAA/kD,eAAe6E,SACxC,OAAOlS,KAAK4kF,6BAA6B3iF,EAAW4wB,EAAYuwC,GAGlE,IAAIx9C,EAA4B,KAGhC,GAAI4D,EAAe,CACjB,IAAKvnB,EAAUsa,GAAG9S,EAAApH,YAAY4P,SAK5B,OAJAjS,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACfhvC,EAAWA,WAAW9iB,MAAO9N,EAAU0M,cAElChP,EAAO+7C,cAEhB91B,EAAW5lB,KAAK4O,SAAS62D,iCACvBxjE,EACAunB,EACA/B,EAAKm9C,eAAe5zD,OACpBnH,EAAAm4D,QAAqBv6C,EAAK3B,yBAC1B+M,OAIG,IAAI5wB,EAAUsa,GAAG9S,EAAApH,YAAY4P,SAAU,CAI5C,IAHA,IAAI4yE,EAAgB,IAAIz9E,IACpBkjB,EAAqBzf,OAAO5I,EAAUqoB,oBACtCm8C,EAAoBn8C,EAAmBxf,OAClCzK,EAAI,EAAGA,EAAIomE,IAAqBpmE,EACvCwkF,EAAcn2E,IAAI4b,EAAmBjqB,GAAGO,KAAKiV,KAAM,MAGrD,IAAIurD,EAAiBn/D,EAAUkkE,iBAAiBn1C,WAC5CmkC,EAAgBiM,EAAet2D,OAC/Bg6E,EAAgBjyD,EAAW3S,UAC3Bmd,EAAeynD,EAAch6E,OAC7Bi6E,EAAgB,IAAI99E,MAAqBo2B,GAC7C,IAASh9B,EAAI,EAAGA,EAAI80D,IAAiB90D,EAAG,CACtC,IAAIqhE,EAAWN,EAAe/gE,GAAG6b,KAC7B8oE,EAAetjB,EAASpuD,MAAQ1J,EAAA2J,SAASyoB,WAA8B0lC,EAAU9gE,KAAKkU,KAEtF,KADgB4sD,EAAU9gE,KAAKwP,WAAWyF,KAE1CovE,EAAqB5kF,EAAIg9B,EACzBynD,EAAczkF,GACd+gE,EAAe/gE,GAAGokB,YACtB,IAAKwgE,EAKH,OAJAjlF,KAAKuV,MACH7L,EAAA8L,eAAesL,+BACf+R,EAAW9iB,MAAOolD,EAAcn3C,SAAS,IAAKqf,EAAarf,SAAS,KAE/Dre,EAAO+7C,cAEhB,GAAqB,OAAjBspC,GAAyBH,EAAcvzE,IAAI0zE,GAAe,CAE5D,GADIE,EAAeL,EAAc3jF,IAAI8jF,GACnB,CAChBD,EAAc1kF,GAAKL,KAAK80E,kBAAkBmQ,EAAoBC,GAC9D,IAAIpF,OAAU,EACd,KAAMA,EAAan2E,EAAA+H,KAAKqiD,kBAAkBmxB,EAAcllF,KAAK8vE,aAAa,OAClEgQ,EAAan2E,EAAA+H,KAAKqiD,kBAAkBmxB,EAAcllF,KAAK8vE,aAAa,IAKxE,OAJA9vE,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACf3T,EAAe/gE,GAAG6b,KAAKnM,MAAO/P,KAAK8vE,YAAY9xD,WAAYknE,EAAalnE,YAEnEre,EAAO+7C,cAGlBwpC,EAAepF,OAEfiF,EAAc1kF,GAAKL,KAAK80E,kBAAkBmQ,EAAoBt7E,EAAA+H,KAAKwhD,MACnEgyB,EAAellF,KAAK8vE,YAGtB+U,EAAcn2E,IAAIs2E,EAAcE,OAC3B,CACL,IAAIC,EAAenlF,KAAK4O,SAASoyD,YAC/BI,EAAe/gE,GAAG6b,KAClBuL,EAAKm9C,eACLn9C,EAAK3B,yBAEP,IAAKq/D,EAAc,OAAOxlF,EAAO+7C,cACjCqpC,EAAc1kF,GAAKL,KAAK80E,kBAAkBmQ,EAAoBE,EAAY,IAG9E,IAAI3e,EAAwB,IAAIv/D,MAAYw/D,GAC5C,IAASpmE,EAAI,EAAGA,EAAIomE,IAAqBpmE,EAAG,CAC1C,IAAI6kF,EAAer6E,OAAOg6E,EAAc3jF,IAAIopB,EAAmBjqB,GAAGO,KAAKiV,OACvE2wD,EAAsBnmE,GAAK6kF,EAO7B,OALAt/D,EAAW5lB,KAAK4O,SAASsM,gBACvBjZ,EACAukE,EACA38D,EAAAm4D,QAAqBv6C,EAAK3B,2BAGrB9lB,KAAKkhF,eAAet7D,EAAUm/D,EAAelyD,EAAYuwC,GAAkBz5D,EAAA+H,KAAKG,MADjE7R,KAAKL,OAAO+7C,cAQlC91B,EAAW5lB,KAAK4O,SAASsM,gBAAgBjZ,EAAW,MAEtD,IAAK2jB,EAAU,OAAO5lB,KAAKL,OAAO+7C,cAGlC,IAAIioC,EAA0B,EAK9B,OAJI/9D,EAASrJ,GAAG9S,EAAApH,YAAYggB,YAC1BshE,EAAW3jF,KAAK80E,kBAAkBjqE,OAAO7K,KAAK4O,SAASkyD,uBAAwB9gE,KAAKwR,QAAQI,YAGvF5R,KAAKwkF,kBACV5+D,EACAiN,EAAW3S,UACX2S,EACA8wD,EACApI,GAKJ,KAAKnpB,EAAAhlD,YAAY8X,MACf,GAAInU,EAAoB6Z,EAAQ1O,KAAK02C,mBAAoB,CAErD+xB,EADU/5D,EAAQrO,GAAG9S,EAAApH,YAAYsiB,SACtBhlB,EAAOyD,IAAI88C,QAAgBt1B,EAAQlG,uBAEnC/kB,EAAOo4C,UAAkBntB,EAAQ3F,MAAOotC,EAAAjyB,WAAWh6B,KAEhE,MAMA,OAJApG,KAAKuV,MACH7L,EAAA8L,eAAekwD,uGACf7yC,EAAW9iB,MAAe6a,EAAQ1O,KAAK8B,YAElCre,EAAO+7C,cAGlB,KAAK0W,EAAAhlD,YAAY+Q,OACf,GAAIpN,EAAqB6Z,EAAQ1O,KAAK02C,mBAAoB,CACxD+xB,EAAWhlF,EAAOw4C,WAAoBvtB,EAAQjc,aAAuBic,EAAQ1O,KAAK+3C,gBAClF,MAMA,OAJAj0D,KAAKuV,MACH7L,EAAA8L,eAAekwD,uGACf7yC,EAAW9iB,MAAgB6a,EAAQ1O,KAAK8B,YAEnCre,EAAO+7C,cAGlB,KAAK0W,EAAAhlD,YAAYyO,MACf,IAAIK,EAAe0O,EAAQ1O,KAC3B,GAAInL,EAAYmL,EAAK02C,mBAAoB,CACvC,IAAImwB,EAAiBl4E,OAAO7K,KAAK4O,SAASkyD,uBACtC6iB,EAAW3jF,KAAK80E,kBAAkBiO,EAAgB/iF,KAAKwR,QAAQI,WACnE+yE,EAAWhlF,EAAO04C,KAChB,GACA,EACAsrC,EACAtxB,EAAAjyB,WAAWh6B,IACHwkB,EAAQ/B,cAElB,MAMA,OAJA7oB,KAAKuV,MACH7L,EAAA8L,eAAekwD,uGACf7yC,EAAW9iB,MAAOmM,EAAK8B,YAElBre,EAAO+7C,cAGlB,KAAK0W,EAAAhlD,YAAYob,gBACfzX,EAA6B6Z,EAAQ7Z,UACrC4zE,EAAW3kF,KAAK80E,kBAAkBjiD,EAAWA,WAA6BjI,EAAQ1O,KAAI,GACtF,MAGF,KAAKk2C,EAAAhlD,YAAYoO,mBACf,IAAIC,EAAkB5Q,OAA2B+f,EAAQnP,iBAEzD,KADIuN,EAAiBhpB,KAAK4O,SAASsM,gBAAgBO,EAAiB,OAC/C,OAAO9b,EAAO+7C,cAGnC,GAFAipC,EAAW3kF,KAAKwkF,kBAAkBx7D,EAAgB,GAAI6J,EAAWA,cACjE9hB,EAAY/Q,KAAK8vE,YAAYld,oBAM3B,OAJA5yD,KAAKuV,MACH7L,EAAA8L,eAAekwD,uGACf7yC,EAAW9iB,MAAO/P,KAAK8vE,YAAY9xD,YAE9Bre,EAAO+7C,cAEhB,MAEF,KAAK0W,EAAAhlD,YAAYuO,SACf,IAAIqN,EAAiBne,OAAkB+f,EAAQ5B,gBAK/C,GAJA27D,EAAW3kF,KAAKwkF,kBAAkBx7D,EAAgB,GAAI6J,EAAWA,WAC/D7yB,KAAK80E,kBAAkBjqE,OAAO7K,KAAK4O,SAASkyD,uBAAwB9gE,KAAKwR,QAAQI,cAEnFb,EAAY/Q,KAAK8vE,YAAYld,oBAM3B,OAJA5yD,KAAKuV,MACH7L,EAAA8L,eAAekwD,uGACf7yC,EAAW9iB,MAAO/P,KAAK8vE,YAAY9xD,YAE9Bre,EAAO+7C,cAEhB,MAIF,QAKE,OAJA17C,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAGlB,OAAO17C,KAAKolF,oBACVr0E,EACA4zE,EACA9xD,EAAW3S,UACX2S,EACA,EACAuwC,GAAkBz5D,EAAA+H,KAAKG,OAInB89D,EAAA1tE,UAAA2iF,6BAAR,SACE3iF,EACA4wB,EACAuwC,GAEA,IAAI55C,EAA+B,KAI/Bc,EAAqBroB,EAAUqoB,mBAC/Bq3C,EAAoB9uC,EAAWrJ,cAC/BqJ,EAAWrJ,gBACRvnB,EAAUsa,GAAG9S,EAAApH,YAAY4P,UAC5BjS,KAAKuV,MACH7L,EAAA8L,eAAeqsD,sBACfhvC,EAAW9iB,MAAO9N,EAAU0M,cAGhC6a,EAAgBxpB,KAAK4O,SAASyzD,qBAC5Bx3D,OAAOyf,GACPq3C,EACA3hE,KAAKkxE,YAAYtM,eAAe5zD,OAChCnH,EAAAm4D,QAAqBhiE,KAAKkxE,YAAYprD,yBACtC+M,IAKJ,IAAIT,EAAOyuC,EAAAwkB,YACTrlF,KACAiC,EACAunB,EACAqJ,EAAW3S,UACXkjD,EACAvwC,GAEF,OAAKT,IACHpyB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,gBASvBi0B,EAAA1tE,UAAAqjF,mBAAA,SACEv0E,EACAssB,EACAkoD,EACAhf,GAKA,GAAIgf,IAAwB,MADbx0E,EAAUqW,UAMvB,OAJApnB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,QAEN,EAIT,IAAI6kD,EAAU7jD,EAAU6jD,QACxB,GAAIA,EAKF,OAJA50D,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,QAEN,EAGT,IAAIy1E,EAAUz0E,EAAU4jD,mBACpB/U,EAAU7uC,EAAUsW,eAAevc,OAGvC,OAAIuyB,EAAemoD,GACjBxlF,KAAKuV,MACHiwE,EAAU5lC,EACNl2C,EAAA8L,eAAeiwE,wCACf/7E,EAAA8L,eAAesL,+BACnBylD,EAAWx2D,MAAOy1E,EAAQxnE,WAAYqf,EAAarf,aAE9C,KAILqf,EAAeuiB,IAAYgV,KAC7B50D,KAAKuV,MACH7L,EAAA8L,eAAesL,+BACfylD,EAAWx2D,MAAO6vC,EAAQ5hC,WAAYqf,EAAarf,aAE9C,IAOX2xD,EAAA1tE,UAAAuiF,kBAAA,SACE5+D,EACA8/D,EACAnf,EACAof,EACApK,QADA,IAAAoK,MAAA,QACA,IAAApK,MAAA,GAEA,IAAIl+C,EAAeqoD,EAAoB56E,OACnCiG,EAAY6U,EAAS7U,UACzB,IAAK/Q,KAAKslF,mBACRv0E,EACAssB,EACW,GAAXsoD,EACApf,GAGA,OADAvmE,KAAK8vE,YAAc/+D,EAAUkgB,WACtBjxB,KAAKL,OAAO+7C,cAIrB,GAAI91B,EAASvN,aAAa+5C,EAAA/kD,eAAekS,QAAS,CAEhD,GADA1U,QAAQ+a,EAASrJ,GAAG9S,EAAApH,YAAYs2E,cAC5B34E,KAAK4vE,uBAAuBhsD,SAASgC,GAKlC,CACL5lB,KAAK4vE,uBAAuBrxD,KAAKqH,GACjC,IAAIggE,EAAiB70E,EAAUsW,eAC/Bxc,OAAOwyB,GAAgBuoD,EAAe96E,QAGtC,IADA,IAAI8mB,EAAO,IAAI3qB,MAAqBo2B,GAC3Bh9B,EAAI,EAAGA,EAAIg9B,IAAgBh9B,EAClCuxB,EAAKvxB,GAAKL,KAAK80E,kBAAkB4Q,EAAoBrlF,GAAIulF,EAAevlF,GACtE,IAIJ,IAAI+xB,EAAOpyB,KAAK6lF,eAAejgE,EAAUgM,EAAM+zD,EAAkD,IAA7B,EAAXpK,IASzD,OARIv7E,KAAK8vE,YAAYsD,YACF,GAAXmI,EAGJv7E,KAAKqwE,oBAAoBv+D,IAAIsgB,GAF7BA,EAAOpyB,KAAKwjF,gBAAgBpxD,EAAMpyB,KAAKkxE,cAK3ClxE,KAAK4vE,uBAAuB3G,MACrB72C,EAzBPpyB,KAAKyvB,QACH/lB,EAAA8L,eAAeswE,yCACfvf,EAAWx2D,MAAO6V,EAASjX,cA4BjC,IAAIo3E,EAAuBJ,EAAUtoD,EAAe,EAAIA,EACpDua,EAAW,IAAI3wC,MAAqB8+E,GACpC9gE,EAAQ,EACR0gE,IACF/tC,EAAS,GAAK+tC,EACd1gE,EAAQ,GAEV,IAAIoC,EAAiBtW,EAAUsW,eAC/B,IAAShnB,EAAI,EAAGA,EAAIg9B,IAAgBh9B,IAAK4kB,EACvC2yB,EAAS3yB,GAASjlB,KAAK80E,kBAAkB4Q,EAAoBrlF,GAAIgnB,EAAehnB,GAAE,GAKpF,GADAwK,OAAOoa,GAAS8gE,GACZh1E,EAAUkgB,WAAWmiD,UAAW,CAClC,GAAe,EAAXmI,EAEF,OAAOv7E,KAAKkhF,eAAet7D,EAAUgyB,EAAU2uB,GAAY,GACtD,GAAe,GAAXgV,EAAuC,CAE5CnpD,EAAOpyB,KAAKkhF,eAAet7D,EAAUgyB,EAAU2uB,GAAY,GAAO,GAEtE,OADAvmE,KAAKqwE,oBAAoBv+D,IAAIsgB,GACtBA,EAEP,OAAOpyB,KAAKkhF,eAAet7D,EAAUgyB,EAAU2uB,GAAY,GAAO,GAGtE,OAAOvmE,KAAKkhF,eAAet7D,EAAUgyB,EAAU2uB,EACJ,IAA7B,EAAXgV,KAIL5L,EAAA1tE,UAAA4jF,eAAA,SACEjgE,EACAgyB,EACA+tC,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAeA,IAbA,IAAIrmF,EAASK,KAAKL,OACd09B,EAAeua,EAAWA,EAAS9sC,OAAS,EAC5CiG,EAAY6U,EAAS7U,UACrBsW,EAAiBtW,EAAUsW,eAC3B8tC,EAAgB9tC,EAAevc,OAG/BypE,EAAev0E,KAAKkxE,YACpBzpD,EAAOzd,EAAA0d,KAAK+gD,aAAa8L,EAAanM,eAAgBxiD,GACtDP,EAAO,GACP4gE,EAAa,IAAI9+E,IAGZ9G,EAAIg9B,EAAe,EAAGh9B,GAAK,IAAKA,EAAG,CAM1C,IAAI6lF,EAAYtuC,EAAUv3C,GACtB8lF,EAAY9+D,EAAehnB,GAC3B+lF,EAAgB3+D,EAAKgiD,eAAe14D,EAAUyW,iBAAiBnnB,GAAI8lF,EAAWF,GAClFj8E,EAAA+kE,eAAemX,EAAWD,GAErB1R,EAAa1I,YAAYqa,EAAWC,IAAY1+D,EAAK2hD,aAAagd,EAAcnhE,MAAOjb,EAAA69D,WAAWiE,SACnGrkD,EAAK2jD,UAAU8a,EAAWC,IAAY1+D,EAAK2hD,aAAagd,EAAcnhE,MAAOjb,EAAA69D,WAAW9C,SAExFohB,EAAU/S,YACPpzE,KAAKqwE,oBAAoB/+D,IAAI40E,KAAYA,EAAYlmF,KAAKqzE,WAAW6S,IAC1Ez+D,EAAK2hD,aAAagd,EAAcnhE,MAAOjb,EAAA69D,WAAWwB,WAEpDhkD,EAAKssD,QACHhyE,EAAOk6C,UAAUusC,EAAcnhE,MAAOihE,IAG1C,GAAIP,EAAS,CACX,IAAIn2E,EAAgB3E,OAAO+a,EAAS5U,QAASnG,OAAO2E,EAAc8D,MAAQ8+C,EAAAhlD,YAAY0O,OACtF,IAAIsL,EAAWvc,OAAO+a,EAAS7U,UAAUqW,UACrC89C,EAAYz9C,EAAKgiD,eAAehgE,EAAAzG,cAAcoC,MAAOgiB,EAAU6+D,GAEnE5gE,EAAKssD,QACHhyE,EAAOk6C,UAAUqrB,EAAUjgD,MAAO0gE,IAEpC,IAAIU,EAAuB72E,EAAeia,KACtC48D,GAAc5+D,EAAKkiD,eAAelgE,EAAAzG,cAAcqC,OAAQghF,EAAanqE,KAAMgpD,EAAUjgD,YAEzFpa,QAAQ+a,EAAS7U,UAAUqW,UAK7BpnB,KAAKkxE,YAAczpD,EACnB,IAASpnB,EAAIg9B,EAAch9B,EAAI80D,IAAiB90D,EAAG,CACjD,IAAIimF,EAAWj/D,EAAehnB,GAC1Bs0E,EAAW30E,KAAK80E,kBAClBjqE,OAAO+a,EAAS3jB,UAAUkkE,iBAAiBn1C,WAAW3wB,GAAGokB,aACzD6hE,EAAQ,GAGNF,EAAgB3+D,EAAKgiD,eAAe14D,EAAUyW,iBAAiBnnB,GAAIimF,GAClE7+D,EAAKokD,YAAY8I,EAAU2R,IAAW7+D,EAAK2hD,aAAagd,EAAcnhE,MAAOjb,EAAA69D,WAAWiE,SACzFrkD,EAAK2jD,UAAUuJ,EAAU2R,IAAW7+D,EAAK2hD,aAAagd,EAAcnhE,MAAOjb,EAAA69D,WAAW9C,SACtFuhB,EAASlT,WACX3rD,EAAK2hD,aAAagd,EAAcnhE,MAAOjb,EAAA69D,WAAWwB,UAClDhkD,EAAK9G,KACH5e,EAAOk6C,UAAUusC,EAAcnhE,MAC7BjlB,KAAKqzE,WAAWsB,MAIpBtvD,EAAK9G,KACH5e,EAAOk6C,UAAUusC,EAAcnhE,MAAO0vD,IAM5C30E,KAAKk2E,oBAAoBtwD,EAAUP,GAG9BoC,EAAKlL,GAAE,OACVvc,KAAKw2E,oBAAoB/uD,EAAMpC,GAC/BrlB,KAAKy0E,mBAAmBhtD,EAAMpC,IAEhCoC,EAAKqiD,mBACL,IAAI74C,EAAaxJ,EAAKwJ,WACtBjxB,KAAKkxE,YAAcqD,EAGnB,IAAIniD,EAAOzyB,EAAOs6C,MAAMxyB,EAAK+gD,kBAAmBnjD,EAAM4L,EAAWgjC,gBAQjE,OAPAj0D,KAAK8vE,YAAc7+C,EACfA,EAAWmiD,WACT4S,IACF5zD,EAAOpyB,KAAK2iF,YAAYvwD,GACxBpyB,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,MAGrBugB,GAITu9C,EAAA1tE,UAAA2wE,iBAAA,SAAiBrwD,GAQf,IAAI8D,EAAa9D,EAAS8D,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIkgE,EAAoBhkE,EAASxR,UAC7By1E,EAAejkE,EAAS5T,aACxB83E,EAAyBF,EAAkBl/D,eAC3Cq/D,EAAgCnkE,EAAStgB,UAAUkkE,iBAAiBn1C,WACpEC,EAAas1D,EAAkBt1D,WAC/B7J,EAAWm/D,EAAkBn/D,SAC7ByF,EAAatK,EAAShG,GAAG9S,EAAApH,YAAYggB,UAGrCskE,EAAeJ,EAAkB5xB,mBACjCiyB,EAAcD,EACdE,EAAeJ,EAAuB37E,OACtCg8E,EAAcD,EACdh6D,MACA+5D,IACAE,GAEJ,IAAIC,EAAcl8E,OAAOi8E,EAAcF,GAEnCI,EAAoB,IAAI//E,MAAqB2/E,GAC7CK,EAAe,EAGftnF,EAASK,KAAKL,OACdktB,IACFm6D,EAAkB,GAAKrnF,EAAOo4C,UAAU,EAAG/3C,KAAKwR,QAAQ+hE,gBACxD0T,EAAe,GAIjB,IAAK,IAAI5mF,EAAI,EAAGA,EAAIsmF,IAAgBtmF,IAAK4mF,EACvCD,EAAkBC,GAAgBtnF,EAAOo4C,UAAUkvC,EAAcR,EAAuBpmF,GAAG4zD,gBAE7FppD,OAAOo8E,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIv9E,EAAA8Z,UAAUgjE,EAAwBx1D,EAAY7J,GAC5E8/D,EAAoBvyB,mBAAqBkyB,EACzCK,EAAoBxyB,eAAiB6xB,EAAkB7xB,gBACvDruC,EAAa,IAAI+rC,EAAAlhD,SACfqR,EAAS3hB,KAAO,cAChB2hB,EAAStgB,UACTilF,EACA3kE,EAASuD,0BAEApX,IAAI6T,EAAS1S,MAAQpG,EAAApH,YAAYs2E,WAAalvE,EAAApH,YAAYywE,UACrEvwD,EAAS8D,WAAaA,EAItB,IAAIkuD,EAAev0E,KAAKkxE,YACpBzpD,EAAOpB,EAAWoB,KACtBznB,KAAKkxE,YAAczpD,EAGnB,IAAI2zB,EAAW2rC,EAAc,EACzB7xD,EAAQ,IAAIjuB,MAAcm0C,GAC1B+rC,EAAM,KAAOJ,EAAY/oE,SAAS,IACtC,IAAS3d,EAAI,EAAGA,EAAI+6C,IAAY/6C,EAAG,CACjC,IAAI42B,EAAQ52B,EAAE2d,SAAS,IAAMmpE,EAC7BjyD,EAAM70B,GAAK42B,EAEb,IAAI5R,EAAO1lB,EAAOs6C,MAAM/kB,EAAM,GAAI,CAChCv1B,EAAOs6C,MAAM,aAAc,CACzBt6C,EAAOu7C,OAAOhmB,EAAO,aAEnByxD,EACIhnF,EAAO83C,OACL4a,EAAArpB,SAAS03C,OACT/gF,EAAOw4C,WAAW0oB,EAAA2E,eAAe4hB,KAAM/0B,EAAAjyB,WAAWh6B,KAClDzG,EAAOyD,IAAIujF,IAEbhnF,EAAOw4C,WAAW0oB,EAAA2E,eAAe4hB,KAAM/0B,EAAAjyB,WAAWh6B,QAG1DzG,EAAO+7C,gBAET,IAASr7C,EAAI,EAAGA,EAAI0mF,IAAe1mF,IAAK4mF,EAAc,CACpD,IAAI/qE,EAAOuqE,EAAuBE,EAAetmF,GAC7CgR,EAAcq1E,EAA8BC,EAAetmF,GAC3DokB,EAAcpT,EAAYoT,YAC1BkwD,OAAQ,EACRlwD,EACFkwD,EAAWh1E,EAAOk6C,UAAUotC,EAC1BjnF,KAAK80E,kBACHrwD,EACAvI,EAAI,KAKRlc,KAAKuV,MACH7L,EAAA8L,eAAe6xE,4CACfh2E,EAAYtB,OAEd4kE,EAAWh1E,EAAO+7C,eAEpBr2B,EAAO1lB,EAAOs6C,MAAM/kB,EAAM70B,EAAI,GAAI,CAChCglB,EACAsvD,IAEFqS,EAAkBC,GAAgBtnF,EAAOo4C,UAAUkvC,EAAc/qE,EAAK+3C,gBAExEppD,OAAOo8E,GAAgBH,GAEvB,IAAI3Q,EAAyB,CAAE9wD,GAC3Bk/D,EAAU5kF,EAAOa,KAAKgmF,EAAcQ,EAAmB/1D,EAAWgjC,gBAClEhjC,GAActnB,EAAA+H,KAAKG,KACrB7R,KAAKqiF,6BAA6B56D,EAAM88D,EAAStzD,EAAYklD,IAE7DA,EAAM53D,KAAKgmE,GACXvkF,KAAKw2E,oBAAoB/uD,EAAM0uD,IAEjC1uD,EAAKqiD,mBACL9pE,KAAKkxE,YAAcqD,EAEnB,IAAI3C,EAAUjyE,EAAO49C,YACnBl3B,EAAW1X,aACX3O,KAAK6xE,mBACHqV,EAAoB7/D,eACpB4J,EACA7J,GAEFzd,EAAA0qD,mBAAmBhuC,EAAWJ,kBAC9BtmB,EAAOs6C,MAAM,KAAMk8B,EAAOllD,EAAWgjC,iBAGvC,OADA5tC,EAAWyB,SAASnoB,EAAQiyE,GACrBvrD,GAIDspD,EAAA1tE,UAAAqlF,cAAR,WACE,IAAKtnF,KAAKkwE,QAAS,CACjB,IAAIvwE,EAASK,KAAKL,OAClBK,KAAKkwE,QAAUvwE,EAAOu9C,UACpB2jB,EAAA2E,eAAe4hB,KACf/0B,EAAAjyB,WAAWh6B,KACX,EACAzG,EAAOyD,IAAI,IAGf,OAAOy9D,EAAA2E,eAAe4hB,MAIhBzX,EAAA1tE,UAAA4wE,cAAR,WACE,IAAK7yE,KAAKmwE,QAAS,CACjB,IAAIxwE,EAASK,KAAKL,OAClBK,KAAKmwE,QAAUxwE,EAAO49C,YAAYsjB,EAAA2E,eAAe+hB,QAC/CvnF,KAAK6xE,mBAAmB,CAAEloE,EAAA+H,KAAKjO,KAAOkG,EAAA+H,KAAKG,MAC3C,KACAlS,EAAOo6C,WAAW/5C,KAAKsnF,gBACrB3nF,EAAOo4C,UAAU,EAAGsa,EAAAjyB,WAAWh6B,OAGnCzG,EAAOq+C,kBAAkB6iB,EAAA2E,eAAe+hB,QAAS,aAEnD,OAAO1mB,EAAA2E,eAAe+hB,SAMxB5X,EAAA1tE,UAAAoxE,WAAA,SAAWjhD,GACT,IAAIpY,EAAiBha,KAAK6iB,QAAQ7I,eAElC,OADAha,KAAKg2E,gBAAgBh8D,GACdha,KAAKL,OAAOa,KAAKwZ,EAAerL,aAAc,CAAEyjB,GAAQpyB,KAAKwR,QAAQ+hE,iBAI9E5D,EAAA1tE,UAAAwxE,kBAAA,SAAkB+T,EAAwBC,GAKxC,IAAI9nF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACZt/D,EAAY5R,KAAKwR,QAAQI,UACzB2hE,EAAiBvzE,KAAKwR,QAAQ+hE,eAC9BmU,EAAQjgE,EAAKohD,aAAaj3D,EAAW5H,EAAA+kE,eAAeyY,IACpDG,EAAQlgE,EAAK8hD,oBAAoB33D,GAErC,OADA6V,EAAK6hD,cAAcoe,GACZ/nF,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAO+6C,GACL/6C,EAAO83C,OAAO87B,GAAkBlhB,EAAAjyB,WAAW/5B,IAAMgsD,EAAArpB,SAAS4iC,MAAQvZ,EAAArpB,SAAS2iC,MACzEhsE,EAAOs4C,UAAUyvC,EAAMziE,MAAOwiE,GAC9B9nF,EAAOs4C,UAAU0vC,EAAM1iE,MAAOuiE,IAEhC7nF,EAAOs6C,MAAM,KAAM,CACjBt6C,EAAO26C,KACLt6C,KAAKqzE,WAAW1zE,EAAOo4C,UAAU2vC,EAAMziE,MAAOsuD,KAEhDvzE,KAAK2iF,YAAYhjF,EAAOo4C,UAAU4vC,EAAM1iE,MAAOsuD,OAGnD5zE,EAAOo4C,UAAU2vC,EAAMziE,MAAOsuD,IAC7BA,IAIL5D,EAAA1tE,UAAA8hF,mBAAA,SAAmByD,EAAwBC,GAGzC,IAAI9nF,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACZt/D,EAAY5R,KAAKwR,QAAQI,UACzB2hE,EAAiBvzE,KAAKwR,QAAQ+hE,eAC9BmD,EAAOjvD,EAAK8hD,oBAAoB33D,EAAW5H,EAAA+kE,eAAeyY,IAC9D,OAAO7nF,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOk6C,UAAU68B,EAAKzxD,MAAOwiE,GAC7BznF,KAAK2iF,YAAY6E,GACjB7nF,EAAOo4C,UAAU2+B,EAAKzxD,MAAOsuD,IAC5BA,IAIL5D,EAAA1tE,UAAA0gF,YAAA,SAAYvwD,GACV,IAAInY,EAAkBja,KAAK6iB,QAAQ5I,gBAEnC,OADAja,KAAKg2E,gBAAgB/7D,GACdja,KAAKL,OAAOa,KAAKyZ,EAAgBtL,aAAc,CAAEyjB,GAAQigC,EAAAjyB,WAAWsY,OAI7Ei3B,EAAA1tE,UAAAuhF,gBAAA,SAAgBpxD,EAAqB3K,GAEnC,YAFmC,IAAAA,MAAaznB,KAAKkxE,aAE9ClxE,KAAKL,OAAOs4C,UAAUxwB,EAAKyhD,oBAAoBlpE,KAAKwR,QAAQI,WAAWqT,MAAOmN,IAIvFu9C,EAAA1tE,UAAA2lF,gBAAA,SAAgBx1D,EAAqB3K,GAInC,OAAQ4qC,EAAApL,gBAAgB70B,IACtB,KAAKigC,EAAAhyB,aAAa8uB,SAChB,GAAIkD,EAAAxK,WAAWz1B,GAAO,CACpB,IAAInN,EAAQotC,EAAA5K,iBAAiBr1B,GAC7B,GAAI3K,EAAKyiD,eAAejlD,EAAOjb,EAAA69D,WAAW2T,cAKxC,OADA/zD,EAAKuhD,eAAe/jD,EAAOjb,EAAA69D,WAAW2T,cAC/Bv2D,EAGX,MAEF,KAAKotC,EAAAhyB,aAAakuB,MAChB,GAA2B,OAAvB8D,EAAApJ,aAAa72B,GAAgB,CAC/B,IAAI+pD,EAAQ9pB,EAAAlJ,mBAAmB/2B,GAC/B,GAAI+pD,EACF,OAAOn8E,KAAK4nF,gBAAgBv1B,EAAAhJ,cAAcj3B,EAAM+pD,EAAQ,GAAI10D,IAMpE,OAAQ,GAQVkoD,EAAA1tE,UAAAwgF,gBAAA,SAAgBrwD,EAAqBy1D,EAAqBC,GAKxD,OADY9nF,KAAK4nF,gBAAgBx1D,EAAMy1D,GAEnC7nF,KAAKwjF,gBAAgBpxD,EAAM01D,GAC3B9nF,KAAKwjF,gBAAgBxjF,KAAKqzE,WAAWjhD,GAAO01D,IAIlDnY,EAAA1tE,UAAAu0E,oBAAA,SAAoB/uD,EAAY0uD,EAAwB4R,gBAAA,IAAAA,OAAA,GACtD,IAAI7f,EAAezgD,EAAKygD,aACxB,GAAIA,EAAc,CAChB,IAAIvoE,EAASK,KAAKL,WAClB,IAAkB,IAAAokB,EAAAnP,EAAAszD,EAAa1tD,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAApC,IAAIqS,EAAK9L,EAAA/Z,MACZ,GAAI6lB,EAAM5K,GAAG9S,EAAApH,YAAY8mE,QAAS,CAChC,IAAIjiD,EAAaC,EAAMlC,MACnBwC,EAAKyiD,eAAehjD,EAAYld,EAAA69D,WAAW2T,gBACzCuM,GAAYtgE,EAAKuhD,eAAe9hD,EAAYld,EAAA69D,WAAW2T,cAC3DrF,EAAM53D,KACJve,KAAK2iF,YACHhjF,EAAOo4C,UAAU7wB,EAAYC,EAAMjL,KAAK+3C,yHAUtD0b,EAAA1tE,UAAAogF,6BAAA,SACE56D,EACA+rD,EACAr5C,EACAg8C,EACA4R,QADA,IAAA5R,MAAA,WACA,IAAA4R,OAAA,GAEK5R,IAAOA,EAAQ,IAAIlvE,OACxBkvE,EAAM53D,KACJve,KAAKL,OAAOi7C,OAEd,IAAIotC,EAAe7R,EAAMrrE,OAEzB,GADA9K,KAAKw2E,oBAAoB/uD,EAAM0uD,EAAO4R,GAClC5R,EAAMrrE,OAASk9E,EAAc,CAC/B,IAAI1U,EAAan5C,EAAU85B,eACvByiB,EAAOjvD,EAAK8hD,oBAAoBpvC,GAC/B1S,EAAKokD,YAAY2H,EAAWr5C,IAAY1S,EAAK2hD,aAAasN,EAAKzxD,MAAOjb,EAAA69D,WAAWiE,SAClFrkD,EAAK2jD,UAAUoI,EAAWr5C,IAAY1S,EAAK2hD,aAAasN,EAAKzxD,MAAOjb,EAAA69D,WAAW9C,SACnF,IAAIplE,EAASK,KAAKL,OAKlB,OAJAw2E,EAAM6R,EAAe,GAAKroF,EAAOk6C,UAAU68B,EAAKzxD,MAAOuuD,GACvD2C,EAAM53D,KACJ5e,EAAOo4C,UAAU2+B,EAAKzxD,MAAOquD,IAExB3zE,EAAOs6C,MAAM,KAAMk8B,EAAO7C,GAC5B,OAAI6C,EAAMrrE,OAAS,GACxBqrE,EAAM6R,EAAe,GAAKxU,EACnBxzE,KAAKL,OAAOs6C,MAAM,KAAMk8B,EAAOh8C,EAAU85B,iBAE3Cuf,GAIT7D,EAAA1tE,UAAAwyE,mBAAA,SAAmBhtD,EAAY0uD,WACzBx2E,EAASK,KAAKL,OAClB,GAAI8nB,EAAKlL,GAAE,OAA4B,CAIrC,IADA,IAAIvL,OAAM,EACHA,EAASyW,EAAKzW,QAAQyW,EAAOzW,EACpChR,KAAKw2E,oBAAoB/uD,EAAM0uD,GAAO,YAEtC,IAAkB,IAAApyD,EAAAnP,EAAA6S,EAAK2gD,eAAepiD,eAAa3K,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAAhD,IAAIqS,EAAK9L,EAAA/Z,MACR4lB,EAAaC,EAAMlC,MACnBwC,EAAKyiD,eAAehjD,EAAYld,EAAA69D,WAAW2T,gBAC7C/zD,EAAKuhD,eAAe9hD,EAAYld,EAAA69D,WAAW2T,cAC3CrF,EAAM53D,KACJve,KAAK2iF,YACHhjF,EAAOo4C,UAAU7wB,EAAYC,EAAMjL,KAAK+3C,uHAWpD0b,EAAA1tE,UAAAi/E,eAAA,SACEt7D,EACAgyB,EACA2uB,EACAyf,EAEAiC,GAEA,QAJA,IAAAjC,OAAA,QAEA,IAAAiC,OAAA,GAEIriE,EAASvN,aAAa+5C,EAAA/kD,eAAekS,QAAS,CAEhD,GADA1U,QAAQ+a,EAASrJ,GAAG9S,EAAApH,YAAYs2E,cAC5B34E,KAAK4vE,uBAAuBhsD,SAASgC,GAKlC,CAEL,IAAIsiE,EACJ,GAFAloF,KAAK4vE,uBAAuBrxD,KAAKqH,GAE7BA,EAASrJ,GAAG9S,EAAApH,YAAYggB,UAAW,CACrC,IAAI8lE,EAAct9E,OAAO+sC,GACzB/sC,OAAOs9E,EAAYr9E,QACnBo9E,EAAOloF,KAAK6lF,eAAejgE,EAAUuiE,EAAYvf,MAAM,GAAIuf,EAAY,GAAInC,QAE3EkC,EAAOloF,KAAK6lF,eAAejgE,EAAUgyB,EAAU,EAAGouC,GAUpD,OARIhmF,KAAK8vE,YAAYsD,YACd6U,EAGHjoF,KAAKqwE,oBAAoBv+D,IAAIo2E,GAF7BA,EAAOloF,KAAKwjF,gBAAgB0E,EAAMloF,KAAKkxE,cAK3ClxE,KAAK4vE,uBAAuB3G,MACrBif,EAtBPloF,KAAKyvB,QACH/lB,EAAA8L,eAAeswE,yCACfvf,EAAWx2D,MAAO6V,EAASjX,cAuBjC,IAAIy5E,EAAcxwC,EAAWA,EAAS9sC,OAAS,EAC3CuyB,EAAe+qD,EAEfxB,EADehhE,EAAS7U,UAAU4jD,mBAElCkyB,EAAejhE,EAAS7U,UAAUsW,eAAevc,OACjDg8E,EAAcD,EACdjhE,EAASrJ,GAAG9S,EAAApH,YAAYggB,cACxBukE,IACAE,IACAzpD,GAEJxyB,OAAOu9E,GAAexB,GAEtB,IAAIjnF,EAASK,KAAKL,OAClB,IAAKK,KAAKg2E,gBAAgBpwD,GAAW,OAAOjmB,EAAO+7C,cACnD,IAAIzqB,EAAarL,EAAS7U,UAAUkgB,WAChCo3D,EAAeziE,EAASrJ,GAAG9S,EAAApH,YAAY6yE,eAG3C,GAAIkT,EAActB,EAAa,CACxBlvC,KACHA,EAAW,IAAI3wC,MAAM6/E,IACZh8E,OAAS,GAEpB,IAAIuc,EAAiBzB,EAAS7U,UAAUsW,eACpC+5C,EAAiBx7C,EAAS3jB,UAAUkkE,iBAAiBn1C,WACzDnmB,OAAOu2D,EAAet2D,QAAUuc,EAAevc,QAE/C,IADA,IAAIw9E,GAA0B,EACrBjoF,EAAIg9B,EAAch9B,EAAIwmF,IAAgBxmF,EAAG,CAChD,IAAIokB,EAAc28C,EAAe/gE,GAAGokB,YACpC,GAAIA,EAAa,CACf,GAAI7a,EAAAkmB,oBAAoBrL,EAAYnR,MAAO,CACzCskC,EAASr5B,KAAKve,KAAK80E,kBACL1T,EAAe/gE,GAAGokB,YAC9B4C,EAAehnB,GAAE,IAGnB,SAEF,IAAI0a,EAAW/a,KAAK4O,SAAS00D,kBAAkB7+C,EAAamB,EAAS6B,KAAMJ,EAAehnB,IAC1F,GAAI0a,GACEA,EAASzH,MAAQ8+C,EAAAhlD,YAAY+Q,OAAQ,CACvC,IAAI6tD,EAAiBjxD,EACrB,GAAI/a,KAAK4zE,cAAc5H,GAAS,CAC1BA,EAAOzvD,GAAG9S,EAAApH,YAAYsiB,SACxBizB,EAASr5B,KACPve,KAAK28E,sBAAsB3Q,EAAQ3kD,EAAehnB,GAAE,IAGtDu3C,EAASr5B,KACPve,KAAK29E,kBACHh+E,EAAOw4C,WAAW6zB,EAAOr9D,aAAcq9D,EAAO9vD,KAAK+3C,gBACnD+X,EAAO9vD,KAAMmL,EAAehnB,IAAI,GAAO,EAAOokB,IAIpD,WAKRmzB,EAASr5B,KAAK8I,EAAehnB,GAAG6zD,aAAav0D,IAC7C2oF,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAI9lE,EAAWqD,EAEf,GADAA,EAAW5lB,KAAK4yE,iBAAiBhtD,IAC5B5lB,KAAKg2E,gBAAgBpwD,GAAW,OAAOjmB,EAAO+7C,cACnD91B,EAAS6B,KAAK5X,MAAQ0S,EAASkF,KAAK5X,MACpC,IAAI4zE,EAAmBxyD,EAAWgjC,eAC9Bs0B,EAAO5oF,EAAOa,KAAKolB,EAASjX,aAAcipC,EAAU6rC,GAYxD,OAXAzjF,KAAK8vE,YAAc7+C,EACfA,EAAWmiD,YACT4S,GACFuC,EAAOvoF,KAAK2iF,YAAY4F,GACxBvoF,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,MACdo2E,EAGVjoF,KAAKqwE,oBAAoBv+D,IAAIy2E,GAF7BA,EAAOvoF,KAAKwjF,gBAAgB+E,IAKzB5oF,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOo6C,WAAW/5C,KAAKsnF,gBAAiB3nF,EAAOyD,IAAIi6B,IACnDkrD,GACCvoF,KAAK8vE,YAAY7b,iBAQ1B,IAAI7hC,EAAOzyB,EAAOa,KAAKolB,EAASjX,aAAcipC,EAAU3mB,EAAWgjC,gBAUnE,OATAj0D,KAAK8vE,YAAc7+C,EACfA,EAAWmiD,YACT4S,GACF5zD,EAAOpyB,KAAK2iF,YAAYvwD,GACxBpyB,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,MACdo2E,IACV71D,EAAOpyB,KAAKwjF,gBAAgBpxD,KAGzBA,GAITu9C,EAAA1tE,UAAAmjF,oBAAA,SACEr0E,EACA4zE,EACAe,EACAnf,EACAof,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAEA,IAAI3oD,EAAeqoD,EAAoB56E,OAEvC,IAAK9K,KAAKslF,mBACRv0E,EACAssB,EACW,GAAXsoD,EACApf,GAEA,OAAOvmE,KAAKL,OAAO+7C,cAGrB,IAAIqqC,EAAuBJ,EAAUtoD,EAAe,EAAIA,EACpDua,EAAW,IAAI3wC,MAAqB8+E,GACpC9gE,EAAQ,EACR0gE,IACF/tC,EAAS,GAAK+tC,EACd1gE,EAAQ,GAGV,IADA,IAAIoC,EAAiBtW,EAAUsW,eACtBhnB,EAAI,EAAGA,EAAIg9B,IAAgBh9B,IAAK4kB,EACvC2yB,EAAS3yB,GAASjlB,KAAK80E,kBAAkB4Q,EAAoBrlF,GAAIgnB,EAAehnB,GAAE,GAKpF,OADAwK,OAAOoa,GAAS8gE,GACT/lF,KAAKwoF,iBAAiBz3E,EAAW4zE,EAAU/sC,EAAUouC,IAI9DrW,EAAA1tE,UAAAumF,iBAAA,SACEz3E,EACA4zE,EACA/sC,EACAouC,QADA,IAAApuC,MAAA,WACA,IAAAouC,OAAA,GAEA,IAAIoC,EAAcxwC,EAAWA,EAAS9sC,OAAS,EAC3CuyB,EAAe+qD,EAEfxB,EADe71E,EAAU4jD,mBAEzBkyB,EAAe91E,EAAUsW,eAAevc,OACxCg8E,EAAcD,EACd91E,EAAUqW,aACVw/D,IACAE,IACAzpD,GAEJxyB,OAAOu9E,GAAexB,GAEtB5mF,KAAK6xE,mBAAmB9gE,EAAUsW,eAAgBtW,EAAUkgB,WAAYlgB,EAAUqW,UAClF,IAAIznB,EAASK,KAAKL,OAGlB,GAAIyoF,EAActB,EAAa,CACxBlvC,KACHA,EAAW,IAAI3wC,MAAM6/E,IACZh8E,OAAS,GAGpB,IADA,IAAIuc,EAAiBtW,EAAUsW,eACtBhnB,EAAIg9B,EAAch9B,EAAIwmF,IAAgBxmF,EAC7Cu3C,EAASr5B,KAAK8I,EAAehnB,GAAG6zD,aAAav0D,IAIjD,IAAIsxB,EAAalgB,EAAUkgB,WACvBmB,EAAOzyB,EAAO67C,cAAcmpC,EAAU/sC,EAAU7mC,EAAU0X,qBAU9D,OATAzoB,KAAK8vE,YAAc7+C,EACfA,EAAWmiD,YACT4S,GACF5zD,EAAOpyB,KAAK2iF,YAAYvwD,GACxBpyB,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,MAExBugB,EAAOpyB,KAAKwjF,gBAAgBpxD,IAGzBzyB,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOo6C,WAAW/5C,KAAKsnF,gBACrB3nF,EAAOyD,IAAIi6B,IAEbjL,GACCpyB,KAAK8vE,YAAY7b,iBAGtB0b,EAAA1tE,UAAA86E,uBAAA,SACElqD,EACAuwC,EACAmY,GAKA,IAHA,IAAI5nD,EAAcd,EAAWc,YACzB80D,EAAiB90D,EAAY7oB,OAC7B49E,EAAQ,IAAIzhF,MAAqBwhF,KAC5BpoF,EAAI,EAAGA,EAAIooF,IAAkBpoF,EACpCqoF,EAAMroF,GAAKL,KAAK80E,kBAAkBnhD,EAAYtzB,GAAIsJ,EAAA+H,KAAKG,KACrD,GAIJ,OADA62E,EAAMD,GAAkBzoF,KAAK80E,kBAAkBnhD,EAAY80D,GAAiBrlB,EAAgBmY,GACrFv7E,KAAKL,OAAOs6C,MAAM,KAAMyuC,EAAO1oF,KAAK8vE,YAAY7b,iBAGzD0b,EAAA1tE,UAAA+6E,+BAAA,SACEnqD,EACAuwC,EACAmY,GAEA,IAAI3wD,EAAS5qB,KAAK4O,SAAS+0D,+BACzB9wC,EACA7yB,KAAKkxE,YACL9N,GAEF,IAAKx4C,EAAQ,OAAO5qB,KAAKL,OAAO+7C,cAChC,OAAQ9wB,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY0O,MACf,IAAI0nD,EAAqB54C,EAAQF,eAAe0nC,EAAA5oD,aAAa2B,YAAanL,KAAKkxE,YAAY30D,GAAE,QAC7F,IAAKinD,EAKH,OAJAxjE,KAAKuV,MACH7L,EAAA8L,eAAeitD,qCACf5vC,EAAWA,WAAW9iB,MAAe6a,EAAQjc,cAExC3O,KAAKL,OAAO+7C,cAErB,IAAIiqC,EAAU3lF,KAAK80E,kBAAkBjiD,EAAWA,WAAoBjI,EAAQ1O,KAAI,GAGhF,OAAOlc,KAAKwkF,kBAAkBhhB,EAAY,CACxC3wC,EAAWoB,mBACVpB,EAAY8yD,EAASpK,GAO5B,OAJAv7E,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,eAGrBi0B,EAAA1tE,UAAAg7E,0BAAA,SACEpqD,EACA81D,EACApN,GAEA,IAAIlqE,EAAcwhB,EAAWxhB,YAAYkuB,QACzC10B,QAAQwG,EAAY8S,gBACpB,IAUIyB,EAVA6B,EAAOznB,KAAKkxE,YACZtM,EAAiBn9C,EAAKm9C,eACtB3iE,EAAY,IAAImwD,EAAAjhD,kBAClBE,EAAYzQ,KAAKiV,KAAK/K,OAClBuG,EAAYzQ,KAAKiV,KACjB,cAAgB+uD,EAAer+C,mBAAmBvI,SAAS,IAC/D4mD,EACAvzD,EACA+gD,EAAA/kD,eAAeyC,MAGbgW,EAA0Bjc,EAAAm4D,QAAQv6C,EAAK3B,yBAI3C,GAAI6iE,EAAqB,CACvB,IAAIziB,EAAgBjkE,EAAUkkE,iBAC1B/E,EAAiB8E,EAAcl1C,WAC/B43D,EAAuBxnB,EAAet2D,OAGtCuc,EAAiBshE,EAAoBthE,eACrC8tC,EAAgB9tC,EAAevc,OACnC,GAAI89E,EAAuBzzB,EAKzB,OAJAn1D,KAAKuV,MACH7L,EAAA8L,eAAesL,+BACf+R,EAAW9iB,MAAOolD,EAAcn3C,WAAY4qE,EAAqB5qE,YAE5Dhe,KAAKL,OAAO+7C,cAKrB,IADA,IAAIgZ,EAAiB,IAAIztD,MAAc2hF,GAC9BvoF,EAAI,EAAGA,EAAIuoF,IAAwBvoF,EAAG,CAC7C,IAAIghE,EAAgBD,EAAe/gE,GAEnC,GADAq0D,EAAer0D,GAAKghE,EAAczgE,KAAKiV,MAClCjM,EAAAu2B,cAAckhC,EAAcnlD,MAAO,CAMtC,KALIwnD,EAAe1jE,KAAK4O,SAASoyD,YAC/BK,EAAcnlD,KACd0oD,EAAe5zD,OACf8U,IAEiB,OAAO9lB,KAAKL,OAAO+7C,cACtC,IAAKr0B,EAAehnB,GAAGyzD,uBAAuB4P,GAK5C,OAJA1jE,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACf1T,EAActxD,MAAOsX,EAAehnB,GAAG2d,WAAY0lD,EAAa1lD,YAE3Dhe,KAAKL,OAAO+7C,eAOzB,IAAIzqB,EAAa03D,EAAoB13D,WACrC,IAAKrnB,EAAAu2B,cAAc+lC,EAAcj1C,YAAa,CAM5C,KALIyyC,EAAe1jE,KAAK4O,SAASoyD,YAC/BkF,EAAcj1C,WACd2zC,EAAe5zD,OACf8U,IAEiB,OAAO9lB,KAAKL,OAAO+7C,cACtC,GACEzqB,GAActnB,EAAA+H,KAAKG,KACf6xD,GAAgB/5D,EAAA+H,KAAKG,MACpB6xD,EAAa5P,uBAAuB7iC,GAMzC,OAJAjxB,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACf7O,EAAcj1C,WAAWlhB,MAAO2zD,EAAa1lD,WAAYiT,EAAWjT,YAE/Dhe,KAAKL,OAAO+7C,cAKvB,IAAIt0B,EAAWuhE,EAAoBvhE,SAC/ByhE,EAAe3iB,EAAch1C,iBACjC,GAAI23D,EAAc,CAChB,IAAKzhE,EAKH,OAJApnB,KAAKuV,MACH7L,EAAA8L,eAAe4vD,+CACfyjB,EAAa94E,OAER/P,KAAKL,OAAO+7C,cAErB,IAAIgoB,EAKJ,KALIA,EAAe1jE,KAAK4O,SAASoyD,YAC/B6nB,EACAjkB,EAAe5zD,OACf8U,IAEiB,OAAO9lB,KAAKL,OAAO+7C,cACtC,IAAKt0B,EAAS0sC,uBAAuB4P,GAKnC,OAJA1jE,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACf8T,EAAa94E,MAAOqX,EAASpJ,WAAY0lD,EAAa1lD,YAEjDhe,KAAKL,OAAO+7C,cAIvB,IAAI3qC,EAAY,IAAIpH,EAAA8Z,UAAU4D,EAAgB4J,EAAY7J,GAS1D,GARArW,EAAU4jD,mBAAqBQ,EAC/BpkD,EAAU2jD,eAAiBA,EAC3B9uC,EAAW,IAAIwsC,EAAAlhD,SACbjP,EAAUrB,KACVqB,EACA8O,EACA+U,IAEG9lB,KAAKg2E,gBAAgBpwD,GAAW,OAAO5lB,KAAKL,OAAO+7C,cACxD17C,KAAK8vE,YAAc6Y,EAAoBzsE,SAGlC,CAML,KALA0J,EAAW5lB,KAAK8zE,kCACd7xE,EACA,GACA6jB,IAEa,OAAO9lB,KAAKL,OAAO+7C,cAClC17C,KAAK8vE,YAAclqD,EAAS7U,UAAUmL,KAGxC,IAAI+I,EAAQjlB,KAAK04E,yBAAyB9yD,GAC1C,OAAOX,EAAQ,EACXjlB,KAAKL,OAAO+7C,cACZ17C,KAAKL,OAAOyD,IAAI6hB,IAId0qD,EAAA1tE,UAAA6mF,4BAAR,SAAoCj2D,GAClC,IAAIrR,EAAeqR,EAAW9iB,MAAMX,OAAOoS,aACvC5T,EAAc5N,KAAK6iB,QAAQjV,YAC/B/C,OAAO+C,EAAY0D,IAAIkQ,IACH5T,EAAY1M,IAAIsgB,GACjBjF,GAAG9S,EAAApH,YAAYywE,WAChC9yE,KAAKm0E,kBAAkB3yD,EAAcqR,IASzC88C,EAAA1tE,UAAAi7E,4BAAA,SACErqD,EACAuwC,EACAmY,GAEA,IAAI57E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACZtM,EAAiBn9C,EAAKm9C,eAG1B,OAAQ/xC,EAAWvf,MACjB,KAAK1J,EAAA2J,SAASwc,KACZ,IAAIve,EAAUxR,KAAKwR,QAInB,OAHK4xD,EAAel3C,iBAClBlsB,KAAK8vE,YAAct+D,EAAQI,WAEtBJ,EAAQc,SACX3S,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAKwG,EAAA2J,SAASyc,KAEZ,OADAhwB,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKwG,EAAA2J,SAAS0c,MAEZ,OADAjwB,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKwG,EAAA2J,SAASuqB,KACZ,GAAI8mC,EAAeroD,GAAG9S,EAAApH,YAAYggB,UAAW,CAC3C,IAAI6iD,EAAYr6D,OAAO4c,EAAK09C,YAAY17D,EAAAzG,cAAcoC,QAClDoK,EAAgB3E,OAAO+5D,EAAe5zD,QAASnG,OAAO2E,EAAc8D,MAAQ8+C,EAAAhlD,YAAY0O,OAC5F,IAAIy3D,EAAiBvzE,KAAKwR,QAAQ+hE,eAClC,GAAI3O,EAAeroD,GAAG9S,EAAApH,YAAYyd,eAC3B2H,EAAKlL,GAAE,IAAuB,CACjCkL,EAAK/Y,IAAG,IAOR,IAAIynE,EAAyB,CAC3Bx2E,EAAO+6C,GACL/6C,EAAO23C,MAAMi8B,GAAkBlhB,EAAAjyB,WAAW/5B,IAAMgsD,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OACvE3rE,EAAOo4C,UAAUmtB,EAAUjgD,MAAOsuD,IAEpC5zE,EAAOk6C,UAAUqrB,EAAUjgD,MACzBjlB,KAAKqzE,WACHrzE,KAAK22E,eAAsBnnE,OAUnC,OALAxP,KAAK42E,wBAA+BpnE,EAAe2mE,GACnDA,EAAM53D,KACJ5e,EAAOo4C,UAAUmtB,EAAUjgD,MAAOsuD,IAEpCvzE,KAAK8vE,YAAc5K,EAAUhpD,KACtBvc,EAAOs6C,MAAM,KAAMk8B,EAAO5C,GAIrC,IAAInsD,EAAWvc,OAAO+5D,EAAe7zD,UAAUqW,UAE/C,OADApnB,KAAK8vE,YAAc1oD,EACZznB,EAAOo4C,UAAUmtB,EAAUjgD,MAAOmC,EAAS6sC,gBAOpD,OALAj0D,KAAKuV,MACH7L,EAAA8L,eAAe4vD,+CACfvyC,EAAW9iB,OAEb/P,KAAK8vE,YAAc9vE,KAAKwR,QAAQI,UACzBjS,EAAO+7C,cAEhB,KAAK9xC,EAAA2J,SAASkd,MACZ,IAAIs4D,EAAO/oF,KAAKkxE,YACZ8X,EAAiBD,EAAKnkB,eAU1B,GATIokB,EAAezsE,GAAG9S,EAAApH,YAAYyd,eAC3BipE,EAAKxsE,GAAE,MAEVvc,KAAKuV,MACH7L,EAAA8L,eAAeyzE,iGACfp2D,EAAW9iB,QAIbg5E,EAAKxsE,GAAE,OAA4B,CACrC,IAAI2sE,EAAaH,EAAK5jB,YAAY17D,EAAAzG,cAAcoC,OAChD,GAAI8jF,EAAY,CACd,IACIz/D,EADkB5e,OAAOq+E,EAAWhtE,KAAKgQ,gBAClBzC,KAC3B,GAAIA,EAEF,OADAzpB,KAAK8vE,YAAcrmD,EAAKvN,KACjBvc,EAAOo4C,UAAUmxC,EAAWjkE,MAAOwE,EAAKvN,KAAK+3C,iBAI1D,GAAI+0B,EAAezsE,GAAG9S,EAAApH,YAAYggB,UAAW,CACvC7S,EAAgB3E,OAAOm+E,EAAeh4E,QAASnG,OAAO2E,EAAc8D,MAAQ8+C,EAAAhlD,YAAY0O,OAC5F,IAAIwoE,EAA4B90E,EAAeia,KAC/C,GAAI66D,EAAmB,CACrB,IAAI6E,EAAY7E,EAAkBpoE,KAElC,OADAlc,KAAK8vE,YAAcqZ,EACZxpF,EAAOo4C,UAAU,EAAGoxC,EAAUl1B,iBAQzC,OALAj0D,KAAKuV,MACH7L,EAAA8L,eAAe8vD,iDACfzyC,EAAW9iB,OAEb/P,KAAK8vE,YAAc9vE,KAAKwR,QAAQI,UACzBjS,EAAO+7C,cAIlB17C,KAAK8oF,4BAA4Bj2D,GAGjC,IAAIjI,EAAS5qB,KAAK4O,SAASo0D,kBACzBnwC,EACApL,EACAznB,KAAK6vE,aAAejL,GAEtB,IAAKh6C,EAAQ,OAAOjrB,EAAO+7C,cAE3B,OAAQ9wB,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY8X,MACf,IAAIhJ,EAAe0O,EAAQ1O,KAE3B,GADArR,OAAOqR,GAAQvS,EAAA+H,KAAKG,MACR+Y,EAAQrO,GAAG9S,EAAApH,YAAYsiB,SACjC,OAAO3kB,KAAK28E,sBAA6B/xD,EAAQw4C,EAAgBmY,GAEnE,IAAIr0D,EAAqB0D,EAAQ3F,MAMjC,OALApa,OAAOqc,GAAc,GACjBhL,EAAKK,GAAE,MAAwBkL,EAAKuiD,YAAY9iD,EAAYld,EAAA69D,WAAW9C,SAAS,KAClF7oD,EAAOA,EAAK22C,iBAEd7yD,KAAK8vE,YAAc5zD,EACZlc,KAAKL,OAAOo4C,UAAU7wB,EAAYhL,EAAK+3C,gBAEhD,KAAK7B,EAAAhlD,YAAY+Q,OACf,IAAKne,KAAK4zE,cAAsBhpD,GAC9B,OAAO5qB,KAAKL,OAAO+7C,cAEjBx/B,EAAgB0O,EAAQ1O,KAE5B,OADArR,OAAOqR,GAAQvS,EAAA+H,KAAKG,MACP+Y,EAAQrO,GAAG9S,EAAApH,YAAYsiB,SAC3B3kB,KAAK28E,sBAA8B/xD,EAAQw4C,EAAgBmY,IAEpEv7E,KAAK8vE,YAAc5zD,EACZlc,KAAKL,OAAOw4C,WAAoBvtB,EAAQjc,aAAcuN,EAAK+3C,iBAEpE,KAAK7B,EAAAhlD,YAAYyX,UACf,OAAK+F,EAAOrO,GAAG9S,EAAApH,YAAYywE,WAQ3B9yE,KAAK8vE,YAAcnmE,EAAA+H,KAAKtO,IACRwnB,EAAQrO,GAAG9S,EAAApH,YAAYsiB,UACrC9Z,OAA4C,GAAzB+f,EAAQpG,mBACpBxkB,KAAKL,OAAOyD,IAAI88C,QAAoBt1B,EAAQlG,wBAE9C1kB,KAAKL,OAAOw4C,WAAuBvtB,EAAQjc,aAAc0jD,EAAAjyB,WAAWh6B,OAZzEpG,KAAKuV,MACH7L,EAAA8L,eAAe4zE,+HACfv2D,EAAW9iB,OAEb/P,KAAK8vE,YAAcnmE,EAAA+H,KAAKtO,IACjBpD,KAAKL,OAAO+7C,eASvB,KAAK0W,EAAAhlD,YAAY6N,mBACf,IAAI2K,EAAW5lB,KAAK4O,SAASsM,gBACR0P,EACnB,KACA/gB,EAAAm4D,QAAqBv6C,EAAK3B,0BAE5B,IAAMF,IAAY5lB,KAAKg2E,gBAAgBpwD,GAAY,OAAOjmB,EAAO+7C,cACjE,IAAIz2B,EAAQjlB,KAAK04E,yBAAyB9yD,GAE1C,OADA5lB,KAAK8vE,YAAclqD,EAAS7U,UAAUmL,KAC/Blc,KAAKL,OAAOyD,IAAI6hB,GAO3B,OAJAjlB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEN/P,KAAKL,OAAO+7C,eAGrBi0B,EAAA1tE,UAAAk7E,4BAAA,SACEtqD,EACAuwC,EACAmY,GAEA,IAAI57E,EAASK,KAAKL,OAKdyyB,EAAOpyB,KAAK80E,kBAAkBjiD,EAAWA,WAAY7yB,KAAKwR,QAAQI,WAClEy3E,EAAarpF,KAAK8vE,YAClBt2B,EAAex5C,KAAK4O,SAASoyD,YAAYnuC,EAAW4B,OAAQz0B,KAAKkxE,YAAYtM,gBAEjF,GADA5kE,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,MACnB41C,EAAc,OAAO75C,EAAO+7C,cAGjC,IAAKlC,EAAaj9B,GAAE,KAClB,OAAO5c,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAO26C,KAAKloB,GACZzyB,EAAOyD,IAAIimF,GAAc7vC,EAAe,EAAI,IAC3C6Y,EAAAjyB,WAAWh6B,KAIhB,IAAKijF,EAAW9sE,GAAE,KAChB,OAAO5c,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAO26C,KAAKloB,GACZzyB,EAAOyD,IAAI,IACVivD,EAAAjyB,WAAWh6B,KAIhB,IAAImtE,EAAiB8V,EAAWp1B,eAGhC,GAAIo1B,EAAW9sE,GAAE,OAAyBi9B,EAAaj9B,GAAE,KAAsB,CAG7E,GAAI8sE,EAAWx2B,gBAAgBloC,eAAe6uB,GAC5C,OAAO75C,EAAO83C,OACZ87B,GAAkBlhB,EAAAjyB,WAAW/5B,IACzBgsD,EAAArpB,SAAS4iC,MACTvZ,EAAArpB,SAAS2iC,MACbv5C,EACAi3D,EAAWn1B,aAAav0D,IAK5B,GAAI65C,EAAa7uB,eAAe0+D,GAAa,CAC3C,IAAIxmE,EAAU7iB,KAAK6iB,QACnB,IAAMwmE,EAAWpW,cAAez5B,EAAay5B,YAAc,CACzD,IACIyI,EADO17E,KAAKkxE,YACK3H,oBAAoB8f,GACrCjvE,EAAqBvP,OAAOgY,EAAQzI,oBAExC,OADApa,KAAKg2E,gBAAgB57D,GACdza,EAAO+6C,GACZ/6C,EAAO23C,MACLi8B,GAAkBlhB,EAAAjyB,WAAW/5B,IACzBgsD,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZ3rE,EAAOs4C,UAAUyjC,EAAUz2D,MAAOmN,IAEpCzyB,EAAOyD,IAAI,GACXpD,KAAKkhF,eAAe9mE,EAAoB,CACtCza,EAAOo4C,UAAU2jC,EAAUz2D,MAAOsuD,GAClC5zE,EAAOyD,IAAIo2C,EAAattB,eAAgBvc,KACvCkjB,IAGL7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,YAMZ,CAGL,GAAIs5E,EAAW1+D,eAAe6uB,GAC5B,OAAO75C,EAAOs6C,MAAM,KAAM,CACxBj6C,KAAK29E,kBAAkBvrD,EAAMi3D,EAAY1/E,EAAA+H,KAAKG,MAAM,GAAO,EAAOghB,EAAWA,YAC7ElzB,EAAOyD,IAAI,IACVivD,EAAAjyB,WAAWh6B,KAGT,GAAIozC,EAAa7uB,eAAe0+D,GAAa,CAC9CxmE,EAAU7iB,KAAK6iB,QACnB,IAAMwmE,EAAWpW,cAAez5B,EAAay5B,YAAc,CAKrDyI,EADO17E,KAAKkxE,YACK3H,oBAAoB8f,GACrCjvE,EAAqBvP,OAAOgY,EAAQzI,oBAExC,OADApa,KAAKg2E,gBAAgB57D,GACdza,EAAO+6C,GACZ/6C,EAAO23C,MACLi8B,GAAkBlhB,EAAAjyB,WAAW/5B,IACzBgsD,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZ3rE,EAAOs4C,UAAUyjC,EAAUz2D,MAAOmN,IAEpCzyB,EAAOyD,IAAI,GACXpD,KAAKkhF,eAAe9mE,EAAoB,CACtCza,EAAOo4C,UAAU2jC,EAAUz2D,MAAOsuD,GAClC5zE,EAAOyD,IAAIo2C,EAAattB,eAAgBvc,KACvCkjB,IAGL7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,QAOnB,OAAOpQ,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAO26C,KAAKloB,GACZzyB,EAAOyD,IAAI,IACVivD,EAAAjyB,WAAWh6B,MAGhBupE,EAAA1tE,UAAAm7E,yBAAA,SACEvqD,EACAuwC,EACAmY,EACA+N,QAAA,IAAAA,OAAA,GAEA,IAAI3pF,EAASK,KAAKL,OAClB,OAAQkzB,EAAWxS,aACjB,KAAKzW,EAAA0W,YAAY4c,MACfryB,QAAQy+E,GACR,IAAI/1B,EAAY6P,EAAel3C,eAC/B,OAAIqnC,GACEA,EAAUtxD,WAAajC,KAAK6iB,QAAQvJ,eAC/BtZ,KAAKupF,oBACV1+E,OAAO0oD,EAAU/pC,eAAe,GACPqJ,EAAYH,mBACrC6oD,EACA1oD,IAIN7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,eAEhB,KAAK9xC,EAAA0W,YAAYid,MACf,IAAIisD,EAAsC32D,EAAYvxB,MAItD,OAHIgoF,IACFE,GAAcA,GAEZpmB,GAAkBz5D,EAAA+H,KAAK7N,IAClBlE,EAAOkE,IAAS2lF,IAEzBxpF,KAAK8vE,YAAcnmE,EAAA+H,KAAK5N,IACjBnE,EAAOmE,IAAI0lF,IAEpB,KAAK5/E,EAAA0W,YAAYmd,QACf,IAAIqmC,EAAsCjxC,EAAYvxB,MAClDgoF,IACFxlB,EAAWkB,QACT3yD,QAAQ,GACRyxD,IAGJ,IAAI5nD,EAAOlc,KAAK4O,SAASi1D,4BAA4BC,EAAUV,GAE/D,OADApjE,KAAK8vE,YAAc5zD,EACXA,EAAK5I,MACX,OAAqB,IAAKtT,KAAKwR,QAAQc,SAAU,OAAO3S,EAAOyD,IAAI88C,QAAQ4jB,IAC3E,OAAmB,OAAOnkE,EAAO0D,IAAI68C,QAAQ4jB,GAAW3jB,SAAS2jB,IACjE,OAAqB,IAAK9jE,KAAKwR,QAAQc,SAAU,OAAO3S,EAAOyD,IAAI88C,QAAQ4jB,IAC3E,OAAmB,OAAOnkE,EAAO0D,IAAI68C,QAAQ4jB,GAAW3jB,SAAS2jB,IACjE,QAAmB,OAAOnkE,EAAOkE,IAAI4lF,WAAW3lB,IAChD,QAAmB,OAAOnkE,EAAOmE,IAAI4lF,WAAW5lB,IAChD,QAAS,OAAOnkE,EAAOyD,IAAI88C,QAAQ4jB,IAGvC,KAAKl6D,EAAA0W,YAAYC,OAEf,OADA1V,QAAQy+E,GACDtpF,KAAK2pF,qBAA8C92D,GAE5D,KAAKjpB,EAAA0W,YAAYqd,OAEf,OADA9yB,QAAQy+E,GACDtpF,KAAK4pF,qBAA8C/2D,EAAYuwC,GAS1E,OALApjE,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAEb/P,KAAK8vE,YAAc1M,EACZzjE,EAAO+7C,eAGhBi0B,EAAA1tE,UAAA0nF,qBAAA,SAAqB92D,GACnB,OAAO7yB,KAAKw3E,mBAAmB3kD,EAAWvxB,QAG5CquE,EAAA1tE,UAAAsnF,oBAAA,SACEzR,EACAnkD,EACA4nD,EACAhV,GAmBA,IAjBA,IAAI5mE,EAASK,KAAKL,OACdkjB,EAAU7iB,KAAK6iB,QACfvJ,EAAiBzO,OAAOgY,EAAQvJ,gBAChC++D,EAAgBxtE,OAAO7K,KAAK4O,SAASoM,aAAa1B,EAAgB,CAAEw+D,KACpE/gE,EAAsBlM,OAAOgY,EAAQ9L,qBACrC0sD,EAAY4U,EAAcn8D,KAC1BuL,EAAOznB,KAAKkxE,YAGZgT,EAAWz8D,EAAKohD,aAAapF,GAC7BomB,EAAgBpiE,EAAKohD,aAAa9xD,EAAoBmF,MAGtDpR,EAAS6oB,EAAY7oB,OACrB0P,EAAS,IAAIvT,MAAqB6D,GAClC+U,GAAW,EACXiqE,EAAoBhS,EAAY7jB,eAC3B5zD,EAAI,EAAGA,EAAIyK,IAAUzK,EAAG,CAC/B,IAAIwyB,EAAac,EAAYtzB,GACzB+xB,EAAOS,EACPlzB,EAAO6iD,qBACLxiD,KAAK80E,kBAA8BjiD,EAAYilD,EAAW,IAI5DA,EAAY5jB,aAAav0D,GACzB0yD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MACxCl6C,OAAOwnD,EAAAnL,kBAAkB90B,IAAS03D,GAElCjqE,GAAW,EAEbrF,EAAOna,GAAK+xB,EAId,GAAIvS,EAAU,CACZ4H,EAAK6hD,cAAc4a,GACnBz8D,EAAK6hD,cAAcugB,GAEnB,IAAIjS,EAAoB/0D,EAAQ+0D,kBAC5BQ,EAAgBp4E,KAAK63E,wBAAwBC,EAAat9D,GAC1DuvE,EAAgB5qB,QAAQiZ,EAAc7oE,OAAQ8C,QAAQulE,IAI1D,GAAe,GAAX2D,EAAyC,CAC3C,IAAIyO,EAAehqF,KAAKm4E,wBAAwBL,EAAaM,GACzD6R,EAAe9qB,QAAQ6qB,EAAaz6E,OAAQ8C,QAAQulE,IAExD,OADA53E,KAAK8vE,YAAcrM,EACZ5gD,EAAQrR,QAAQc,SACnBtS,KAAKL,OAAO0D,IAAI68C,QAAQ+pC,GAAe9pC,SAAS8pC,IAChDjqF,KAAKL,OAAOyD,IAAI88C,QAAQ+pC,IAKxB73D,EAAOpyB,KAAKkhF,eAAer+D,EAAQvI,mBAAoB,CACzD3a,EAAOyD,IAAI0H,GACX+X,EAAQrR,QAAQc,SACZ3S,EAAO0D,IAAIy0E,EAAYoS,WACvBvqF,EAAOyD,IAAI00E,EAAYoS,WAC3BvqF,EAAOyD,IAAIi1E,EAAc1oE,IACzBkT,EAAQrR,QAAQc,SACZ3S,EAAO0D,IAAI68C,QAAQ6pC,GAAgB5pC,SAAS4pC,IAC5CpqF,EAAOyD,IAAI88C,QAAQ6pC,KACtBxjB,GAEH,OADAvmE,KAAK8vE,YAAcrM,EACZzjE,KAAKwjF,gBAAgBxjF,KAAKqzE,WAAWjhD,IAMhD,IADaimD,EAAc3tD,eAAe0nC,EAAA5oD,aAAa4B,aAAa,GASlE,OAPAqc,EAAK6hD,cAAc4a,GACnBz8D,EAAK6hD,cAAcugB,GACnB7pF,KAAKuV,MACH7L,EAAA8L,eAAe2tE,+CACf5c,EAAWx2D,MAAOsoE,EAAc1pE,cAElC3O,KAAK8vE,YAAcrM,EACZ9jE,EAAO+7C,cAEhB,IAAIyuC,EAAkB1mB,EAAUxP,eAE5BkiB,EAAQ,IAAIlvE,MAEhBkvE,EAAM53D,KACJ5e,EAAOk6C,UAAUqqC,EAASj/D,MACxBjlB,KAAKkhF,eAAer+D,EAAQvI,mBAAoB,CAC9C3a,EAAOyD,IAAI0H,GACX+X,EAAQrR,QAAQc,SACZ3S,EAAO0D,IAAIy0E,EAAYoS,WACvBvqF,EAAOyD,IAAI00E,EAAYoS,WAC3BvqF,EAAOyD,IAAIi1E,EAAc1oE,IACzBkT,EAAQrR,QAAQc,SACZ3S,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACdmjE,KAIP,IAAI6jB,EAAYv/E,OAAOwtE,EAAc1hE,aAAa,cAClD9L,OAAOu/E,EAAU92E,MAAQ8+C,EAAAhlD,YAAYyO,OACrCs6D,EAAM53D,KACJ5e,EAAOk6C,UAAUgwC,EAAc5kE,MAC7BtlB,EAAO04C,KAAKorB,EAAU/Q,UAAU,EAC9B/yD,EAAOo4C,UAAUmsC,EAASj/D,MAAOklE,GACjCA,EACQC,EAAWvhE,gBAKzB,IADA,IAAIuqD,EAAY0E,EAAY1E,UACZ8W,GAAP7pF,EAAI,EAAey3E,EAAYoS,WAAW7pF,EAAIyK,IAAUzK,EAAG,CAClE,IAAImzE,EAAYh5D,EAAOna,GACnB+yE,IAEFI,EAAYxzE,KAAKqzE,WAAWG,IAG9B2C,EAAM53D,KACJ5e,EAAOy3C,MAAM0gC,EAAYplB,SACvB/yD,EAAOo4C,UAAU8xC,EAAc5kE,MAAOklE,GACtC3W,EACAsW,EACAzpF,GAAK6pF,IAWX,OANA/T,EAAM53D,KACJ5e,EAAOo4C,UAAUmsC,EAASj/D,MAAOklE,IAEnC1iE,EAAK6hD,cAAc4a,GACnBz8D,EAAK6hD,cAAcugB,GACnB7pF,KAAK8vE,YAAcrM,EACZ9jE,EAAOs6C,MAAM,KAAMk8B,EAAOgU,IAGnCxa,EAAA1tE,UAAA2nF,qBAAA,SAAqB/2D,EAAqCuwC,GACxD,IAAIzjE,EAASK,KAAKL,OAGdusB,EAAiBk3C,EAAel3C,eACpC,IAAKA,GAAkBA,EAAe3P,GAAG9S,EAAApH,YAAYqd,UAKnD,OAJA1f,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACfliD,EAAW9iB,MAAO,WAAYqzD,EAAeplD,YAExCre,EAAO+7C,cAIhB,IAAI2uC,EAAOn+D,EAAetC,oBAC1B,GAAIygE,EAAM,CAGR,GAAIA,EAAKt5E,UAAU4jD,mBAKjB,OAJA30D,KAAKuV,MACH7L,EAAA8L,eAAe80E,sDACfz3D,EAAW9iB,MAAOmc,EAAelO,YAE5Bre,EAAO+7C,cAEhB,GAAI2uC,EAAK9tE,GAAG9S,EAAApH,YAAY60D,SAKtB,OAJAl3D,KAAKuV,MACH7L,EAAA8L,eAAe+0E,mFACf13D,EAAW9iB,MAAOmc,EAAelO,YAE5Bre,EAAO+7C,cAEhB,GAAI2uC,EAAK9tE,GAAG9S,EAAApH,YAAY80D,WAKtB,OAJAn3D,KAAKuV,MACH7L,EAAA8L,eAAeg1E,qFACf33D,EAAW9iB,MAAOmc,EAAelO,YAE5Bre,EAAO+7C,cAKlB,IAAIxmB,EAAQrC,EAAWqC,MACnBkmB,EAAWlmB,EAAMpqB,OACjB0P,EAASqY,EAAWrY,OACpBuB,EAAUmQ,EAAenQ,QACzB0uE,GAAY,EACZ/B,EAAQ,IAAIzhF,MAAqBm0C,EAAW,GAE5CsgC,EADO17E,KAAKkxE,YACKhI,oBAAoBlpE,KAAKwR,QAAQI,WACtD/G,OAAOuwC,GAAY5gC,EAAO1P,QAC1B,IAAK,IAAIzK,EAAI,EAAG8O,EAAIisC,EAAU/6C,EAAI8O,IAAK9O,EAAG,CACxC,IAAIkb,EAASQ,EAAUA,EAAQ7a,IAAIg0B,EAAM70B,GAAGwV,MAAQ,KACpD,GAAK0F,GAAUA,EAAOjI,MAAQ8+C,EAAAhlD,YAAYyO,MAA1C,CAQA,IAAIK,EAAeX,EAAQW,KAC3BwsE,EAAMroF,EAAI,GAAKL,KAAKL,OAAOy3C,MACzBl7B,EAAKw2C,SACL1yD,KAAKL,OAAOo4C,UAAU2jC,EAAUz2D,MAAOjlB,KAAKwR,QAAQ+hE,gBACpDvzE,KAAK80E,kBAAkBt6D,EAAOna,GAAYkb,EAAQW,KAAI,GACtDA,EAAK+3C,eACG14C,EAAQsN,mBAbhB7oB,KAAKuV,MACH7L,EAAA8L,eAAemtD,oCACfztC,EAAM70B,GAAG0P,MAAOmlB,EAAM70B,GAAGwV,KAAMqW,EAAelO,YAEhDysE,GAAY,EAahB,OADAzqF,KAAK8vE,YAAc5jD,EAAehQ,KAAK22C,gBACnC43B,EAAkB9qF,EAAO+7C,eAG7BgtC,EAAM,GAAK/oF,EAAOk6C,UAChB6hC,EAAUz2D,MACVjlB,KAAKqzE,WACHrzE,KAAK22E,eAAezqD,KAKxBw8D,EAAMA,EAAM59E,OAAS,GAAKnL,EAAOo4C,UAAU2jC,EAAUz2D,MAAOjlB,KAAKwR,QAAQ+hE,gBAEzEvzE,KAAK8vE,YAAc5jD,EAAehQ,KAC3Bvc,EAAOs6C,MAAM,KAAMyuC,EAAO1oF,KAAKwR,QAAQ+hE,kBAGhD5D,EAAA1tE,UAAAo7E,qBAAA,SACExqD,EACAuwC,EACAmY,GAEA,IAAI57E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YAGZtmD,EAAS5qB,KAAK4O,SAAS00D,kBACzBzwC,EAAWA,WACXpL,GAEF,IAAKmD,EAAQ,OAAOjrB,EAAO+7C,cAC3B,GAAI9wB,EAAOtX,MAAQ8+C,EAAAhlD,YAAYiK,gBAK7B,OAJArX,KAAKuV,MACH7L,EAAA8L,eAAek1E,yEACf73D,EAAWA,WAAW9iB,OAEjB/P,KAAKL,OAAO+7C,cAErB,IAGIxvB,EAHAlM,EAAiC4K,EACjCpb,EAA8B,KAC9Bga,EAAgBqJ,EAAWrJ,cAqB/B,OAdEha,GAJCga,GACoD,QAApD0C,EAAiBk3C,EAAel3C,iBACjCA,EAAe3P,GAAG9S,EAAApH,YAAY4P,SAEdjS,KAAK4O,SAASoM,aAC5BgF,EACAkM,EAAe1C,cACf3f,EAAAm4D,QAAqBv6C,EAAK3B,0BAGZ9lB,KAAK4O,SAASmzD,8BAC5B/hD,EACAwJ,EACA/B,EAAKm9C,eAAe5zD,OACpBnH,EAAAm4D,QAAqBv6C,EAAK3B,yBAC1B+M,KAIAuwC,GAAkBz5D,EAAA+H,KAAKG,OAAM0pE,GAAW,GACrCv7E,KAAK2qF,mBAAmBn7E,EAAeqjB,EAAW3S,UAAWq7D,EAAa1oD,IAFtDlzB,EAAO+7C,eAMpCi0B,EAAA1tE,UAAAwiF,kBAAA,SAAkBj1E,EAAsB+2D,GACtC,IAAI3gD,EAAWpW,EAAcoa,oBAC7B,GAAIhE,EAGF,OADKA,EAASvN,aAAa+5C,EAAA/kD,eAAekS,SAASvf,KAAKg2E,gBAAgBpwD,GACjEA,EAIT,IAAI8gD,EAAYl3D,EAAcia,KAC9B,GAAIi9C,EAAW,CACb,IAAIkkB,EAAW5qF,KAAKykF,kBAAkB/d,EAAWH,GACjD3gD,EAAW,IAAIwsC,EAAAlhD,SACbzH,EAAAzG,cAAcsC,YACd,IAAI8sD,EAAAjhD,kBACF1H,EAAAzG,cAAcsC,YACdkK,EAEsBo7E,EAASv5E,YAAakuB,SAE9CqrD,EAAS75E,UACT,WAKF6U,EAAW,IAAIwsC,EAAAlhD,SACbzH,EAAAzG,cAAcsC,YACd,IAAI8sD,EAAAjhD,kBACF1H,EAAAzG,cAAcsC,YACdkK,EACAxP,KAAK6iB,QAAQtS,8BAA8B9G,EAAAzG,cAAcsC,YACvDmE,EAAApH,YAAYggB,SAAW5Y,EAAApH,YAAYyd,cAGvC,IAAInW,EAAA8Z,UAAU,KAAMjU,EAAc0M,KAAM1M,EAAc0M,MACtD,MAIJ0J,EAASjX,aAAea,EAAcb,aAAelF,EAAA/G,mBAAqB,cAC1EkjB,EAASlX,IAAIjF,EAAApH,YAAYywE,UACzBltD,EAAS3jB,UAAU0jB,oBAAoB,GAAIC,GAC3CpW,EAAcoa,oBAAsBhE,EACpC,IAAI2uD,EAAev0E,KAAKkxE,YACpBzpD,EAAO7B,EAAS6B,KACpBznB,KAAKkxE,YAAczpD,EAGnB,IAAI1W,EAAY6U,EAAS7U,UACrBpR,EAASK,KAAKL,OACd4zE,EAAiBvzE,KAAKwR,QAAQ+hE,eAC9B4C,EAAQ,IAAIlvE,MAqBhB,GAZAkvE,EAAM53D,KACJ5e,EAAO+6C,GACL/6C,EAAO23C,MAAMi8B,GAAkBlhB,EAAAjyB,WAAW/5B,IAAMgsD,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OACvE3rE,EAAOo4C,UAAU,EAAGw7B,IAEtB5zE,EAAOk6C,UAAU,EACf75C,KAAKqzE,WACHrzE,KAAK22E,eAAennE,OAKxBk3D,EAAW,CACb,IAAIr/C,EAAiBtW,EAAUsW,eAC3B8tC,EAAgB9tC,EAAevc,OAC/B8sC,EAAW,IAAI3wC,MAAqB,EAAIkuD,GAC5Cvd,EAAS,GAAKj4C,EAAOo4C,UAAU,EAAGw7B,GAClC,IAAK,IAAIlzE,EAAI,EAAGA,EAAI80D,IAAiB90D,EACnCu3C,EAASv3C,EAAI,GAAKV,EAAOo4C,UAAU13C,EAAI,EAAGgnB,EAAehnB,GAAG4zD,gBAG9DkiB,EAAM53D,KACJ5e,EAAOk6C,UAAU,EACf75C,KAAKkhF,eAAer2E,OAAO67D,EAAU98C,qBAAsBguB,EAAU2uB,GAAY,GAAO,KAI9FvmE,KAAK42E,wBAAwBpnE,EAAe2mE,GAC5C,IAAI9wD,EAAOrlB,KAAKqiF,6BAA6B56D,EAAM9nB,EAAOo4C,UAAU,EAAGw7B,GAAiB/jE,EAAc0M,KAAMi6D,GAC5G1uD,EAAKqiD,mBACL9pE,KAAKkxE,YAAcqD,EAGnB,IAAIz2B,EAAU99C,KAAK6xE,mBAAmB9gE,EAAUsW,eAAgBtW,EAAUkgB,WAAYlgB,EAAUqW,UAC5FS,EAASjC,EAASI,cAClBw3B,EAAW,IAAIv2C,MACfmhF,EAAc,EAAIr3E,EAAUsW,eAAevc,OAC3C4pE,EAAY7sD,EAAO/c,OACvB,GAAI4pE,EAAY0T,EACd,IAAS/nF,EAAI+nF,EAAa/nF,EAAIq0E,IAAar0E,EAAGm9C,EAASj/B,KAAKsJ,EAAOxnB,GAAG6b,KAAK+3C,gBAE7E,IAAI2d,EAAUjyE,EAAO49C,YAAY33B,EAASjX,aAAcmvC,EAASN,EAAUn4B,GAE3E,OADAO,EAASkC,SAASnoB,EAAQiyE,GACnBhsD,GAGT+pD,EAAA1tE,UAAA0oF,mBAAA,SAEEn7E,EAEAk2E,EAEAnK,EAEAhV,GAEA,IAAI8jB,EAAOrqF,KAAKykF,kBAAkBj1E,EAAe+2D,GAC7Cn0C,EAAOpyB,KAAKwkF,kBACd6F,EACA3E,EACAnf,EACAvmE,KAAKwR,QAAQI,UAAUsiD,aAAal0D,KAAKL,QACzC47E,GAKF,OAHIlpB,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWsY,OACxC14C,KAAK8vE,YAActgE,EAAc0M,MAE5BkW,GAQTu9C,EAAA1tE,UAAAq7E,gCAAA,SACEna,EACAC,EACAmY,GAEA,IAAI57E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YAEhBlxE,KAAK8oF,4BAA4B3lB,GAEjC,IAAIv4C,EAAS5qB,KAAK4O,SAASs0D,gCAAgCC,EAAgB17C,EAAM27C,GACjF,IAAKx4C,EAAQ,OAAOjrB,EAAO+7C,cAE3B,OAAQ9wB,EAAOtX,MACb,KAAK8+C,EAAAhlD,YAAY+Q,OACf,IAAKne,KAAK4zE,cAAsBhpD,GAC9B,OAAOjrB,EAAO+7C,cAEhB,IAAI8D,EAAsB50B,EAAQ1O,KAElC,OADArR,OAAO20C,GAAc71C,EAAA+H,KAAKG,MACb+Y,EAAQrO,GAAG9S,EAAApH,YAAYsiB,SAC3B3kB,KAAK28E,sBAA8B/xD,EAAQw4C,EAAgBmY,IAEpEv7E,KAAK8vE,YAActwB,EACZ7/C,EAAOw4C,WAAoBvtB,EAAQjc,aAAc6wC,EAAWyU,iBAErE,KAAK7B,EAAAhlD,YAAYyX,UACf,IAAIgmE,EAAUhgF,OAAmB+f,EAAQ5Z,QACzC,OADkDnG,OAAOggF,EAAQv3E,MAAQ8+C,EAAAhlD,YAAYiX,MAChFrkB,KAAK6zE,YAAkBgX,IAI5B7qF,KAAK8vE,YAAcnmE,EAAA+H,KAAKtO,IACRwnB,EAAQrO,GAAG9S,EAAApH,YAAYsiB,UACrC9Z,OAA4C,GAAzB+f,EAAQpG,mBACpB7kB,EAAOyD,IAAI88C,QAAoBt1B,EAAQlG,wBAEzC/kB,EAAOw4C,WAAuBvtB,EAAQjc,aAAc0jD,EAAAjyB,WAAWh6B,OARpEpG,KAAK8vE,YAAcnmE,EAAA+H,KAAKtO,IACjBpD,KAAKL,OAAO+7C,eASvB,KAAK0W,EAAAhlD,YAAYyO,MACfhR,OAAe+f,EAAQ/B,cAAgB,GACvC,IAAI86D,EAAW3jF,KAAK80E,kBAAkBjqE,OAAO7K,KAAK4O,SAASkyD,uBAAwB9gE,KAAKwR,QAAQI,WAEhG,OADA5R,KAAK8vE,YAAsBllD,EAAQ1O,KAC5Bvc,EAAO04C,KACJztB,EAAQ1O,KAAKw2C,SACb9nC,EAAQ1O,KAAKK,GAAG,GACxBonE,EACQ/4D,EAAQ1O,KAAK+3C,eACbrpC,EAAQ/B,cAGpB,KAAKupC,EAAAhlD,YAAYoO,mBACf,IAAIC,EAAsCmP,EAAQnP,gBAClD,GAAIA,EAAiB,CACnB,IAAI5a,EAASb,KAAK4O,SAASsM,gBAAgBO,EAAiB,MAC5D,GAAI5a,EAAQ,OAAOb,KAAKwkF,kBAAkB3jF,EAAQ,GAAIsiE,EAAgB,GAExE,OAAOxjE,EAAO+7C,cAEhB,KAAK0W,EAAAhlD,YAAYuO,SACf,IAAIqN,EAAiBne,OAAkB+f,EAAQ5B,gBAC/C,OAAOhpB,KAAKwkF,kBAAkBx7D,EAAgB,GAAIm6C,EAChDnjE,KAAK80E,kBAAkBjqE,OAAO7K,KAAK4O,SAASkyD,uBAAwB9gE,KAAKwR,QAAQI,YAGrF,KAAKwgD,EAAAhlD,YAAY6N,mBAKf,OAJAjb,KAAKuV,MACH7L,EAAA8L,eAAes1E,wEACf3nB,EAAepzD,MAA2B6a,EAAQhqB,MAE7CjB,EAAO+7C,cAOlB,OAJA17C,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf2iD,EAAepzD,OAEVpQ,EAAO+7C,eAGhBi0B,EAAA1tE,UAAAs7E,yBAAA,SACE1qD,EACAuwC,EACAmY,GAEA,IAAIzlD,EAASjD,EAAWiD,OACpBC,EAASlD,EAAWkD,OACpBkkD,EAAYj6E,KAAKkxE,YAEjBmJ,EAAWr6E,KAAKL,OAAO6iD,qBACzBxiD,KAAKs6E,cACHt6E,KAAK80E,kBAAkBjiD,EAAWgD,UAAWlsB,EAAA+H,KAAK9N,MAClD5D,KAAK8vE,cAKT,GACEzd,EAAApL,gBAAgBozB,IAAahoB,EAAAhyB,aAAa0kB,OAC1CsN,EAAAnL,kBAAkBmzB,IAAahoB,EAAAjyB,WAAWh6B,IAE1C,OAAOisD,EAAAlL,iBAAiBkzB,GACpBr6E,KAAK80E,kBAAkBh/C,EAAQstC,GAC/BpjE,KAAK80E,kBAAkB/+C,EAAQqtC,GAGrC,IAAIic,EAAkC,GAAX9D,EAEvBwP,EAAa9Q,EAAUvR,OAC3B1oE,KAAKkxE,YAAc6Z,EACnB,IAAIC,EAAahrF,KAAK80E,kBAAkBh/C,EAAQstC,EAAgBic,GAC5D4L,EAAajrF,KAAK8vE,YAClBob,EAA2BlrF,KAAKqwE,oBAAoB/+D,IAAI05E,GAExDG,EAAalR,EAAUvR,OAC3B1oE,KAAKkxE,YAAcia,EACnB,IAAIC,EAAaprF,KAAK80E,kBAAkB/+C,EAAQqtC,EAAgBic,GAC5DgM,EAAarrF,KAAK8vE,YAClBwb,EAA2BtrF,KAAKqwE,oBAAoB/+D,IAAI85E,GAExDtL,EAAan2E,EAAA+H,KAAKqiD,kBAAkBk3B,EAAYI,GAAY,GAChE,IAAKvL,EAMH,OALA9/E,KAAKuV,MACH7L,EAAA8L,eAAeu/D,mCACfh/C,EAAOhmB,MAAOs7E,EAAWrtE,WAAYitE,EAAWjtE,YAElDhe,KAAK8vE,YAAc1M,EACZpjE,KAAKL,OAAO+7C,cAErBsvC,EAAahrF,KAAK29E,kBAChBqN,EACAC,EAAYnL,GACZ,GAAO,EACPhqD,GAEFs1D,EAAaprF,KAAK29E,kBAChByN,EACAC,EAAYvL,GACZ,GAAO,EACP/pD,GAEF/1B,KAAK8vE,YAAcgQ,EAEfoL,GAA4BI,EACzBJ,GAIHE,EAAaprF,KAAKqzE,WAAW+X,GAC7BE,GAA2B,IAJ3BN,EAAahrF,KAAKqzE,WAAW2X,GAC7BE,GAA2B,IAKnBA,GAA4BpL,EAAW1M,YAE/C4X,EAAahrF,KAAKyiF,gBAAgBuI,EAAYD,EAAY9Q,GAC1DmR,EAAaprF,KAAKyiF,gBAAgB2I,EAAYD,EAAYlR,IAI9D+Q,EAAahrF,KAAKqiF,6BAA6B0I,EAAYC,EAAYlL,GACvEiL,EAAWjhB,mBAEXshB,EAAaprF,KAAKqiF,6BAA6B8I,EAAYC,EAAYtL,GACvEqL,EAAWrhB,mBAEX9pE,KAAKkxE,YAAc+I,EACnBA,EAAUpP,cAAckgB,EAAYI,GAEpC,IAAI/4D,EAAOpyB,KAAKL,OAAO+6C,GAAG2/B,EAAU2Q,EAAYI,GAGhD,OAFAvgF,OAAOqgF,GAA4BI,GAC/BJ,GAA0BlrF,KAAKqwE,oBAAoBv+D,IAAIsgB,GACpDA,GAGTu9C,EAAA1tE,UAAAu7E,8BAAA,SACE3qD,EACAuwC,EACAmY,GAEA,IAAI57E,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YAGZqa,EAAWvrF,KAAK80E,kBAClBjiD,EAAW6D,QACX0sC,EAAemc,WAAU,GAK3B,GAAIltB,EAAApL,gBAAgBskC,IAAal5B,EAAAhyB,aAAaguB,YAAa,OAAOk9B,EAGlE,IASIn5D,EATAspD,EAA0B,KAW9B,OAVItY,GAAkBz5D,EAAA+H,KAAKG,OACzB6pE,EAAYj0D,EAAKohD,aAAa7oE,KAAK8vE,aACnCyb,EAAW5rF,EAAOs4C,UAChByjC,EAAUz2D,MACVsmE,IAMI14D,EAAWI,UACjB,KAAKrD,EAAAC,MAAM8oC,UACT,OAAQ34D,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAAS8sC,OACTyV,EACA5rF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAayD,aAC5C,CACZmlB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAS60D,EAAU14D,GACzE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAGlB,OACE,IAAIlqC,EAAUxR,KAAKwR,QACnB4gB,EAAOzyB,EAAO83C,OACZjmC,EAAQc,SACJ+/C,EAAArpB,SAASu3C,OACTluB,EAAArpB,SAAS8sC,OACbyV,EACAvrF,KAAK8vE,YAAY3b,YAAYx0D,IAE/B,MAEF,OACA,OACEyyB,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAASu3C,OACTgL,EACA5rF,EAAO0D,IAAI,IAEb,MAEF,QACE+uB,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAASw3C,OACT+K,EACA5rF,EAAOkE,IAAI,IAEb,MAEF,QACEuuB,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAASy3C,OACT8K,EACA5rF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADA+G,QAAO,GACAlL,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAM+oC,YACT,OAAQ54D,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAAS03C,OACT6K,EACA5rF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAC5C,IAAI2P,EAEEnB,EADN,GADImB,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAa0D,aAC5C,CACZklB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAS60D,EAAU14D,GACzE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAGlB,OACMlqC,EAAUxR,KAAKwR,QACnB4gB,EAAOzyB,EAAO83C,OACZjmC,EAAQc,SACJ+/C,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACb6K,EACAvrF,KAAK8vE,YAAY3b,YAAYx0D,IAE/B,MAEF,OACA,OACEyyB,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAAS23C,OACT4K,EACA5rF,EAAO0D,IAAI,IAEb,MAEF,QACE+uB,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAAS43C,OACT2K,EACA5rF,EAAOkE,IAAI,IAEb,MAEF,QACEuuB,EAAOzyB,EAAO83C,OACZ4a,EAAArpB,SAAS63C,OACT0K,EACA5rF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADA+G,QAAO,GACAlL,EAAO+7C,cAGlB,MAEF,QAEE,OADA7wC,QAAO,GACAlL,EAAO+7C,cAIlB,IAAI9sC,EAAW5O,KAAK4O,SAChBgc,EAAShc,EAAS00D,kBAAkBzwC,EAAW6D,QAASjP,GAG5D,IAAKi0D,EAEH,OADA17E,KAAK8vE,YAAcnmE,EAAA+H,KAAKG,KACnB+Y,EACE5qB,KAAK6iF,eACVj4D,EACAwH,EACAS,EAAW6D,QACX9nB,EAASkyD,sBACTlyD,EAASmyD,0BACT,GAPkBphE,EAAO+7C,cAStB,IAAK9wB,EACV,OAAOjrB,EAAO+7C,cAIhB,IAAI8vC,EAAWxrF,KAAK6iF,eAClBj4D,EACAwH,EACAS,EAAW6D,QACX9nB,EAASkyD,sBACTlyD,EAASmyD,0BACT,GAGF/gE,KAAK8vE,YAAc4L,EAAUx/D,KAC7BuL,EAAK6hD,cAAcoS,GACnB,IAAIpI,EAAaoI,EAAUx/D,KAAK+3C,eAEhC,OAAOt0D,EAAOs6C,MAAM,KAAM,CACxBuxC,EACA7rF,EAAOo4C,UAAU2jC,EAAUz2D,MAAOquD,IACjCA,IAGL3D,EAAA1tE,UAAAw7E,6BAAA,SACE5qD,EACAuwC,EACAmY,GAEA,IAEInpD,EAFAzyB,EAASK,KAAKL,OACdogF,GAAW,EAGf,OAAQltD,EAAWI,UACjB,KAAKrD,EAAAC,MAAMnjB,KAQT,GAPA0lB,EAAOpyB,KAAK80E,kBACVjiD,EAAW6D,QACX0sC,EAAemc,WAAU,GAKvBv/E,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAakD,MAC5C,CACZ0lB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAIhB,MAEF,KAAK9rB,EAAAC,MAAMjjB,MACT,GAAIimB,EAAW6D,QAAQpjB,MAAQ1J,EAAA2J,SAAS6M,UAClByS,EAAW6D,QAASrW,aAAezW,EAAA0W,YAAYmd,SAC/C5K,EAAW6D,QAASrW,aAAezW,EAAA0W,YAAYid,OAClE,CAEDnL,EAAOpyB,KAAKo9E,yBAA4CvqD,EAAW6D,QAAS0sC,EAAc,GAAoB,GAE1GpjE,KAAKwR,QAAQuW,WAAW/nB,KAAK85E,iBAAiB1nD,EAAMS,EAAW9iB,OACnE,MAUF,GAPAqiB,EAAOpyB,KAAK80E,kBACVjiD,EAAW6D,QACX0sC,EAAemc,WAAU,GAKvBv/E,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAaoD,OAC5C,CACZwlB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAGhB,OAAQ17C,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS03C,OAAQ/gF,EAAOyD,IAAI,GAAIgvB,GACrD,MAEF,OACA,OACEA,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACb1gF,KAAK8vE,YAAY5b,aAAav0D,GAC9ByyB,GAEF,MAEF,OACA,OACEA,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS23C,OAAQhhF,EAAO0D,IAAI,GAAI+uB,GACrD,MAEF,QACEA,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ+nD,OAAQr5D,GACpC,MAEF,QACEA,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQgoD,OAAQt5D,GACpC,MAEF,QACEvnB,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAM8oC,UAST,GARAonB,GAAW,EACX3tD,EAAOpyB,KAAK80E,kBACVjiD,EAAW6D,QACX0sC,EAAemc,WAAU,GAKvBv/E,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAamD,YAC5C,CACZylB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAGhB,OAAQ17C,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS8sC,OAAQ1jD,EAAMpyB,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,OACA,OACEgvB,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASu3C,OACTluB,EAAArpB,SAAS8sC,OACb1jD,EACApyB,KAAK8vE,YAAY3b,YAAYx0D,IAE/B,MAEF,OACA,OACEyyB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASu3C,OAAQnuD,EAAMzyB,EAAO0D,IAAI,IACvD,MAEF,QACE+uB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASw3C,OAAQpuD,EAAMzyB,EAAOkE,IAAI,IACvD,MAEF,QACEuuB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASy3C,OAAQruD,EAAMzyB,EAAOmE,IAAI,IACvD,MAEF,QACE+G,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAM+oC,YAST,GARAmnB,GAAW,EACX3tD,EAAOpyB,KAAK80E,kBACVjiD,EAAW6D,QACX0sC,EAAemc,WAAU,GAKvBv/E,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAE5C,GADI2P,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAaqD,YAC5C,CACZulB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAGhB,OAAQ17C,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS03C,OAAQtuD,EAAMzyB,EAAOyD,IAAI,IACvD,MAEF,OACA,OACEgvB,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAAS23C,OACTtuB,EAAArpB,SAAS03C,OACbtuD,EACApyB,KAAK8vE,YAAY3b,YAAYx0D,IAE/B,MAEF,OACA,OACEyyB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS23C,OAAQvuD,EAAMzyB,EAAO0D,IAAI,IACvD,MAEF,QACE+uB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS43C,OAAQxuD,EAAMzyB,EAAOkE,IAAI,IACvD,MAEF,QACEuuB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS63C,OAAQzuD,EAAMzyB,EAAOmE,IAAI,IACvD,MAEF,QACE+G,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMspC,YAQT,GAPA/mC,EAAOpyB,KAAK80E,kBACVjiD,EAAW6D,QACX0sC,EAAemc,WAAU,GAKvBv/E,KAAK8vE,YAAYvzD,GAAE,KAErB,GADI2P,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAasD,KAC5C,CACZslB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAStE,EAAMS,GACrE,MAMNT,EAAOpyB,KAAK2rF,eAAev5D,EAAMpyB,KAAK8vE,aACtC9vE,KAAK8vE,YAAcnmE,EAAA+H,KAAK9N,KACxB,MAEF,KAAKgsB,EAAAC,MAAMupC,MAYT,GAXAhnC,EAAOpyB,KAAK80E,kBACVjiD,EAAW6D,QACX0sC,GAAkBz5D,EAAA+H,KAAKG,KACnBlI,EAAA+H,KAAKtO,IACLggE,EAAe7mD,GAAE,GACf5S,EAAA+H,KAAKrO,IACL+/D,EAAc,GAKlBpjE,KAAK8vE,YAAYvzD,GAAE,KAAuB,CAC5C,IAAI2P,EAEEnB,EADN,GADImB,EAAiBlsB,KAAK8vE,YAAY5jD,eAGpC,GADInB,EAAWmB,EAAexB,eAAe0nC,EAAA5oD,aAAauD,aAC5C,CACZqlB,EAAOpyB,KAAK8iF,qBAAqB/3D,EAAU8H,EAAW6D,QAAStE,EAAMS,GACrE,MAOJ,OAJA7yB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAShB,OAPEtpB,EAAOpyB,KAAK29E,kBAAkBvrD,EAC5BpyB,KAAK8vE,YAAa9vE,KAAK8vE,YAAY4R,SACnC,GAAO,EACP7uD,EAAW6D,SAIP12B,KAAK8vE,YAAYx8D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASk5C,OAAQ9vD,EAAMzyB,EAAOyD,KAAK,IACxD,MAEF,OACA,OACEgvB,EAAOzyB,EAAO83C,OACZz3C,KAAKwR,QAAQc,SACT+/C,EAAArpB,SAASm5C,OACT9vB,EAAArpB,SAASk5C,OACb9vD,EACApyB,KAAK8vE,YAAY1b,eAAez0D,IAElC,MAEF,OACA,OACEyyB,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASm5C,OAAQ/vD,EAAMzyB,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACEwH,QAAO,GACPunB,EAAOzyB,EAAO+7C,cAGlB,MAEF,KAAK9rB,EAAAC,MAAMynC,OAKT,OAJAt3D,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfqS,EAAW9iB,OAENpQ,EAAO+7C,cAEhB,QAEE,OADA7wC,QAAO,GACAlL,EAAO+7C,cAGlB,IAAKqkC,EAAU,OAAO3tD,EACtB,IAAIxjB,EAAW5O,KAAK4O,SAChBgc,EAAShc,EAAS00D,kBAAkBzwC,EAAW6D,QAAS12B,KAAKkxE,aACjE,OAAKtmD,EACE5qB,KAAK6iF,eACVj4D,EACAwH,EACAS,EAAW6D,QACX9nB,EAASkyD,sBACTlyD,EAASmyD,yBACTqC,GAAkBz5D,EAAA+H,KAAKG,MAPLlS,EAAO+7C,eAY7Bi0B,EAAA1tE,UAAA27E,uBAAA,SAAuBxrD,EAAqBlW,GAC1C,IAAIvc,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YAChB,OAAQh1D,EAAK5I,MACX,OACMmU,EAAKokD,YAAYz5C,EAAMlW,KACzBkW,EAAOpyB,KAAKwR,QAAQW,WAAU,GAC1BxS,EAAO23C,MAAM+a,EAAA3uB,QAAQkoD,cAAex5D,GACpCzyB,EAAO83C,OAAO4a,EAAArpB,SAASglC,OACrBruE,EAAO83C,OAAO4a,EAAArpB,SAAS+kC,OACrB37C,EACAzyB,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACMqkB,EAAKokD,YAAYz5C,EAAMlW,KACzBkW,EAAOpyB,KAAKwR,QAAQW,WAAU,GAC1BxS,EAAO23C,MAAM+a,EAAA3uB,QAAQmoD,eAAgBz5D,GACrCzyB,EAAO83C,OAAO4a,EAAArpB,SAASglC,OACrBruE,EAAO83C,OAAO4a,EAAArpB,SAAS+kC,OACrB37C,EACAzyB,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACMqkB,EAAKokD,YAAYz5C,EAAMlW,KACzBkW,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS8kC,OAC5B17C,EACAzyB,EAAOyD,IAAI,OAGf,MAEF,OACMqkB,EAAKokD,YAAYz5C,EAAMlW,KACzBkW,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS8kC,OAC5B17C,EACAzyB,EAAOyD,IAAI,SAGf,MAEF,QACMqkB,EAAKokD,YAAYz5C,EAAMlW,KAEzBkW,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS2iC,MAC5Bv5C,EACAzyB,EAAOyD,IAAI,KAMnB,OAAOgvB,GAITu9C,EAAA1tE,UAAA63E,iBAAA,SAAiB1nD,EAAqBriB,GACpC,IAAIq4D,EAAiBpoE,KAAKkxE,YAAY9I,eAClCh5D,EAASW,EAAMX,OACfA,EAAO+Y,eAAiB,IAAG/Y,EAAO+Y,eAAiBnoB,KAAKL,OAAO6mD,iBAAiBp3C,EAAOF,iBAC3Fa,EAAMmY,aAAekK,EACrBg2C,EAAeliD,eAAe3H,KAAKxO,IAMrC4/D,EAAA1tE,UAAA0pF,eAAA,SAAev5D,EAAqBlW,GAClC,IAAIvc,EAASK,KAAKL,OAClB,OAAQuc,EAAK5I,MACX,OACA,OACA,OACA,OACA,QACE8e,EAAOpyB,KAAK49E,uBAAuBxrD,EAAMlW,GAG3C,OACA,OACE,OAAOvc,EAAO23C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQl5C,GAEtC,OACA,OACE,OAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ6nC,OAAQn5C,GAEtC,OAAyBpyB,KAAKqwE,oBAAoB/+D,IAAI8gB,KAAOA,EAAOpyB,KAAKwjF,gBAAgBpxD,IACzF,OACE,OAAOzyB,EAAO23C,MAAmB,IAAbp7B,EAAK2/B,KAAawW,EAAA3uB,QAAQ6nC,OAASlZ,EAAA3uB,QAAQ4nC,OAAQl5C,GAEzE,QACE,OAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASijC,MAAO75C,EAAMzyB,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAO83C,OAAO4a,EAAArpB,SAASkjC,MAAO95C,EAAMzyB,EAAOmE,IAAI,IAExD,QAEE,OADA+G,QAAO,GACAlL,EAAOyD,IAAI,KAMxBusE,EAAA1tE,UAAAq4E,cAAA,SAAcloD,EAAqBlW,GACjC,IAAIvc,EAASK,KAAKL,OAClB,OAAQuc,EAAK5I,MACX,OACA,OACA,OACA,OACE8e,EAAOpyB,KAAK49E,uBAAuBxrD,EAAMlW,GAG3C,QACA,OACA,OACE,OAAOkW,EAET,OACA,OACE,OAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAAS4iC,MAAOx5C,EAAMzyB,EAAO0D,IAAI,IAExD,OAAyBrD,KAAKqwE,oBAAoB/+D,IAAI8gB,KAAOA,EAAOpyB,KAAKwjF,gBAAgBpxD,IACzF,OACE,OAAoB,IAAblW,EAAK2/B,KACRl8C,EAAO83C,OAAO4a,EAAArpB,SAAS4iC,MAAOx5C,EAAMzyB,EAAO0D,IAAI,IAC/C+uB,EAEN,QACE,OAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASmjC,MAAO/5C,EAAMzyB,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAO83C,OAAO4a,EAAArpB,SAASojC,MAAOh6C,EAAMzyB,EAAOmE,IAAI,IAExD,QAEE,OADA+G,QAAO,GACAlL,EAAOyD,IAAI,KAMxBusE,EAAA1tE,UAAA00E,eAAA,SACEnnE,GAGA,IAAIqT,EAAU7iB,KAAK6iB,QACnBhY,OAAO2E,EAAcqT,SAAWA,GAChC,IAAIljB,EAASK,KAAKL,OACd6R,EAAUxR,KAAKwR,QACnBxR,KAAK8vE,YAActgE,EAAc0M,KACjC,IAAItC,EAAgBiJ,EAAQjJ,cAE5B,OADA5Z,KAAKg2E,gBAAgBp8D,GACdja,EAAOa,KAAKoZ,EAAcjL,aAAc,CAC7C6C,EAAQc,SACJ3S,EAAO0D,IAAImM,EAAcma,qBACzBhqB,EAAOyD,IAAIoM,EAAcma,qBAC7BhqB,EAAOyD,IACLoM,EAAc6I,aAAa+5C,EAAA/kD,eAAeoL,WACtC,EACAjJ,EAAcG,KAEnB6B,EAAQ+hE,iBAIb5D,EAAA1tE,UAAA20E,wBAAA,SACEpnE,EACA2mE,gBAAA,IAAAA,MAAA,IAEA,IAAIp6D,EAAUvM,EAAcuM,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAIpc,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACZuE,EAAWhuD,EAAKlL,GAAE,OAClBuvE,EAAiBrW,EACjB5qE,OAAO4c,EAAK09C,YAAY17D,EAAAzG,cAAcoC,QAAQ6f,MAC9C,EACAsuD,EAAiBvzE,KAAKwR,QAAQ+hE,mBAElC,IAAmB,IAAAxvD,EAAAnP,EAAAmH,EAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAAhC,IAAIyG,EAAMF,EAAA/Z,MACb,GACEia,EAAOjI,MAAQ8+C,EAAAhlD,YAAYyO,OAC3BN,EAAOvK,QAAUxB,EAFnB,CAKA,IAAI0b,EAAe3P,EAAQ1Q,QAAQqgB,EAAMpM,MAAMrV,EAAApH,YAAYqa,QAC3D,IAAIyqD,EAAYj8C,EAAMhP,KAClB8nE,EAAkB7c,EAAUlT,eAC5B4gB,EAAkB3pD,EAAMjpB,UAAU4yE,gBACtC,GAAIA,EAAiB,CACnB,IAAIF,EAAW30E,KAAK80E,kBAAkBD,EAAiB1N,EACrD,IAEEA,EAAUiM,YAAcpzE,KAAKqwE,oBAAoB/+D,IAAIqjE,KACvDA,EAAW30E,KAAKqzE,WAAWsB,IAE7BwB,EAAM53D,KACJ5e,EAAOy3C,MAAM+vB,EAAUzU,SACrB/yD,EAAOo4C,UAAU+zC,EAAgBvY,GACjCoB,EACAqP,EACA94D,EAAMrC,mBAGL,CACL,IAAIF,EAAiBuC,EAAMjpB,UAAU0mB,eACrCwtD,EAAM53D,KACJ5e,EAAOy3C,MAAM+vB,EAAUzU,SACrB/yD,EAAOo4C,UAAU+zC,EAAgBvY,GACjC5qD,GAAkB,EACdhpB,EAAOo4C,UACL09B,EACI5qE,OAAO4c,EAAK09C,YAAYj6C,EAAMtqB,OAAOqkB,MACrC,EAAI0D,EACRq7D,GAEF7c,EAAUjT,aAAav0D,GAC3BqkF,EACA94D,EAAMrC,mHAKd,OAAOstD,GAGTxG,EAAA1tE,UAAA8pF,oBAAA,SACE35D,EACA5iB,GAEA,IAAI7P,EAASK,KAAKL,OACd8nB,EAAOznB,KAAKkxE,YACZ8a,EAASvkE,EAAKohD,aAAal/D,EAAA+H,KAAKtO,KAChC6oF,EAAStsF,EAAO04C,KAAK,GAAG,EAC1B14C,EAAO83C,OAAO4a,EAAArpB,SAAS03C,OACrBtuD,EACAzyB,EAAOyD,IAAIpD,KAAK6iB,QAAQ+0D,oBAE1BvlB,EAAAjyB,WAAWh6B,KAET6wB,EAAQ,cAAgBznB,EAAc5O,KAAO,IAAM6mB,EAAK0iD,iBACxD+hB,EAA8B,GAmBlC,OAlBAA,EAAW3tE,KACT5e,EAAO26C,KACL36C,EAAOy6C,GAAGnjB,EACRt3B,EAAO83C,OAAO4a,EAAArpB,SAASyiC,MACrB9rE,EAAOs4C,UAAU+zC,EAAO/mE,MAAOgnE,GAC/BtsF,EAAOyD,IAAIoM,EAAcG,KAE3BhQ,EAAOyD,IAAI,MAMjB8oF,EAAW3tE,KACT5e,EAAOyD,IAAI,IAEbqkB,EAAK6hD,cAAc0iB,GACnBvkE,EAAK4iD,gBACE1qE,EAAOs6C,MAAMhjB,EAAOi1D,EAAY75B,EAAAjyB,WAAWh6B,MAEtDupE,EAjgRA,CAA8BjmE,EAAAiZ,mBAqgR9B,SAASwyD,EACPx/D,EACAtE,GAcA,GAXAo+D,EAA8Bp+D,EAAYtB,MAAMX,OAAOqvB,WAEvDixC,EAA+Btd,EAAAluC,mBAC7BvO,EAAQ/U,KAAM+U,EAAQ3E,OAAQ2E,EAAQ4G,GAAG9S,EAAApH,YAAYggB,WAAW,GAG9D1M,EAAQ3E,QAAU2E,EAAQ3E,OAAOsC,MAAQ8+C,EAAAhlD,YAAYgX,YACvDqrD,EAA8B,MAC9BC,EAA+B/5D,EAAQ/U,MAGpC+U,EAAQ0C,aAAa+5C,EAAA/kD,eAAe+U,UAAzC,CAEA,IAAIS,EAAUlN,EAAQkN,QAClBnF,EAAY7S,OAAOjB,EAAAs2B,cAAct2B,EAAAmB,cAAcqX,SAAU/Q,EAAYmM,aACrEoU,EAAOlU,EAAUwC,UACrB,GAAI0R,GAAQA,EAAK9mB,OAAQ,CACvB,IAAIF,EAAMgnB,EAAK,GAGXhnB,EAAI0I,MAAQ1J,EAAA2J,SAAS6M,SAA+BxV,EAAKyV,aAAezW,EAAA0W,YAAYC,QACtFmvD,EAAyD9kE,EAAKtJ,MAC1DswB,EAAK9mB,QAAU,KACjBF,EAAMgnB,EAAK,IACHte,MAAQ1J,EAAA2J,SAAS6M,SAA+BxV,EAAKyV,aAAezW,EAAA0W,YAAYC,QACtFkvD,EAA8BC,EAC9BA,EAAyD9kE,EAAKtJ,MAC1DswB,EAAK9mB,OAAS,GAChB+X,EAAQtN,MACN7L,EAAA8L,eAAesL,+BACfpD,EAAU3N,MAAO,IAAK6hB,EAAK9mB,OAAOkT,aAItC6E,EAAQtN,MACN7L,EAAA8L,eAAeqL,wBACfjW,EAAImF,SAKV8S,EAAQtN,MACN7L,EAAA8L,eAAeqL,wBACfjW,EAAImF,YAIR8S,EAAQtN,MACN7L,EAAA8L,eAAeiwE,wCACf/nE,EAAU3N,MAAO,IAAK,MAS5B,SAAgBknE,EAAQt3E,EAAgBw2E,EAAwBj6D,GAC9D,IAAIpR,EAASqrE,EAAMrrE,OACnB,GAAc,GAAVA,EAAa,OAAOnL,EAAOi7C,MAC/B,GAAc,GAAV9vC,EAAa,CACf,IAAIqhF,EAAShW,EAAM,GACnB,GAAI9jB,EAAAnL,kBAAkBilC,IAAWjwE,EAAM,OAAOiwE,EAC9C,GAAI95B,EAAApL,gBAAgBklC,IAAW95B,EAAAhyB,aAAakuB,MAAO,CAGjD,IAFA,IAAI4tB,EAAQ9pB,EAAAlJ,mBAAmBgjC,GAC3BjyC,EAAW,IAAIjzC,MAAqBk1E,GAC/B97E,EAAI,EAAGA,EAAI87E,IAAS97E,EAAG65C,EAAS75C,GAAKgyD,EAAAhJ,cAAc8iC,EAAQ9rF,GACpE,OAAOV,EAAOs6C,MAAMoY,EAAApJ,aAAakjC,GAASjyC,EAAUh+B,IAGxD,OAAOvc,EAAOs6C,MAAM,KAAMk8B,EACxBj6D,GAAQm2C,EAAAjyB,WAAWgsD,KACf/5B,EAAAnL,kBAAkBivB,EAAMrrE,EAAS,IACjCoR,GAplRKxc,EAAAiwE,WAokRbjwE,EAAAu3E,yFCz0RA,SAAYzhE,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,uEACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,mFACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,6FACAA,IAAA,+FACAA,IAAA,iGACAA,IAAA,2DACAA,IAAA,iIACAA,IAAA,yDACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,8FACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,kIACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,oMACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,gIACAA,IAAA,8HACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,sMACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,wDACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0IACAA,IAAA,kDACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HACAA,IAAA,6KACAA,IAAA,2MAtIF,CAAY9V,EAAA8V,iBAAA9V,EAAA8V,eAAc,KA0I1B9V,EAAAouB,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,mkBCrRnB,IAoFgBu3C,EApFhB6mB,EAAAlsF,EAAA,IAODuJ,EAAAvJ,EAAA,GAIAyJ,EAAAzJ,EAAA,GAUAwJ,EAAAxJ,EAAA,GAOAkyD,EAAAlyD,EAAA,GAsBAiyD,EAAAjyD,EAAA,GASA6J,EAAA7J,EAAA,IAKA4J,EAAA5J,EAAA,GAIAsJ,EAAAtJ,EAAA,GAMA0J,EAAA1J,EAAA,GAubA,SAAgBklF,EAEdiH,EAEArqF,EAEAunB,EAEAouB,EAEAwrB,EAEAmD,EAEAgmB,QAAA,IAAAA,OAAA,GAEA,IAAI5sF,EAAS2sF,EAAS3sF,OAUlB6sF,GAAY,EAEhB,OAAQvqF,EAAU0M,cAIhB,KAAK62D,EAAeinB,UAClB,IAAIvwE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEA,EAAKK,GAAE,KAAwBL,EAAKK,GAAE,KACzC5c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO+7C,cAK3B,KAAK8pB,EAAemnB,QACdzwE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEA,EAAKK,GAAE,GACV5c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO+7C,cAK3B,KAAK8pB,EAAeonB,UACd1wE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEA,GAAQvS,EAAA+H,KAAK9N,KAChBjE,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO+7C,cAK3B,KAAK8pB,EAAeqnB,SACd3wE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEA,EAAKK,GAAE,GACV5c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO+7C,cAK3B,KAAK8pB,EAAesnB,YACd5wE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEA,EAAKK,GAAE,KACV5c,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO+7C,cAK3B,KAAK8pB,EAAeunB,SACd7wE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,GADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,MACvBsY,EAAM,OAAOvc,EAAO+7C,cAEzB,GADI6X,EAAYr3C,EAAKgQ,eACN,CACb,IAAIjV,EAAiBq1E,EAASzpE,QAAQ5L,eACtC,GAAIA,GAAkBs8C,EAAU5oC,eAAe1T,GAAiB,OAAOtX,EAAOyD,IAAI,GAEpF,OAAOzD,EAAOyD,IAAI,GAEpB,KAAKoiE,EAAewnB,QACd9wE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,GADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,MACvBsY,EAAM,OAAOvc,EAAO+7C,cAEzB,KADIxvB,GAAiBhQ,EAAKgQ,gBACL,OAAOvsB,EAAOyD,IAAI,GACvC,IAAI4c,EAAiBkM,GAAejqB,UACpC,OAAOtC,EAAOyD,IAAI4c,EAAeqJ,QAAQijE,EAASzpE,QAAQvJ,gBAAkB,EAAI,GAElF,KAAKksD,EAAeynB,YACd/wE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,GACDgQ,GAAiBhQ,EAAKgQ,gBAEnBvsB,EAAOyD,IAAI8oB,GAAe+gE,YAAc,EAAI,GADvBttF,EAAOyD,IAAI,GAFrBzD,EAAO+7C,cAK3B,KAAK8pB,EAAe0nB,WACdhxE,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEvc,EAAOyD,IAAI8Y,EAAK02C,mBAAqB,EAAI,GAD9BjzD,EAAO+7C,cAG3B,KAAK8pB,EAAe10C,WACd5U,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEvc,EAAOyD,IAAI8Y,EAAKK,GAAE,KAAuB,EAAI,GADlC5c,EAAO+7C,cAG3B,KAAK8pB,EAAe2nB,UAElB,GADAb,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KAE1BwpF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAI/lC,EAAU22E,EAAS19E,SAAS00D,kBAC9B1rB,EAAS,GACT00C,EAASpb,YACTvnE,EAAA+H,KAAKG,KACL9H,EAAA62D,WAAW0sB,SAEb,OAAO3tF,EAAOyD,IAAIuS,EAAU,EAAI,GAElC,KAAK6vD,EAAe+nB,WAElB,GADAjB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KAE1BwpF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAItpB,EAAOk6D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKwhD,MAExD,OADAo5B,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACrBjE,EAAOyD,IAAIivD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAAQ,EAAI,GAEtE,KAAKygB,EAAe4N,UACdl3D,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACvBsY,EACEvc,EAAOyD,IAAI8Y,EAAKk3D,UAAY,EAAI,GADrBzzE,EAAO+7C,cAG3B,KAAK8pB,EAAegoB,OAElB,GADAlB,EAASxc,YAAcwc,EAAS96E,QAAQI,UAEtC67E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAIgX,EAAoBlpC,EAAe,GAAGkpC,SACtCtgC,OAAI,EAkBR,OAjBIk6D,EAAS96E,QAAQc,SAEf8wD,EAAe7mD,GAAE,IAAuB6mD,EAAevnB,MAAQ,IACjEywC,EAASxc,YAAcnmE,EAAA+H,KAAKjO,IAC5B2uB,EAAOzyB,EAAOyD,IAAIsvD,IAElBtgC,EAAOzyB,EAAO0D,IAAIqvD,EAAU,GAI1B0Q,EAAe7mD,GAAE,IAA8C,IAAvB6mD,EAAevnB,MACzDywC,EAASxc,YAAcnmE,EAAA+H,KAAKhO,IAC5B0uB,EAAOzyB,EAAO0D,IAAIqvD,EAAU,IAE5BtgC,EAAOzyB,EAAOyD,IAAIsvD,GAGftgC,EAET,KAAKozC,EAAekoB,QAElB,GADApB,EAASxc,YAAcwc,EAAS96E,QAAQI,UAEtC67E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZgX,EAAoBlpC,EAAe,GAAGkpC,SAC1C7nD,OAAOhB,EAAAmjB,WAAW0lC,IAClB,IAAIw3B,EAAYyD,IAASj7B,GACrBtgC,OAAI,EAkBR,OAjBIk6D,EAAS96E,QAAQc,SAEf8wD,EAAe7mD,GAAE,IAAuB6mD,EAAevnB,MAAQ,IACjEywC,EAASxc,YAAcnmE,EAAA+H,KAAKjO,IAC5B2uB,EAAOzyB,EAAOyD,IAAI8mF,IAElB93D,EAAOzyB,EAAO0D,IAAI6mF,EAAW,GAI3B9mB,EAAe7mD,GAAE,IAA8C,IAAvB6mD,EAAevnB,MACzDywC,EAASxc,YAAcnmE,EAAA+H,KAAKhO,IAC5B0uB,EAAOzyB,EAAO0D,IAAI6mF,EAAW,IAE7B93D,EAAOzyB,EAAOyD,IAAI8mF,GAGf93D,EAET,KAAKozC,EAAex6C,SAElB,GADAshE,EAASxc,YAAcwc,EAAS96E,QAAQI,UAEtC67E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cAChB,IAAI6X,EACJ,KADIA,EAAY/pC,EAAe,GAAG0C,gBAMhC,OAJAogE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEhB,IAAInsC,OAAM,EACV,GAAIqoC,EAAS9sC,OAAQ,CACnB,GACE8sC,EAAS,GAAGtkC,MAAQ1J,EAAA2J,SAAS6M,SACTw3B,EAAS,GAAIv3B,aAAezW,EAAA0W,YAAYC,OAM5D,OAJA+rE,EAAS/2E,MACP7L,EAAA8L,eAAeqL,wBACf+2B,EAAS,GAAG7nC,OAEPpQ,EAAO+7C,cAEhB,IAAIzwB,EAAsC2sB,EAAS,GAAIt2C,MACnD4pB,EAAQqoC,EAAUx3C,QAAUw3C,EAAUx3C,QAAQ7a,IAAI+pB,GAAa,KACnE,IAAMC,GAASA,EAAM5X,MAAQ8+C,EAAAhlD,YAAYyO,MAKvC,OAJAywE,EAAS/2E,MACP7L,EAAA8L,eAAes4E,yBACfl2C,EAAS,GAAG7nC,MAAOwjD,EAAU5kD,aAAcsc,GAEtCtrB,EAAO+7C,cAEhBnsC,EAAiB2b,EAAOrC,kBAExBtZ,EAASgkD,EAAU5pC,oBAErB,OAAI2iE,EAAS96E,QAAQc,SAEf8wD,EAAe7mD,GAAE,IAAuB6mD,EAAevnB,MAAQ,IACjEywC,EAASxc,YAAcnmE,EAAA+H,KAAKjO,IACrB9D,EAAOyD,IAAImM,IAEX5P,EAAO0D,IAAIkM,GAIhB6zD,EAAe7mD,GAAE,IAA8C,IAAvB6mD,EAAevnB,MACzDywC,EAASxc,YAAcnmE,EAAA+H,KAAKhO,IACrB/D,EAAO0D,IAAIkM,IAEX5P,EAAOyD,IAAImM,GAOxB,KAAKi2D,EAAerS,IACpB,KAAKqS,EAAemoB,IACpB,KAAKnoB,EAAeuoB,OAClB,GACEC,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAIttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,GAEpD,IADI8Y,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEhB,IAAInE,GAAe,EACnB,OAAQt1C,EAAU0M,cAChB,KAAK62D,EAAerS,IAClB,OAAQj3C,EAAK5I,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQ2qC,OAAQ,MAC1C,OACA,OACE92B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQuqD,OACR57B,EAAA3uB,QAAQ2qC,OACZ,MAEF,OACA,OAAqB92B,EAAK8a,EAAA3uB,QAAQuqD,OAEpC,MAEF,KAAKzoB,EAAemoB,IAClB,OAAQzxE,EAAK5I,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQ4qC,OAAQ,MAC1C,OACA,OACE/2B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQwqD,OACR77B,EAAA3uB,QAAQ4qC,OACZ,MAEF,OACA,OAAqB/2B,EAAK8a,EAAA3uB,QAAQwqD,OAEpC,MAEF,KAAK1oB,EAAeuoB,OAClB,OAAQzB,EAASxc,YAAYx8D,MAC3B,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQ6qC,UAAW,MAC7C,OACA,OACEh3B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQyqD,UACR97B,EAAA3uB,QAAQ6qC,UACZ,MAEF,OACA,OAAqBh3B,EAAK8a,EAAA3uB,QAAQyqD,WAKxC,OAAW,GAAP52C,GACF+0C,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,eAET/7C,EAAO23C,MAAMC,EAAInpB,GAE1B,KAAKo3C,EAAe4oB,KAClB,GACEJ,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,GAEpD,IADI8Y,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEhB,IAAIrtB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GACnDkW,OAAI,EACR,OAAQlW,EAAK5I,MACX,OACA,OACA,OACA,OACA,QACE8e,EAAOk6D,EAAS1O,uBACdj+E,EAAO83C,OAAO4a,EAAArpB,SAASqlD,QAASjgE,EAAMC,GACtCnS,GAIJ,OACA,OACEkW,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASqlD,QAASjgE,EAAMC,GAC7C,MAEF,OACA,OACE+D,EAAOzyB,EAAO83C,OACZ60C,EAAS96E,QAAQc,SACb+/C,EAAArpB,SAASslD,QACTj8B,EAAArpB,SAASqlD,QACbjgE,EAAMC,GAER,MAEF,OACA,OACE+D,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASslD,QAASlgE,EAAMC,GAC7C,MAEF,QACEi+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAIlB,OAAOtpB,EAET,KAAKozC,EAAe+oB,KAClB,GACEP,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,GAEpD,IADI8Y,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZrtB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GACnDkW,OAAI,EACR,OAAQlW,EAAK5I,MACX,OACA,OACA,OACA,OACA,QACE8e,EAAOk6D,EAAS1O,uBACdj+E,EAAO83C,OAAO4a,EAAArpB,SAASwlD,QAASpgE,EAAMC,GACtCnS,GAEF,MAEF,OACA,OACEkW,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASwlD,QAASpgE,EAAMC,GAC7C,MAEF,OACA,OACE+D,EAAOzyB,EAAO83C,OACZ60C,EAAS96E,QAAQc,SACb+/C,EAAArpB,SAASylD,QACTp8B,EAAArpB,SAASwlD,QACbpgE,EAAMC,GAER,MAEF,OACA,OACE+D,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASylD,QAASrgE,EAAMC,GAC7C,MAEF,QACEi+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAIlB,OAAOtpB,EAET,KAAKozC,EAAekpB,IAClB,GACEV,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZtpB,OAAI,EACR,OAAQlW,EAAK5I,MACX,OACA,OACA,OACE,IAGIq7E,GAHAlnE,EAAO6kE,EAASpb,aAGErI,aAAal/D,EAAA+H,KAAKtO,KACpCwrF,EAAkBnnE,EAAK8hD,oBAAoB5/D,EAAA+H,KAAKtO,KAAK6hB,MACrD4pE,EAAkBF,EAAW1pE,MAGjCmN,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASk5C,OAC5BviF,EAAO83C,OAAO4a,EAAArpB,SAAS8sC,OACrBn2E,EAAOs4C,UACL22C,EACAjvF,EAAO83C,OAAO4a,EAAArpB,SAASglC,OACrBruE,EAAOs4C,UAAU42C,EAAiBzgE,GAClCzuB,EAAOyD,IAAI,MAGfzD,EAAOo4C,UAAU82C,EAAiBx8B,EAAAjyB,WAAWh6B,MAE/CzG,EAAOo4C,UAAU62C,EAAiBv8B,EAAAjyB,WAAWh6B,MAG/CqhB,EAAK6hD,cAAcqlB,GACnB,MAEF,OACE,IAAIn9E,EAAU86E,EAAS96E,QACnBiW,EAAO6kE,EAASpb,YAChB4d,EAASt9E,EAAQc,SAEjBq8E,EAAalnE,EAAKohD,aAAar3D,EAAQI,WACvCg9E,EAAkBnnE,EAAK8hD,oBAAoB/3D,EAAQI,WAAWqT,MAC9D4pE,EAAkBF,EAAW1pE,MAEjCmN,EAAOzyB,EAAO83C,OAAOq3C,EAASz8B,EAAArpB,SAASm5C,OAAS9vB,EAAArpB,SAASk5C,OACvDviF,EAAO83C,OAAOq3C,EAASz8B,EAAArpB,SAASu3C,OAASluB,EAAArpB,SAAS8sC,OAChDn2E,EAAOs4C,UACL22C,EACAjvF,EAAO83C,OAAOq3C,EAASz8B,EAAArpB,SAAS64C,OAASxvB,EAAArpB,SAASglC,OAChDruE,EAAOs4C,UAAU42C,EAAiBzgE,GAClC0gE,EAASnvF,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAGzCzD,EAAOo4C,UAAU82C,EAAiBr9E,EAAQ+hE,iBAE5C5zE,EAAOo4C,UAAU62C,EAAiBp9E,EAAQ+hE,iBAG5C9rD,EAAK6hD,cAAcqlB,GACnB,MAEF,OAGMA,GAFAlnE,EAAO6kE,EAASpb,aAEErI,aAAal/D,EAAA+H,KAAKrO,KACpCurF,EAAkBnnE,EAAK8hD,oBAAoB5/D,EAAA+H,KAAKrO,KAAK4hB,MACrD4pE,EAAkBF,EAAW1pE,MAGjCmN,EAAOzyB,EAAO83C,OAAO4a,EAAArpB,SAASm5C,OAC5BxiF,EAAO83C,OAAO4a,EAAArpB,SAASu3C,OACrB5gF,EAAOs4C,UACL22C,EACAjvF,EAAO83C,OAAO4a,EAAArpB,SAAS64C,OACrBliF,EAAOs4C,UAAU42C,EAAiBzgE,GAClCzuB,EAAO0D,IAAI,MAGf1D,EAAOo4C,UAAU82C,EAAiBx8B,EAAAjyB,WAAW/5B,MAE/C1G,EAAOo4C,UAAU62C,EAAiBv8B,EAAAjyB,WAAW/5B,MAG/CohB,EAAK6hD,cAAcqlB,GACnB,MAEF,OACA,OACA,OACA,OACA,OACA,QACEv8D,EAAOhE,EACP,MAEF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQqrD,OAAQ3gE,GACpC,MAEF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQsrD,OAAQ5gE,GACpC,MAEF,QACEk+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAIlB,OAAOtpB,EAET,KAAKozC,EAAe2F,IAClB,GACE6iB,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZrtB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAM,GACrDq7B,OAAE,EACN,OAAQr7B,EAAK5I,MACX,OACA,OACA,OAAqBikC,EAAK8a,EAAArpB,SAASikC,MAAO,MAC1C,OACA,OACA,OACA,QAAsB11B,EAAK8a,EAAArpB,SAASkkC,MAAO,MAC3C,OAAqB31B,EAAK8a,EAAArpB,SAASmkC,MAAO,MAC1C,OAAqB51B,EAAK8a,EAAArpB,SAASokC,MAAO,MAC1C,OACE71B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAArpB,SAASmkC,MACT9a,EAAArpB,SAASikC,MACb,MAEF,OACE11B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAArpB,SAASokC,MACT/a,EAAArpB,SAASkkC,MACb,MAEF,QACE,OAAOvtE,EAAO83C,OAAO4a,EAAArpB,SAASimD,OAAQ7gE,EAAMC,GAE9C,QACE,OAAO1uB,EAAO83C,OAAO4a,EAAArpB,SAASkmD,OAAQ9gE,EAAMC,GAE9C,QAKE,OAJAi+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAGdj0B,EAAO6kE,EAASpb,YAApB,IACIoC,EAAap3D,EAAK+3C,eAClBk7B,EAAa1nE,EAAKohD,aAAa3sD,GACnCuL,EAAK2hD,aAAa+lB,EAAWlqE,MAAOjb,EAAA69D,WAAWiE,SAC3C6iB,EAAalnE,EAAK8hD,oBAAoBrtD,GAG1C,OAFAuL,EAAK2hD,aAAaulB,EAAW1pE,MAAOjb,EAAA69D,WAAWiE,SAC/CrkD,EAAK6hD,cAAc6lB,GACZxvF,EAAOq7C,OACZr7C,EAAOs4C,UAAUk3C,EAAWlqE,MAAOmJ,GACnCzuB,EAAOs4C,UAAU02C,EAAW1pE,MAAOoJ,GACnC1uB,EAAO83C,OAAOF,EACZ53C,EAAOo4C,UAAUo3C,EAAWlqE,MAAOquD,GACnC3zE,EAAOo4C,UAAU42C,EAAW1pE,MAAOquD,KAIzC,KAAK9N,EAAe4pB,IAClB,GACEpB,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZrtB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAM,GACrDq7B,OAAE,EACN,OAAQr7B,EAAK5I,MACX,OACA,OACA,OAAqBikC,EAAK8a,EAAArpB,SAASqjC,MAAO,MAC1C,OACA,OACA,OACA,QAAsB90B,EAAK8a,EAAArpB,SAASsjC,MAAO,MAC3C,OAAsB/0B,EAAK8a,EAAArpB,SAASujC,MAAO,MAC3C,OAAsBh1B,EAAK8a,EAAArpB,SAASwjC,MAAO,MAC3C,OACEj1B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAArpB,SAASujC,MACTla,EAAArpB,SAASqjC,MACb,MAEF,OACE90B,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAArpB,SAASwjC,MACTna,EAAArpB,SAASsjC,MACb,MAEF,QACE,OAAO3sE,EAAO83C,OAAO4a,EAAArpB,SAASqmD,OAAQjhE,EAAMC,GAE9C,QACE,OAAO1uB,EAAO83C,OAAO4a,EAAArpB,SAASsmD,OAAQlhE,EAAMC,GAE9C,QAKE,OAJAi+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAGdj0B,EAAO6kE,EAASpb,YAChBoC,EAAap3D,EAAK+3C,eAClBk7B,EAAa1nE,EAAKohD,aAAa3sD,GACnCuL,EAAK2hD,aAAa+lB,EAAWlqE,MAAOjb,EAAA69D,WAAWiE,SAC3C6iB,EAAalnE,EAAK8hD,oBAAoBrtD,GAG1C,OAFAuL,EAAK2hD,aAAaulB,EAAW1pE,MAAOjb,EAAA69D,WAAWiE,SAC/CrkD,EAAK6hD,cAAc6lB,GACZxvF,EAAOq7C,OACZr7C,EAAOs4C,UAAUk3C,EAAWlqE,MAAOmJ,GACnCzuB,EAAOs4C,UAAU02C,EAAW1pE,MAAOoJ,GACnC1uB,EAAO83C,OAAOF,EACZ53C,EAAOo4C,UAAUo3C,EAAWlqE,MAAOquD,GACnC3zE,EAAOo4C,UAAU42C,EAAW1pE,MAAOquD,KAIzC,KAAK9N,EAAe7S,KACpB,KAAK6S,EAAe+pB,MAClB,GACEvB,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,GACxD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZnE,OAAE,EACN,OAAQr7B,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,OAAO8a,EAC3B,QACEmpB,EAAKt1C,EAAU0M,cAAgB62D,EAAe7S,KAC1CN,EAAA3uB,QAAQ8rD,QACRn9B,EAAA3uB,QAAQ+rD,SACZ,MAEF,QACEl4C,EAAKt1C,EAAU0M,cAAgB62D,EAAe7S,KAC1CN,EAAA3uB,QAAQgsD,QACRr9B,EAAA3uB,QAAQisD,SACZ,MAEF,QAKE,OAJArD,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAGlB,OAAO/7C,EAAO23C,MAAMC,EAAInpB,GAE1B,KAAKo3C,EAAeoqB,SAClB,GACE5B,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,GACxD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZrtB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GACnDq7B,OAAE,EACN,OAAQr7B,EAAK5I,MAEX,QAAqBikC,EAAK8a,EAAArpB,SAAS6mD,YAAa,MAChD,QAAqBt4C,EAAK8a,EAAArpB,SAAS8mD,YAAa,MAChD,QAKE,OAJAxD,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAGlB,OAAO/7C,EAAO83C,OAAOF,EAAInpB,EAAMC,GAEjC,KAAKm3C,EAAeuqB,QAClB,GACE/B,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,GACxD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZtpB,OAAI,EACR,OAAQlW,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOhE,EACP,MAEF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQssD,WAAY5hE,GACxC,MAEF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQusD,WAAY7hE,GACxC,MAEF,QACEk+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAIlB,OAAOtpB,EAET,KAAKozC,EAAe0qB,YAClB,GACEzC,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAEhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAASxc,YAAc5zD,EACvBowE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZtpB,OAAI,EACR,OAAQlW,EAAK5I,MACX,OACA,OACM8a,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK7N,IAAG,GAC3DuuB,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQysD,eAAgB/hE,GAC5C,MAEF,OACA,OACMA,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAC3DsuB,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ0sD,eAAgBhiE,GAC5C,MAEF,OACA,OACMA,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQc,SACb3I,EAAA+H,KAAK5N,IACL6F,EAAA+H,KAAK7N,IAAG,GAGduuB,EAAOzyB,EAAO23C,MACZg1C,EAAS96E,QAAQc,SACb+/C,EAAA3uB,QAAQ0sD,eACR/9B,EAAA3uB,QAAQysD,eACZ/hE,GAEF,MAEF,QACMA,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,GAC3DgvB,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ2sD,eAAgBjiE,GAC5C,MAEF,QACMA,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKrO,IAAG,GAC3D+uB,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ4sD,eAAgBliE,GAC5C,MAEF,QACEk+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAKlB,OADA4wC,EAASxc,YAAc5zD,EAChBkW,EAET,KAAKozC,EAAe+qB,KAClB,GACEvC,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,GACxD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAMT,OALA+vE,EAASxc,YAAc5zD,EACvBowE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZtpB,OAAI,EACR,OAAQlW,EAAK5I,MACX,QACE8e,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ8sD,QAASpiE,GACrC,MAEF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQ+sD,QAASriE,GACrC,MAEF,QACEk+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAIlB,OAAOtpB,EAET,KAAKozC,EAAekrB,MAClB,GACE1C,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,GACxD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAEpD,IADIoY,EAAOowE,EAASxc,aACXvzD,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,OAENpQ,EAAO+7C,cAEZtpB,OAAI,EACR,OAAQlW,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOhE,EACP,MAGF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQitD,SAAUviE,GACtC,MAEF,QACEgE,EAAOzyB,EAAO23C,MAAM+a,EAAA3uB,QAAQktD,SAAUxiE,GACtC,MAEF,QACEk+D,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOzyB,EAAO+7C,cAIlB,OAAOtpB,EAKT,KAAKozC,EAAentB,KAClB,GACEo1C,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cACZx/B,EAAOsN,EAAe,GAA1B,IACIqnE,EACFztB,GAAkBz5D,EAAA+H,KAAKwhD,MACvBh3C,EAAKK,GAAE,IACP6mD,EAAe7mD,GAAE,IACjB6mD,EAAevnB,KAAO3/B,EAAK2/B,KACzBunB,EAAiBlnD,EACjBkS,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAK5B,IADIk/E,GADA1I,GAAcxwC,EAAS9sC,SACI,EAAIimF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACpE,EAEd,OADAA,EAASxc,YAAc+gB,EAChBlxF,EAAO+7C,cAEhB,IAAIs1C,OAAQ,EACRC,EAAe/0E,EAAKw2C,SACxB,GAAmB,GAAf01B,GAAkB,CAEpB,IADA4I,EAAWD,EAAwBn5C,EAAS,GAAI00C,IACjC,EAEb,OADAA,EAASxc,YAAc+gB,EAChBlxF,EAAO+7C,cAEhB,GAAIs1C,EAAWC,EAMb,OALA3E,EAAS/2E,MACP7L,EAAA8L,eAAe07E,6CACft5C,EAAS,GAAG7nC,MAAO,YAAa,IAAKkhF,EAAajzE,YAEpDsuE,EAASxc,YAAc+gB,EAChBlxF,EAAO+7C,cAEhB,IAAK7xC,EAAAmjB,WAAWgkE,GAMd,OALA1E,EAAS/2E,MACP7L,EAAA8L,eAAe27E,0BACfv5C,EAAS,GAAG7nC,MAAO,aAErBu8E,EAASxc,YAAc+gB,EAChBlxF,EAAO+7C,mBAGhBs1C,EAAWC,EAGb,OADA3E,EAASxc,YAAc+gB,EAChBlxF,EAAO04C,KACZn8B,EAAKw2C,SACLx2C,EAAKK,GAAG,GACR6R,EACAyiE,EAAQ58B,eACR68B,EACAE,GAGJ,KAAKxrB,EAAepuB,MAElB,GADAk1C,EAASxc,YAAcnmE,EAAA+H,KAAKG,KAE1B47E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cACZx/B,EAAOsN,EAAe,GACtB4E,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAGxByc,EAAOk+D,EACPD,EAASxX,kBAAkBl9B,EAAS,GAClCwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACT17B,EACAA,EAAKK,GAAE,GACJ,EACA,GAfT,IAiBI60E,EAAS9E,EAASxc,YAgBtB,GAdE5zD,EAAKK,GAAE,MAEJ60E,EAAO70E,GAAE,IACV60E,EAAOv1C,KAAO3/B,EAAK2/B,QAGrBxtB,EAAOi+D,EAAS3O,kBAAkBtvD,EAChC+iE,EAAQl1E,GACR,GAAO,EACP07B,EAAS,IAEXw5C,EAASl1E,IAEP40E,EAAYl5C,EAAS9sC,QAAU,EAAIimF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,EAEd,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,cAEZs1C,OAAQ,EACRC,EAAe/0E,EAAKw2C,SACxB,GAAuB,GAAnB9a,EAAS9sC,OAAa,CAExB,IADAkmF,EAAWD,EAAwBn5C,EAAS,GAAI00C,IACjC,EAEb,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,cAEhB,GAAIs1C,EAAWC,EAMb,OALA3E,EAAS/2E,MACP7L,EAAA8L,eAAe07E,6CACft5C,EAAS,GAAG7nC,MAAO,YAAa,IAAKkhF,EAAajzE,YAEpDsuE,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,cAEhB,IAAK7xC,EAAAmjB,WAAWgkE,GAMd,OALA1E,EAAS/2E,MACP7L,EAAA8L,eAAe27E,0BACfv5C,EAAS,GAAG7nC,MAAO,aAErBu8E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,mBAGhBs1C,EAAWC,EAGb,OADA3E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOy3C,MAAMl7B,EAAKw2C,SAAUtkC,EAAMC,EAAM+iE,EAAOn9B,eAAgB68B,EAAWE,GAKnF,KAAKxrB,EAAe5sB,YAClB,IAAK0zC,EAAS96E,QAAQW,WAAU,IAAmB,MACnD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cAEZm1C,GADA30E,EAAOsN,EAAe,IAEnBjN,GAAE,IACP6mD,EAAe7mD,GAAE,IACjB6mD,EAAevnB,KAAO3/B,EAAK2/B,KACzBunB,EAAiBlnD,EACrB,IAAKA,EAAKK,GAAE,GAMV,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAc+gB,EAChBlxF,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAI5B,OADIk/E,EAA+B,GAAnBl5C,EAAS9sC,OAAcimF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,GACdA,EAASxc,YAAc+gB,EAChBlxF,EAAO+7C,gBAEhB4wC,EAASxc,YAAc+gB,EAChBlxF,EAAOi5C,YACZ18B,EAAKw2C,SACLtkC,EACAyiE,EAAQ58B,eACR68B,IAGJ,KAAKtrB,EAAe1sB,aAClB,IAAKwzC,EAAS96E,QAAQW,WAAU,IAAmB,MAEnD,GADAm6E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KAE1B47E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cAEhB,KADIx/B,EAAOsN,EAAe,IAChBjN,GAAE,IAAuBL,EAAK2/B,KAAO,EAK7C,OAJAywC,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAGxByc,EAAOk+D,EACPD,EAASxX,kBACPl9B,EAAS,GACTwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACT17B,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL60E,EAAS9E,EAASxc,YAgBtB,OAdE5zD,EAAKK,GAAE,MAEJ60E,EAAO70E,GAAE,IACV60E,EAAOv1C,KAAO3/B,EAAK2/B,QAGrBxtB,EAAOi+D,EAAS3O,kBAAkBtvD,EAChC+iE,EAAQl1E,GACR,GAAO,EACP07B,EAAS,IAEXw5C,EAASl1E,IAEP40E,EAA+B,GAAnBl5C,EAAS9sC,OAAcimF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,GACdA,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,gBAEhB4wC,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOm5C,aAAa58B,EAAKw2C,SAAUtkC,EAAMC,EAAM+iE,EAAOn9B,eAAgB68B,IAE/E,KAAKtrB,EAAe6rB,WACpB,KAAK7rB,EAAe8rB,WACpB,KAAK9rB,EAAe+rB,WACpB,KAAK/rB,EAAegsB,UACpB,KAAKhsB,EAAeisB,WACpB,KAAKjsB,EAAeksB,YAClB,IAAKpF,EAAS96E,QAAQW,WAAU,IAAmB,MACnD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cAEhB,KADIx/B,EAAOsN,EAAe,IAChBjN,GAAE,IAAuBL,EAAK2/B,KAAO,EAK7C,OAJAywC,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAGxByc,EAAOk+D,EACPD,EAASxX,kBAAkBl9B,EAAS,GAClCwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACT17B,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL60E,EAAS9E,EAASxc,YAgBtB,GAdE5zD,EAAKK,GAAE,MAEJ60E,EAAO70E,GAAE,IACV60E,EAAOv1C,KAAO3/B,EAAK2/B,QAGrBxtB,EAAOi+D,EAAS3O,kBAAkBtvD,EAChC+iE,EAAQl1E,GACR,GAAO,EACP07B,EAAS,IAEXw5C,EAASl1E,IAEP40E,EAA+B,GAAnBl5C,EAAS9sC,OAAcimF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,EAEd,OADAA,EAASxc,YAAcshB,EAChBzxF,EAAO+7C,cAEZnE,OAAE,EACN,OAAQt1C,EAAU0M,cAChB,QAAS9D,QAAO,GAChB,KAAK26D,EAAe6rB,WAAe95C,EAAK8a,EAAAzf,YAAY++C,IAAM,MAC1D,KAAKnsB,EAAe8rB,WAAe/5C,EAAK8a,EAAAzf,YAAYg/C,IAAM,MAC1D,KAAKpsB,EAAe+rB,WAAeh6C,EAAK8a,EAAAzf,YAAYi/C,IAAM,MAC1D,KAAKrsB,EAAegsB,UAAej6C,EAAK8a,EAAAzf,YAAYk/C,GAAM,MAC1D,KAAKtsB,EAAeisB,WAAel6C,EAAK8a,EAAAzf,YAAYm/C,IAAM,MAC1D,KAAKvsB,EAAeksB,YAAen6C,EAAK8a,EAAAzf,YAAYo/C,KAGtD,OADA1F,EAASxc,YAAcshB,EAChBzxF,EAAOq5C,WACZzB,EAAIr7B,EAAKw2C,SAAUo+B,EAAW1iE,EAAMC,EAAM+iE,EAAOn9B,gBAGrD,KAAKuR,EAAetsB,eAClB,IAAKozC,EAAS96E,QAAQW,WAAU,IAAmB,MACnD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAC9C,OAAO3sF,EAAO+7C,cAEhB,KADIx/B,EAAOsN,EAAe,IAChBjN,GAAE,IAAuBL,EAAK2/B,KAAO,EAK7C,OAJAywC,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAGxByc,EAAOk+D,EACPD,EAASxX,kBAAkBl9B,EAAS,GAClCwrB,EAAc,GAGhBkpB,EAASxX,kBACPl9B,EAAS,GACT17B,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL60E,EAAS9E,EAASxc,YAhBtB,IAwCIghB,EAvBAxiE,GAAOg+D,EAASxX,kBAAkBl9B,EAAS,GAC7Cw5C,EAAM,GAuBR,OAnBEl1E,EAAKK,GAAE,MAEJ60E,EAAO70E,GAAE,IACV60E,EAAOv1C,KAAO3/B,EAAK2/B,QAGrBxtB,EAAOi+D,EAAS3O,kBAAkBtvD,EAChC+iE,EAAQl1E,GACR,GAAO,EACP07B,EAAS,IAEXtpB,GAAOg+D,EAAS3O,kBAAkBrvD,GAChC8iE,EAAQl1E,GACR,GAAO,EACP07B,EAAS,IAEXw5C,EAASl1E,IAEP40E,EAA+B,GAAnBl5C,EAAS9sC,OAAcimF,EAAwBn5C,EAAS,GAAI00C,GAAY,GACxE,GACdA,EAASxc,YAAcshB,EAChBzxF,EAAO+7C,gBAEhB4wC,EAASxc,YAAcshB,EAChBzxF,EAAOu5C,eACZh9B,EAAKw2C,SAAUo+B,EAAW1iE,EAAMC,EAAMC,GAAM8iE,EAAOn9B,iBAGvD,KAAKuR,EAAelsB,YAClB,IAAKgzC,EAAS96E,QAAQW,WAAU,IAAmB,MAEnD,GADAm6E,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IAE1BqqF,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAEhB,KADIx/B,EAAOsN,EAAe,IAChBjN,GAAE,IAAuBL,EAAK2/B,KAAO,GAK7C,OAJAywC,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAGxByc,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GAGnDoS,GAAOg+D,EAASxX,kBAAkBl9B,EAAS,GAC7CjuC,EAAA+H,KAAKrO,IAAG,GAIV,OADAipF,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IACrBzD,EAAO25C,YAAYlrB,EAAMC,EAAMC,GAAMpS,EAAK+3C,gBAEnD,KAAKuR,EAAe9rB,cAClB,IAAK4yC,EAAS96E,QAAQW,WAAU,IAAmB,MAEnD,GADAm6E,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IAE1BgqF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAC7C00C,EAAS96E,QAAQI,UAAS,GAGxByc,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAC7CjuC,EAAA+H,KAAKtO,IAAG,GAIV,OADAkpF,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IACrBzD,EAAO+5C,cAActrB,EAAMC,GAKpC,KAAKm3C,EAAexqB,OAClB,GACEgzC,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cACZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,GACxD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKwhD,MAEjD,KADIh3C,EAAOowE,EAASxc,aACVhxD,MAAM,KAKd,OAJAwtE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZrtB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GACnDoS,GAAOg+D,EAAShS,cAClBgS,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK9N,MAC7C0oF,EAASxc,aAGX,OADAwc,EAASxc,YAAc5zD,EAChBvc,EAAOq7C,OAAO5sB,EAAMC,EAAMC,IAEnC,KAAKk3C,EAAe9pB,YAQlB,OAPIlyB,GACF8iE,EAAS/2E,MACP7L,EAAA8L,eAAeqsD,sBACf0E,EAAWsnB,mBAAoB5rF,EAAU0M,cAG7C0+E,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GACpC3sF,EAAO+7C,cAKhB,KAAK8pB,EAAeysB,YAElB,OADA3F,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IAE1BgqF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GACpC3sF,EAAO+7C,cACT/7C,EAAOg4C,KAAK0a,EAAA5f,OAAOy/C,YAE5B,KAAK1sB,EAAe2sB,YAElB,OADA7F,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IAE1BgqF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GACpC3sF,EAAO+7C,cACT/7C,EAAOg4C,KAAK0a,EAAA5f,OAAO2/C,WAAY,KAAM,CAC1C9F,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,KAGpD,KAAKoiE,EAAe5pB,YAElB,GADA0wC,EAASxc,YAAcnmE,EAAA+H,KAAKG,KAE1Bu7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAK4wC,EAAS96E,QAAQW,WAAU,GAAuB,CACrD,IAAIyT,GAAW0mE,EAAS19E,SAASsM,gBAAgBjZ,EAAW,MAE5D,OADAqqF,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACvB+T,GACE0mE,EAAS9H,kBAAkB5+D,GAAUgyB,EAAU2uB,GADhC5mE,EAAO+7C,cAG/B,IAAI9pC,GAAY06E,EAAS96E,QAAQI,UAC7Bwc,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIhmC,GAAS,GACxDyc,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIhmC,GAAS,GACxD0c,GAAOg+D,EAASxX,kBAAkBl9B,EAAS,GAAIhmC,GAAS,GAE5D,OADA06E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOi8C,YAAYxtB,EAAMC,EAAMC,IAExC,KAAKk3C,EAAezpB,YAElB,GADAuwC,EAASxc,YAAcnmE,EAAA+H,KAAKG,KAE1Bu7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAK4wC,EAAS96E,QAAQW,WAAU,GAAuB,CACjDyT,GAAW0mE,EAAS19E,SAASsM,gBAAgBjZ,EAAW,MAE5D,OADAqqF,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACvB+T,GACE0mE,EAAS9H,kBAAkB5+D,GAAUgyB,EAAU2uB,GADhC5mE,EAAO+7C,cAG3B9pC,GAAY06E,EAAS96E,QAAQI,UAC7Bwc,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIhmC,GAAS,GACxDyc,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKnO,GAAE,GACtD+qB,GAAOg+D,EAASxX,kBAAkBl9B,EAAS,GAAIhmC,GAAS,GAE5D,OADA06E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOo8C,YAAY3tB,EAAMC,EAAMC,IAKxC,KAAKk3C,EAAezvB,WAClB,GACE03C,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IAAI5oB,GAAStJ,EAAe,GAExBilD,IADArgD,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAI9kB,IACpCw5D,EAASxc,aAExB,OADAwc,EAASxc,YAAch9C,GACnB27C,GAAS5yB,MAAQ/oB,GAAO+oB,MAC1BywC,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,OAENpQ,EAAO+7C,eAETttB,EAET,KAAKo3C,EAAe36D,OAClB,GACEmjF,EAAkBxkE,EAAe+8C,EAAY+lB,GAC7CsB,EAAkBh2C,EAAU,EAAG,EAAG2uB,EAAY+lB,GAM9C,OAJI9iE,IACF3e,OAAO2e,EAAc1e,QACrBwhF,EAASxc,YAActmD,EAAc,GAAGqpC,iBAEnClzD,EAAO+7C,cAEZttB,EAAO5E,EACP8iE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAI,GAC1D8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK9N,KAAI,GACjDsY,EAAOowE,EAASxc,YAIpB,GAHAwc,EAASxc,YAAc5zD,EAAK22C,gBAGxBy5B,EAAS96E,QAAQiB,SACnB,OAAI2wD,GAAkBz5D,EAAA+H,KAAKG,MACzBy6E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOi7C,OAETxsB,EAIT,IAAIhmB,GAAQi0E,EAAaiQ,EAA6B,GAAnB10C,EAAS9sC,OAAc8sC,EAAS,GAAK,KAAM2uB,GAC9E+lB,EAASxc,YAAc5zD,EAAK22C,gBACxBzgC,OAAI,EACR,GAAIgxC,GAAkBz5D,EAAA+H,KAAKG,KAEzB,OADAy6E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACpBqK,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,QACE8e,EAAOzyB,EAAO+6C,GACZ/6C,EAAO23C,MAAM+a,EAAA3uB,QAAQ4nC,OAAQl9C,GAC7BhmB,IAEF,MAEF,OACA,OACEgqB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO23C,MAAM+a,EAAA3uB,QAAQ6nC,OAAQn9C,GAC7BhmB,IAEF,MAEF,OACA,OACEgqB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO23C,MACLg1C,EAAS96E,QAAQc,SACb+/C,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZl9C,GAEFhmB,IAEF,MAGF,QACEgqB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO83C,OAAO4a,EAAArpB,SAASijC,MACrB79C,EACAzuB,EAAOkE,IAAI,IAEbuE,IAEF,MAEF,QACEgqB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO83C,OAAO4a,EAAArpB,SAASkjC,MACrB99C,EACAzuB,EAAOmE,IAAI,IAEbsE,IAEF,MAEF,QACEkkF,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOhqB,QAMX,OADAkkF,EAASxc,YAAc5zD,EAAK22C,gBACpBy5B,EAASxc,YAAYx8D,MAC3B,OACA,OACA,OACA,OACA,OACA,OACA,QACE,IACIooE,IADAj0D,EAAO6kE,EAASpb,aACC3H,oBAAoBrtD,GACzCuL,EAAK2hD,aAAasS,GAAUz2D,MAAOjb,EAAA69D,WAAWiE,SAC9C15C,EAAOzyB,EAAO+6C,GACZ/6C,EAAOs4C,UAAUyjC,GAAUz2D,MAAOmJ,GAClCzuB,EAAOo4C,UAAU2jC,GAAUz2D,MAAOotC,EAAAjyB,WAAWh6B,KAC7CgC,IAEF,MAEF,OACA,OACMszE,GAAY4Q,EAASpb,YAAY3H,oBAAoB5/D,EAAA+H,KAAKrO,KAC9D+uB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO23C,MAAM+a,EAAA3uB,QAAQ6nC,OACnB5rE,EAAOs4C,UAAUyjC,GAAUz2D,MAAOmJ,IAEpChmB,GACAzI,EAAOo4C,UAAU2jC,GAAUz2D,MAAOotC,EAAAjyB,WAAW/5B,MAE/C,MAEF,OACA,OACMq1E,GAAY4Q,EAASpb,YAAY3H,oBAAoB+iB,EAAS96E,QAAQI,WAC1EwgB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO23C,MACLg1C,EAAS96E,QAAQc,SACb+/C,EAAA3uB,QAAQ6nC,OACRlZ,EAAA3uB,QAAQ4nC,OACZ3rE,EAAOs4C,UAAUyjC,GAAUz2D,MAAOmJ,IAEpChmB,GACAzI,EAAOo4C,UAAU2jC,GAAUz2D,MAAOqnE,EAAS96E,QAAQ+hE,iBAErD,MAEF,QACMmI,GAAY4Q,EAASpb,YAAY3H,oBAAoB5/D,EAAA+H,KAAK7N,KAC9DuuB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO83C,OAAO4a,EAAArpB,SAASijC,MACrBtsE,EAAOs4C,UAAUyjC,GAAUz2D,MAAOmJ,GAClCzuB,EAAOkE,IAAI,IAEbuE,GACAzI,EAAOo4C,UAAU2jC,GAAUz2D,MAAOotC,EAAAjyB,WAAWv5B,MAE/C,MAEF,QACM60E,GAAY4Q,EAASpb,YAAY3H,oBAAoB5/D,EAAA+H,KAAK5N,KAC9DsuB,EAAOzyB,EAAO+6C,GACZ/6C,EAAO83C,OAAO4a,EAAArpB,SAASkjC,MACrBvsE,EAAOs4C,UAAUyjC,GAAUz2D,MAAOmJ,GAClCzuB,EAAOmE,IAAI,IAEbsE,GACAzI,EAAOo4C,UAAU2jC,GAAUz2D,MAAOotC,EAAAjyB,WAAWt5B,MAE/C,MAEF,QACEwlF,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbz7D,EAAOhqB,GAKb,OAAOgqB,EAET,KAAKozC,EAAe36C,UAClB,GACEuiE,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAChB,IACI22C,IADA5qE,EAAO6kE,EAASpb,aACQ30D,GAAE,OAC9BkL,EAAK/Y,IAAG,OAEJ0jB,EAAOk6D,EAASxX,kBAAkBl9B,EAAS,GAAIwrB,GAEnD,OADKivB,IAAkB5qE,EAAKxE,MAAK,OAC1BmP,EAET,KAAKozC,EAAe8sB,YAAa9F,GAAY,EAC7C,KAAKhnB,EAAehqB,cAClB,GACEwyC,EAAkBxkE,EAAe+8C,EAAY+lB,GAAU,GACvDsB,EAAkBh2C,EAAU,EAAGx0C,IAAIwhD,UAAW2hB,EAAY+lB,GAC1D,OAAO3sF,EAAO+7C,cAChB,IAAIzqB,GAAazH,EAAgBA,EAAc,GAAK45C,EAEhDmvB,IADAnkE,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKjO,KACzC6oF,EAASxc,aACxB,KACEyiB,IAAY5oF,EAAA+H,KAAKjO,KACJ,GAAb8uF,GAASj/E,MAAwBi/E,GAAS3/B,oBAM1C,OAJA05B,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACfo3B,EAAS,GAAG7nC,OAEPpQ,EAAO+7C,cAOhB,IALA,IAAI0sC,GAAcxwC,EAAS9sC,OAAS,EAChC0nF,GAAe,IAAIvrF,MAAqBmhF,IACxC3E,GAAmBxyD,GAAWgjC,eAC9B5sC,GAAiB,IAAIpgB,MAAYmhF,IACjCqK,GAAmB,IAAIxrF,MAAkBmhF,IACpC/nF,GAAI,EAAGA,GAAI+nF,KAAe/nF,GAAG,CACpCmyF,GAAanyF,IAAKisF,EAASxX,kBAAkBl9B,EAAS,EAAIv3C,IAAIsJ,EAAA+H,KAAKtO,KACnE,IAAIsvF,GAAcpG,EAASxc,YAC3BzoD,GAAehnB,IAAKqyF,GACpBD,GAAiBpyF,IAAKqyF,GAAYz+B,eAEpC,IAAIrjC,GAAWjnB,EAAA8Z,UAAU+xC,oBAAoBnuC,GAAgB4J,IACzD6sB,GAAUn+C,EAAO42C,2BAA2BktC,GAAkBgP,IAGlE,GAFK30C,KAASA,GAAUn+C,EAAOq2C,gBAAgBplB,GAAU6yD,GAAkBgP,KAC3EnG,EAASxc,YAAc7+C,GACnBu7D,EAAW,CAEb,GAAIn6B,EAAApL,gBAAgB74B,EAAOzuB,EAAO6iD,qBAAqBp0B,KAAUikC,EAAAhyB,aAAa0kB,MAAO,CACnFl6C,OAAOwnD,EAAAnL,kBAAkB94B,IAASikC,EAAAjyB,WAAWh6B,KAC7C,IAAI6e,GAAQotC,EAAAlL,iBAAiB/4B,GACzB6hD,GAAgBqc,EAASrc,cAC7B,GAAIhrD,IAAS,GAAKA,GAAQgrD,GAAcnlE,OACtC,OAAOnL,EAAOa,KAAKyvE,GAAchrD,IAAQutE,GAAc/O,IAO3D,OAJA6I,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACfo3B,EAAS,GAAG7nC,OAEPpQ,EAAO+7C,cAIhB,OAAO/7C,EAAO67C,cAAcptB,EAAMokE,GAAc5hE,IAElD,KAAK40C,EAAemtB,YAClB,GACElF,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvD,OAAO3sF,EAAO+7C,cAChB,IAAIlsC,GAAgBga,EAAe,GAAG0C,eACtC,OAAK1c,IAOL88E,EAASxc,YAActgE,GAAc0M,KAC9BowE,EAAS3B,mBAAmBn7E,GAAeooC,EAAQ,EAAoB2uB,KAP5E+lB,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,eAQlB,KAAK8pB,EAAe/3C,MAMlB,OALA2/D,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CqqF,EAAS/2E,MACP7L,EAAA8L,eAAeo9E,eACfrsB,EAAWx2D,OAAQ6nC,EAAS9sC,OAAS8sC,EAAS,GAAK2uB,GAAYx2D,MAAMiO,YAEhEre,EAAO+7C,cAEhB,KAAK8pB,EAAeh4C,QAMlB,OALA4/D,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CqqF,EAAS78D,QACP/lB,EAAA8L,eAAeo9E,eACfrsB,EAAWx2D,OAAQ6nC,EAAS9sC,OAAS8sC,EAAS,GAAK2uB,GAAYx2D,MAAMiO,YAEhEre,EAAOi7C,MAEhB,KAAK4qB,EAAej4C,KAMlB,OALA6/D,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CqqF,EAAS/8D,KACP7lB,EAAA8L,eAAeo9E,eACfrsB,EAAWx2D,OAAQ6nC,EAAS9sC,OAAS8sC,EAAS,GAAK2uB,GAAYx2D,MAAMiO,YAEhEre,EAAOi7C,MAKhB,KAAK4qB,EAAetiE,GAClB,OACEkqF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKxO,GACrBvD,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKxO,GAAE,GAExD,KAAKsiE,EAAeriE,IAClB,OACEiqF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKvO,IACrBxD,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKvO,IAAG,GAEzD,KAAKqiE,EAAepiE,IAClB,OACEgqF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKtO,IACrBzD,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,GAEzD,KAAKoiE,EAAeniE,IAClB,OACE+pF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKrO,IACrB1D,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKrO,IAAG,GAEzD,KAAKmiE,EAAeliE,MAClB,IAAIqO,GAAY26E,EAAS96E,QAAQG,UACjC,OACEy7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcn+D,GAChBhS,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjmC,GAAS,GAE1D,KAAK6zD,EAAejiE,GAClB,OACE6pF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKnO,GACrB5D,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKnO,GAAE,GAExD,KAAKiiE,EAAehiE,IAClB,OACE4pF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKlO,IACrB7D,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKlO,IAAG,GAEzD,KAAKgiE,EAAe/hE,IAClB,OACE2pF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKjO,IACrB9D,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKjO,IAAG,GAEzD,KAAK+hE,EAAe9hE,IAClB,OACE0pF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAKhO,IACrB/D,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKhO,IAAG,GAEzD,KAAK8hE,EAAe7hE,MACdiO,GAAY06E,EAAS96E,QAAQI,UACjC,OACEw7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcl+D,GAChBjS,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIhmC,GAAS,GAE1D,KAAK4zD,EAAe5hE,KAClB,OACEwpF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACrBjE,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK9N,KAAI,GAE1D,KAAK4hE,EAAe3hE,IAClB,OACEupF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAK7N,IACrBlE,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK7N,IAAG,GAEzD,KAAK2hE,EAAe1hE,IAClB,OACEspF,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,IAE3CA,EAASxc,YAAcnmE,EAAA+H,KAAK5N,IACrBnE,EAAO+7C,eAET4wC,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK5N,IAAG,GAKzD,KAAK0hE,EAAezhE,KACpB,KAAKyhE,EAAexhE,MAClB,IAAKsoF,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,GAAI2uB,EAAY+lB,GAG5C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB,IAAIvE,GAAQ,IAAItvC,WAAW,IAC3B,IAASxH,GAAI,EAAGA,GAAI,KAAMA,GAAG,CAE3B,GADIiB,GAAQs2C,EAASv3C,IACV,CACL+xB,EAAOk6D,EAAS9pC,qBAAqBlhD,GAAOqI,EAAA+H,KAAKxO,GAAE,GACvD,GAAImvD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfvxF,GAAMyO,OAERu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWh6B,KAC7CyD,EAAAwhB,QAAQgnC,EAAAlL,iBAAiB/0B,GAAO+kB,GAAO92C,KAI3C,OADAisF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOoE,KAAKozC,IAErB,KAAKquB,EAAethE,MAClB,IAAKooF,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIvE,GAAQ,IAAItvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQs2C,EAASv3C,IACV,CACL+xB,EAAOk6D,EAAS9pC,qBAAqBlhD,GAAOqI,EAAA+H,KAAKvO,IAAG,GACxD,GAAIkvD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfvxF,GAAMyO,OAERu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWh6B,KAC7CyD,EAAAyhB,SAAS+mC,EAAAlL,iBAAiB/0B,GAAO+kB,GAAO92C,IAAK,IAIjD,OADAisF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOoE,KAAKozC,IAErB,KAAKquB,EAAephE,MAClB,IAAKkoF,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIvE,GAAQ,IAAItvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQs2C,EAASv3C,IACV,CACL+xB,EAAOk6D,EAAS9pC,qBAAqBlhD,GAAOqI,EAAA+H,KAAKtO,IAAG,GACxD,GAAIivD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfvxF,GAAMyO,OAERu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWh6B,KAC7CyD,EAAA6F,SAAS2iD,EAAAlL,iBAAiB/0B,GAAO+kB,GAAO92C,IAAK,IAIjD,OADAisF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOoE,KAAKozC,IAErB,KAAKquB,EAAelhE,MAClB,IAAKgoF,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIvE,GAAQ,IAAItvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQs2C,EAASv3C,IACV,CACL+xB,EAAOk6D,EAAS9pC,qBAAqBlhD,GAAOqI,EAAA+H,KAAKrO,IAAG,GACxD,GAAIgvD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfvxF,GAAMyO,OAERu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAW/5B,KAC7C,IAAIysF,GAAMzyF,IAAK,EACfwJ,EAAA6F,SAAS2iD,EAAAjL,oBAAoBh1B,GAAO+kB,GAAO27C,IAC3CjpF,EAAA6F,SAAS2iD,EAAAhL,qBAAqBj1B,GAAO+kB,GAAO27C,GAAM,IAItD,OADAxG,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOoE,KAAKozC,IAErB,KAAKquB,EAAehhE,MAClB,IAAK8nF,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIvE,GAAQ,IAAItvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQs2C,EAASv3C,IACV,CACL+xB,EAAOk6D,EAAS9pC,qBAAqBlhD,GAAOqI,EAAA+H,KAAK7N,IAAG,GACxD,GAAIwuD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfvxF,GAAMyO,OAERu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWv5B,KAC7CgD,EAAA0hB,SAAS8mC,EAAA/K,iBAAiBl1B,GAAO+kB,GAAO92C,IAAK,IAIjD,OADAisF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOoE,KAAKozC,IAErB,KAAKquB,EAAe/gE,MAClB,IAAK6nF,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIvE,GAAQ,IAAItvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAC1B,IAAIiB,GACJ,GADIA,GAAQs2C,EAASv3C,IACV,CACL+xB,EAAOk6D,EAAS9pC,qBAAqBlhD,GAAOqI,EAAA+H,KAAK5N,IAAG,GACxD,GAAIuuD,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfvxF,GAAMyO,OAERu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWt5B,KAC7C+C,EAAA2hB,SAAS6mC,EAAA9K,iBAAiBn1B,GAAO+kB,GAAO92C,IAAK,IAIjD,OADAisF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOoE,KAAKozC,IAErB,KAAKquB,EAAeutB,WAClB,IAAKzG,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZnE,OAAE,EACN,OAAQr7B,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQsvD,cAAe,MACjD,OACA,OAAqBz7C,EAAK8a,EAAA3uB,QAAQuvD,cAAe,MACjD,OACA,OAAqB17C,EAAK8a,EAAA3uB,QAAQwvD,cAAe,MACjD,OACA,OAAqB37C,EAAK8a,EAAA3uB,QAAQyvD,cAAe,MACjD,OACA,OACE57C,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQyvD,cACR9gC,EAAA3uB,QAAQwvD,cACZ,MAEF,QAAqB37C,EAAK8a,EAAA3uB,QAAQ0vD,cAAe,MACjD,QAAqB77C,EAAK8a,EAAA3uB,QAAQ2vD,cAAe,MACjD,QAME,OALA/G,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGdttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GAEvD,OADAowE,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO23C,MAAMC,EAAInpB,GAE1B,KAAKo3C,EAAe8tB,kBAClB,IAAKhH,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAAU,GACvDe,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAC3C,OAAO3sF,EAAO+7C,cAEhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAc5zD,EAChBvc,EAAO+7C,cAEZnE,OAAE,EACN,OAAQr7B,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAAlf,cAAcogD,qBAAsB,MAC9D,OAAqBh8C,EAAK8a,EAAAlf,cAAcqgD,qBAAsB,MAC9D,OAAqBj8C,EAAK8a,EAAAlf,cAAcsgD,qBAAsB,MAC9D,OAAqBl8C,EAAK8a,EAAAlf,cAAcugD,qBAAsB,MAC9D,OACA,OAAqBn8C,EAAK8a,EAAAlf,cAAcwgD,oBAAqB,MAC7D,OACA,OAAqBp8C,EAAK8a,EAAAlf,cAAcygD,oBAAqB,MAC7D,OACA,OACEr8C,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAAlf,cAAcygD,oBACdvhC,EAAAlf,cAAcwgD,oBAClB,MAEF,QAAqBp8C,EAAK8a,EAAAlf,cAAc0gD,oBAAqB,MAC7D,QAAqBt8C,EAAK8a,EAAAlf,cAAc2gD,oBAAqB,MAC7D,QAME,OALAxH,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAc5zD,EAChBvc,EAAO+7C,cAGdttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAAS9pC,qBAAqB5K,EAAS,GAAIjuC,EAAA+H,KAAKnO,GAAE,GAE7D,GADA+oF,EAASxc,YAAc5zD,EACnBm2C,EAAApL,gBAAgB54B,IAASgkC,EAAAhyB,aAAa0kB,MAKxC,OAJAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfj7C,EAAS,GAAG7nC,OAEPpQ,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB74B,IAASgkC,EAAAjyB,WAAWh6B,KAC7C,IAAI2tF,GAAU,GAAK73E,EAAKw2C,SAAY,EAEpC,OADIvW,GAAMkW,EAAAlL,iBAAiB94B,IACjB,GAAK8tB,GAAM43C,IACnBzH,EAAS/2E,MACP7L,EAAA8L,eAAe07E,6CACft5C,EAAS,GAAG7nC,MAAO,aAAc,IAAKgkF,GAAO/1E,YAExCre,EAAO+7C,eAET/7C,EAAOs8C,aAAa1E,EAAInpB,EAAM+tB,IAEvC,KAAKqpB,EAAewuB,kBAClB,IAAK1H,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZnE,OAAE,EACN,OAAQr7B,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAAze,cAAcqgD,oBAAqB,MAC7D,OACA,OAAqB18C,EAAK8a,EAAAze,cAAcsgD,oBAAqB,MAC7D,OACA,OAAqB38C,EAAK8a,EAAAze,cAAcugD,oBAAqB,MAC7D,OACA,OAAqB58C,EAAK8a,EAAAze,cAAcwgD,oBAAqB,MAC7D,OACA,OACE78C,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAAze,cAAcwgD,oBACd/hC,EAAAze,cAAcugD,oBAClB,MAEF,QAAqB58C,EAAK8a,EAAAze,cAAcygD,oBAAqB,MAC7D,QAAqB98C,EAAK8a,EAAAze,cAAc0gD,oBAAqB,MAC7D,QAME,OALAhI,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGdttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAAS9pC,qBAAqB5K,EAAS,GAAIjuC,EAAA+H,KAAKnO,GAAE,GAC7D,GAAI8uD,EAAApL,gBAAgB54B,IAASgkC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfj7C,EAAS,GAAG7nC,OAEdu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB7wC,OAAOwnD,EAAAnL,kBAAkB74B,IAASgkC,EAAAjyB,WAAWh6B,KACzC2tF,GAAU,GAAK73E,EAAKw2C,SAAY,EAEpC,IADIvW,GAAMkW,EAAAlL,iBAAiB94B,IACjB,GAAK8tB,GAAM43C,GAKnB,OAJAzH,EAAS/2E,MACP7L,EAAA8L,eAAe07E,6CACft5C,EAAS,GAAG7nC,MAAO,aAAc,IAAKgkF,GAAO/1E,YAExCre,EAAO+7C,cAEZptB,GAAOg+D,EAASxX,kBAAkBl9B,EAAS,GAAI17B,EAAI,GAEvD,OADAowE,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO08C,aAAa9E,EAAInpB,EAAM+tB,GAAK7tB,IAE5C,KAAKk3C,EAAe+uB,aAClB,IAAKjI,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAG7C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB,IAAI84C,GAAYt4E,EAAKw2C,SACjB+hC,GAAY,GAAKD,GAErB,GADA3pF,OAAO4hF,UAAUgI,KAAc5qF,EAAAmjB,WAAWynE,KAExCpH,EAAkBz1C,EAAU,EAAI68C,GAAWluB,EAAY+lB,GAGvD,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB,OAAQx/B,EAAK5I,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QAAmB,MACnB,QAME,OALAg5E,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGdttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAD5D,IAEI24C,GAAO,IAAI70C,WAAW,IAE1B,IADIksF,IAAUU,IAAa,GAAK,EACvBp0F,GAAI,EAAGA,GAAIo0F,KAAap0F,GAAG,CAClC,IAWI87C,GAXAzlB,GAAUkhB,EAAS,EAAIv3C,IACvBq0F,GAAOpI,EAAS9pC,qBAAqB9rB,GAAS/sB,EAAA+H,KAAKnO,GAAE,GACzD,GAAI8uD,EAAApL,gBAAgBytC,KAASriC,EAAAhyB,aAAa0kB,MAMxC,OALAunC,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfn8D,GAAQ3mB,OAEVu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAIhB,GAFA7wC,OAAOwnD,EAAAnL,kBAAkBwtC,KAASriC,EAAAjyB,WAAWh6B,MACzC+1C,GAAMkW,EAAAlL,iBAAiButC,KACjB,GAAKv4C,GAAM43C,GAMnB,OALAzH,EAAS/2E,MACP7L,EAAA8L,eAAe07E,6CACfx6D,GAAQ3mB,MAAO,aAAc,IAAKgkF,GAAO/1E,YAE3CsuE,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEhB,OAAQ84C,IACN,KAAK,EACH3qF,EAAAwhB,QAAQ8wB,GAAKO,GAAMr8C,IACnB,MAEF,KAAK,EACH,IAAIs0F,GAAOt0F,IAAK,EACZu0F,GAAOz4C,IAAO,EAClBtyC,EAAAwhB,QAAQupE,GAAUl4C,GAAMi4C,IACxB9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOt0F,IAAK,EACZu0F,GAAOz4C,IAAO,EAClBtyC,EAAAwhB,QAAQupE,GAAUl4C,GAAMi4C,IACxB9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOt0F,IAAK,EACZu0F,GAAOz4C,IAAO,EAClBtyC,EAAAwhB,QAAQupE,GAAUl4C,GAAMi4C,IACxB9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B9qF,EAAAwhB,QAAQupE,GAAO,EAAGl4C,GAAMi4C,GAAO,GAC/B,MAEF,QAAS9pF,QAAO,IAIpB,OADAyhF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO48C,aAAanuB,EAAMC,EAAMquB,IAEzC,KAAK8oB,EAAeqvB,SACpB,KAAKrvB,EAAesvB,SACpB,KAAKtvB,EAAeuvB,SACpB,KAAKvvB,EAAewvB,SACpB,KAAKxvB,EAAeyvB,kBACpB,KAAKzvB,EAAe0vB,kBACpB,KAAK1vB,EAAe2vB,SACpB,KAAK3vB,EAAe4vB,SACpB,KAAK5vB,EAAe6vB,QACpB,KAAK7vB,EAAe8vB,QACpB,KAAK9vB,EAAe+vB,QACpB,KAAK/vB,EAAegwB,QACpB,KAAKhwB,EAAeiwB,QACpB,KAAKjwB,EAAekwB,QAClB,IAAKpJ,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZnE,GAAgB,EACpB,OAAQt1C,EAAU0M,cAChB,KAAK62D,EAAeqvB,SAClB,OAAQ34E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAArpB,SAAS2sD,YAAa,MAChD,OACA,OAAqBp+C,EAAK8a,EAAArpB,SAAS4sD,YAAa,MAChD,OACA,OAAqBr+C,EAAK8a,EAAArpB,SAAS6sD,YAAa,MAChD,OACA,OAAqBt+C,EAAK8a,EAAArpB,SAAS8sD,YAAa,MAChD,OACA,OACEv+C,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAArpB,SAAS8sD,YACTzjC,EAAArpB,SAAS6sD,YACb,MAEF,QAAqBt+C,EAAK8a,EAAArpB,SAAS+sD,YAAa,MAChD,QAAqBx+C,EAAK8a,EAAArpB,SAASgtD,YAErC,MAEF,KAAKxwB,EAAesvB,SAClB,OAAQ54E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAArpB,SAASitD,YAAa,MAChD,OACA,OAAqB1+C,EAAK8a,EAAArpB,SAASktD,YAAa,MAChD,OACA,OAAqB3+C,EAAK8a,EAAArpB,SAASmtD,YAAa,MAChD,OACA,OAAqB5+C,EAAK8a,EAAArpB,SAASotD,YAAa,MAChD,OACA,OACE7+C,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAArpB,SAASotD,YACT/jC,EAAArpB,SAASmtD,YACb,MAEF,QAAqB5+C,EAAK8a,EAAArpB,SAASqtD,YAAa,MAChD,QAAqB9+C,EAAK8a,EAAArpB,SAASstD,YAErC,MAEF,KAAK9wB,EAAeuvB,SAClB,OAAQ74E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAArpB,SAASutD,YAAa,MAChD,OACA,OAAqBh/C,EAAK8a,EAAArpB,SAASwtD,YAAa,MAChD,OACA,OAAqBj/C,EAAK8a,EAAArpB,SAASytD,YAAa,MAChD,QAAqBl/C,EAAK8a,EAAArpB,SAAS0tD,YAAa,MAChD,QAAqBn/C,EAAK8a,EAAArpB,SAAS2tD,YAAa,MAChD,OACA,OACOrK,EAAS96E,QAAQc,WAAUilC,EAAK8a,EAAArpB,SAASytD,aAIlD,MAEF,KAAKjxB,EAAewvB,SAClB,OAAQ94E,EAAK5I,MACX,QAAqBikC,EAAK8a,EAAArpB,SAAS4tD,YAAa,MAChD,QAAqBr/C,EAAK8a,EAAArpB,SAAS6tD,YAErC,MAEF,KAAKrxB,EAAeyvB,kBAClB,OAAQ/4E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAArpB,SAAS8tD,gBAAiB,MACpD,OAAqBv/C,EAAK8a,EAAArpB,SAAS+tD,gBAAiB,MACpD,OAAqBx/C,EAAK8a,EAAArpB,SAASguD,gBAAiB,MACpD,OAAqBz/C,EAAK8a,EAAArpB,SAASiuD,gBAErC,MAEF,KAAKzxB,EAAe0vB,kBAClB,OAAQh5E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAArpB,SAASkuD,gBAAiB,MACpD,OAAqB3/C,EAAK8a,EAAArpB,SAASmuD,gBAAiB,MACpD,OAAqB5/C,EAAK8a,EAAArpB,SAASouD,gBAAiB,MACpD,OAAqB7/C,EAAK8a,EAAArpB,SAASquD,gBAErC,MAEF,KAAK7xB,EAAe2vB,SAClB,OAAQj5E,EAAK5I,MACX,QAAqBikC,EAAK8a,EAAArpB,SAASsuD,YAAa,MAChD,QAAqB//C,EAAK8a,EAAArpB,SAASuuD,YAErC,MAEF,KAAK/xB,EAAe4vB,SAClB,OAAQl5E,EAAK5I,MACX,QAAqBikC,EAAK8a,EAAArpB,SAASwuD,YAAa,MAChD,QAAqBjgD,EAAK8a,EAAArpB,SAASyuD,YAErC,MAEF,KAAKjyB,EAAe6vB,QAClB,OAAQn5E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAArpB,SAASm3C,WAAY,MAC/C,OACA,OAAqB5oC,EAAK8a,EAAArpB,SAAS0uD,WAAY,MAC/C,OACA,OAAqBngD,EAAK8a,EAAArpB,SAAS2uD,WAAY,MAC/C,QAAqBpgD,EAAK8a,EAAArpB,SAAS4uD,WAAY,MAC/C,QAAqBrgD,EAAK8a,EAAArpB,SAAS6uD,WAAY,MAC/C,OACA,OACOvL,EAAS96E,QAAQc,WAAUilC,EAAK8a,EAAArpB,SAAS2uD,YAIlD,MAEF,KAAKnyB,EAAe8vB,QAClB,OAAQp5E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAArpB,SAASq3C,WAAY,MAC/C,OACA,OAAqB9oC,EAAK8a,EAAArpB,SAAS8uD,WAAY,MAC/C,OACA,OAAqBvgD,EAAK8a,EAAArpB,SAAS+uD,WAAY,MAC/C,QAAqBxgD,EAAK8a,EAAArpB,SAASgvD,WAAY,MAC/C,QAAqBzgD,EAAK8a,EAAArpB,SAASivD,WAAY,MAC/C,OACA,OACO3L,EAAS96E,QAAQc,WAAUilC,EAAK8a,EAAArpB,SAAS+uD,YAIlD,MAEF,KAAKvyB,EAAe+vB,QAClB,OAAQr5E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAArpB,SAASkvD,YAAa,MAChD,OAAqB3gD,EAAK8a,EAAArpB,SAASmvD,YAAa,MAChD,OAAqB5gD,EAAK8a,EAAArpB,SAASovD,YAAa,MAChD,OAAqB7gD,EAAK8a,EAAArpB,SAASqvD,YAAa,MAChD,OAAqB9gD,EAAK8a,EAAArpB,SAASsvD,YAAa,MAChD,OAAqB/gD,EAAK8a,EAAArpB,SAASuvD,YAAa,MAChD,QAAqBhhD,EAAK8a,EAAArpB,SAASwvD,WAAY,MAC/C,QAAqBjhD,EAAK8a,EAAArpB,SAASyvD,WAAY,MAC/C,OACA,OACOnM,EAAS96E,QAAQc,WACpBilC,EAAc,GAATr7B,EAAK5I,KACN++C,EAAArpB,SAASsvD,YACTjmC,EAAArpB,SAASuvD,aAKnB,MAEF,KAAK/yB,EAAegwB,QAClB,OAAQt5E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAArpB,SAAS0vD,YAAa,MAChD,OAAqBnhD,EAAK8a,EAAArpB,SAAS2vD,YAAa,MAChD,OAAqBphD,EAAK8a,EAAArpB,SAAS4vD,YAAa,MAChD,OAAqBrhD,EAAK8a,EAAArpB,SAAS6vD,YAAa,MAChD,OAAqBthD,EAAK8a,EAAArpB,SAAS8vD,YAAa,MAChD,OAAqBvhD,EAAK8a,EAAArpB,SAAS+vD,YAAa,MAChD,QAAqBxhD,EAAK8a,EAAArpB,SAASgwD,WAAY,MAC/C,QAAqBzhD,EAAK8a,EAAArpB,SAASiwD,WAAY,MAC/C,OACA,OACO3M,EAAS96E,QAAQc,WACpBilC,EAAc,GAATr7B,EAAK5I,KACN++C,EAAArpB,SAAS8vD,YACTzmC,EAAArpB,SAAS+vD,aAKnB,MAEF,KAAKvzB,EAAeiwB,QAClB,OAAQv5E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAArpB,SAASkwD,YAAa,MAChD,OAAqB3hD,EAAK8a,EAAArpB,SAASmwD,YAAa,MAChD,OAAqB5hD,EAAK8a,EAAArpB,SAASowD,YAAa,MAChD,OAAqB7hD,EAAK8a,EAAArpB,SAASqwD,YAAa,MAChD,OAAqB9hD,EAAK8a,EAAArpB,SAASswD,YAAa,MAChD,OAAqB/hD,EAAK8a,EAAArpB,SAASuwD,YAAa,MAChD,QAAqBhiD,EAAK8a,EAAArpB,SAASwwD,WAAY,MAC/C,QAAqBjiD,EAAK8a,EAAArpB,SAASywD,WAAY,MAC/C,OACA,OACOnN,EAAS96E,QAAQc,WACpBilC,EAAc,GAATr7B,EAAK5I,KACN++C,EAAArpB,SAASswD,YACTjnC,EAAArpB,SAASuwD,aAKnB,MAEF,KAAK/zB,EAAekwB,QAClB,OAAQx5E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAArpB,SAAS0wD,YAAa,MAChD,OAAqBniD,EAAK8a,EAAArpB,SAAS2wD,YAAa,MAChD,OAAqBpiD,EAAK8a,EAAArpB,SAAS4wD,YAAa,MAChD,OAAqBriD,EAAK8a,EAAArpB,SAAS6wD,YAAa,MAChD,OAAqBtiD,EAAK8a,EAAArpB,SAAS8wD,YAAa,MAChD,OAAqBviD,EAAK8a,EAAArpB,SAAS+wD,YAAa,MAChD,QAAqBxiD,EAAK8a,EAAArpB,SAASgxD,WAAY,MAC/C,QAAqBziD,EAAK8a,EAAArpB,SAASixD,WAAY,MAC/C,OACA,OACO3N,EAAS96E,QAAQc,WACpBilC,EAAc,GAATr7B,EAAK5I,KACN++C,EAAArpB,SAAS8wD,YACTznC,EAAArpB,SAAS+wD,cAQvB,IAAW,GAAPxiD,EAMF,OALA+0C,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAE5D,OADAuoF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO83C,OAAOF,EAAInpB,EAAMC,GAEjC,KAAKm3C,EAAe00B,SACpB,KAAK10B,EAAe20B,SACpB,KAAK30B,EAAe40B,UACpB,KAAK50B,EAAe60B,aACpB,KAAK70B,EAAe80B,WAClB,IAAKhO,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,OAEbu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZnE,GAAe,EACnB,OAAQt1C,EAAU0M,cAChB,KAAK62D,EAAe00B,SAClB,OAAQh+E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQ62D,YAAa,MAC/C,OACA,OAAqBhjD,EAAK8a,EAAA3uB,QAAQ82D,YAAa,MAC/C,OACA,OAAqBjjD,EAAK8a,EAAA3uB,QAAQ+2D,YAAa,MAC/C,OACA,OAAqBljD,EAAK8a,EAAA3uB,QAAQg3D,YAAa,MAC/C,OACA,OACEnjD,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQg3D,YACRroC,EAAA3uB,QAAQ+2D,YACZ,MAEF,QAAqBljD,EAAK8a,EAAA3uB,QAAQi3D,YAAa,MAC/C,QAAqBpjD,EAAK8a,EAAA3uB,QAAQk3D,YAEpC,MAEF,KAAKp1B,EAAe20B,SAClB,OAAQj+E,EAAK5I,MACX,QAAqBikC,EAAK8a,EAAA3uB,QAAQm3D,YAAa,MAC/C,QAAqBtjD,EAAK8a,EAAA3uB,QAAQo3D,YAEpC,MAEF,KAAKt1B,EAAe40B,UAClB,OAAQl+E,EAAK5I,MACX,QAAqBikC,EAAK8a,EAAA3uB,QAAQq3D,aAAc,MAChD,QAAqBxjD,EAAK8a,EAAA3uB,QAAQs3D,aAEpC,MAEF,KAAKx1B,EAAe60B,aAClB,OAAQn+E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAA3uB,QAAQu3D,2BAA4B,MAC9D,OAAqB1jD,EAAK8a,EAAA3uB,QAAQw3D,2BAA4B,MAC9D,OAAqB3jD,EAAK8a,EAAA3uB,QAAQy3D,2BAA4B,MAC9D,OAAqB5jD,EAAK8a,EAAA3uB,QAAQ03D,2BAEpC,MAEF,KAAK51B,EAAe80B,WAClB,OAAQp+E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAA3uB,QAAQ23D,4BAA6B,MAC/D,OAAqB9jD,EAAK8a,EAAA3uB,QAAQ43D,4BAA6B,MAC/D,OAAqB/jD,EAAK8a,EAAA3uB,QAAQ63D,4BAA6B,MAC/D,OAAqBhkD,EAAK8a,EAAA3uB,QAAQ83D,6BAKxC,IAAW,GAAPjkD,EAMF,OALA+0C,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAE5D,OADAuoF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO23C,MAAMC,EAAInpB,GAE1B,KAAKo3C,EAAei2B,SACpB,KAAKj2B,EAAek2B,SAClB,IAAKpP,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAMT,OALA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZnE,GAAmB,EACvB,OAAQt1C,EAAU0M,cAChB,KAAK62D,EAAei2B,SAClB,OAAQv/E,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAAle,YAAYwnD,YAAa,MACnD,OACA,OAAqBpkD,EAAK8a,EAAAle,YAAYynD,YAAa,MACnD,OACA,OAAqBrkD,EAAK8a,EAAAle,YAAY0nD,YAAa,MACnD,OACA,OAAqBtkD,EAAK8a,EAAAle,YAAY2nD,YAAa,MACnD,OACA,OACEvkD,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAAle,YAAY2nD,YACZzpC,EAAAle,YAAY0nD,YAIpB,MAEF,KAAKr2B,EAAek2B,SAClB,OAAQx/E,EAAK5I,MACX,OAAqBikC,EAAK8a,EAAAle,YAAY4nD,aAAc,MACpD,OAAqBxkD,EAAK8a,EAAAle,YAAY6nD,aAAc,MACpD,OAAqBzkD,EAAK8a,EAAAle,YAAY8nD,aAAc,MACpD,OAAqB1kD,EAAK8a,EAAAle,YAAY+nD,aAAc,MACpD,OAAqB3kD,EAAK8a,EAAAle,YAAYgoD,aAAc,MACpD,OAAqB5kD,EAAK8a,EAAAle,YAAYioD,aAAc,MACpD,OAAqB7kD,EAAK8a,EAAAle,YAAYkoD,aAAc,MACpD,OAAqB9kD,EAAK8a,EAAAle,YAAYmoD,aAAc,MACpD,OACE/kD,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAAle,YAAYkoD,aACZhqC,EAAAle,YAAYgoD,aAChB,MAEF,OACE5kD,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAAle,YAAYmoD,aACZjqC,EAAAle,YAAYioD,cAOxB,IAAW,GAAP7kD,EAMF,OALA+0C,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,OAEbu8E,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKtO,IAAG,GAE3D,OADAkpF,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAOo9C,WAAWxF,EAAInpB,EAAMC,GAErC,KAAKm3C,EAAe+2B,SACpB,KAAK/2B,EAAeg3B,QACpB,KAAKh3B,EAAei3B,SAClB,IAAKnQ,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZnE,GAAgB,EACpB,OAAQt1C,EAAU0M,cAChB,QAAS9D,QAAO,GAChB,KAAK26D,EAAe+2B,SAAYhlD,EAAK8a,EAAArpB,SAAS0zD,UAAW,MACzD,KAAKl3B,EAAeg3B,QAAYjlD,EAAK8a,EAAArpB,SAAS2zD,SAAU,MACxD,KAAKn3B,EAAei3B,SAAYllD,EAAK8a,EAAArpB,SAAS4zD,UAE5CxuE,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAC5D,OAAOpE,EAAO83C,OAAOF,EAAInpB,EAAMC,GAEjC,KAAKm3C,EAAeq3B,SAClB,IAAKvQ,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAC5D,OAAOpE,EAAO23C,MAAM+a,EAAA3uB,QAAQo5D,UAAW1uE,GAEzC,KAAKo3C,EAAeu3B,eAClB,IAAKzQ,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEi7E,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK3N,KACrBpE,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDsqB,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GACxDuqB,GAAOg+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAC5D,OAAOpE,EAAOi9C,eAAexuB,EAAMC,EAAMC,IAE3C,KAAKk3C,EAAew3B,cACpB,KAAKx3B,EAAey3B,cAClB,IAAK3Q,EAAS96E,QAAQW,WAAU,GAAgB,MAChD,GACEs7E,EAAkBjkE,EAAe+8C,EAAY+lB,GAC7Ce,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACrBjE,EAAO+7C,cAGhB,IADIx/B,EAAOsN,EAAe,IACjBjN,GAAE,KAKT,OAJA+vE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAENluF,EAAO+7C,cAEZnE,GAAe,EACnB,OAAQt1C,EAAU0M,cAChB,QAAS9D,QAAO,GAChB,KAAK26D,EAAew3B,cAClB,OAAQ9gF,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQ08C,gBAAiB,MACnD,OACA,OAAqB7oC,EAAK8a,EAAA3uB,QAAQw5D,gBAAiB,MACnD,OACA,OAAqB3lD,EAAK8a,EAAA3uB,QAAQy5D,gBAAiB,MACnD,OACA,OAAqB5lD,EAAK8a,EAAA3uB,QAAQ05D,gBAAiB,MACnD,OACA,OACE7lD,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQ05D,gBACR/qC,EAAA3uB,QAAQy5D,gBAIhB,MAEF,KAAK33B,EAAey3B,cAClB,OAAQ/gF,EAAK5I,MACX,OACA,OAAqBikC,EAAK8a,EAAA3uB,QAAQw8C,gBAAiB,MACnD,OACA,OAAqB3oC,EAAK8a,EAAA3uB,QAAQ25D,gBAAiB,MACnD,OACA,OAAqB9lD,EAAK8a,EAAA3uB,QAAQ45D,gBAAiB,MACnD,OACA,OAAqB/lD,EAAK8a,EAAA3uB,QAAQ65D,gBAAiB,MACnD,OACA,OACEhmD,EAAK+0C,EAAS96E,QAAQc,SAClB+/C,EAAA3uB,QAAQ65D,gBACRlrC,EAAA3uB,QAAQ45D,iBAOpB,IAAW,GAAP/lD,EAMF,OALA+0C,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWsnB,oBAEbvB,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACrBjE,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAK3N,KAAI,GAE5D,OADAuoF,EAASxc,YAAcnmE,EAAA+H,KAAK9N,KACrBjE,EAAO23C,MAAMC,EAAInpB,GAK1B,KAAKo3C,EAAeg4B,KAClB,IAGItxE,GAHAhQ,EAAOwwE,EAAqBJ,EAAU9iE,EAAeouB,EAAU2uB,GAEnE,OADA+lB,EAASxc,YAAcnmE,EAAA+H,KAAKjO,IACvByY,IACDgQ,GAAiBhQ,EAAKgQ,iBACHA,GAAe7T,aAAa+5C,EAAA/kD,eAAeoL,YAChE6zE,EAAS/2E,MACP7L,EAAA8L,eAAegL,wBACf+lD,EAAWx2D,OAENpQ,EAAO+7C,eAET/7C,EAAOyD,IAAI8oB,GAAevc,IATfhQ,EAAO+7C,cAW3B,KAAK8pB,EAAei4B,cAClB,GACErQ,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKjO,IAAG,GAG3D,OAFA6oF,EAASlc,iBAAe,EACxBkc,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOa,KAAKglE,EAAei4B,cAAe,CAAErvE,GAAQikC,EAAAjyB,WAAWsY,MAExE,KAAK8sB,EAAek4B,cAClB,GACEtQ,EAAgB5jE,EAAe+8C,EAAYtkE,GAC3CorF,EAAkBz1C,EAAU,EAAG2uB,EAAY+lB,GAG3C,OADAA,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAO+7C,cAEZttB,EAAOk+D,EAASxX,kBAAkBl9B,EAAS,GAAI00C,EAAS96E,QAAQI,UAAS,GACzEyc,EAAOi+D,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKjO,IAAG,GAG3D,OAFA6oF,EAASlc,iBAAe,EACxBkc,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOa,KAAKglE,EAAek4B,cAAe,CAAEtvE,EAAMC,GAAQgkC,EAAAjyB,WAAWsY,MAO9E,OADItmB,EAmBR,SACEk6D,EACArqF,EACA21C,EACA2uB,GAGA,OAAQtkE,EAAU0M,cAOhB,KAAK62D,EAAem4B,QAAS,OAAOC,EAASp4B,EAAerS,IAAKm5B,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACzG,KAAKf,EAAeq4B,QAAS,OAAOD,EAASp4B,EAAerS,IAAKm5B,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACzG,KAAKf,EAAes4B,QAAS,OAAOF,EAASp4B,EAAemoB,IAAKrB,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACzG,KAAKf,EAAeu4B,QAAS,OAAOH,EAASp4B,EAAemoB,IAAKrB,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACzG,KAAKf,EAAew4B,WAAY,OAAOJ,EAASp4B,EAAeuoB,OAAQzB,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/G,KAAKf,EAAey4B,WAAY,OAAOL,EAASp4B,EAAeuoB,OAAQzB,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAe04B,SAAU,OAAON,EAASp4B,EAAe4oB,KAAM9B,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3G,KAAKf,EAAe24B,SAAU,OAAOP,EAASp4B,EAAe4oB,KAAM9B,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC3G,KAAKf,EAAe44B,SAAU,OAAOR,EAASp4B,EAAe+oB,KAAMjC,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3G,KAAKf,EAAe64B,SAAU,OAAOT,EAASp4B,EAAe+oB,KAAMjC,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC3G,KAAKf,EAAe84B,QAAS,OAAOV,EAASp4B,EAAekpB,IAAKpC,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GACzG,KAAKf,EAAe+4B,QAAS,OAAOX,EAASp4B,EAAekpB,IAAKpC,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GACzG,KAAKf,EAAeg5B,QAAS,OAAOZ,EAASp4B,EAAe2F,IAAKmhB,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GACzG,KAAKf,EAAei5B,QAAS,OAAOb,EAASp4B,EAAe2F,IAAKmhB,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GACzG,KAAKf,EAAek5B,QAAS,OAAOd,EAASp4B,EAAe4pB,IAAK9C,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GACzG,KAAKf,EAAem5B,QAAS,OAAOf,EAASp4B,EAAe4pB,IAAK9C,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GACzG,KAAKf,EAAeo5B,SAAU,OAAOhB,EAASp4B,EAAe7S,KAAM25B,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC3G,KAAKf,EAAeq5B,SAAU,OAAOjB,EAASp4B,EAAe7S,KAAM25B,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAC3G,KAAKf,EAAes5B,UAAW,OAAOlB,EAASp4B,EAAe+pB,MAAOjD,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC7G,KAAKf,EAAeu5B,UAAW,OAAOnB,EAASp4B,EAAe+pB,MAAOjD,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAC7G,KAAKf,EAAew5B,aAAc,OAAOpB,EAASp4B,EAAeoqB,SAAUtD,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GACnH,KAAKf,EAAey5B,aAAc,OAAOrB,EAASp4B,EAAeoqB,SAAUtD,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GACnH,KAAKf,EAAe05B,YAAa,OAAOtB,EAASp4B,EAAeuqB,QAASzD,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GACjH,KAAKf,EAAe25B,YAAa,OAAOvB,EAASp4B,EAAeuqB,QAASzD,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GACjH,KAAKf,EAAe45B,oBAAqB,OAAOxB,EAASp4B,EAAe0qB,YAAa5D,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC7H,KAAKf,EAAe65B,oBAAqB,OAAOzB,EAASp4B,EAAe0qB,YAAa5D,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAC7H,KAAKf,EAAe85B,oBAAqB,OAAO1B,EAASp4B,EAAe0qB,YAAa5D,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAe+5B,oBAAqB,OAAO3B,EAASp4B,EAAe0qB,YAAa5D,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAeg6B,SAAU,OAAO5B,EAASp4B,EAAe+qB,KAAMjE,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC3G,KAAKf,EAAei6B,SAAU,OAAO7B,EAASp4B,EAAe+qB,KAAMjE,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAC3G,KAAKf,EAAek6B,UAAW,OAAO9B,EAASp4B,EAAekrB,MAAOpE,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC7G,KAAKf,EAAem6B,UAAW,OAAO/B,EAASp4B,EAAekrB,MAAOpE,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAC7G,KAAKf,EAAeo6B,YAAa,OAAOhC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7G,KAAKf,EAAeq6B,YAAa,OAAOjC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7G,KAAKf,EAAes6B,aAAc,OAAOlC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/G,KAAKf,EAAeu6B,aAAc,OAAOnC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/G,KAAKf,EAAew6B,SAAU,OAAOpC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3G,KAAKf,EAAey6B,YAAa,OAAOrC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7G,KAAKf,EAAe06B,YAAa,OAAOtC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7G,KAAKf,EAAe26B,aAAc,OAAOvC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAe46B,aAAc,OAAOxC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAe66B,aAAc,OAAOzC,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAe86B,aAAc,OAAO1C,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAe+6B,SAAU,OAAO3C,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC3G,KAAKf,EAAeg7B,SAAU,OAAO5C,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC3G,KAAKf,EAAei7B,SAAU,OAAO7C,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAC3G,KAAKf,EAAek7B,WAAY,OAAO9C,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7G,KAAKf,EAAem7B,YAAa,OAAO/C,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/G,KAAKf,EAAeo7B,UAAW,OAAOhD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7G,KAAKf,EAAeq7B,WAAY,OAAOjD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7G,KAAKf,EAAes7B,YAAa,OAAOlD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAeu7B,YAAa,OAAOnD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/G,KAAKf,EAAew7B,UAAW,OAAOpD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7G,KAAKf,EAAey7B,UAAW,OAAOrD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAC7G,KAAKf,EAAe07B,UAAW,OAAOtD,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAE/G,GAAI+lB,EAAS96E,QAAQW,WAAU,IAC7B,OAAQlQ,EAAU0M,cAEhB,KAAK62D,EAAe27B,mBAAoB,OAAOvD,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAe47B,oBAAqB,OAAOxD,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAe67B,gBAAiB,OAAOzD,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACzH,KAAKf,EAAe87B,mBAAoB,OAAO1D,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC3H,KAAKf,EAAe+7B,oBAAqB,OAAO3D,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAeg8B,oBAAqB,OAAO5D,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAei8B,gBAAiB,OAAO7D,EAASp4B,EAAe5sB,YAAa0zC,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAEzH,KAAKf,EAAek8B,kBAAmB,OAAO9D,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAem8B,mBAAoB,OAAO/D,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAeo8B,iBAAkB,OAAOhE,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAeq8B,kBAAmB,OAAOjE,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC3H,KAAKf,EAAes8B,mBAAoB,OAAOlE,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAeu8B,mBAAoB,OAAOnE,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAew8B,iBAAkB,OAAOpE,EAASp4B,EAAe1sB,aAAcwzC,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAE3H,KAAKf,EAAey8B,sBAAuB,OAAOrE,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAe08B,uBAAwB,OAAOtE,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/H,KAAKf,EAAe28B,mBAAoB,OAAOvE,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAe48B,sBAAuB,OAAOxE,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAe68B,uBAAwB,OAAOzE,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAe88B,uBAAwB,OAAO1E,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAe+8B,mBAAoB,OAAO3E,EAASp4B,EAAe6rB,WAAY/E,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAE3H,KAAKf,EAAeg9B,sBAAuB,OAAO5E,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAei9B,uBAAwB,OAAO7E,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/H,KAAKf,EAAek9B,mBAAoB,OAAO9E,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAem9B,sBAAuB,OAAO/E,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAeo9B,uBAAwB,OAAOhF,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAeq9B,uBAAwB,OAAOjF,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAes9B,mBAAoB,OAAOlF,EAASp4B,EAAe8rB,WAAYhF,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAE3H,KAAKf,EAAeu9B,sBAAuB,OAAOnF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAew9B,uBAAwB,OAAOpF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/H,KAAKf,EAAey9B,mBAAoB,OAAOrF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAe09B,sBAAuB,OAAOtF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAe29B,uBAAwB,OAAOvF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAe49B,uBAAwB,OAAOxF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAe69B,mBAAoB,OAAOzF,EAASp4B,EAAe+rB,WAAYjF,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAE3H,KAAKf,EAAe89B,qBAAsB,OAAO1F,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAe+9B,sBAAuB,OAAO3F,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAeg+B,kBAAmB,OAAO5F,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACzH,KAAKf,EAAei+B,qBAAsB,OAAO7F,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC3H,KAAKf,EAAek+B,sBAAuB,OAAO9F,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAem+B,sBAAuB,OAAO/F,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAeo+B,kBAAmB,OAAOhG,EAASp4B,EAAegsB,UAAWlF,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAEzH,KAAKf,EAAeq+B,sBAAuB,OAAOjG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAes+B,uBAAwB,OAAOlG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/H,KAAKf,EAAeu+B,mBAAoB,OAAOnG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC3H,KAAKf,EAAew+B,sBAAuB,OAAOpG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC7H,KAAKf,EAAey+B,uBAAwB,OAAOrG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAe0+B,uBAAwB,OAAOtG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAe2+B,mBAAoB,OAAOvG,EAASp4B,EAAeisB,WAAYnF,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAE3H,KAAKf,EAAe4+B,uBAAwB,OAAOxG,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC/H,KAAKf,EAAe6+B,wBAAyB,OAAOzG,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACjI,KAAKf,EAAe8+B,oBAAqB,OAAO1G,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC7H,KAAKf,EAAe++B,uBAAwB,OAAO3G,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAC/H,KAAKf,EAAeg/B,wBAAyB,OAAO5G,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACjI,KAAKf,EAAei/B,wBAAyB,OAAO7G,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACjI,KAAKf,EAAek/B,oBAAqB,OAAO9G,EAASp4B,EAAeksB,YAAapF,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAE7H,KAAKf,EAAem/B,0BAA2B,OAAO/G,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACrI,KAAKf,EAAeo/B,2BAA4B,OAAOhH,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACvI,KAAKf,EAAeq/B,uBAAwB,OAAOjH,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACnI,KAAKf,EAAes/B,0BAA2B,OAAOlH,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACrI,KAAKf,EAAeu/B,2BAA4B,OAAOnH,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACvI,KAAKf,EAAew/B,2BAA4B,OAAOpH,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GACvI,KAAKf,EAAey/B,uBAAwB,OAAOrH,EAASp4B,EAAetsB,eAAgBozC,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAEnI,KAAKf,EAAe0/B,SAAU,OAAOtH,EAASp4B,EAAelsB,YAAagzC,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAClH,KAAKf,EAAe2/B,SAAU,OAAOvH,EAASp4B,EAAelsB,YAAagzC,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAGtH,GAAI+lB,EAAS96E,QAAQW,WAAU,GAC7B,OAAQlQ,EAAU0M,cAEhB,KAAK62D,EAAe4/B,UAAW,OAAOxH,EAASp4B,EAAentB,KAAMi0C,EAAU3iF,EAAA+H,KAAK3N,KAAM6zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC9G,KAAKf,EAAe6/B,WAAY,OAAOzH,EAASp4B,EAAepuB,MAAOk1C,EAAU3iF,EAAA+H,KAAK3N,KAAM6zC,EAAUjuC,EAAA+H,KAAKG,KAAM00D,GAEhH,KAAKf,EAAe8/B,YAAa,OAAO1H,EAASp4B,EAAeutB,WAAYzG,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACpH,KAAKf,EAAe+/B,qBAAsB,OAAO3H,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKxO,GAAIqjE,GAClI,KAAKf,EAAeggC,qBAAsB,OAAO5H,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAKnO,GAAIgjE,GAClI,KAAKf,EAAeigC,mBAAoB,OAAO7H,EAASp4B,EAAewuB,kBAAmB1H,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAClI,KAAKf,EAAekgC,UAAW,OAAO9H,EAASp4B,EAAeqvB,SAAUvI,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAemgC,UAAW,OAAO/H,EAASp4B,EAAesvB,SAAUxI,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAeogC,UAAW,OAAOhI,EAASp4B,EAAeuvB,SAAUzI,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAeqgC,UAAW,OAAOjI,EAASp4B,EAAe00B,SAAU5N,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAesgC,qBAAsB,OAAOlI,EAASp4B,EAAeyvB,kBAAmB3I,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACpI,KAAKf,EAAeugC,qBAAsB,OAAOnI,EAASp4B,EAAeyvB,kBAAmB3I,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACpI,KAAKf,EAAewgC,qBAAsB,OAAOpI,EAASp4B,EAAe0vB,kBAAmB5I,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACpI,KAAKf,EAAeygC,qBAAsB,OAAOrI,EAASp4B,EAAe0vB,kBAAmB5I,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACpI,KAAKf,EAAe0gC,UAAW,OAAOtI,EAASp4B,EAAei2B,SAAUnP,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAe2gC,YAAa,OAAOvI,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAClH,KAAKf,EAAe4gC,YAAa,OAAOxI,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAClH,KAAKf,EAAe6gC,eAAgB,OAAOzI,EAASp4B,EAAew3B,cAAe1Q,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACzH,KAAKf,EAAe8gC,eAAgB,OAAO1I,EAASp4B,EAAey3B,cAAe3Q,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GACzH,KAAKf,EAAe+gC,SAAU,OAAO3I,EAASp4B,EAAe6vB,QAAS/I,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC9G,KAAKf,EAAeghC,SAAU,OAAO5I,EAASp4B,EAAe8vB,QAAShJ,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC9G,KAAKf,EAAeihC,WAAY,OAAO7I,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAekhC,WAAY,OAAO9I,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAemhC,WAAY,OAAO/I,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAeohC,WAAY,OAAOhJ,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAeqhC,WAAY,OAAOjJ,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAeshC,WAAY,OAAOlJ,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAeuhC,WAAY,OAAOnJ,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAChH,KAAKf,EAAewhC,WAAY,OAAOpJ,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAKnO,GAAIq0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAEhH,KAAKf,EAAeyhC,YAAa,OAAOrJ,EAASp4B,EAAeutB,WAAYzG,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrH,KAAKf,EAAe0hC,qBAAsB,OAAOtJ,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKvO,IAAKojE,GACpI,KAAKf,EAAe2hC,qBAAsB,OAAOvJ,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAKlO,IAAK+iE,GACpI,KAAKf,EAAe4hC,mBAAoB,OAAOxJ,EAASp4B,EAAewuB,kBAAmB1H,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnI,KAAKf,EAAe6hC,UAAW,OAAOzJ,EAASp4B,EAAeqvB,SAAUvI,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe8hC,UAAW,OAAO1J,EAASp4B,EAAesvB,SAAUxI,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe+hC,UAAW,OAAO3J,EAASp4B,EAAeuvB,SAAUzI,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAegiC,UAAW,OAAO5J,EAASp4B,EAAe00B,SAAU5N,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeiiC,qBAAsB,OAAO7J,EAASp4B,EAAeyvB,kBAAmB3I,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrI,KAAKf,EAAekiC,qBAAsB,OAAO9J,EAASp4B,EAAeyvB,kBAAmB3I,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrI,KAAKf,EAAemiC,qBAAsB,OAAO/J,EAASp4B,EAAe0vB,kBAAmB5I,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrI,KAAKf,EAAeoiC,qBAAsB,OAAOhK,EAASp4B,EAAe0vB,kBAAmB5I,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrI,KAAKf,EAAeqiC,UAAW,OAAOjK,EAASp4B,EAAei2B,SAAUnP,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAesiC,YAAa,OAAOlK,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAeuiC,YAAa,OAAOnK,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAewiC,eAAgB,OAAOpK,EAASp4B,EAAew3B,cAAe1Q,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC1H,KAAKf,EAAeyiC,eAAgB,OAAOrK,EAASp4B,EAAey3B,cAAe3Q,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC1H,KAAKf,EAAe0iC,SAAU,OAAOtK,EAASp4B,EAAe6vB,QAAS/I,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe2iC,SAAU,OAAOvK,EAASp4B,EAAe8vB,QAAShJ,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe4iC,WAAY,OAAOxK,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe6iC,WAAY,OAAOzK,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe8iC,WAAY,OAAO1K,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe+iC,WAAY,OAAO3K,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAegjC,WAAY,OAAO5K,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeijC,WAAY,OAAO7K,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAekjC,WAAY,OAAO9K,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAKvO,IAAKy0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAemjC,WAAY,OAAO/K,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAKlO,IAAKo0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAEjH,KAAKf,EAAeojC,YAAa,OAAOhL,EAASp4B,EAAeutB,WAAYzG,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrH,KAAKf,EAAeqjC,mBAAoB,OAAOjL,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAClI,KAAKf,EAAesjC,mBAAoB,OAAOlL,EAASp4B,EAAewuB,kBAAmB1H,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnI,KAAKf,EAAeujC,UAAW,OAAOnL,EAASp4B,EAAeqvB,SAAUvI,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAewjC,UAAW,OAAOpL,EAASp4B,EAAesvB,SAAUxI,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeyjC,UAAW,OAAOrL,EAASp4B,EAAeuvB,SAAUzI,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe0jC,UAAW,OAAOtL,EAASp4B,EAAe00B,SAAU5N,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe2jC,UAAW,OAAOvL,EAASp4B,EAAei2B,SAAUnP,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe4jC,YAAa,OAAOxL,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAe6jC,YAAa,OAAOzL,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAe8jC,eAAgB,OAAO1L,EAASp4B,EAAew3B,cAAe1Q,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC1H,KAAKf,EAAe+jC,eAAgB,OAAO3L,EAASp4B,EAAey3B,cAAe3Q,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC1H,KAAKf,EAAegkC,SAAU,OAAO5L,EAASp4B,EAAe6vB,QAAS/I,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAeikC,SAAU,OAAO7L,EAASp4B,EAAe8vB,QAAShJ,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAekkC,WAAY,OAAO9L,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAemkC,WAAY,OAAO/L,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeokC,WAAY,OAAOhM,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeqkC,WAAY,OAAOjM,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeskC,WAAY,OAAOlM,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeukC,WAAY,OAAOnM,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAewkC,WAAY,OAAOpM,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeykC,WAAY,OAAOrM,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe0kC,wBAAyB,OAAOtM,EAASp4B,EAAe80B,WAAYhO,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjI,KAAKf,EAAe2kC,wBAAyB,OAAOvM,EAASp4B,EAAe80B,WAAYhO,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAEjI,KAAKf,EAAe4kC,YAAa,OAAOxM,EAASp4B,EAAeutB,WAAYzG,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrH,KAAKf,EAAe6kC,mBAAoB,OAAOzM,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKrO,IAAKkjE,GAClI,KAAKf,EAAe8kC,mBAAoB,OAAO1M,EAASp4B,EAAewuB,kBAAmB1H,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnI,KAAKf,EAAe+kC,UAAW,OAAO3M,EAASp4B,EAAeqvB,SAAUvI,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeglC,UAAW,OAAO5M,EAASp4B,EAAesvB,SAAUxI,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeilC,UAAW,OAAO7M,EAASp4B,EAAe00B,SAAU5N,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeklC,UAAW,OAAO9M,EAASp4B,EAAei2B,SAAUnP,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAemlC,YAAa,OAAO/M,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAeolC,YAAa,OAAOhN,EAASp4B,EAAek2B,SAAUpP,EAAU3iF,EAAA+H,KAAKhO,IAAKk0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAeqlC,eAAgB,OAAOjN,EAASp4B,EAAew3B,cAAe1Q,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC1H,KAAKf,EAAeslC,eAAgB,OAAOlN,EAASp4B,EAAey3B,cAAe3Q,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAKtO,IAAKmjE,GAC1H,KAAKf,EAAeulC,wBAAyB,OAAOnN,EAASp4B,EAAe80B,WAAYhO,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjI,KAAKf,EAAewlC,wBAAyB,OAAOpN,EAASp4B,EAAe80B,WAAYhO,EAAU3iF,EAAA+H,KAAKhO,IAAKk0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAEjI,KAAKf,EAAeylC,YAAa,OAAOrN,EAASp4B,EAAeutB,WAAYzG,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrH,KAAKf,EAAe0lC,mBAAoB,OAAOtN,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK7N,IAAK0iE,GAClI,KAAKf,EAAe2lC,mBAAoB,OAAOvN,EAASp4B,EAAewuB,kBAAmB1H,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnI,KAAKf,EAAe4lC,UAAW,OAAOxN,EAASp4B,EAAeqvB,SAAUvI,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe6lC,UAAW,OAAOzN,EAASp4B,EAAesvB,SAAUxI,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe8lC,UAAW,OAAO1N,EAASp4B,EAAeuvB,SAAUzI,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAe+lC,UAAW,OAAO3N,EAASp4B,EAAewvB,SAAU1I,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAegmC,UAAW,OAAO5N,EAASp4B,EAAe00B,SAAU5N,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeimC,UAAW,OAAO7N,EAASp4B,EAAe2vB,SAAU7I,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAekmC,UAAW,OAAO9N,EAASp4B,EAAe4vB,SAAU9I,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAemmC,UAAW,OAAO/N,EAASp4B,EAAe20B,SAAU7N,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeomC,WAAY,OAAOhO,EAASp4B,EAAe40B,UAAW9N,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAeqmC,SAAU,OAAOjO,EAASp4B,EAAe6vB,QAAS/I,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAesmC,SAAU,OAAOlO,EAASp4B,EAAe8vB,QAAShJ,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAeumC,SAAU,OAAOnO,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAewmC,SAAU,OAAOpO,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAeymC,SAAU,OAAOrO,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe0mC,SAAU,OAAOtO,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAK7N,IAAK+zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe2mC,sBAAuB,OAAOvO,EAASp4B,EAAe60B,aAAc/N,EAAU3iF,EAAA+H,KAAKtO,IAAKw0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjI,KAAKf,EAAe4mC,sBAAuB,OAAOxO,EAASp4B,EAAe60B,aAAc/N,EAAU3iF,EAAA+H,KAAKjO,IAAKm0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAEjI,KAAKf,EAAe6mC,YAAa,OAAOzO,EAASp4B,EAAeutB,WAAYzG,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACrH,KAAKf,EAAe8mC,mBAAoB,OAAO1O,EAASp4B,EAAe8tB,kBAAmBhH,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK5N,IAAKyiE,GAClI,KAAKf,EAAe+mC,mBAAoB,OAAO3O,EAASp4B,EAAewuB,kBAAmB1H,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnI,KAAKf,EAAegnC,UAAW,OAAO5O,EAASp4B,EAAeqvB,SAAUvI,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeinC,UAAW,OAAO7O,EAASp4B,EAAesvB,SAAUxI,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeknC,UAAW,OAAO9O,EAASp4B,EAAeuvB,SAAUzI,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAemnC,UAAW,OAAO/O,EAASp4B,EAAewvB,SAAU1I,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeonC,UAAW,OAAOhP,EAASp4B,EAAe00B,SAAU5N,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeqnC,UAAW,OAAOjP,EAASp4B,EAAe2vB,SAAU7I,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAesnC,UAAW,OAAOlP,EAASp4B,EAAe4vB,SAAU9I,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAeunC,UAAW,OAAOnP,EAASp4B,EAAe20B,SAAU7N,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjH,KAAKf,EAAewnC,WAAY,OAAOpP,EAASp4B,EAAe40B,UAAW9N,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACnH,KAAKf,EAAeynC,SAAU,OAAOrP,EAASp4B,EAAe6vB,QAAS/I,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe0nC,SAAU,OAAOtP,EAASp4B,EAAe8vB,QAAShJ,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe2nC,SAAU,OAAOvP,EAASp4B,EAAe+vB,QAASjJ,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe4nC,SAAU,OAAOxP,EAASp4B,EAAegwB,QAASlJ,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe6nC,SAAU,OAAOzP,EAASp4B,EAAeiwB,QAASnJ,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe8nC,SAAU,OAAO1P,EAASp4B,EAAekwB,QAASpJ,EAAU3iF,EAAA+H,KAAK5N,IAAK8zC,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAC/G,KAAKf,EAAe+nC,sBAAuB,OAAO3P,EAASp4B,EAAe60B,aAAc/N,EAAU3iF,EAAA+H,KAAKrO,IAAKu0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GACjI,KAAKf,EAAegoC,sBAAuB,OAAO5P,EAASp4B,EAAe60B,aAAc/N,EAAU3iF,EAAA+H,KAAKhO,IAAKk0C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAEjI,KAAKf,EAAeioC,cAAe,OAAO7P,EAASp4B,EAAe+uB,aAAcjI,EAAU3iF,EAAA+H,KAAKxO,GAAI00C,EAAUjuC,EAAA+H,KAAK3N,KAAMwiE,GAI5H,OAAO,EA3TMmnC,CAAYphB,EAAUrqF,EAAW21C,EAAU2uB,KAEhD/8C,GACF8iE,EAAS/2E,MACP7L,EAAA8L,eAAeqsD,sBACf0E,EAAWsnB,mBAAoB5rF,EAAU0M,cAGtCyjB,IAGXk6D,EAAS/2E,MACP7L,EAAA8L,eAAe8sD,mBACfiE,EAAW1zC,WAAW9iB,MAAO9N,EAAU0M,cAElChP,EAAO+7C,eAgThB,SAASkiD,EACPh9F,EACA0rF,EACA9pB,EACA5qB,EACAwrB,EACAmD,GAEA17D,OAAOyhF,EAASzpE,QAAQhV,eAAeyD,IAAI1Q,IAC3C,IAAIqB,EAAYqqF,EAASzpE,QAAQhV,eAAe3M,IAAIN,GAEpD,OADAiK,OAAO5I,EAAUqR,MAAQ8+C,EAAAhlD,YAAY6N,oBAC9BoqE,EACLiH,EACmBrqF,EACnB,CAAEugE,GACF5qB,EACAwrB,EACAmD,GACY,GAKhB,SAAgB8V,EACdiQ,EACAp+D,EACAq4C,GAEA,IAAI1jD,EAAUypE,EAASzpE,QACnBljB,EAAS2sF,EAAS3sF,OAElBsX,EAAiBq1E,EAASzpE,QAAQ5L,eACtC,IAAKA,EAAgB,OAAOtX,EAAO+7C,cAEnC,IAAIhiC,EAAgBmJ,EAAQnJ,cAC5B,IAAMA,IAAiB4yE,EAAStW,gBAAgBt8D,GAAiB,OAAO/Z,EAAO+7C,cAG/D,OAAZxtB,EAKWo+D,EAASxX,kBAAkB5mD,EAASjX,EAAeiF,KAAM,IAEzDjF,EAAeiF,KAAKg4C,aAAav0D,GAG9B2sF,EAAS9U,mBAAmBjR,EAAWx2D,MAAMX,OAAOF,gBAGtE,OADAo9E,EAASxc,YAAcnmE,EAAA+H,KAAKG,KACrBlS,EAAOs6C,MAAM,KAAM,CACxBt6C,EAAOa,KACLkZ,EAAc/K,aAAc,GAM5B0jD,EAAAjyB,WAAWsY,MAEb/4C,EAAO+7C,gBA6KX,SAASiyD,EAAmBzxF,GAC1B,IAAIrM,EAAQ,IAA+B,GAAKqM,EAAKguE,WAKrD,OAJIhuE,EAAKK,GAAE,KAAoB1M,GAAK,MAChCqM,EAAKK,GAAE,KAAmB1M,GAAK,MAC/BqM,EAAKK,GAAE,OAAsB1M,GAAK,MAClCqM,EAAKk3D,YAAWvjE,GAAK,MAClBA,EAAK,GA2Dd,SAAS68E,EACPJ,EACA9iE,EACAouB,EACA2uB,GAEA,GAAuB,GAAnB3uB,EAAS9sC,OACX,OAAK0e,GAAyC,GAAxBA,EAAc1e,OAO7B0e,EAAc,IANnB8iE,EAAS/2E,MACP7L,EAAA8L,eAAe+sD,oCACfgE,EAAWsnB,mBAAoB,IAAKrkE,EAAgBA,EAAc1e,OAAOkT,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnB45B,EAAS9sC,OAAa,CACxB,GAAsB,OAAlB0e,GAA0BA,EAAc1e,OAAQ,CAClD,GAAI0e,EAAc1e,OAAS,EAKzB,OAJAwhF,EAAS/2E,MACP7L,EAAA8L,eAAe+sD,oCACfgE,EAAWsnB,mBAAoB,IAAKrkE,EAAc1e,OAAOkT,SAAS,KAE7D,KAETsuE,EAASxX,kBAAkBl9B,EAAS,GAAIpuB,EAAc,GAAE,QAExD8iE,EAASxX,kBAAkBl9B,EAAS,GAAIjuC,EAAA+H,KAAKwhD,MAE/C,OAAOo5B,EAASxc,YAYlB,OAVItmD,GAAiBA,EAAc1e,OAAS,GAC1CwhF,EAAS/2E,MACP7L,EAAA8L,eAAe+sD,oCACfgE,EAAWsnB,mBAAoB,IAAKrkE,EAAc1e,OAAOkT,SAAS,KAGtEsuE,EAAS/2E,MACP7L,EAAA8L,eAAesL,+BACfylD,EAAWqnC,eAAgB,IAAKh2D,EAAS9sC,OAAOkT,SAAS,KAEpD,KAIT,SAAS+yE,EAAwBl+D,EAAwBy5D,GACvD,IAAIl6D,EACA9wB,EA6BJ,OA5BIgrF,EAAS96E,QAAQc,UACnB8f,EAAOk6D,EAAS9pC,qBAAqB3vB,EAAYlpB,EAAA+H,KAAKshD,QAAO,IAE3DX,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,OACtCsN,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAW/5B,KACR,GAA9BgsD,EAAAhL,qBAAqBj1B,KACpB9wB,EAAQ+wD,EAAAjL,oBAAoBh1B,IAAS,KAEtCk6D,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfhgE,EAAW9iB,OAEbzO,GAAS,KAGX8wB,EAAOk6D,EAAS9pC,qBAAqB3vB,EAAYlpB,EAAA+H,KAAKuhD,QAAO,IAE3DZ,EAAApL,gBAAgB70B,IAASigC,EAAAhyB,aAAa0kB,OACtCsN,EAAAnL,kBAAkB90B,IAASigC,EAAAjyB,WAAWh6B,MACrC9E,EAAQ+wD,EAAAlL,iBAAiB/0B,IAAS,KAEnCk6D,EAAS/2E,MACP7L,EAAA8L,eAAeq9E,2CACfhgE,EAAW9iB,OAEbzO,GAAS,IAGNA,EAIT,SAASmsF,EACPjkE,EACA+8C,EACA+lB,EACAuhB,GAEA,QAFA,IAAAA,OAAA,GAEIrkF,EAAe,CACjB,IAAIe,EAAmBf,EAAc1e,OACrC,GAAwB,GAApByf,EAAuB,OAAO,EAClC1f,OAAO0f,GACHsjF,IAAuBvhB,EAASxc,YAActmD,EAAc,IAChE8iE,EAAS/2E,MACP7L,EAAA8L,eAAe+sD,oCACfgE,EAAWsnB,mBAAoB,IAAKtjE,EAAiBvM,iBAGvDsuE,EAAS/2E,MACP7L,EAAA8L,eAAe+sD,oCACfgE,EAAWx2D,MAAO,IAAK,KAG3B,OAAO,EAIT,SAASi+E,EACPxkE,EACA+8C,EACA+lB,EACAuhB,GAEA,QAFA,IAAAA,OAAA,GAEIrkF,EAAe,CACjB,IAAIe,EAAmBf,EAAc1e,OACrC,OAAwB,GAApByf,EAA8B,GAClC1f,OAAO0f,GACHsjF,IAAuBvhB,EAASxc,YAActmD,EAAc,IAChE8iE,EAAS/2E,MACP7L,EAAA8L,eAAe+sD,oCACfgE,EAAWsnB,mBAAoB,IAAKtjE,EAAiBvM,YAEhD,GAET,OAAO,EAIT,SAASovE,EACP5jE,EACA+8C,EACAtkE,GAEA,OAAIunB,GACFvnB,EAAU4gB,QAAQtN,MAChB7L,EAAA8L,eAAeqsD,sBACf0E,EAAWsnB,mBAAoB5rF,EAAU0M,cAEpC,GAEF,EAIT,SAAS0+E,EACPz1C,EACAuB,EACAotB,EACA+lB,GAEA,OAAI10C,EAAS9sC,QAAUquC,GACrBmzC,EAAS/2E,MACP7L,EAAA8L,eAAesL,+BACfylD,EAAWx2D,MAAOopC,EAASn7B,WAAY45B,EAAS9sC,OAAOkT,YAElD,GAEF,EAIT,SAAS4vE,EACPh2C,EACAk2D,EACAC,EACAxnC,EACA+lB,GAEA,IAAIlE,EAAcxwC,EAAS9sC,OAC3B,OAAIs9E,EAAc0lB,GAChBxhB,EAAS/2E,MACP7L,EAAA8L,eAAeiwE,wCACflf,EAAWx2D,MAAO+9F,EAAgB9vF,WAAYoqE,EAAYpqE,YAErD,GACEoqE,EAAc2lB,GACvBzhB,EAAS/2E,MACP7L,EAAA8L,eAAesL,+BACfylD,EAAWx2D,MAAOg+F,EAAgB/vF,WAAYoqE,EAAYpqE,YAErD,GAEF,GA3sIT,SAAiBwnD,GAEFA,EAAAinB,UAAY,0BACZjnB,EAAAmnB,QAAU,wBACVnnB,EAAAonB,UAAY,0BACZpnB,EAAAqnB,SAAW,yBACXrnB,EAAAsnB,YAAc,4BACdtnB,EAAAunB,SAAW,yBACXvnB,EAAAwnB,QAAU,wBACVxnB,EAAAynB,YAAc,4BACdznB,EAAA0nB,WAAa,2BACb1nB,EAAA10C,WAAa,2BACb00C,EAAA2nB,UAAY,0BACZ3nB,EAAA+nB,WAAa,2BACb/nB,EAAA4N,UAAY,0BAEZ5N,EAAArS,IAAM,oBACNqS,EAAAmoB,IAAM,oBACNnoB,EAAAuoB,OAAS,uBACTvoB,EAAA4oB,KAAO,qBACP5oB,EAAA+oB,KAAO,qBACP/oB,EAAAkpB,IAAM,oBACNlpB,EAAA2F,IAAM,oBACN3F,EAAA4pB,IAAM,oBACN5pB,EAAA7S,KAAO,qBACP6S,EAAA+pB,MAAQ,sBACR/pB,EAAAoqB,SAAW,yBACXpqB,EAAAuqB,QAAU,wBACVvqB,EAAA0qB,YAAc,4BACd1qB,EAAA+qB,KAAO,qBACP/qB,EAAAkrB,MAAQ,sBACRlrB,EAAAntB,KAAO,qBACPmtB,EAAApuB,MAAQ,sBACRouB,EAAA5sB,YAAc,4BACd4sB,EAAA1sB,aAAe,6BACf0sB,EAAA6rB,WAAa,2BACb7rB,EAAA8rB,WAAa,2BACb9rB,EAAA+rB,WAAa,2BACb/rB,EAAAgsB,UAAY,0BACZhsB,EAAAisB,WAAa,2BACbjsB,EAAAksB,YAAc,4BACdlsB,EAAAtsB,eAAiB,+BACjBssB,EAAAlsB,YAAc,4BACdksB,EAAA9rB,cAAgB,8BAEhB8rB,EAAAgoB,OAAS,uBACThoB,EAAAkoB,QAAU,wBACVloB,EAAAx6C,SAAW,yBACXw6C,EAAAxqB,OAAS,uBACTwqB,EAAA9pB,YAAc,4BACd8pB,EAAAzvB,WAAa,2BACbyvB,EAAA36D,OAAS,uBACT26D,EAAA36C,UAAY,0BACZ26C,EAAA8sB,YAAc,4BACd9sB,EAAAhqB,cAAgB,8BAChBgqB,EAAAmtB,YAAc,4BACdntB,EAAAg4B,KAAO,qBAEPh4B,EAAAtiE,GAAK,mBACLsiE,EAAAriE,IAAM,oBACNqiE,EAAApiE,IAAM,oBACNoiE,EAAAniE,IAAM,oBACNmiE,EAAAliE,MAAQ,sBACRkiE,EAAAjiE,GAAK,mBACLiiE,EAAAhiE,IAAM,oBACNgiE,EAAA/hE,IAAM,oBACN+hE,EAAA9hE,IAAM,oBACN8hE,EAAA7hE,MAAQ,sBACR6hE,EAAA5hE,KAAO,qBACP4hE,EAAA3hE,IAAM,oBACN2hE,EAAA1hE,IAAM,oBACN0hE,EAAAzhE,KAAO,qBACPyhE,EAAA9gE,MAAQ,qBAER8gE,EAAAm4B,QAAU,wBACVn4B,EAAAq4B,QAAU,wBACVr4B,EAAAs4B,QAAU,wBACVt4B,EAAAu4B,QAAU,wBACVv4B,EAAAw4B,WAAa,2BACbx4B,EAAAy4B,WAAa,2BACbz4B,EAAA04B,SAAW,yBACX14B,EAAA24B,SAAW,yBACX34B,EAAA44B,SAAW,yBACX54B,EAAA64B,SAAW,yBAEX74B,EAAA84B,QAAU,wBACV94B,EAAA+4B,QAAU,wBACV/4B,EAAAg5B,QAAU,wBACVh5B,EAAAi5B,QAAU,wBACVj5B,EAAAk5B,QAAU,wBACVl5B,EAAAm5B,QAAU,wBACVn5B,EAAAo5B,SAAW,yBACXp5B,EAAAq5B,SAAW,yBACXr5B,EAAAs5B,UAAY,0BACZt5B,EAAAu5B,UAAY,0BACZv5B,EAAAw5B,aAAe,6BACfx5B,EAAAy5B,aAAe,6BACfz5B,EAAA05B,YAAc,4BACd15B,EAAA25B,YAAc,4BACd35B,EAAA45B,oBAAsB,oCACtB55B,EAAA65B,oBAAsB,oCACtB75B,EAAA85B,oBAAsB,oCACtB95B,EAAA+5B,oBAAsB,oCACtB/5B,EAAAg6B,SAAW,yBACXh6B,EAAAi6B,SAAW,yBACXj6B,EAAAk6B,UAAY,0BACZl6B,EAAAm6B,UAAY,0BAEZn6B,EAAAo6B,YAAc,4BACdp6B,EAAAq6B,YAAc,4BACdr6B,EAAAs6B,aAAe,6BACft6B,EAAAu6B,aAAe,6BACfv6B,EAAAw6B,SAAW,yBACXx6B,EAAAy6B,YAAc,4BACdz6B,EAAA06B,YAAc,4BACd16B,EAAA26B,aAAe,6BACf36B,EAAA46B,aAAe,6BACf56B,EAAA66B,aAAe,6BACf76B,EAAA86B,aAAe,6BACf96B,EAAA+6B,SAAW,yBACX/6B,EAAAg7B,SAAW,yBACXh7B,EAAAi7B,SAAW,yBACXj7B,EAAAk7B,WAAa,2BACbl7B,EAAAm7B,YAAc,4BACdn7B,EAAAo7B,UAAY,0BACZp7B,EAAAq7B,WAAa,2BACbr7B,EAAAs7B,YAAc,4BACdt7B,EAAAu7B,YAAc,4BACdv7B,EAAAw7B,UAAY,0BACZx7B,EAAAy7B,UAAY,0BACZz7B,EAAA07B,UAAY,0BAEZ17B,EAAA27B,mBAAqB,mCACrB37B,EAAA47B,oBAAsB,oCACtB57B,EAAA67B,gBAAkB,gCAClB77B,EAAA87B,mBAAqB,mCACrB97B,EAAA+7B,oBAAsB,oCACtB/7B,EAAAg8B,oBAAsB,oCACtBh8B,EAAAi8B,gBAAkB,gCAClBj8B,EAAAk8B,kBAAoB,kCACpBl8B,EAAAm8B,mBAAqB,mCACrBn8B,EAAAo8B,iBAAmB,iCACnBp8B,EAAAq8B,kBAAoB,kCACpBr8B,EAAAs8B,mBAAqB,mCACrBt8B,EAAAu8B,mBAAqB,mCACrBv8B,EAAAw8B,iBAAmB,iCACnBx8B,EAAAy8B,sBAAwB,sCACxBz8B,EAAA08B,uBAAyB,uCACzB18B,EAAA28B,mBAAqB,mCACrB38B,EAAA48B,sBAAwB,sCACxB58B,EAAA68B,uBAAyB,uCACzB78B,EAAA88B,uBAAyB,uCACzB98B,EAAA+8B,mBAAqB,mCACrB/8B,EAAAg9B,sBAAwB,sCACxBh9B,EAAAi9B,uBAAyB,uCACzBj9B,EAAAk9B,mBAAqB,mCACrBl9B,EAAAm9B,sBAAwB,sCACxBn9B,EAAAo9B,uBAAyB,uCACzBp9B,EAAAq9B,uBAAyB,uCACzBr9B,EAAAs9B,mBAAqB,mCACrBt9B,EAAAu9B,sBAAwB,sCACxBv9B,EAAAw9B,uBAAyB,uCACzBx9B,EAAAy9B,mBAAqB,mCACrBz9B,EAAA09B,sBAAwB,sCACxB19B,EAAA29B,uBAAyB,uCACzB39B,EAAA49B,uBAAyB,uCACzB59B,EAAA69B,mBAAqB,mCACrB79B,EAAA89B,qBAAuB,qCACvB99B,EAAA+9B,sBAAwB,sCACxB/9B,EAAAg+B,kBAAoB,kCACpBh+B,EAAAi+B,qBAAuB,qCACvBj+B,EAAAk+B,sBAAwB,sCACxBl+B,EAAAm+B,sBAAwB,sCACxBn+B,EAAAo+B,kBAAoB,kCACpBp+B,EAAAq+B,sBAAwB,sCACxBr+B,EAAAs+B,uBAAyB,uCACzBt+B,EAAAu+B,mBAAqB,mCACrBv+B,EAAAw+B,sBAAwB,sCACxBx+B,EAAAy+B,uBAAyB,uCACzBz+B,EAAA0+B,uBAAyB,uCACzB1+B,EAAA2+B,mBAAqB,mCACrB3+B,EAAA4+B,uBAAyB,uCACzB5+B,EAAA6+B,wBAA0B,wCAC1B7+B,EAAA8+B,oBAAsB,oCACtB9+B,EAAA++B,uBAAyB,uCACzB/+B,EAAAg/B,wBAA0B,wCAC1Bh/B,EAAAi/B,wBAA0B,wCAC1Bj/B,EAAAk/B,oBAAsB,oCACtBl/B,EAAAm/B,0BAA4B,0CAC5Bn/B,EAAAo/B,2BAA6B,2CAC7Bp/B,EAAAq/B,uBAAyB,uCACzBr/B,EAAAs/B,0BAA4B,0CAC5Bt/B,EAAAu/B,2BAA6B,2CAC7Bv/B,EAAAw/B,2BAA6B,2CAC7Bx/B,EAAAy/B,uBAAyB,uCACzBz/B,EAAA0/B,SAAW,yBACX1/B,EAAA2/B,SAAW,yBAEX3/B,EAAAutB,WAAa,2BACbvtB,EAAA8tB,kBAAoB,kCACpB9tB,EAAAwuB,kBAAoB,kCACpBxuB,EAAA+uB,aAAe,6BACf/uB,EAAA4/B,UAAY,0BACZ5/B,EAAA6/B,WAAa,2BACb7/B,EAAAqvB,SAAW,yBACXrvB,EAAAsvB,SAAW,yBACXtvB,EAAAuvB,SAAW,yBACXvvB,EAAAwvB,SAAW,yBACXxvB,EAAA00B,SAAW,yBACX10B,EAAAyvB,kBAAoB,kCACpBzvB,EAAA0vB,kBAAoB,kCACpB1vB,EAAAi2B,SAAW,yBACXj2B,EAAAk2B,SAAW,yBACXl2B,EAAA+2B,SAAW,yBACX/2B,EAAAg3B,QAAU,wBACVh3B,EAAAi3B,SAAW,yBACXj3B,EAAAq3B,SAAW,yBACXr3B,EAAAu3B,eAAiB,+BACjBv3B,EAAAw3B,cAAgB,8BAChBx3B,EAAAy3B,cAAgB,8BAChBz3B,EAAA2vB,SAAW,yBACX3vB,EAAA4vB,SAAW,yBACX5vB,EAAA20B,SAAW,yBACX30B,EAAA40B,UAAY,0BACZ50B,EAAA6vB,QAAU,wBACV7vB,EAAA8vB,QAAU,wBACV9vB,EAAA+vB,QAAU,wBACV/vB,EAAAgwB,QAAU,wBACVhwB,EAAAiwB,QAAU,wBACVjwB,EAAAkwB,QAAU,wBACVlwB,EAAA60B,aAAe,6BACf70B,EAAA80B,WAAa,2BAEb90B,EAAAxhE,MAAQ,sBACRwhE,EAAAthE,MAAQ,sBACRshE,EAAAphE,MAAQ,sBACRohE,EAAAlhE,MAAQ,sBACRkhE,EAAAhhE,MAAQ,sBACRghE,EAAA/gE,MAAQ,sBAER+gE,EAAA8/B,YAAc,4BACd9/B,EAAA+/B,qBAAuB,qCACvB//B,EAAAggC,qBAAuB,qCACvBhgC,EAAAigC,mBAAqB,mCACrBjgC,EAAAkgC,UAAY,0BACZlgC,EAAAmgC,UAAY,0BACZngC,EAAAogC,UAAY,0BACZpgC,EAAAqgC,UAAY,0BACZrgC,EAAAsgC,qBAAuB,qCACvBtgC,EAAAugC,qBAAuB,qCACvBvgC,EAAAwgC,qBAAuB,qCACvBxgC,EAAAygC,qBAAuB,qCACvBzgC,EAAA0gC,UAAY,0BACZ1gC,EAAA2gC,YAAc,4BACd3gC,EAAA4gC,YAAc,4BACd5gC,EAAA6gC,eAAiB,+BACjB7gC,EAAA8gC,eAAiB,+BACjB9gC,EAAA+gC,SAAW,yBACX/gC,EAAAghC,SAAW,yBACXhhC,EAAAihC,WAAa,2BACbjhC,EAAAkhC,WAAa,2BACblhC,EAAAmhC,WAAa,2BACbnhC,EAAAohC,WAAa,2BACbphC,EAAAqhC,WAAa,2BACbrhC,EAAAshC,WAAa,2BACbthC,EAAAuhC,WAAa,2BACbvhC,EAAAwhC,WAAa,2BAEbxhC,EAAAyhC,YAAc,4BACdzhC,EAAA0hC,qBAAuB,qCACvB1hC,EAAA2hC,qBAAuB,qCACvB3hC,EAAA4hC,mBAAqB,mCACrB5hC,EAAA6hC,UAAY,0BACZ7hC,EAAA8hC,UAAY,0BACZ9hC,EAAA+hC,UAAY,0BACZ/hC,EAAAgiC,UAAY,0BACZhiC,EAAAiiC,qBAAuB,qCACvBjiC,EAAAkiC,qBAAuB,qCACvBliC,EAAAmiC,qBAAuB,qCACvBniC,EAAAoiC,qBAAuB,qCACvBpiC,EAAAqiC,UAAY,0BACZriC,EAAAsiC,YAAc,4BACdtiC,EAAAuiC,YAAc,4BACdviC,EAAAwiC,eAAiB,+BACjBxiC,EAAAyiC,eAAiB,+BACjBziC,EAAA0iC,SAAW,yBACX1iC,EAAA2iC,SAAW,yBACX3iC,EAAA4iC,WAAa,2BACb5iC,EAAA6iC,WAAa,2BACb7iC,EAAA8iC,WAAa,2BACb9iC,EAAA+iC,WAAa,2BACb/iC,EAAAgjC,WAAa,2BACbhjC,EAAAijC,WAAa,2BACbjjC,EAAAkjC,WAAa,2BACbljC,EAAAmjC,WAAa,2BAEbnjC,EAAAojC,YAAc,4BACdpjC,EAAAqjC,mBAAqB,mCACrBrjC,EAAAsjC,mBAAqB,mCACrBtjC,EAAAujC,UAAY,0BACZvjC,EAAAwjC,UAAY,0BACZxjC,EAAAyjC,UAAY,0BACZzjC,EAAA0jC,UAAY,0BACZ1jC,EAAA2jC,UAAY,0BACZ3jC,EAAA4jC,YAAc,4BACd5jC,EAAA6jC,YAAc,4BACd7jC,EAAA8jC,eAAiB,+BACjB9jC,EAAA+jC,eAAiB,+BACjB/jC,EAAAgkC,SAAW,yBACXhkC,EAAAikC,SAAW,yBACXjkC,EAAAkkC,WAAa,2BACblkC,EAAAmkC,WAAa,2BACbnkC,EAAAokC,WAAa,2BACbpkC,EAAAqkC,WAAa,2BACbrkC,EAAAskC,WAAa,2BACbtkC,EAAAukC,WAAa,2BACbvkC,EAAAwkC,WAAa,2BACbxkC,EAAAykC,WAAa,2BACbzkC,EAAA0kC,wBAA0B,wCAC1B1kC,EAAA2kC,wBAA0B,wCAE1B3kC,EAAA4kC,YAAc,4BACd5kC,EAAA6kC,mBAAqB,mCACrB7kC,EAAA8kC,mBAAqB,mCACrB9kC,EAAA+kC,UAAY,0BACZ/kC,EAAAglC,UAAY,0BACZhlC,EAAAilC,UAAY,0BACZjlC,EAAAklC,UAAY,0BACZllC,EAAAmlC,YAAc,4BACdnlC,EAAAolC,YAAc,4BACdplC,EAAAqlC,eAAiB,+BACjBrlC,EAAAslC,eAAiB,+BACjBtlC,EAAAulC,wBAA0B,wCAC1BvlC,EAAAwlC,wBAA0B,wCAE1BxlC,EAAAylC,YAAc,4BACdzlC,EAAA0lC,mBAAqB,mCACrB1lC,EAAA2lC,mBAAqB,mCACrB3lC,EAAA4lC,UAAY,0BACZ5lC,EAAA6lC,UAAY,0BACZ7lC,EAAA8lC,UAAY,0BACZ9lC,EAAA+lC,UAAY,0BACZ/lC,EAAAgmC,UAAY,0BACZhmC,EAAAimC,UAAY,0BACZjmC,EAAAkmC,UAAY,0BACZlmC,EAAAmmC,UAAY,0BACZnmC,EAAAomC,WAAa,2BACbpmC,EAAAqmC,SAAW,yBACXrmC,EAAAsmC,SAAW,yBACXtmC,EAAAumC,SAAW,yBACXvmC,EAAAwmC,SAAW,yBACXxmC,EAAAymC,SAAW,yBACXzmC,EAAA0mC,SAAW,yBACX1mC,EAAA2mC,sBAAwB,sCACxB3mC,EAAA4mC,sBAAwB,sCAExB5mC,EAAA6mC,YAAc,4BACd7mC,EAAA8mC,mBAAqB,mCACrB9mC,EAAA+mC,mBAAqB,mCACrB/mC,EAAAgnC,UAAY,0BACZhnC,EAAAinC,UAAY,0BACZjnC,EAAAknC,UAAY,0BACZlnC,EAAAmnC,UAAY,0BACZnnC,EAAAonC,UAAY,0BACZpnC,EAAAqnC,UAAY,0BACZrnC,EAAAsnC,UAAY,0BACZtnC,EAAAunC,UAAY,0BACZvnC,EAAAwnC,WAAa,2BACbxnC,EAAAynC,SAAW,yBACXznC,EAAA0nC,SAAW,yBACX1nC,EAAA2nC,SAAW,yBACX3nC,EAAA4nC,SAAW,yBACX5nC,EAAA6nC,SAAW,yBACX7nC,EAAA8nC,SAAW,yBACX9nC,EAAA+nC,sBAAwB,sCACxB/nC,EAAAgoC,sBAAwB,sCAExBhoC,EAAAioC,cAAgB,8BAGhBjoC,EAAA4L,UAAY,wBACZ5L,EAAA6L,UAAY,sBACZ7L,EAAAi4B,cAAgB,0BAChBj4B,EAAAk4B,cAAgB,0BAGhBl4B,EAAA/3C,MAAQ,yBACR+3C,EAAAh4C,QAAU,2BACVg4C,EAAAj4C,KAAO,wBAGPi4C,EAAAysB,YAAc,0BACdzsB,EAAA2sB,YAAc,0BACd3sB,EAAA5pB,YAAc,0BACd4pB,EAAAzpB,YAAc,0BACdypB,EAAAwoC,gBAAkB,8BAClBxoC,EAAAyoC,YAAc,0BACdzoC,EAAA0oC,aAAe,2BAGf1oC,EAAA2oC,mBAAqB,kCACrB3oC,EAAA4oC,cAAgB,6BAChB5oC,EAAA6oC,iBAAmB,6BACnB7oC,EAAA8oC,mBAAqB,+BACrB9oC,EAAA+oC,iBAAmB,6BACnB/oC,EAAAgpC,gBAAkB,4BAClBhpC,EAAAipC,kBAAoB,8BAGpBjpC,EAAA/9D,UAAY,4BACZ+9D,EAAA39D,WAAa,6BACb29D,EAAA99D,WAAa,6BACb89D,EAAAz9D,YAAc,8BACdy9D,EAAA79D,WAAa,6BACb69D,EAAAx9D,YAAc,8BACdw9D,EAAA59D,WAAa,6BACb49D,EAAAv9D,YAAc,8BACdu9D,EAAA19D,kBAAoB,oCACpB09D,EAAAt9D,aAAe,+BACfs9D,EAAAr9D,aAAe,+BAGfq9D,EAAAkM,QAAU,eACVlM,EAAA4hB,KAAO,YACP5hB,EAAA+hB,QAAU,eACV/hB,EAAAkpC,aAAe,oBAza9B,CAAiBlpC,EAAA9lE,EAAA8lE,iBAAA9lE,EAAA8lE,eAAc,KA6a/B9lE,EAAA2lF,cAs1GA3lF,EAAA28E,eA2CA38E,EAAAoyE,oBAAA,SAAoCwa,WAC9B3sF,EAAS2sF,EAAS3sF,OAClB+oF,EAAQ,IAAIzhF,MACZ62C,EAAUwuC,EAASza,mBAAmB,CAAEloE,EAAA+H,KAAKjO,KAAOkG,EAAA+H,KAAKG,MACzD0hE,EAAiB+Y,EAAS96E,QAAQ+hE,eAClCl5D,EAAgBxP,OAAOyhF,EAASzpE,QAAQxI,eAE5CiyE,EAAStW,gBAAgB37D,OAEzB,IAAoB,IAAA0J,EAAAnP,EAAA03E,EAASzpE,QAAQhV,eAAe2M,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAAzD,IAAIa,EAAO0F,EAAA/Z,MACd,GAAIqU,EAAQrC,MAAQ8+C,EAAAhlD,YAAY+Q,OAAhC,CACA,IAAI6tD,EAAiBr2D,EACjBuW,EAAiB8/C,EAAO9vD,KAAKgQ,eACjC,GACE8/C,EAAOzvD,GAAG9S,EAAApH,YAAYywE,WACH,OAAnB5mD,IACCA,EAAe7T,aAAa+5C,EAAA/kD,eAAeoL,WAE5C,GAAIuzD,EAAOzvD,GAAG9S,EAAApH,YAAYsiB,SAAU,CAClC,IAAIrjB,EAAQ0qE,EAAOtnD,sBACfw7B,QAAQ5+C,IAAU6+C,SAAS7+C,KAC7BonF,EAAMnqE,KACJ5e,EAAOa,KAAK6Z,EAAc1L,aAAc,CACtC29E,EAAS96E,QAAQc,SACb3S,EAAO0D,IAAI68C,QAAQ5+C,GAAQ6+C,SAAS7+C,IACpC3B,EAAOyD,IAAI88C,QAAQ5+C,KACtB+wD,EAAAjyB,WAAWsY,YAIlBgwC,EAAMnqE,KACJ5e,EAAO+6C,GACL/6C,EAAOs4C,UAAU,EACft4C,EAAOw4C,WAAW6zB,EAAOr9D,aAAc4kE,IAEzC5zE,EAAOa,KAAK6Z,EAAc1L,aAAc,CACtChP,EAAOo4C,UAAU,EAAGw7B,GACpB5zE,EAAOo4C,UAAU,EAAGsa,EAAAjyB,WAAWh6B,MAC9BisD,EAAAjyB,WAAWsY,2GAMxB/4C,EAAO49C,YAAYioB,EAAei4B,cAAe3/C,EAAS,CAAEy1B,GAC1DmV,EAAM59E,OACFnL,EAAOs6C,MAAM,KAAMyuC,GACnB/oF,EAAOi7C,QAKfl7C,EAAAqyE,oBAAA,SAAoCua,mBAC9BzpE,EAAUypE,EAASzpE,QACnBljB,EAAS2sF,EAAS3sF,OAClBiS,EAAYiR,EAAQrR,QAAQI,UAC5B2hE,EAAiB3hE,EAAUqiD,eAC3B06C,EAAiB/8F,EAAU8gD,SAC3Bk8C,EAAQtiB,EAASza,mBAAmB,CAAEjgE,EAAWjI,EAAA+H,KAAKtO,KAAOuG,EAAA+H,KAAKG,MAClE5D,EAAiB4U,EAAQ5U,eACzBoM,EAAgBxP,OAAOgY,EAAQxI,eAC/Bw0F,EAAS,IAAI5nG,MACbolD,EAAWgG,EAAA7N,SAAS7iD,OAAOhC,GAE3BmvG,EAAQziD,EAASQ,mBACnBltD,EAAOi7C,MACPj7C,EAAO04C,KAAKs2D,GAAgB,EAC1Bp7B,GAAkBlhB,EAAAjyB,WAAW/5B,IACzB1G,EAAO83C,OAAO4a,EAAArpB,SAAS23C,OACrBhhF,EAAOo4C,UAAU,EAAGw7B,GACpB5zE,EAAO0D,IAAI,IAEb1D,EAAO83C,OAAO4a,EAAArpB,SAAS03C,OACrB/gF,EAAOo4C,UAAU,EAAGw7B,GACpB5zE,EAAOyD,IAAI,IAEjBivD,EAAAjyB,WAAWh6B,IACX,IAIA2oG,EAAS,MACb,IAA2B,IAAAC,EAAAp6F,EAAA3G,GAAcghG,EAAAD,EAAAl6F,QAAAm6F,EAAAl6F,KAAAk6F,EAAAD,EAAAl6F,OAAE,CAAlC,IAAAwG,EAAArG,EAAAg6F,EAAA3tG,MAAA,GAACqO,EAAA2L,EAAA,GAAIsK,EAAAtK,EAAA,GACZzQ,OAAO+a,EAAS1J,KAAKk3D,WACrBvoE,OAAO8E,GAAMo/F,KAEb,IAAIG,OAAS,EACTjhF,EAAO,IAAIhnB,MAGf,GAAI2e,EAASupF,sBAAwBD,EAAYtpF,EAASjP,aAAa,iBAAkB,CACvF9L,OAAOqkG,EAAU57F,MAAQ8+C,EAAAhlD,YAAY6N,oBACrC,IAAIm0F,EAAYvsF,EAAQjU,SAASsM,gBAAmCg0F,EAAW,MAC/E,GAAKE,GAAc9iB,EAAStW,gBAAgBo5B,GAIrC,CACL,IAAIC,EAAWD,EAAUr+F,UACzBlG,OACoC,GAAlCwkG,EAAShoF,eAAevc,QACxBukG,EAAShoF,eAAe,IAAM1d,EAAA+H,KAAKjO,KACnC4rG,EAASp+E,YAActnB,EAAA+H,KAAKG,MAC5Bw9F,EAASjoF,UAAYxB,EAAS1J,MAEhC+R,EAAK1P,KACH5e,EAAOa,KAAK4uG,EAAUzgG,aAAc,CAClChP,EAAOo4C,UAAU,EAAGw7B,GACpB5zE,EAAOo4C,UAAU,EAAGsa,EAAAjyB,WAAWh6B,MAC9BisD,EAAAjyB,WAAWsY,YAfhBzqB,EAAK1P,KACH5e,EAAO+7C,mBAmBN,CACL,IAAI3/B,EAAU6J,EAAS7J,QACvB,GAAIA,MACF,IAAmB,IAAAC,GAAA3F,OAAA,EAAAzB,EAAAmH,EAAQvB,WAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAE,CAAhC,IAAIyG,EAAMU,EAAA3a,MACb,GAAIia,EAAOjI,MAAQ8+C,EAAAhlD,YAAYyO,OACjBN,EAAQvK,SAAW4U,GACLrK,EAAQW,KAClBk3D,UAAW,CACvB,IAAIk8B,EAAsB/zF,EAAQsN,aAClChe,OAAOykG,GAAe,GACtBrhF,EAAK1P,KAEH5e,EAAO+6C,GACL/6C,EAAOs4C,UAAU,EACft4C,EAAO04C,KAAKs2D,GAAgB,EAC1BhvG,EAAOo4C,UAAU,EAAGw7B,GACpBA,EAAgB+7B,IAGpB3vG,EAAOa,KAAK6Z,EAAc1L,aAAc,CACtChP,EAAOo4C,UAAU,EAAGw7B,GACpB5zE,EAAOo4C,UAAU,EAAGsa,EAAAjyB,WAAWh6B,MAC9BisD,EAAAjyB,WAAWsY,4GASzB9yB,EAAS6D,MAAMwE,EAAK1P,KAAK5e,EAAOm7C,UACrC,IAAIb,EAAQoS,EAASE,SACnB8/B,EAAApV,QAAQt3E,EAAQsuB,EAAMokC,EAAAjyB,WAAWsY,OAEnC2T,EAASU,mBAAmB+hD,EAAO70D,EAAO,CAAEtqC,IAC5Ck/F,EAAOtwF,KAAK07B,yGAEd,IAA2B,IAAAs1D,EAAA36F,EAAA3G,GAAcuhG,EAAAD,EAAAz6F,QAAA06F,EAAAz6F,KAAAy6F,EAAAD,EAAAz6F,OAAE,CAAlC,IAAAE,EAAAC,EAAAu6F,EAAAluG,MAAA,GACHmoB,GADI9Z,EAAAqF,EAAA,IAAI4Q,EAAA5Q,EAAA,IACQyU,MAChBA,GACF4iC,EAASI,UAAUoiD,EAAOl/F,GAAKk/F,EAAOplF,EAAK9Z,uGAG/Ck/F,EAAOtwF,KACL8tC,EAASE,SACP5sD,EAAO+7C,gBAGX2Q,EAASU,mBAAmB+hD,EAAOD,EAAOA,EAAO/jG,OAAS,GAAI,IAC9DwhF,EAAStW,gBAAgB37D,GACzB1a,EAAO49C,YAAYioB,EAAek4B,cAAekR,EAAO,CAAEr7B,GAAkBlnB,EAASa,iBAAiB4hD,EAAO,KAa/GpvG,EAAAsyE,YAAA,SAA4Bsa,WACtBzpE,EAAUypE,EAASzpE,QACnBljB,EAAS2sF,EAAS3sF,OAClBsO,EAAiB4U,EAAQ5U,eACzBkuE,EAAQluE,EAAe4tC,KACvBA,EAAO,EAAI,EAAIsgC,EACfztB,EAAO,IAAI7mD,WAAWg0C,GAC1BhyC,EAAA6F,SAASysE,EAAOztB,EAAM,GACtB,IAAIokC,EAAM,EACNlnE,EAAc/I,EAAQ3L,wBACtBu4F,EAAe7jF,EAAY3pB,UAC3BqX,EAAiBuJ,EAAQvJ,eACzBE,EAAeqJ,EAAQrJ,aACvBC,EAAeoJ,EAAQpJ,aACvBs1F,EAAS,MACb,IAA2B,IAAAW,EAAA96F,EAAA3G,GAAc0hG,EAAAD,EAAA56F,QAAA66F,EAAA56F,KAAA46F,EAAAD,EAAA56F,OAAE,CAAlC,IAAAiP,EAAA9O,EAAA06F,EAAAruG,MAAA,GAACqO,EAAAoU,EAAA,GAAI6B,EAAA7B,EAAA,GACZlZ,OAAO8E,GAAMo/F,KACb,IAAIl/F,EAAuB,EAE3B,GADI+V,EAASgqF,YAAW//F,GAAK,IACzB+V,IAAagG,GAAehG,EAASyD,QAAQomF,GAAe,CAC9D,IAAIt1E,EAAYvU,EAAS+F,oBACzB9b,GAAK,EACD+V,EAASyD,QAAQ/P,KAAiBzJ,GAAK,GAC3CA,GAAS,GAA8B89F,EAAmBxzE,QACrD,GAAIvU,EAASyD,QAAQ7P,GAAe,CACzC,IAAIgQ,EAAgB3e,OAAO+a,EAAS6F,mBAAmBjS,IACvD3O,OAA+B,GAAxB2e,EAAc1e,QACrB+E,GAAK,EACLA,GAAS,GAA8B89F,EAAmBnkF,EAAc,SAC/D5D,EAASyD,QAAQ5P,KACtB+P,EAAgB3e,OAAO+a,EAAS6F,mBAAmBhS,IACvD5O,OAA+B,GAAxB2e,EAAc1e,QACrB+E,GAAK,EACLA,GAAS,MAA4B89F,EAAmBnkF,EAAc,IACtE3Z,GAAS,GAA8B89F,EAAmBnkF,EAAc,KAE1E3f,EAAA6F,SAASG,EAAO6+C,EAAMokC,GAAMA,GAAO,EACnCltE,EAASmE,UAAYla,EACrB,IAAI4Z,EAAO7D,EAAS6D,KACpB5f,EAAA6F,SAAS+Z,EAAOA,EAAK9Z,GAAK,EAAG++C,EAAMokC,GAAMA,GAAO,oGAElDjoF,OAAOioF,GAAOj3C,GACd,IAAIjqC,EAAYiR,EAAQrR,QAAQI,UAC5BqjC,EAAUq3C,EAAShV,iBAAiB5oB,GACxC,GAAsB,GAAlB98C,EAAUiqC,KAAW,CACvB,IAAItsC,EAAS0lC,EAAQ1lC,OACrB5P,EAAOu9C,UAAUsoB,EAAe6L,UAAWhf,EAAAjyB,WAAW/5B,KAAK,EAAO1G,EAAO0D,IAAI68C,QAAQ3wC,GAAS4wC,SAAS5wC,UAEvG5P,EAAOu9C,UAAUsoB,EAAe6L,UAAWhf,EAAAjyB,WAAWh6B,KAAK,EAAOzG,EAAOyD,IAAI88C,QAAQjL,EAAQ1lC,ykBCzmIjG,IAAAsgG,EAAA1vG,EAAA,IAUAiyD,EAAAjyD,EAAA,GAUAyJ,EAAAzJ,EAAA,GAiBA2vG,EAAA3vG,EAAA,IAMA4vG,EAAA5vG,EAAA,IAMA6vG,EAAA,oBAAAA,IAEEhwG,KAAAiwG,OAAwB,IAAIhpG,MAC5BjH,KAAAypB,KAAe,GAKjB,OAHEumF,EAAA/tG,UAAAiuG,SAAA,SAAStvG,EAAcsb,GACrBlc,KAAKiwG,OAAO1xF,KAAK,CAAE3d,KAAQA,EAAMsb,KAAQA,KAE7C8zF,EARA,GAUAG,EAAA,WAQA,OAJE,SAAYC,EAAqBC,GAC/BrwG,KAAKswG,cAAgBF,EACrBpwG,KAAKkc,KAAOm0F,GANhB,GAAa3wG,EAAAywG,cAgBb,IAAAI,EAAA,WAME,SAAAA,EAAY3vG,EAAcsb,EAAcs0F,QAAA,IAAAA,MAAA,UAFxCxwG,KAAAywG,mBAA6B,GAG3BzwG,KAAKY,KAAOA,EACZZ,KAAKkc,KAAOA,EACZlc,KAAKwwG,QAAUA,EAMnB,OAHSD,EAAAG,eAAP,SAAsBF,GACpB,MAAkB,UAAXA,GAAkC,YAAXA,GAElCD,EAfA,GAiBAI,EAAA,oBAAAA,KA+BA,OA7BSA,EAAAC,UAAyB,IAAIzpG,IAAY,CAAC,QAAS,UAMnDwpG,EAAAE,cAAqC,IAAIzpG,IAAI,CAClD,CAAC,KAAM,QACP,CAAC,MAAO,SACR,CAAC,MAAO,SACR,CAAC,MAAO,SACR,CAAC,QAAS,SACV,CAAC,KAAM,SACP,CAAC,MAAO,UACR,CAAC,MAAO,UACR,CAAC,MAAO,UACR,CAAC,QAAS,SACV,CAAC,MAAO,WACR,CAAC,MAAO,WACR,CAAC,OAAQ,QACT,CAAC,UAAW,QACZ,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,eAAgB,QACjB,CAAC,kBAAmB,QACpB,CAAC,cAAe,QAChB,CAAC,cAAe,UAChB,CAAC,QAAS,WAEdupG,EA/BA,GAAajxG,EAAAixG,YAiCb,IAAAG,EAAA,WAYA,OALE,SAAYlwG,EAAcsb,EAAc60F,QAAA,IAAAA,MAAA,OAJxC/wG,KAAAgxG,WAAqB,MACrBhxG,KAAAixG,WAAuB,CAAC,YACxBjxG,KAAAkxG,WAAuB,CAAC,UAGtBlxG,KAAKY,KAAOA,EACZZ,KAAKkc,KAAOA,EACZlc,KAAKgxG,WAAaD,GAVtB,GAiBAI,EAAA,WAMA,OANA,WACEnxG,KAAAoxG,QAAkB,cAClBpxG,KAAAs0D,MAA4B,IAAIrtD,MAChCjH,KAAAqxG,QAA4B,IAAIpqG,MAChCjH,KAAAsxG,QAA4B,IAAIrqG,MAChCjH,KAAAuxG,OAA0B,IAAItqG,OALhC,GAQA+H,EAAA,WAWE,SAAAA,EAAY6T,GATZ7iB,KAAAwxG,QAAkB,IAAIL,EAGtBnxG,KAAA6wG,cAAqCF,EAAUE,cAC/C7wG,KAAAyxG,aAA4B,IAAItqG,IAChCnH,KAAA0xG,cAAwC,IAAItqG,IAC5CpH,KAAA2xG,cAAsC,IAAIvqG,IAC1CpH,KAAA4xG,mBAAsD,IAAIxqG,IAGxDpH,KAAK6iB,QAAUA,EACf7iB,KAAK6xG,UA2TT,OAxTU7iG,EAAA/M,UAAA6vG,gBAAR,SAAwBC,WAClBC,EAAUD,EAAiBE,iBAC/B,IAAmB,IAAAC,EAAAt9F,EAAAo9F,GAAOG,EAAAD,EAAAp9F,QAAAq9F,EAAAp9F,KAAAo9F,EAAAD,EAAAp9F,OAAE,CAAvB,IAAIs9F,EAAMD,EAAA7wG,MACb,GAAItB,KAAKyxG,aAAangG,IAAI8gG,GACxB,OAGF,IAAIC,EAAUN,EAAiBO,kBAAkBF,GAC7CC,GAAWD,GAAUC,GACvBryG,KAAKwxG,QAAQl9C,MAAM/1C,KAAK,IAAI4xF,EAAYiC,EAAQC,IAGlD,IAAI18F,EAAUo8F,EAAiBQ,YAAYH,GAC3C,GAAIz8F,GAAWA,EAAQrC,MAAQ8+C,EAAAhlD,YAAYiK,gBAAiB,CAC1D,IAAI2I,EAAiCrK,EACrC3V,KAAKwyG,0BAA0BxyF,GAEjChgB,KAAKyxG,aAAa3/F,IAAIsgG,uGAO1BpjG,EAAA/M,UAAAwwG,oBAAA,SAAoB98F,GAClB,GAAIA,EAAQrC,MAAQ8+C,EAAAhlD,YAAY6N,mBAAoB,CAClD,IAAIy3F,EAA8B/8F,EAClC,OAAOm6F,EAAA6C,QAAQC,qBAAqBF,EAASrhG,YAAazH,EAAAmB,cAAcwxB,QAE1E,OAAO,GAGTvtB,EAAA/M,UAAA4wG,yBAAA,SAAyBC,WACnBt1F,EAAas1F,EAASx9B,eAC1B,GAAK93D,MAGL,IAAsB,IAAAu1F,EAAAn+F,EAAA4I,GAAUw1F,EAAAD,EAAAj+F,QAAAk+F,EAAAj+F,KAAAi+F,EAAAD,EAAAj+F,OAAE,CAA7B,IAAI4I,EAASs1F,EAAA1xG,MAChB,GAAIoc,EAAU/S,eAAiBf,EAAAmB,cAAcyxB,UAAY9e,EAAUwC,UAAW,CAE5E,GAAkC,GAA9BxC,EAAUwC,UAAUpV,OACtB,MAAM,IAAIuO,MAAM,8CAElB,IAAI6C,EAAOwB,EAAUwC,UAAU,GAAGnQ,MAAMiO,WACpCpd,EAAOZ,KAAKizG,aAAaH,EAAUp1F,EAAUwC,UAAU,IAC3D6vF,EAAAmD,SAASC,kBAAkBvyG,GAC3BZ,KAAKwxG,QAAQD,OAAOhzF,KAAK,IAAIuyF,EAASlwG,EAAMsb,IAC5Clc,KAAKozG,kBAAkBN,EAAUp1F,EAAUwC,UAAU,yGAS3DlR,EAAA/M,UAAAgxG,aAAA,SAAaI,EAAkBjhF,GAC7B,IAAIxnB,EAAcwnB,EAAKriB,MAAMiO,WAC7B,GAAI+xF,EAAAuD,QAAQC,kBAAkB3oG,GAC5B,OAAOA,EAAI+W,UAAU,EAAG/W,EAAIE,OAAS,GAEvC,IAAI6K,EAAU09F,EAAS1vF,OAAO/Y,GAC1B+D,EAAemhG,EAAA6C,QAAQa,gBAAgBphF,GAI3C,GAHKzc,IACHA,EAAU3V,KAAK6iB,QAAQhV,eAAe3M,IAAIyN,IAExCgH,EAAS,CACX,IAAItE,EAAuEsE,EAAStE,YACpF,GAAIA,EAAYoT,YAEd,OADuCpT,EAAYoT,YACpCnjB,MAGnB,MAAM,IAAI+X,MAAM,uBAAuB1K,IAMjCK,EAAA/M,UAAAmxG,kBAAR,SAA0BK,EAAczhF,GACtC,IACIhS,EADUyzF,EAAI9vF,OAAOqO,EAAKjiB,MAAMiO,YAEpChe,KAAKwyG,0BAA0BxyF,IAQzBhR,EAAA/M,UAAAyxG,4BAAR,SAAoC1zF,EAAgC2zF,WAC9D53F,EAAqDiE,EAAe3O,YAAa0K,QACjFiE,EAAe5H,eAAiB03F,EAAA6C,QAAQiB,mBAAmB5zF,EAAe5H,gBAC5EpY,KAAK0zG,4BAA4B1zF,EAAe5H,cAAeu7F,OAEjE,IAAmB,IAAAthC,EAAAz9D,EAAAmH,GAAOu2D,EAAAD,EAAAv9D,QAAAw9D,EAAAv9D,KAAAu9D,EAAAD,EAAAv9D,OAAE,CAAvB,IAAIyG,EAAM+2D,EAAAhxE,MACb,GAAIia,EAAOjI,MAAQ1J,EAAA2J,SAASoL,iBAAkB,CAC5C,IAAIk1F,EAAmDt4F,EACnDyI,EAAazI,EAAO3a,KAAKmP,MAAMiO,WAC/B81F,EAA8BD,EAAa33F,KAC/C,GAAI43F,IAAehE,EAAA6C,QAAQC,qBAAqBiB,EAAcjqG,EAAAmB,cAAc0xB,QAAS,CACnF,IAAIs1E,EAAqC,IAAIjC,EAAAiE,iBAAiB/zF,EAA+B8zF,GACzFzB,EAAUN,EAAiBiC,oBAC/BL,EAAOzD,SAASlsF,EAAYquF,GAC5BryG,KAAK8xG,gBAAgBC,yGAMrB/iG,EAAA/M,UAAAuwG,0BAAR,SAAkCxyF,GAChC,IAAKhgB,KAAK6wG,cAAc3vG,IAAI8e,EAAepf,QAAUkvG,EAAA6C,QAAQC,qBAAqB5yF,EAAe3O,YAAazH,EAAAmB,cAAc0xB,QAAS,CACnI,IAAIk3E,EAAS,IAAI3D,EACjB2D,EAAO/yG,KAAOof,EAAepf,KAC7BZ,KAAK0zG,4BAA4B1zF,EAAgB2zF,GACjD3zG,KAAKi0G,YAAYN,KAQb3kG,EAAA/M,UAAAgyG,YAAR,SAAoBN,GACb3zG,KAAK0xG,cAAcpgG,IAAIqiG,EAAO/yG,QACjCZ,KAAKwxG,QAAQH,QAAQ9yF,KAAKo1F,GAC1B3zG,KAAK0xG,cAAchjG,IAAIilG,EAAO/yG,KAAM+yG,KAOhC3kG,EAAA/M,UAAAiyG,uBAAR,SAA+BC,eAC7B,GAAIA,EAAa/4F,iBAAmB00F,EAAA6C,QAAQyB,iBAAiBD,GAAe,CAC1E,IAAI9uF,EAAO,IAAIpe,MACXotG,GAAsB,EACtBC,EAAeH,EAAavzG,KAC5B2zG,EAAkB,IAAMD,EAE5BjvF,EAAK9G,KAAK,SAASg2F,EAAe,UAAUD,EAAY,eACxDjvF,EAAK9G,KAAK,KAAKg2F,EAAe,+BAC9BlvF,EAAK9G,KAAK,SAASg2F,EAAe,0BAClClvF,EAAK9G,KAAK,OAAOg2F,EAAe,cAChClvF,EAAK9G,KAAK,gBAAgBg2F,EAAe,yBAEzC,IAA4B,IAAAl5F,EAAAzG,EAAAu/F,EAAa/4F,iBAAeE,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAE,CAAjD,IAAAkH,EAAA/G,EAAAqG,EAAAha,MAAA,GAAMskB,GAAL5J,EAAA,GAAKA,EAAA,IACb,GAAIhc,KAAKyyG,oBAAoB7sF,GAAW,CACtC,IAAI4uF,EAA+B5uF,EACnCyuF,GAAsB,EACtBr0G,KAAKy0G,yBAAyBD,GAC9B,IAEIE,EAFcF,EAAUnjG,YAEDzQ,KAAKmP,MAAMiO,WAClC22F,EAASH,EAAUruC,iBAAiBn1C,WACpCC,EAAaujF,EAAUruC,iBAAiBl1C,WAE5C8+E,EAAAmD,SAAS0B,gBAAgBF,GACzBrvF,EAAK9G,KAAK,WAAWg2F,EAAe,cAAcG,EAAQ,QAG1D,IADA,IAAIzE,EAAS,IAAIhpG,MACRge,EAAQ,EAAGA,EAAQ0vF,EAAO7pG,OAAQma,IAAS,CAClD,IAAI/I,EAAsBy4F,EAAO1vF,GAC7BqC,EAAgBpL,EAAKA,KAAKnM,MAAMiO,WAChCuJ,EAAgBrL,EAAKtb,KAAKmP,MAAMiO,WAChC+zF,EAAqC,IAAIjC,EAAAiE,iBAAiBS,EAA0Bt4F,EAAKA,MAE7F,GAAI61F,EAAiB/kB,UAAW,CAC9B,IAAI6nB,EAAiB9C,EAAiB+C,yBAClCC,EAAchD,EAAiBiD,cAC/BH,GAAkB/E,EAAAmF,YAAYC,OAChC7vF,EAAK9G,KAAK,aAAagJ,EAAa,oBAAoBwtF,EAAW,QAC1DF,GAAkB/E,EAAAmF,YAAY10F,OACvC8E,EAAK9G,KAAK,aAAagJ,EAAa,6BAEpClC,EAAK9G,KAAK,aAAagJ,EAAa,2BAA2BwtF,EAAW,YAEvE,CACL,IAAII,EAAcpD,EAAiBoD,YAC/BA,GAAerF,EAAAmF,YAAY10F,OAC7B8E,EAAK9G,KAAK,aAAagJ,EAAa,uBAC3B4tF,GAAerF,EAAAmF,YAAYC,OACpC7vF,EAAK9G,KAAK,aAAagJ,EAAa,cAAcwqF,EAAiBnhF,SAAQ,SAE3E5wB,KAAKozG,kBAAkBoB,EAAWt4F,EAAKA,MACvCmJ,EAAK9G,KAAK,aAAagJ,EAAa,UAAUD,EAAa,OAC3DjC,EAAK9G,KAAK,SAASgJ,EAAa,sBAGpC0oF,EAAO1xF,KAAKgJ,GAGd,IAAI6tF,EAAc,IAAItF,EAAAiE,iBAAiBS,EAA0BvjF,GACjE,GAAImkF,EAAYC,SACdhwF,EAAK9G,KAAK,SAASg2F,EAAe,IAAIG,EAAQ,IAAIzE,EAAOr3F,KAAK,KAAI,UAC7D,CACLyM,EAAK9G,KAAK,sBAAsBg2F,EAAe,IAAIG,EAAQ,IAAIzE,EAAOr3F,KAAK,KAAI,MAC/E,IAAIgY,EAAWwkF,EAAYpoB,UAAYooB,EAAYJ,cAAgBI,EAAYxkF,SAC3Ejb,EAAUy/F,EAAY7C,YAAY3hF,GACtC,GAAIjb,GAAWm6F,EAAA6C,QAAQ2C,iBAAiB3/F,GAAU,CAChD,IAAI4/F,EAAiD5/F,EAAStE,YAC9D,IAAKy+F,EAAA6C,QAAQ6C,iBAAiBD,GAC5B,MAAM,IAAIl8F,MAAM,SAASuX,EAAQ,2DAA2Dk/E,EAAA6C,QAAQ8C,SAASF,EAAYxlG,QAGzHqlG,EAAYpoB,UACd3nE,EAAK9G,KAAK,SAASg2F,EAAe,gBAAgBa,EAAYJ,cAAa,cAE3E3vF,EAAK9G,KAAK,SAASg2F,EAAe,cAAca,EAAYxkF,SAAQ,cAGxEvL,EAAK9G,KAAK,4GAWd,GAPA8G,EAAK9G,KAAK,WAAWg2F,EAAe,2BACpClvF,EAAK9G,KAAK,WAAWg2F,EAAe,eACpClvF,EAAK9G,KAAK,SAEV8G,EAAK9G,KAAK,OAAOg2F,EAAe,cAChClvF,EAAK9G,KAAK,OACVve,KAAK6yG,yBAAyBsB,GAC1BE,EAAqB,CACvB,IAAIqB,EAAmB5F,EAAA6C,QAAQ+C,iBAAiBvB,OAEhD,IAA4B,IAAAwB,EAAA/gG,EAAA8gG,GAAgBE,EAAAD,EAAA7gG,QAAA8gG,EAAA7gG,KAAA6gG,EAAAD,EAAA7gG,OAAE,CAAzC,IAAI+gG,EAAeD,EAAAt0G,MACtB,GAAIqvG,EAAUC,UAAUt/F,IAAIukG,GAAkB,CAE5C71G,KAAKwxG,QAAQJ,QAAapxG,KAAKwxG,QAAQJ,QAAO,IAAIyE,EAClD,yGAGJ,OAAOxwF,GAGX,OAAO,IAAIpe,OAGL+H,EAAA/M,UAAA6zG,iBAAR,SAAyBC,GACvB,IAAI1iG,EAAY0iG,EAAc1kG,YAC1B2kG,EAAsClG,EAAA6C,QAAQsD,oBAAoB5iG,EAAWzJ,EAAAmB,cAAcwxB,QAC/F,IAAKy5E,EACH,MAAM,IAAI38F,MAAM,uDAAuDy2F,EAAA6C,QAAQ8C,SAASpiG,EAAUtD,OAAM,KAE1G,IAAI6hB,EAA4BokF,EAAc91F,UAC9C,GAAI0R,GAAQA,EAAK9mB,OAAS,EAAG,CAC3B,IAAIF,EAAM5K,KAAKizG,aAAa8C,EAAenkF,EAAK,IAChD,IAAK2+E,EAAUG,eAAe9lG,GAC5B,MAAM,IAAIyO,MAAM,qCAAqCzO,EAAG,eAAeklG,EAAA6C,QAAQ8C,SAASpiG,EAAUtD,OAAM,KAE1G,OAAOnF,EAET,MAAO,UAMDoE,EAAA/M,UAAAwyG,yBAAR,SAAiCD,WAE3BnjG,EAAyDmjG,EAAUnjG,YACnEqjG,EAAWrjG,EAAYzQ,KAAKmP,MAAMiO,WAClCjN,EAAYM,EAAYN,UAExB4iG,EAAS,IAAI3D,EACjB2D,EAAO/yG,KAAO8zG,EAEd,IAAI1jF,EAA8BjgB,EAAUigB,eAC5C,IAAsB,IAAAklF,EAAAthG,EAAAoc,GAAUmlF,EAAAD,EAAAphG,QAAAqhG,EAAAphG,KAAAohG,EAAAD,EAAAphG,OAAE,CAA7B,IAAIshG,EAASD,EAAA70G,MACZ4a,EAAiBk6F,EAAUl6F,KAC3Bm6F,EAAW,IAAIvG,EAAAiE,iBAAiBS,EAA2Bt4F,GAC3Dm2F,EAAUgE,EAASrC,oBACvBL,EAAOzD,SAASkG,EAAUx1G,KAAKmP,MAAMiO,WAAYq0F,GACjDryG,KAAK8xG,gBAAgBuE,qGAGvBr2G,KAAKi0G,YAAYN,GACjB3zG,KAAKwxG,QAAQF,QAAQ/yF,KAAK,IAAIgyF,EAAUmE,EAAUA,EAAU10G,KAAK81G,iBAAiBtB,MAG5ExlG,EAAA/M,UAAA4vG,QAAR,mBAEMyE,EADuC,IAAIzG,EAAA0G,kBAAkBv2G,KAAK6iB,SAC9B2zF,kBACxCx2G,KAAK4xG,mBAAqB/B,EAAA4G,YAAYC,YAAYJ,GAElD,IAAIK,EAAmB,IAAI5G,EAAA6G,aAC3B,IAA2B,IAAA7yF,EAAAnP,EAAA5U,KAAK6iB,QAAQhV,gBAAcwN,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAA/C,IAAAwG,EAAArG,EAAAoG,EAAA/Z,MAAA,GAACM,EAAA0Z,EAAA,GAAK3F,EAAA2F,EAAA,GACb,GAAI3F,EAAQrC,MAAQ8+C,EAAAhlD,YAAYiK,gBAAiB,CAC/C,IAAI88F,EAA+Bx+F,EACnC,IAAK3V,KAAK2xG,cAAcrgG,IAAI1P,GAAM,CAChC,IAAIi1G,EAA+B72G,KAAKk0G,uBAAuBC,GAC/DwC,EAAiBG,OAAOD,GACxB72G,KAAK2xG,cAAcjjG,IAAI9M,EAAK+T,uGASlC3V,KAAK+2G,SAAW/2G,KAAKg3G,iBAAiBL,EAAiBM,eAIjDjoG,EAAA/M,UAAA+0G,iBAAR,SAAyB3xF,GACvB,IAAIsxF,EAAmB,IAAI5G,EAAA6G,SAI3B,OAHAD,EAAiB7kG,IAAI,iFACrB6kG,EAAiBG,OAAOzxF,GACxBsxF,EAAiB7kG,IAAI,KACd6kG,EAAiB34F,YAE5BhP,EAxUA,GAAatP,EAAAsP,2RC3Ib,IA0LYimG,EA1LZ7iD,EAAAjyD,EAAA,GAWA+2G,EAAA/2G,EAAA,IAIA2J,EAAA3J,EAAA,IAKAwyG,EAAA,oBAAAA,KAiKA,OA1JWA,EAAAC,qBAAP,SAA4Bv/F,EAAiCC,WACzD,GAAID,EAAUmK,eACV,IAAsB,IAAAuG,EAAAnP,EAAAvB,EAAUmK,YAAUnC,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CACxC,GADcuG,EAAA/Z,MACAqJ,eAAiB2I,EAC3B,OAAO,oGAInB,OAAO,GAGJq/F,EAAAsD,oBAAP,SAA2B5iG,EAAiCC,WACxD,GAAID,EAAUmK,eACV,IAAsB,IAAAuG,EAAAnP,EAAAvB,EAAUmK,YAAUnC,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAAvC,IAAI4I,EAASrC,EAAA/Z,MACd,GAAIoc,EAAU/S,eAAiB2I,EAC3B,OAAOoK,oGAInB,OAAO,MAGJi1F,EAAA5lB,SAAP,SAAgBn8D,GACZ,MAAO,UAAYA,GAAY,UAAYA,GAOxC+hF,EAAAa,gBAAP,SAAuBxhF,GAInB,OAHmBA,EAAKjiB,MAAMX,OAAOoS,aAEH,IADvBwQ,EAAKjiB,MAAMiO,YAEFuQ,QAAQ,IAAK,MAQ9BokF,EAAAwE,qBAAP,SAA4BC,GACxBvsG,OAAO8nG,EAAQ0E,YAAYD,IAC3B,IAAIE,EAAeF,EAAYG,QAAQ,KACvC,IAAqB,GAAjBD,EAAoB,CACpB,IAAIryF,GAAqC,GAA7BmyF,EAAYG,QAAQ,KAAaD,EAAeF,EAAYG,QAAQ,KAChF,OAAOH,EAAYz1F,UAAU,EAAGsD,GAGpC,IAAqB,IADrBqyF,EAAeF,EAAYG,QAAQ,MACX,CACpB,IAAIC,EAAWJ,EAAYG,QAAQ,KACnC,OAAOH,EAAYz1F,UAAU21F,EAAe,EAAGE,GAEnD,OAAOJ,GAOJzE,EAAA0E,YAAP,SAAmBD,GACf,MAAsB,MAAfA,GAAsC,SAAfA,GAO3BzE,EAAA8E,UAAP,SAAiBL,GACb,MAAsB,OAAfA,GAAuC,YAAfA,GAG5BzE,EAAA+E,WAAP,SAAkBN,GACd,MAAO,YAAcA,GAMlBzE,EAAAiB,mBAAP,SAA0B5zF,GACtB,IAAKA,EACD,OAAO,EAIX,OADsB2yF,EAAQkD,gBAAkC71F,EAAe3O,YADzD,iBAEIshG,EAAQiB,mBAAmB5zF,EAAe5H,gBAOjEu6F,EAAA6C,iBAAP,SAAwBmC,GAEpB,OAAOhF,EAAQkD,gBAAgB8B,EADT,eAIXhF,EAAAkD,gBAAf,SAA+B8B,EAAoCC,WAC3Dx5F,EAAkBu5F,EAAiBv5F,gBACvC,GAAIA,MACA,IAAkB,IAAAy5F,EAAAjjG,EAAAwJ,GAAe05F,EAAAD,EAAA/iG,QAAAgjG,EAAA/iG,KAAA+iG,EAAAD,EAAA/iG,OAAE,CAC/B,GADUgjG,EAAAx2G,MACAV,KAAKmP,MAAMiO,YAAc45F,EAC/B,OAAO,oGAInB,OAAO,GAMJjF,EAAAyB,iBAAP,SAAwBp0F,GACpB,IACI5H,EAAuC4H,EAAe5H,cAC1D,SAAIA,GAFiB,YAEAA,EAAcxX,OAMhC+xG,EAAA2C,iBAAP,SAAwB3/F,GACpB,OAAOA,EAAQrC,MAAQ8+C,EAAAhlD,YAAYiK,iBAGhCs7F,EAAAoF,iBAAP,SAAwBpiG,EAAkBrC,GACtC,OAAOqC,EAAQrC,MAAQA,GAOpBq/F,EAAA+C,iBAAP,SAAwB11F,GAGpB,YAFIg4F,EAAiCh4F,EACjCi4F,EAAuB,IAAIhxG,MACb,MAAX+wG,GAAiB,CACpB,IAAIE,EAA+BF,EAAQ3mG,YAAa+M,gBACxD,GAAI85F,MACA,IAAiB,IAAAC,GAAAC,OAAA,EAAAxjG,EAAAsjG,IAASG,EAAAF,EAAArjG,QAAAujG,EAAAtjG,KAAAsjG,EAAAF,EAAArjG,OAAE,CAAvB,IAAIoH,EAAIm8F,EAAA/2G,MACT22G,EAAW15F,KAAKrC,EAAKtb,KAAKmP,MAAMiO,8GAGxCg6F,EAAUA,EAAQ5/F,cAEtB,OAAO6/F,GAGJtF,EAAA8C,SAAP,SAAgB1lG,GACZ,OAAOA,EAAMX,OAAOF,eAChB,IAAMa,EAAMqY,KAAKpK,SAAS,IAC1B,IAAMjO,EAAMsY,OAAOrK,SAAS,KAExC20F,EAjKA,GAAajzG,EAAAizG,UAsKb,SAAYsC,GACRA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,aACAA,IAAA,iBALJ,CAAYA,EAAAv1G,EAAAu1G,cAAAv1G,EAAAu1G,YAAW,KAcvB,IAAAlB,EAAA,WAOI,SAAAA,EAAY/iG,EAAiB0wD,GACzB1hE,KAAKgR,OAASA,EACdhR,KAAK0hE,SAAWA,EAEhB1hE,KAAK4wB,SAAW5wB,KAAK0hE,SAAS9gE,KAAKmP,MAAMiO,WAuKjD,OApKI+1F,EAAA9xG,UAAAq2G,eAAA,WACI,OAAOt4G,KAAK0hE,SAAS3xD,MAAMiO,YAG/B+1F,EAAA9xG,UAAAozG,OAAA,WACI,MAAwB,QAAjBr1G,KAAK4wB,UAGhB7vB,OAAAC,eAAI+yG,EAAA9xG,UAAA,cAAW,KAAf,WACI,IAAI2uB,EAAW5wB,KAAK4wB,SACpB,GAAI+hF,EAAQ5lB,SAASn8D,GACjB,OAAOqkF,EAAY10F,OAEvB,GAAIoyF,EAAQ0E,YAAYzmF,GACpB,OAAOqkF,EAAY/3E,MAEvB,GAAIy1E,EAAQ8E,UAAU7mF,GAClB,OAAOqkF,EAAYsD,IAEvB,IAAIr8F,EAAOlc,KAAKuyG,YAAY3hF,GAE5B,GAAI1U,EAAM,CACN,GAAIA,EAAK5I,MAAQ8+C,EAAAhlD,YAAY6W,eAAgB,CACzC,IAGIrjB,EAH6Bsb,EACa7K,YACH6K,KACtBtb,KAAKmP,MAAMiO,WAChC,GAAIlU,EAAA6mG,UAAUE,cAAc3vG,IAAIN,IAAiB,SAARA,EACrC,OAAOq0G,EAAYC,OAG3B,GAAIh5F,EAAK5I,MAAQ8+C,EAAAhlD,YAAYiK,gBACzB,OAAO49F,EAAYn5F,MAG3B,OAAOm5F,EAAYC,wCAGvBnB,EAAA9xG,UAAA+qF,QAAA,WACI,OAAOhtF,KAAKm1G,aAAeF,EAAY/3E,OAG3C62E,EAAA9xG,UAAA6yG,uBAAA,WACI,IAAIlkF,EAAW5wB,KAAKw4G,UAAU,GAC9B,GAAI7F,EAAQ5lB,SAASn8D,GACjB,OAAOqkF,EAAY10F,OAEvB,IAAIrE,EAAOlc,KAAKy4G,oBAAoB7nF,GACpC,OAAY,MAAR1U,GAAgBA,EAAK5I,MAAQ8+C,EAAAhlD,YAAYiK,gBAClC49F,EAAYn5F,MAEhBm5F,EAAYC,QAGvBnB,EAAA9xG,UAAAy2G,cAAA,WACI,OAAI14G,KAAKm1G,aAAeF,EAAYC,QACmB,OAA5Cl1G,KAAK24G,qBAAqB34G,KAAK4wB,WAK9CmjF,EAAA9xG,UAAA+yG,YAAA,WACI,GAAIh1G,KAAK0hE,SAASl4C,cACd,OAAOxpB,KAAK0hE,SAASl4C,cAAc,GAAGzZ,MAAMiO,WAEhD,MAAM,IAAI3E,MAAM,6BAA6BrZ,KAAK4wB,SAAQ,iBACpC+hF,EAAQ8C,SAASz1G,KAAK0hE,SAAS3xD,SAGzDgkG,EAAA9xG,UAAA+xG,kBAAA,WACI,IAAI3B,EAAUryG,KAAKm1G,YACfvkF,EAAW5wB,KAAK0hE,SAAS9gE,KAAKmP,MAAMiO,WACxC,OAAQq0F,GACJ,KAAK4C,EAAY10F,OACb,MAAO,SAEX,KAAK00F,EAAYC,OACjB,KAAKD,EAAYn5F,MACb,OAAO8U,EAEX,KAAKqkF,EAAY/3E,MACb,OAAUl9B,KAAKw4G,UAAU,GAAE,KAE/B,KAAKvD,EAAYsD,IACb,OAAI5F,EAAQ+E,WAAW9mF,GACT5wB,KAAKw4G,UAAU5/F,KAAK,KAAI,OAExB5Y,KAAKw4G,UAAU5/F,KAAK,KAAI,KAG1C,QACI,OAAOgY,IAKXmjF,EAAA9xG,UAAAu2G,QAAR,mBACQ5mF,EAAO5xB,KAAK0hE,SAASl4C,cACrBovF,EAAU,IAAI3xG,MAClB,GAAI2qB,MACA,IAAgB,IAAAinF,EAAAjkG,EAAAgd,GAAIknF,EAAAD,EAAA/jG,QAAAgkG,EAAA/jG,KAAA+jG,EAAAD,EAAA/jG,OAAE,CAAjB,IAAIlK,EAAGkuG,EAAAx3G,MACRs3G,EAAQr6F,KAAK3T,EAAImF,MAAMiO,8GAG/B,OAAO46F,GAGX7E,EAAA9xG,UAAAgwG,WAAA,WACI,IAAIrgF,EAAO5xB,KAAKw4G,UAChB,OAAKtB,EAAA6B,YAAYC,aAAapnF,GAGvB,CAAC5xB,KAAK4wB,UAFFgB,GAWfmiF,EAAA9xG,UAAAswG,YAAA,SAAY3hF,GACR,OAAO5wB,KAAKgR,OAAO2S,OAAOiN,IAOtBmjF,EAAA9xG,UAAAw2G,oBAAR,SAA4BQ,GACxB,IAAIC,EAAiBl5G,KAAK24G,qBAAqBM,GAE/C,OADiCj5G,KAAKgR,OAAO2S,OAAOu1F,IAUhDnF,EAAA9xG,UAAA02G,qBAAR,SAA6B/nF,GACzB,IAAIjb,EAAU3V,KAAKgR,OAAO2S,OAAOiN,GACjC,GAAIjb,GAAWA,EAAQrC,MAAQ8+C,EAAAhlD,YAAY6W,eAAgB,CACvD,IACIk1F,EAD6BxjG,EACF+rD,SAAS3xD,MAAMiO,WAC9C,OAAOhe,KAAK24G,qBAAqBQ,GAErC,OAAOvoF,GAGXmjF,EAAA9xG,UAAAqwG,kBAAA,SAAkB1hF,GACd,IAAIyhF,EAAyBvoG,EAAA6mG,UAAUE,cAAc3vG,IAAI0vB,GACzD,GAAIyhF,EACA,OAAOA,EAEX,IAAI18F,EAAU3V,KAAKgR,OAAO2S,OAAOiN,GACjC,GAAIjb,GAAWA,EAAQrC,MAAQ8+C,EAAAhlD,YAAY6W,eAAgB,CACvD,IACIk1F,EAD8BxjG,EACH+rD,SAAS3xD,MAAMiO,WAC9C,OAAOhe,KAAKsyG,kBAAkB6G,GAElC,OAAOvoF,GAEfmjF,EAlLA,GAAar0G,EAAAq0G,oSCnNb,IAAAT,EAAA,oBAAAA,KA0BA,OAnBWA,EAAAC,kBAAP,SAAyBnvD,GACrB,GAAWg1D,MAAPh1D,GAA2B,MAAPA,EACpB,OAAO,EAEX,IAAIi1D,EAAYj1D,EAAIl5C,WAAW,GAE/B,OAAQmuG,GADMj1D,EAAIl5C,WAAWk5C,EAAIt5C,OAAS,KACK,IAAbuuG,GAAkC,IAAbA,IAOpD/F,EAAAgG,gBAAP,SAAuBl1D,GACnB,OAAIkvD,EAAQC,kBAAkBnvD,GACnBA,EAAIziC,UAAU,EAAGyiC,EAAIt5C,OAAS,GAElCs5C,GAEfkvD,EA1BA,GAAa5zG,EAAA4zG,UA4Bb,IAAAJ,EAAA,oBAAAA,KAyBA,OAjBWA,EAAA0B,gBAAP,SAAuBxwD,GACnBv5C,OAAOu5C,EAAIt5C,OAAS,EAAG,iCACvBD,OAAOu5C,EAAIt5C,QAAU,GAAI,eAAes5C,EAAG,wCAQxC8uD,EAAAC,kBAAP,SAAyBvyG,WACrBiK,OAAOjK,EAAKkK,OAAS,EAAG,gCACxBD,OAAOjK,EAAKkK,QAAU,GAAI,mBAAmBlK,EAAI,2CACjD,IAAkB,IAAA24G,EAAA3kG,EAAAhU,GAAI44G,EAAAD,EAAAzkG,QAAA0kG,EAAAzkG,KAAAykG,EAAAD,EAAAzkG,OAAE,CAAnB,IAAI2kG,EAAKD,EAAAl4G,MACVuJ,OAAOqoG,EAASwG,kBAAkB91F,SAAS61F,GAAQ,cAAc74G,EAAI,kCAAkCsyG,EAASwG,uHArBzGxG,EAAAwG,kBAAoB,mCAwBvCxG,EAzBA,GAAaxzG,EAAAwzG,WA2Bb,IAAA0D,EAAA,oBAAAA,IAEY52G,KAAAqlB,KAAsB,IAAIpe,MAC1BjH,KAAA25G,SAAmB,KACnB35G,KAAA45G,SAAmB,OACnB55G,KAAA65G,SAAmB,WACnB75G,KAAA85G,QAAkB95G,KAAK25G,SA+CnC,OA7CI/C,EAAA30G,UAAA83G,OAAA,SAAO74D,GAEH,IADA,IAAI44D,EAAU,GACP54D,GAAS,GACZ44D,GAAW95G,KAAK65G,SAChB34D,GAAS,EAUb,OARIA,GAAS,IACT44D,GAAW95G,KAAK45G,SAChB14D,GAAS,GAETA,GAAS,IACT44D,GAAW95G,KAAK25G,UAEpB35G,KAAK85G,QAAUA,EACR95G,MAGX42G,EAAA30G,UAAA+3G,SAAA,WAEI,OADAh6G,KAAK85G,SAAW95G,KAAK25G,SACd35G,MAGX42G,EAAA30G,UAAA6P,IAAA,SAAImoG,GAEA,OADAj6G,KAAKqlB,KAAK9G,KAAKve,KAAK85G,QAAUG,GACvBj6G,MAGX42G,EAAA30G,UAAAi4G,SAAA,WAEI,OADAl6G,KAAK85G,QAAU95G,KAAK85G,QAAQvrF,QAAQvuB,KAAK25G,SAAU,IAC5C35G,MAGX42G,EAAA30G,UAAA+b,SAAA,WACI,OAAOhe,KAAKqlB,KAAKzM,KAAK,OAG1Bg+F,EAAA30G,UAAA60G,OAAA,SAAOzxF,eACH,IAAgB,IAAA80F,EAAAvlG,EAAAyQ,GAAI+0F,EAAAD,EAAArlG,QAAAslG,EAAArlG,KAAAqlG,EAAAD,EAAArlG,OAAE,CAAjB,IAAImlG,EAAGG,EAAA94G,MACRtB,KAAKqlB,KAAK9G,KAAK07F,uGAIvBrD,EAAA30G,UAAAg1G,WAAA,WACI,OAAOj3G,KAAKqlB,MAEpBuxF,EArDA,GAAal3G,EAAAk3G,WAuDb,IAAAyD,EAAA,oBAAAA,KAOA,OALWA,EAAAC,OAAP,SAAcznF,EAAkB3E,GAC5B,IAAK2E,EACD,MAAM,IAAIxZ,MAAM6U,IAG5BmsF,EAPA,GAAa36G,EAAA26G,wFCzGb,IAAAhoD,EAAAlyD,EAAA,GAwDAo6G,EAAA,WAWE,SAAAA,IAHAv6G,KAAA6V,KAAiB,GACjB7V,KAAAw6G,WAAkB,EAmyBpB,OA1yBSD,EAAAE,UAAP,SAAiB96G,GACf,IAAI+6G,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAU96G,GACd+6G,EAAWl6C,UASpB+5C,EAAAt4G,UAAAw4G,UAAA,SAAU96G,GACR,MAAM,IAAI0Z,MAAM,oBAGlBkhG,EAAAt4G,UAAA04G,kBAAA,SAAkB95D,GAChB,IAAIjgD,EAAOyxD,EAAAxG,gBAAgBhL,IAAS,IAAM7gD,KAAKw6G,WAAWx8F,SAAS,IAC/DqH,EAAOgtC,EAAAzG,gBAAgB/K,GAC3B7gD,KAAKue,KAAK,aACVve,KAAKue,KAAK3d,GACVZ,KAAKue,KAAK,KACT,IAAK,IAAIle,EAAW,EAAG8O,EAAWkjD,EAAAtG,sBAAsBlL,GAAOxgD,EAAI8O,IAAK9O,EACnEA,EAAI,GAAGL,KAAKue,KAAK,MACrBve,KAAKue,KAAK,KACVve,KAAKue,KAAKle,EAAE2d,SAAS,KACrBhe,KAAKue,KAAK,MACVve,KAAKue,KAAKq8F,EAAiBvoD,EAAApG,qBAAqBpL,EAAMxgD,KAExDL,KAAKue,KAAK,OACVve,KAAKue,KAAKq8F,EAAiBvoD,EAAAlG,sBAAsBtL,KACjD7gD,KAAKue,KAAK,KACN8zC,EAAApL,gBAAgB5hC,IAASgtC,EAAAhyB,aAAakuB,OACxCvuD,KAAKue,KAAK,OAEZve,KAAK66G,oBAAoBx1F,GACrBgtC,EAAApL,gBAAgB5hC,IAASgtC,EAAAhyB,aAAakuB,OACxCvuD,KAAKue,KAAK,WAEVve,KAAKw6G,YAGTD,EAAAt4G,UAAA44G,oBAAA,SAAoBzoF,GAClB,IAGI0oF,EACAj2G,EACAxE,EAAU8O,EALVQ,EAAK0iD,EAAApL,gBAAgB70B,GACrBlW,EAAOm2C,EAAAnL,kBAAkB90B,GAM7B,OAAQziB,GACN,KAAK0iD,EAAAhyB,aAAakuB,MAOhB,IANqC,OAAhC1pD,EAASwtD,EAAApJ,aAAa72B,MACzBpyB,KAAKue,KAAK1Z,GACV7E,KAAKue,KAAK,OAEZve,KAAKue,KAAK,OACVpP,EAAIkjD,EAAAlJ,mBAAmB/2B,GAClB/xB,EAAI,EAAGA,EAAI8O,IAAK9O,EACnBL,KAAK66G,oBAAoBxoD,EAAAhJ,cAAcj3B,EAAM/xB,IAG/C,YADAL,KAAKue,KAAK,OAGZ,KAAK8zC,EAAAhyB,aAAasuB,GAiBhB,YAhBIzyC,GAAQm2C,EAAAjyB,WAAWsY,MACrB14C,KAAKue,KAAK,QACVve,KAAK66G,oBAAoBxoD,EAAA9I,eAAen3B,IACxCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAA5I,UAAUr3B,KAC/B0oF,EAASzoD,EAAA1I,WAAWv3B,MACtBpyB,KAAKue,KAAK,UACVve,KAAK66G,oBAAoBC,MAG3B96G,KAAK66G,oBAAoBxoD,EAAA9I,eAAen3B,IACxCpyB,KAAKue,KAAK,OACVve,KAAK66G,oBAAoBxoD,EAAA5I,UAAUr3B,IACnCpyB,KAAKue,KAAK,OACVve,KAAK66G,oBAAoBxoD,EAAA1I,WAAWv3B,MAIxC,KAAKigC,EAAAhyB,aAAauuB,KACoB,OAA/B/pD,EAASwtD,EAAAxI,YAAYz3B,MACxBpyB,KAAKue,KAAK1Z,GACV7E,KAAKue,KAAK,OAEZve,KAAKue,KAAK,OACVve,KAAK66G,oBAAoBxoD,EAAAtI,YAAY33B,IACrCpyB,KAAKue,KAAK,gBAEZ,KAAK8zC,EAAAhyB,aAAaiuB,MAahB,OAZIwsD,EAASzoD,EAAAlI,kBAAkB/3B,MAC7BpyB,KAAKue,KAAK,QACVve,KAAK66G,oBAAoBC,GACzB96G,KAAKue,KAAK,YAEyB,OAAhC1Z,EAASwtD,EAAApI,aAAa73B,KACzBpyB,KAAKue,KAAK,UACVve,KAAKue,KAAK1Z,GACV7E,KAAKue,KAAK,QAEVve,KAAKue,KAAK,aAId,KAAK8zC,EAAAhyB,aAAawuB,OAClB,KAAKwD,EAAAhyB,aAAa0uB,KAClB,KAAKsD,EAAAhyB,aAAa2uB,aAChB,MAAM,IAAI31C,MAAM,mBAElB,KAAKg5C,EAAAhyB,aAAaglB,SAGhB,OAFArlD,KAAKue,KAAK,UACVve,KAAKue,KAAK8zC,EAAA7K,iBAAiBp1B,GAAMpU,SAAS,KAG5C,KAAKq0C,EAAAhyB,aAAa8uB,SAKhB,OAJAnvD,KAAKue,KAAK,KACVve,KAAKue,KAAK8zC,EAAA5K,iBAAiBr1B,GAAMpU,SAAS,KAC1Che,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAA1K,iBAAiBv1B,IAG5C,KAAKigC,EAAAhyB,aAAaklB,UAClB,KAAK8M,EAAAhyB,aAAa+uB,UAChB,MAAM,IAAI/1C,MAAM,mBAElB,KAAKg5C,EAAAhyB,aAAaqlB,KAQhB,OAPA1lD,KAAKue,KAAK,SACVve,KAAKue,KAAKq8F,EAAiB1+F,IAC3Blc,KAAKue,KAAK,MACVve,KAAKue,KAAK8zC,EAAA/J,cAAcl2B,GAAMpU,SAAS,KACvChe,KAAKue,KAAK,OACVve,KAAK66G,oBAAoBxoD,EAAA9J,WAAWn2B,SACpCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAAhyB,aAAaivB,MAUhB,OATAtvD,KAAKue,KAAK,UACVve,KAAKue,KAAKq8F,EAAiB1+F,IAC3Blc,KAAKue,KAAK,MACVve,KAAKue,KAAK8zC,EAAA1J,eAAev2B,GAAMpU,SAAS,KACxChe,KAAKue,KAAK,OACVve,KAAK66G,oBAAoBxoD,EAAAxJ,YAAYz2B,IACrCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAtJ,cAAc32B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAAhyB,aAAa0kB,MAChB,OAAQ7oC,GACN,KAAKm2C,EAAAjyB,WAAWh6B,IAEd,YADApG,KAAKue,KAAK8zC,EAAAlL,iBAAiB/0B,GAAMpU,SAAS,KAG5C,KAAKq0C,EAAAjyB,WAAW/5B,IASd,YARArG,KAAKue,KACHw8F,cACE1oG,QACEggD,EAAAjL,oBAAoBh1B,GACpBigC,EAAAhL,qBAAqBj1B,MAM7B,KAAKigC,EAAAjyB,WAAWv5B,IAEd,YADA7G,KAAKue,KAAK8zC,EAAA/K,iBAAiBl1B,GAAMpU,SAAS,KAG5C,KAAKq0C,EAAAjyB,WAAWt5B,IAEd,YADA9G,KAAKue,KAAK8zC,EAAA9K,iBAAiBn1B,GAAMpU,SAAS,KAI9C,MAEF,KAAKq0C,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW/1B,IACjB,KAAKigC,EAAA3uB,QAAQ2qC,OAIX,OAHAruE,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ4qC,OAIX,OAHAtuE,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ6qC,UAIX,OAHAvuE,KAAKue,KAAK,gBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ+nD,OACb,KAAKp5B,EAAA3uB,QAAQgoD,OAGX,OAFA1rF,KAAKue,KAAK,UACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQqrD,OAIX,OAHA/uF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ8rD,QAIX,OAHAxvF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ+rD,SAIX,OAHAzvF,KAAKue,KAAK,eACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQitD,SAIX,OAHA3wF,KAAKue,KAAK,eACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQssD,WAIX,OAHAhwF,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ8sD,QAIX,OAHAxwF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ4nC,OACb,KAAKjZ,EAAA3uB,QAAQ6nC,OAGX,OAFAvrE,KAAKue,KAAK,UACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQuqD,OAIX,OAHAjuF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQwqD,OAIX,OAHAluF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQyqD,UAIX,OAHAnuF,KAAKue,KAAK,gBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQsrD,OAIX,OAHAhvF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQgsD,QAIX,OAHA1vF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQisD,SAIX,OAHA3vF,KAAKue,KAAK,eACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQktD,SAIX,OAHA5wF,KAAKue,KAAK,eACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQusD,WAIX,OAHAjwF,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ+sD,QAIX,OAHAzwF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQy7C,UAGX,OAFAn/E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ07C,UAGX,OAFAp/E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQw7C,QAKb,KAAK7sB,EAAA3uB,QAAQy6C,cAGX,OAFAn+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQw6C,cAGX,OAFAl+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ26C,cAGX,OAFAr+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ06C,cAGX,OAFAp+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ66C,cAGX,OAFAv+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ46C,cAGX,OAFAt+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ+6C,cAGX,OAFAz+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ86C,cAGX,OAFAx+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQysD,eAIX,OAHAnwF,KAAKue,KAAK,yBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ0sD,eAIX,OAHApwF,KAAKue,KAAK,yBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQk7C,gBAGX,OAFA5+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQs7C,gBAGX,OAFAh/E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQm7C,gBAGX,OAFA7+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQu7C,gBAGX,OAFAj/E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQg7C,gBAGX,OAFA1+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQo7C,gBAGX,OAFA9+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQi7C,gBAGX,OAFA3+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQq7C,gBAGX,OAFA/+E,KAAKue,KAAK,mBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQs6C,WAGX,OAFAh+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQu6C,UAGX,OAFAj+E,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,IAGzC,KAAKigC,EAAA3uB,QAAQ2sD,eAIX,OAHArwF,KAAKue,KAAK,yBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAA3uB,QAAQ4sD,eAIX,OAHAtwF,KAAKue,KAAK,yBACVve,KAAK66G,oBAAoBxoD,EAAAjK,cAAch2B,SACvCpyB,KAAKue,KAAK,KAId,MAEF,KAAK8zC,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAY51B,IAClB,KAAKigC,EAAArpB,SAAS8sC,OACd,KAAKzjB,EAAArpB,SAASu3C,OACd,KAAKluB,EAAArpB,SAASw3C,OACd,KAAKnuB,EAAArpB,SAASy3C,OAIZ,OAHAzgF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS03C,OACd,KAAKruB,EAAArpB,SAAS23C,OACd,KAAKtuB,EAAArpB,SAAS43C,OACd,KAAKvuB,EAAArpB,SAAS63C,OAIZ,OAHA7gF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS6kC,OACd,KAAKxb,EAAArpB,SAAS83C,OACd,KAAKzuB,EAAArpB,SAAS+3C,OACd,KAAK1uB,EAAArpB,SAASg4C,OAIZ,OAHAhhF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASm4C,OACd,KAAK9uB,EAAArpB,SAASo4C,OACd,KAAK/uB,EAAArpB,SAASs4C,OACd,KAAKjvB,EAAArpB,SAASu4C,OAIZ,OAHAvhF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASklC,OAMZ,OALAluE,KAAKue,KAAK,eACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASmlC,OACd,KAAK9b,EAAArpB,SAASw4C,OAIZ,OAHAxhF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASolC,OAMZ,OALApuE,KAAKue,KAAK,eACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAAS8kC,OACd,KAAKzb,EAAArpB,SAAS+4C,OAIZ,OAHA/hF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASg5C,MACd,KAAK3vB,EAAArpB,SAASi5C,MAIZ,OAHAjiF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASk5C,OACd,KAAK7vB,EAAArpB,SAASm5C,OAIZ,OAHAniF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS+kC,OACd,KAAK1b,EAAArpB,SAAS24C,OAIZ,OAHA3hF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASilC,OACd,KAAK5b,EAAArpB,SAAS84C,OAIZ,OAHA9hF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASglC,OACd,KAAK3b,EAAArpB,SAAS64C,OAIZ,OAHA7hF,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASqlD,QAMZ,OALAruF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASwlD,QAMZ,OALAxuF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASyiC,MACd,KAAKpZ,EAAArpB,SAAS0iC,MACd,KAAKrZ,EAAArpB,SAASijC,MACd,KAAK5Z,EAAArpB,SAASkjC,MAIZ,OAHAlsE,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS2iC,MACd,KAAKtZ,EAAArpB,SAAS4iC,MACd,KAAKvZ,EAAArpB,SAASmjC,MACd,KAAK9Z,EAAArpB,SAASojC,MAIZ,OAHApsE,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASqjC,MACd,KAAKha,EAAArpB,SAASujC,MACd,KAAKla,EAAArpB,SAASyjC,MACd,KAAKpa,EAAArpB,SAAS0jC,MAIZ,OAHA1sE,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASsjC,MAKZ,OAJAtsE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS2jC,MACd,KAAKta,EAAArpB,SAAS6jC,MACd,KAAKxa,EAAArpB,SAAS+jC,MACd,KAAK1a,EAAArpB,SAASgkC,MAIZ,OAHAhtE,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS4jC,MAKZ,OAJA5sE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,kBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MAIZ,OAHAttE,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,YACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASkkC,MAKZ,OAJAltE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASukC,MACd,KAAKlb,EAAArpB,SAASykC,MACd,KAAKpb,EAAArpB,SAAS2kC,MACd,KAAKtb,EAAArpB,SAAS4kC,MAIZ,OAHA5tE,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASwkC,MAKZ,OAJAxtE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,kBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASq4C,OAKZ,OAJArhF,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASy4C,OAKZ,OAJAzhF,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASslD,QAMZ,OALAtuF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASylD,QAMZ,OALAzuF,KAAKue,KAAK,cACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASwjC,MAKZ,OAJAxsE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS8jC,MAKZ,OAJA9sE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,kBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAASokC,MAKZ,OAJAptE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,iBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS0kC,MAKZ,OAJA1tE,KAAKue,KAAK,SACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,kBACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,IAG1C,KAAKigC,EAAArpB,SAAS6mD,YAMZ,OALA7vF,KAAKue,KAAK,kBACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASqmD,OAMZ,OALArvF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASimD,OAMZ,OALAjvF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAAS8mD,YAMZ,OALA9vF,KAAKue,KAAK,kBACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASsmD,OAMZ,OALAtvF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAArpB,SAASkmD,OAMZ,OALAlvF,KAAKue,KAAK,aACVve,KAAK66G,oBAAoBxoD,EAAApK,cAAc71B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAnK,eAAe91B,SACxCpyB,KAAKue,KAAK,KAId,OAEF,KAAK8zC,EAAAhyB,aAAa2xB,OAUhB,OATAhyD,KAAKue,KAAK,WACVve,KAAKue,KAAKq8F,EAAiB1+F,IAC3Blc,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAAhI,cAAcj4B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAA9H,cAAcn4B,IACvCpyB,KAAKue,KAAK,MACVve,KAAK66G,oBAAoBxoD,EAAA5H,mBAAmBr4B,SAC5CpyB,KAAKue,KAAK,KAGZ,KAAK8zC,EAAAhyB,aAAa4xB,KAGhB,OAFAjyD,KAAK66G,oBAAoBxoD,EAAA1H,aAAav4B,SACtCpyB,KAAKue,KAAK,OAGZ,KAAK8zC,EAAAhyB,aAAa2iB,OAQhB,aAPI83D,EAASzoD,EAAAxH,eAAez4B,KAC1BpyB,KAAKue,KAAK,WACVve,KAAK66G,oBAAoBC,GACzB96G,KAAKue,KAAK,QAEVve,KAAKue,KAAK,cAId,KAAK8zC,EAAAhyB,aAAa6xB,KAChB,OAAQG,EAAAjH,UAAUh5B,IAChB,KAAKigC,EAAA5f,OAAOy/C,WAEV,YADAlyF,KAAKue,KAAK,iBAGZ,KAAK8zC,EAAA5f,OAAO2/C,WAIV,OAHApyF,KAAKue,KAAK,gBACVve,KAAK66G,oBAAoBxoD,EAAA7G,eAAep5B,EAAM,SAC9CpyB,KAAKue,KAAK,KAId,MAEF,KAAK8zC,EAAAhyB,aAAa8xB,IAEhB,YADAnyD,KAAKue,KAAK,OAGZ,KAAK8zC,EAAAhyB,aAAaguB,YAEhB,YADAruD,KAAKue,KAAK,iBAGZ,KAAK8zC,EAAAhyB,aAAaqvB,cAClB,KAAK2C,EAAAhyB,aAAakvB,UAClB,KAAK8C,EAAAhyB,aAAayvB,WAClB,KAAKuC,EAAAhyB,aAAa6vB,cAEpB,MAAM,IAAI72C,MAAM,oBAGVkhG,EAAAt4G,UAAAsc,KAAR,SAAa1I,GAEX7V,KAAK6V,KAAK0I,KAAK1I,IAGjB0kG,EAAAt4G,UAAAu+D,OAAA,WACE,IAAI3c,EAAM7jD,KAAK6V,KAAK+C,KAAK,IAEzB,OADA5Y,KAAK6V,KAAO,GACLguC,GAEX02D,EA5yBA,GA8yBA,SAASK,EAAiB1+F,GACxB,OAAQA,GACN,KAAKm2C,EAAAjyB,WAAWsY,KAAM,MAAO,OAC7B,KAAK2Z,EAAAjyB,WAAWh6B,IAAK,MAAO,MAC5B,KAAKisD,EAAAjyB,WAAW/5B,IAAK,MAAO,MAC5B,KAAKgsD,EAAAjyB,WAAWv5B,IAAK,MAAO,MAC5B,KAAKwrD,EAAAjyB,WAAWt5B,IAAK,MAAO,MAC5B,KAAKurD,EAAAjyB,WAAWr5B,KAAM,MAAO,OAC7B,KAAKsrD,EAAAjyB,WAAWiuB,YAAa,MAAM,IAAIh1C,MAAM,oBAC7C,KAAKg5C,EAAAjyB,WAAWgsD,KAAM,MAAM,IAAI/yE,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhB3Z,EAAA66G,u5BCxDZ,IAAA9wG,EAAAtJ,EAAA,GAIDiyD,EAAAjyD,EAAA,GAyBA0J,EAAA1J,EAAA,GAKA66G,EAAA,WAUE,SAAAA,EAAYn4F,EAAkBo4F,QAAA,IAAAA,OAAA,GAH9Bj7G,KAAAk7G,KAA4B,IAAI9zG,IAI9BpH,KAAK6iB,QAAUA,EACf7iB,KAAKi7G,eA6GT,OAzGED,EAAA/4G,UAAAk5G,KAAA,uBACE,IAAiB,IAAAp3F,EAAAnP,EAAA5U,KAAK6iB,QAAQjV,YAAY4M,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAA/C,IAAI5B,EAAImI,EAAA/Z,MACP4R,EAAK9D,OAAOsL,SAAS1a,KAAKo7G,UAAUloG,uGAK5C8nG,EAAA/4G,UAAAm5G,UAAA,SAAUloG,eACJ6I,EAAU7I,EAAKxT,QACnB,GAAIqc,MACF,IAA2B,IAAAs2D,EAAAz9D,EAAAmH,GAAOu2D,EAAAD,EAAAv9D,QAAAw9D,EAAAv9D,KAAAu9D,EAAAD,EAAAv9D,OAAA,CAAzB,IAAAuG,EAAApG,EAAAq9D,EAAAhxE,MAAA,GAACV,EAAAya,EAAA,GAAME,EAAAF,EAAA,GAAoBrb,KAAKq7G,aAAaz6G,EAAM2a,qGAE9D,IAAIrG,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAA++D,EAAAr/D,EAAAM,GAAWg/D,EAAAD,EAAAn/D,QAAAo/D,EAAAn/D,KAAAm/D,EAAAD,EAAAn/D,OAAA,CAA7B,IAAIK,EAAU++D,EAAA5yE,MAAiBtB,KAAKo7G,UAAUjmG,uGAKvD6lG,EAAA/4G,UAAAo5G,aAAA,SAAaz6G,EAAc+U,GACzB,IAAIA,EAAQ4G,GAAG9S,EAAApH,YAAY60D,UAAal3D,KAAKi7G,eAA7C,CACA,IAAIC,EAAOl7G,KAAKk7G,KAChB,GAAIA,EAAK5pG,IAAIqE,GACX3V,KAAKs7G,WAAW16G,EAAM+U,EAAiBulG,EAAKh6G,IAAIyU,SAIlD,OADAulG,EAAKxsG,IAAIiH,EAAS/U,GACV+U,EAAQrC,MACd,KAAK8+C,EAAAhlD,YAAY+Q,OACXxI,EAAQ4G,GAAG9S,EAAApH,YAAYywE,WAAW9yE,KAAKu7G,YAAY36G,EAAc+U,GACrE,MAEF,KAAKy8C,EAAAhlD,YAAYiX,KACX1O,EAAQ4G,GAAG9S,EAAApH,YAAYywE,WAAW9yE,KAAKw7G,UAAU56G,EAAY+U,GACjE,MAEF,KAAKy8C,EAAAhlD,YAAY6N,mBACfjb,KAAKy7G,uBAAuB76G,EAAyB+U,GACrD,MAEF,KAAKy8C,EAAAhlD,YAAYiK,gBACfrX,KAAK07G,oBAAoB96G,EAAsB+U,GAC/C,MAEF,KAAKy8C,EAAAhlD,YAAYyO,MACHlG,EAAS4G,GAAG9S,EAAApH,YAAYywE,WAAW9yE,KAAK27G,WAAW/6G,EAAa+U,GAC5E,MAEF,KAAKy8C,EAAAhlD,YAAYoO,mBACfxb,KAAK47G,uBAAuBh7G,EAAyB+U,GACrD,MAEF,KAAKy8C,EAAAhlD,YAAYuO,SACf,IAAIkgG,EAAiBlmG,EACjB9U,EAASg7G,EAAK7yF,eACdnoB,GAAQb,KAAK87G,cAAcl7G,EAAMC,GACrC,IAAI6xE,EAASmpC,EAAK5yF,eACdypD,GAAQ1yE,KAAK87G,cAAcl7G,EAAM8xE,GACrC,MAEF,KAAKtgB,EAAAhlD,YAAYgX,WA+bvB,SAAS23F,EAAkBpmG,mBACzB,IAAIoG,EAAUpG,EAAQoG,QACtB,GAAIA,MACF,IAAmB,IAAAT,EAAA1G,EAAAmH,EAAQvB,UAAQwB,EAAAV,EAAAxG,QAAAkH,EAAAjH,KAAAiH,EAAAV,EAAAxG,OAAE,CAAhC,IAAIyG,EAAMS,EAAA1a,MACb,OAAQia,EAAOjI,MACb,KAAK8+C,EAAAhlD,YAAY6N,mBACf,IAAIkK,EAAgC5J,EAAQ4J,UAC5C,GAAIA,MACF,IAAqB,IAAAlJ,GAAA+/F,OAAA,EAAApnG,EAAAuQ,EAAU3K,WAAQxF,EAAAiH,EAAAnH,QAAAE,EAAAD,KAAAC,EAAAiH,EAAAnH,OAAE,CAApC,IAAI8Q,EAAQ5Q,EAAA1T,MACf,GAAIskB,EAASrJ,GAAG9S,EAAApH,YAAYywE,UAAW,OAAO,oGAGlD,MAEF,KAAK1gB,EAAAhlD,YAAYiK,gBACf,IAAI8N,EAA6B5J,EAAQ4J,UACzC,GAAIA,MACF,IAAqB,IAAAhP,GAAA8lG,OAAA,EAAArnG,EAAAuQ,EAAU3K,WAAQjE,EAAAJ,EAAArB,QAAAyB,EAAAxB,KAAAwB,EAAAJ,EAAArB,OAAE,CAApC,IAAI8Q,EAAQrP,EAAAjV,MACf,GAAIskB,EAASrJ,GAAG9S,EAAApH,YAAYywE,UAAW,OAAO,oGAGlD,MAEF,QACE,GAAIv3D,EAAOgB,GAAG9S,EAAApH,YAAYywE,WAAaipC,EAAkBxgG,GAAS,OAAO,qGAMjF,OAAO,GA5dGwgG,CAAkBpmG,IAAU3V,KAAKk8G,eAAet7G,EAAM+U,GAC1D,MAEF,KAAKy8C,EAAAhlD,YAAY6W,eAAgB,MACjC,QAASpZ,QAAO,MAIZmwG,EAAA/4G,UAAAw5G,uBAAR,SAA+B76G,EAAc+U,WACvCwP,EAAYxP,EAAQwP,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAAnP,EAAAuQ,EAAU3K,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAApC,IAAI8Q,EAAQvK,EAAA/Z,MACXskB,EAASrJ,GAAG9S,EAAApH,YAAYywE,WAAW9yE,KAAK87G,cAAcl7G,EAAgBglB,uGAKxEo1F,EAAA/4G,UAAAy5G,oBAAR,SAA4B96G,EAAc+U,WACpCwP,EAAYxP,EAAQwP,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAAnP,EAAAuQ,EAAU3K,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAE,CAApC,IAAI8Q,EAAQvK,EAAA/Z,MACXskB,EAASrJ,GAAG9S,EAAApH,YAAYywE,WAAW9yE,KAAKm8G,WAAWv7G,EAAaglB,uGAKlEo1F,EAAA/4G,UAAA25G,uBAAR,SAA+Bh7G,EAAc+U,GAO3C9K,QAAO,IAWXmwG,EAzHA,GA4HAoB,EAAA,SAAA7uG,GAWE,SAAA6uG,EAAYv5F,EAAkBo4F,QAAA,IAAAA,OAAA,GAA9B,IAAAxtG,EACEF,EAAA/M,KAAAR,KAAM6iB,EAASo4F,IAAej7G,YALxByN,EAAA0hB,GAAe,GACf1hB,EAAA4uG,YAAmB,IAuK7B,OA/KgCvtG,EAAAstG,EAAA7uG,GAGvB6uG,EAAAE,MAAP,SAAaz5F,GACX,OAAO,IAAIu5F,EAAWv5F,GAASy5F,SAWjCF,EAAAn6G,UAAAs5G,YAAA,SAAY36G,EAAc+U,GACxB,IAAIwZ,EAAKnvB,KAAKmvB,GACVqtD,EAAU7mE,EAAQ4G,GAAG9S,EAAApH,YAAYsiB,SAMrC,GALA9a,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aACZ7/B,GAASrtD,EAAG5Q,KAAK,UACrB4Q,EAAG5Q,KAAKve,KAAKu8G,aAAa5mG,EAAQuG,OAClCiT,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK3d,GACJ47E,EACF,OAAQ7mE,EAAQ6O,mBACd,OACE2K,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAKw8F,cAAcplG,EAAQ+O,uBAC9B,MAEF,OACEyK,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAK5I,EAAQiP,mBAAmB5G,YACnC,MAEF,QAASnT,QAAO,GAGpBskB,EAAG5Q,KAAK,QAGV69F,EAAAn6G,UAAAu5G,UAAA,SAAU56G,EAAc+U,eAClBwZ,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,eAChBltF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR,IAAIxC,EAAUpG,EAAQoG,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAAygG,EAAA5nG,EAAAmH,GAAO0gG,EAAAD,EAAA1nG,QAAA2nG,EAAA1nG,KAAA0nG,EAAAD,EAAA1nG,OAAE,CAA3B,IAAAuG,EAAApG,EAAAwnG,EAAAn7G,MAAA,GAACi4G,EAAAl+F,EAAA,GACR,IADcE,EAAAF,EAAA,IACH/H,MAAQ8+C,EAAAhlD,YAAYyX,UAAW,CACxC,IAAI23D,EAAsBjhE,EAAQgB,GAAG9S,EAAApH,YAAYsiB,SACjD9a,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aACZ7/B,EAASrtD,EAAG5Q,KAAK,UAChB4Q,EAAG5Q,KAAK,aACb4Q,EAAG5Q,KAAK,kBACR4Q,EAAG5Q,KAAKg7F,GACJ/8B,IACFrtD,EAAG5Q,KAAK,OACR1T,OAA4C,GAAzB0Q,EAAQiJ,mBAC3B2K,EAAG5Q,KAAK2hC,QAAoB3kC,EAAQmJ,sBAAsB1G,SAAS,MAErEmR,EAAG5Q,KAAK,8GAGZ,IAAmB,IAAAjD,EAAA1G,EAAAmH,EAAQvB,UAAQwB,EAAAV,EAAAxG,QAAAkH,EAAAjH,KAAAiH,EAAAV,EAAAxG,OAAE,CAAhC,IAAIyG,KAAMS,EAAA1a,OACFgS,MAAQ8+C,EAAAhlD,YAAYyX,WAAW7kB,KAAKq7G,aAAa9/F,EAAO3a,KAAM2a,sGAG7E1R,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,QAGV69F,EAAAn6G,UAAA65G,cAAA,SAAcl7G,EAAc+U,WACtBwZ,EAAKnvB,KAAKmvB,GACVpe,EAAY4E,EAAQ5E,UACxBlH,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aAChBltF,EAAG5Q,KAAKve,KAAKu8G,aAAaxrG,EAAUkgB,aACpC9B,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,KAIR,IAHA,IAAIyS,EAAajgB,EAAUsW,eACvB8tC,EAAgBnkC,EAAWlmB,OAEtBzK,EAAI,EAAGA,EAAI80D,IAAiB90D,EAC/BA,GAAG8uB,EAAG5Q,KAAK,MAEf4Q,EAAG5Q,KAAKve,KAAKu8G,aAAavrF,EAAW3wB,KACrC8uB,EAAG5Q,KAAK,KACR4Q,EAAG5Q,KAAKxN,EAAUyW,iBAAiBnnB,IAErC8uB,EAAG5Q,KAAK,QACR,IAAIxC,EAAUpG,EAAQoG,QACtB,GAAIA,GAAWA,EAAQ8/B,KAAM,CAC3BhyC,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aAChBltF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK5I,EAAQ/U,MAChBuuB,EAAG5Q,KAAK,YACR,IAAmB,IAAAwF,EAAAnP,EAAAmH,EAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAA,CAA9B,IAAIyG,EAAMF,EAAA/Z,MAAsBtB,KAAKq7G,aAAa9/F,EAAO3a,KAAM2a,qGACpE1R,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,SAIZ69F,EAAAn6G,UAAAk6G,WAAA,SAAWv7G,EAAc+U,GACvB,IAAIwZ,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,eAChBltF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QAER1U,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,QAGV69F,EAAAn6G,UAAAy6G,eAAA,SAAe97G,EAAc+U,GAC3B3V,KAAKm8G,WAAWv7G,EAAM+U,IAGxBymG,EAAAn6G,UAAA05G,WAAA,SAAW/6G,EAAc+U,KAIzBymG,EAAAn6G,UAAAi6G,eAAA,SAAet7G,EAAc+U,WACvBwZ,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,eAChBltF,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR,IAAIxC,EAAUpG,EAAQoG,QACtB,GAAIA,MACF,IAAmB,IAAAgI,EAAAnP,EAAAmH,EAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAA,CAA9B,IAAIyG,EAAMF,EAAA/Z,MAAsBtB,KAAKq7G,aAAa9/F,EAAO3a,KAAM2a,qGAEtE1R,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,QAGV69F,EAAAn6G,UAAAq5G,WAAA,SAAW16G,EAAc+U,EAAkB6wE,KAI3C41B,EAAAn6G,UAAAs6G,aAAA,SAAargG,GACX,OAAQA,EAAK5I,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAOtT,KAAK6iB,QAAQrR,QAAQc,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOtS,KAAK6iB,QAAQrR,QAAQc,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADAzH,QAAO,GACA,KAKbuxG,EAAAn6G,UAAAq6G,MAAA,WACE,IAAIntF,EAAKnvB,KAAKmvB,GAMd,OALAA,EAAG5Q,KAAK,4BACNve,KAAKq8G,YACPr8G,KAAKm7G,SACHn7G,KAAKq8G,YACPltF,EAAG5Q,KAAK,OACD4Q,EAAGvW,KAAK,KAEnBwjG,EA/KA,CAAgCpB,GAAnBt7G,EAAA08G,aAkLb,IAAAO,EAAA,SAAApvG,GAYE,SAAAovG,EAAY95F,EAAkBo4F,QAAA,IAAAA,OAAA,GAA9B,IAAAxtG,EACEF,EAAA/M,KAAAR,KAAM6iB,EAASo4F,IAAej7G,YANxByN,EAAA0hB,GAAe,GACf1hB,EAAA4uG,YAAmB,EACnB5uG,EAAAmvG,QAAuB,IAAIz1G,MA+MrC,OAxNgC2H,EAAA6tG,EAAApvG,GAGvBovG,EAAAL,MAAP,SAAaz5F,GACX,OAAO,IAAI85F,EAAW95F,GAASy5F,SAYjCK,EAAA16G,UAAAs5G,YAAA,SAAY36G,EAAc+U,GACxB,IAAIwZ,EAAKnvB,KAAKmvB,GACVqtD,EAAU7mE,EAAQ4G,GAAG9S,EAAApH,YAAYsiB,SACrC9a,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aACZ1mG,EAAQ4G,GAAG9S,EAAApH,YAAY+c,QACrBo9D,EAASrtD,EAAG5Q,KAAK,oBAChB4Q,EAAG5Q,KAAK,WAETi+D,EAASrtD,EAAG5Q,KAAK,iBAChB4Q,EAAG5Q,KAAK,eAEf4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKve,KAAKu8G,aAAa5mG,EAAQuG,OAClCiT,EAAG5Q,KAAK,OACRve,KAAKk8G,eAAet7G,EAAM+U,IAG5BgnG,EAAA16G,UAAAu5G,UAAA,SAAU56G,EAAc+U,WAClBwZ,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,eAChBltF,EAAG5Q,KAAK,gBACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR,IAAIxC,EAAUpG,EAAQoG,QACtB,GAAIA,EAAS,CACX,IAAI8gG,EAAa9gG,EAAQ8/B,SACzB,IAA2B,IAAAihE,EAAAloG,EAAAmH,GAAOghG,EAAAD,EAAAhoG,QAAAioG,EAAAhoG,KAAAgoG,EAAAD,EAAAhoG,OAAE,CAA3B,IAAAiP,EAAA9O,EAAA8nG,EAAAz7G,MAAA,GAAC07G,EAAAj5F,EAAA,GAAMxI,EAAAwI,EAAA,GACVxI,EAAOjI,MAAQ8+C,EAAAhlD,YAAYyX,YAC7Bhb,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aAChBltF,EAAG5Q,KAAKy+F,GACJzhG,EAAOgB,GAAG9S,EAAApH,YAAYsiB,WACxBwK,EAAG5Q,KAAK,OACR1T,OAA4C,GAAzB0Q,EAAQiJ,mBAC3B2K,EAAG5Q,KAAK2hC,QAAoB3kC,EAAQmJ,sBAAsB1G,SAAS,MAErEmR,EAAG5Q,KAAK,SACNs+F,qGAGFA,GAAY78G,KAAKk8G,eAAet7G,EAAM+U,GAE5C9L,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,QAGVo+F,EAAA16G,UAAA65G,cAAA,SAAcl7G,EAAc+U,GAC1B,IAAIA,EAAQmJ,MAAMrV,EAAApH,YAAY60D,QAAUztD,EAAApH,YAAY2c,KAApD,CACA,IAAImQ,EAAKnvB,KAAKmvB,GACVpe,EAAY4E,EAAQ5E,UAIxB,GAHAlH,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aACZ1mG,EAAQ4G,GAAG9S,EAAApH,YAAY80D,YAAYhoC,EAAG5Q,KAAK,cAC3C5I,EAAQ4G,GAAG9S,EAAApH,YAAY+c,SAAS+P,EAAG5Q,KAAK,WACxC5I,EAAQ4G,GAAG9S,EAAApH,YAAY0c,KAMzB,OALAoQ,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAKve,KAAKu8G,aAAaxrG,EAAUkgB,kBACpC9B,EAAG5Q,KAAK,OAGH5I,EAAQmJ,MAAMrV,EAAApH,YAAY+c,OAAS3V,EAAApH,YAAYggB,WAAW8M,EAAG5Q,KAAK,oBACvE4Q,EAAG5Q,KAAK3d,GAEVuuB,EAAG5Q,KAAK,KAIR,IAHA,IAAIyS,EAAajgB,EAAUsW,eACvB8tC,EAAgBnkC,EAAWlmB,OAEtBzK,EAAI,EAAGA,EAAI80D,IAAiB90D,EAC/BA,GAAG8uB,EAAG5Q,KAAK,MAEf4Q,EAAG5Q,KAAKxN,EAAUyW,iBAAiBnnB,IACnC8uB,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKve,KAAKu8G,aAAavrF,EAAW3wB,KAEnCsV,EAAQmJ,MAAMrV,EAAApH,YAAYyd,YAAcrW,EAAApH,YAAY2c,KACtDmQ,EAAG5Q,KAAK,MAER4Q,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAKve,KAAKu8G,aAAaxrG,EAAUkgB,cAEtC9B,EAAG5Q,KAAK,OACRve,KAAKk8G,eAAet7G,EAAM+U,KAG5BgnG,EAAA16G,UAAAk6G,WAAA,SAAWv7G,EAAc+U,eACnBwZ,EAAKnvB,KAAKmvB,GACV8tF,EAActnG,EAAQrC,MAAQ8+C,EAAAhlD,YAAYsc,UAC9C7f,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,eACZY,EACF9tF,EAAG5Q,KAAK,sBAEJ5I,EAAQ4G,GAAG9S,EAAApH,YAAYqd,WAAWyP,EAAG5Q,KAAK,aAC9C4Q,EAAG5Q,KAAK,kBAEV4Q,EAAG5Q,KAAK3d,GAMRuuB,EAAG5Q,KAAK,QACR,IAAI64D,EAAgBzhE,EAAQ1T,UAAU8Z,QACtC,GAAIq7D,MACF,IAAmB,IAAA/7D,EAAAzG,EAAAwiE,EAAc58D,UAAQc,EAAAD,EAAAvG,QAAAwG,EAAAvG,KAAAuG,EAAAD,EAAAvG,OAAA,CAApC,IAAIyG,EAAMD,EAAAha,MAA4BtB,KAAKq7G,aAAa9/F,EAAO3a,KAAM2a,qGAE5E,IAAIH,EAAkBzF,EAAQoG,QAC9B,GAAIX,MACF,IAAmB,IAAAY,EAAApH,EAAAwG,EAAgBZ,UAAQyB,EAAAD,EAAAlH,QAAAmH,EAAAlH,KAAAkH,EAAAD,EAAAlH,OAAA,CAAlCyG,EAAMU,EAAA3a,MAA8BtB,KAAKq7G,aAAa9/F,EAAO3a,KAAM2a,qGAE9E1R,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,QAGVo+F,EAAA16G,UAAAy6G,eAAA,SAAe97G,EAAc+U,GAC3B3V,KAAKm8G,WAAWv7G,EAAM+U,IAGxBgnG,EAAA16G,UAAA05G,WAAA,SAAW/6G,EAAc+U,GACvB,IAAIA,EAAQ4G,GAAG9S,EAAApH,YAAY60D,SAA3B,CACA,IAAI/nC,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aACZ1mG,EAAQ4G,GAAG9S,EAAApH,YAAY80D,YAAYhoC,EAAG5Q,KAAK,cAC3C5I,EAAQ4G,GAAG9S,EAAApH,YAAY+c,SAAS+P,EAAG5Q,KAAK,WACxC5I,EAAQ4G,GAAG9S,EAAApH,YAAYid,WAAW6P,EAAG5Q,KAAK,aAC9C4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,MACR4Q,EAAG5Q,KAAKve,KAAKu8G,aAAa5mG,EAAQuG,OAClCiT,EAAG5Q,KAAK,SAGVo+F,EAAA16G,UAAAi6G,eAAA,SAAet7G,EAAc+U,WACvBoG,EAAUpG,EAAQoG,QACtB,GAAIA,GAAWA,EAAQ8/B,KAAM,CAC3B,IAAI1sB,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,eAChBltF,EAAG5Q,KAAK,qBACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,YACR,IAAmB,IAAAwF,EAAAnP,EAAAmH,EAAQvB,UAAQa,EAAA0I,EAAAjP,QAAAuG,EAAAtG,KAAAsG,EAAA0I,EAAAjP,OAAA,CAA9B,IAAIyG,EAAMF,EAAA/Z,MAAsBtB,KAAKq7G,aAAa9/F,EAAO3a,KAAM2a,qGACpE1R,EAAAkwG,OAAO5qF,IAAMnvB,KAAKq8G,aAClBltF,EAAG5Q,KAAK,SAIZo+F,EAAA16G,UAAAq5G,WAAA,SAAW16G,EAAc+U,EAAkB6wE,GACzC,IAAIr3D,EAAKnvB,KAAKmvB,GACdtlB,EAAAkwG,OAAO5qF,EAAInvB,KAAKq8G,aAChBltF,EAAG5Q,KAAK,iBACR4Q,EAAG5Q,KAAK3d,GACRuuB,EAAG5Q,KAAK,cACR4Q,EAAG5Q,KAAKioE,GACRr3D,EAAG5Q,KAAK,QAGVo+F,EAAA16G,UAAAs6G,aAAA,SAAargG,GACX,OAAQA,EAAK5I,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOtT,KAAK6iB,QAAQrR,QAAQc,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOtS,KAAK6iB,QAAQrR,QAAQc,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAoB,MAAO,OAC3B,QAEE,OADAzH,QAAO,GACA,QAKb8xG,EAAA16G,UAAAq6G,MAAA,WACE,IAAIntF,EAAKnvB,KAAKmvB,GAgBd,OAfAA,EAAG5Q,KAAK,+BACR4Q,EAAG5Q,KAAK,yBACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,yBACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACR4Q,EAAG5Q,KAAK,0BACNve,KAAKq8G,YACPr8G,KAAKm7G,SACHn7G,KAAKq8G,YACPltF,EAAG5Q,KAAK,OACR4Q,EAAG5Q,KAAK,8BACDve,KAAKmvB,GAAGvW,KAAK,KAExB+jG,EAxNA,CAAgC3B,GAAnBt7G,EAAAi9G,4aChVb,IAAAlzG,EAAAtJ,EAAA,GAMAiyD,EAAAjyD,EAAA,GAIAyvB,EAAAzvB,EAAA,GASAuJ,EAAAvJ,EAAA,GAKA0J,EAAA1J,EAAA,GAIAyJ,EAAAzJ,EAAA,GA2DA+8G,EAAA,SAAA3vG,GAcE,SAAA2vG,IAAA,IAAAzvG,EACEF,EAAA/M,KAAAR,OAAOA,YAVTyN,EAAA0vG,QAAoB,IAAIl2G,MAExBwG,EAAA2vG,QAAuB,IAAIj2G,IAE3BsG,EAAA4vG,QAAuB,IAAIl2G,IAE3BsG,EAAAktD,UAAmC,KAye3BltD,EAAA6vG,8BAAqC,EA8drC7vG,EAAA8vG,oBAA4C,KAl8BlD9vG,EAAKoV,QAAU,IAAIuvC,EAAA9kD,QAAQG,EAAKD,eA+sHpC,OA/tH4BsB,EAAAouG,EAAA3vG,GAoB1B2vG,EAAAj7G,UAAAu7G,UAAA,SACE3nG,EACA+L,EACAlH,GAEA,IAAIxL,EAAiBrF,EAAAquB,cAActW,GAC/BJ,EAAe5X,EAAAyuB,mBAAmBnpB,GAGtC,IAAIlP,KAAKq9G,QAAQ/rG,IAAIkQ,GAArB,CACAxhB,KAAKq9G,QAAQvrG,IAAI0P,GACjBxhB,KAAKo9G,QAAQtrG,IAAI0P,GAGjB,IAAIpS,EAAS,IAAIxF,EAAAyE,OACfa,EACA2G,EACA6E,EACI9Q,EAAA0E,WAAWowB,MACX9c,EAAKuW,WAAW1uB,EAAA3G,iBAAmB8e,EAAK21F,QAAQ9tG,EAAAnH,eAAgBmH,EAAA3G,eAAegI,QAAU,EACvFlB,EAAA0E,WAAWC,QACX3E,EAAA0E,WAAW8nD,SAEfvzC,EAAU7iB,KAAK6iB,QACnBA,EAAQnV,QAAQ6Q,KAAKnP,GAGrB,IAAIquG,EAAK,IAAI7tF,EAAA0qC,UAAUlrD,EAAQyT,EAAQrV,aACvCiwG,EAAG9iD,UAAY36D,KAAK26D,UACpBvrD,EAAOgvB,UAAYq/E,EAEnB,IADA,IAAItqG,EAAa/D,EAAO+D,YAChBsqG,EAAGngD,KAAK1tC,EAAAC,MAAMktC,YAAY,CAChC,IAAI1pD,EAAYrT,KAAK09G,uBAAuBD,EAAI,MAC5CpqG,GAAWF,EAAWoL,KAAKlL,GAEjCoqG,EAAGj9C,WAIL08C,EAAAj7G,UAAAy7G,uBAAA,SACED,EACAx8B,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIpxE,EAAQpG,EAAApH,YAAYyN,KACpB6tG,GAAiB,EAGjBngG,EAAqC,KAClCigG,EAAGngD,KAAK1tC,EAAAC,MAAMwsC,KAAK,CACpBshD,EAAW,IAAGA,EAAWF,EAAGljD,UAChC,IAAI78C,EAAY1d,KAAK49G,eAAeH,GAC/B//F,EAIAF,EACAA,EAAWe,KAAKb,GADJF,EAAa,CAACE,GAH7B1d,KAAK69G,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBR,EAAGngD,KAAK1tC,EAAAC,MAAM7d,UACZ2rG,EAAW,IAAGA,EAAWF,EAAGljD,UAChC1qD,GAASpG,EAAApH,YAAY2P,OACrB8rG,EAAcL,EAAGljD,SACjBwjD,EAAYN,EAAGl/E,IACXk/E,EAAGngD,KAAK1tC,EAAAC,MAAMumC,WAChB4nD,EAAeP,EAAGljD,SAClB0jD,EAAaR,EAAGl/E,MAIpB,IAAI2/E,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAbn9B,GAAqBA,EAAU1kE,GAAG9S,EAAApH,YAAY8f,SACjEs7F,EAAGngD,KAAK1tC,EAAAC,MAAMnN,SACZ07F,EACFp+G,KAAKuV,MACH7L,EAAA8L,eAAe6oG,gEACfZ,EAAG1tG,UAGD4tG,EAAW,IAAGA,EAAWF,EAAGljD,UAChC2jD,EAAeP,EACfQ,EAAaV,EAAGl/E,IAChB1uB,GAASpG,EAAApH,YAAYqgB,QAAUjZ,EAAApH,YAAY8f,SAEpCi8F,IACTvuG,GAASpG,EAAApH,YAAY8f,SAIvB,IAAI9O,EAA8B,KAG9BirG,EAAQb,EAAGzgD,OAEf,OADI2gD,EAAW,IAAGA,EAAWF,EAAGhjD,cACxB6jD,GACN,KAAK1uF,EAAAC,MAAMnT,MACT+gG,EAAG3oG,OACHjF,GAASpG,EAAApH,YAAYqa,MAEnBrJ,EADEoqG,EAAGngD,KAAK1tC,EAAAC,MAAMxL,MACJrkB,KAAKu+G,UAAUd,EAAI5tG,EAAO2N,EAAYmgG,GAEtC39G,KAAKw+G,cAAcf,EAAI5tG,EAAO2N,EAAYmgG,GAExDngG,EAAa,KACb,MAEF,KAAKoS,EAAAC,MAAMinC,IAAKjnD,GAASpG,EAAApH,YAAYy0D,IACrC,KAAKlnC,EAAAC,MAAM0nC,IACTkmD,EAAG3oG,OACHzB,EAAYrT,KAAKw+G,cAAcf,EAAI5tG,EAAO2N,EAAYmgG,GACtDngG,EAAa,KACb,MAEF,KAAKoS,EAAAC,MAAMxL,KACTo5F,EAAG3oG,OACHzB,EAAYrT,KAAKu+G,UAAUd,EAAI5tG,EAAO2N,EAAYmgG,GAClDngG,EAAa,KACb,MAEF,KAAKoS,EAAAC,MAAMjU,SACT6hG,EAAG3oG,OACHzB,EAAYrT,KAAKy+G,cAAchB,EAAI5tG,EAAO2N,EAAYmgG,GACtDngG,EAAa,KACb,MAEF,KAAKoS,EAAAC,MAAMnQ,SACT,IAAI89C,EAAQigD,EAAGlgD,OAEf,GADAkgD,EAAG3oG,QACE2oG,EAAGngD,KAAK1tC,EAAAC,MAAM/T,OAAQ,CACzB2hG,EAAG7/C,MAAMJ,GACTnqD,EAAYrT,KAAK0+G,eAAejB,GAAI,GACpC,MAEAA,EAAG9/C,QAAQH,GAEb3tD,GAASpG,EAAApH,YAAYqd,SAGvB,KAAKkQ,EAAAC,MAAM/T,MACX,KAAK8T,EAAAC,MAAMnG,UACT+zF,EAAG3oG,OACHzB,EAAYrT,KAAK2+G,sBAAsBlB,EAAI5tG,EAAO2N,EAAYmgG,GAC9DngG,EAAa,KACb,MAEF,KAAKoS,EAAAC,MAAMzL,UACLo5C,EAAQigD,EAAGlgD,OACfkgD,EAAG3oG,OACC2oG,EAAGzgD,MAAK,EAAOptC,EAAAgmC,mBAAmBgH,SAAWhtC,EAAAC,MAAMM,YACrDstF,EAAG9/C,QAAQH,GACXnqD,EAAYrT,KAAK4+G,eAAenB,EAAI5tG,EAAO2N,EAAYmgG,GACvDngG,EAAa,OAEbigG,EAAG7/C,MAAMJ,GACTnqD,EAAYrT,KAAK0+G,eAAejB,GAAI,IAEtC,MAEF,KAAK7tF,EAAAC,MAAMlc,OACT8pG,EAAG3oG,OAGDzB,GAFFxD,GAASpG,EAAApH,YAAYsR,QACTlK,EAAApH,YAAY2P,OACVhS,KAAK6+G,kBAAkBpB,EAAIE,GAE3B39G,KAAK8+G,YAAYrB,GAE/B,MAEF,KAAK7tF,EAAAC,MAAMwnC,KACLmG,EAAQigD,EAAGlgD,OACfkgD,EAAG3oG,OACC2oG,EAAGzgD,MAAK,EAAOptC,EAAAgmC,mBAAmBgH,SAAWhtC,EAAAC,MAAMM,YACrDstF,EAAG9/C,QAAQH,GACXnqD,EAAYrT,KAAK++G,qBAAqBtB,EAAI5tG,EAAO2N,EAAYmgG,GAC7DngG,EAAa,OAEbigG,EAAG7/C,MAAMJ,GACTnqD,EAAYrT,KAAK0+G,eAAejB,GAAI,IAEtC,MAEF,QAGM5tG,EAAQpG,EAAApH,YAAY2P,OAClBisG,GAAcR,EAAGpgD,eAAeztC,EAAAgmC,mBAAmBgH,SACjDuhD,GACFn+G,KAAKuV,MACH7L,EAAA8L,eAAewpG,2CACfvB,EAAG1tG,MAAMmuG,EAAcC,IAG3B9qG,EAAYrT,KAAKi/G,wBAAwBxB,EAAIE,EAAUK,EAAcC,GACrED,EAAeC,EAAa,GAE5B5qG,EAAYrT,KAAKk/G,YAAYzB,EAAIE,EAA2C,IAAhC9tG,EAAQpG,EAAApH,YAAYqgB,WAK9Dq7F,GACF/9G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAM+tG,EAAaC,GAAY,UAGlCI,GACFn+G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMmuG,EAAcC,GAAa,WAGnCl9B,IACH5tE,EAAYrT,KAAK0+G,eAAejB,GAAI,KAQ5C,GAAIjgG,EACF,IAAK,IAAInd,EAAI,EAAG8O,EAAIqO,EAAW1S,OAAQzK,EAAI8O,IAAK9O,EAC9CL,KAAKuV,MACH7L,EAAA8L,eAAe4pG,8BACf5hG,EAAWnd,GAAG0P,OAMpB,GAAIkuG,GAA4B,OAAd5qG,EAChB,OAAQA,EAAUC,MAChB,KAAK1J,EAAA2J,SAASU,gBACd,KAAKrK,EAAA2J,SAASY,oBACd,KAAKvK,EAAA2J,SAASQ,iBACd,KAAKnK,EAAA2J,SAASc,qBACd,KAAKzK,EAAA2J,SAASgB,qBACZ,OAAO3K,EAAAoG,KAAKsoB,6BAAmDjlB,EAAWoqG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAElG,QACEv+B,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMiuG,EAAcC,GAAa,WAK5C,OAAO5qG,GAIT6pG,EAAAj7G,UAAAo9G,SAAA,WACE,IAAIlC,EAAUn9G,KAAKm9G,QACnB,OAAOA,EAAQryG,OAASqyG,EAAQngE,QAAU,MAI5CkgE,EAAAj7G,UAAAu+D,OAAA,WACE,GAAIxgE,KAAKm9G,QAAQryG,OAAQ,MAAM,IAAIuO,MAAM,wBAIzC,OAHArZ,KAAKm9G,QAAU,GACfn9G,KAAKo9G,QAAQkC,QACbt/G,KAAKq9G,QAAQiC,QACNt/G,KAAK6iB,SAIdq6F,EAAAj7G,UAAAs9G,UAAA,SACE9B,EACA+B,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGIvjG,EAHAy7C,EAAQ8lD,EAAG3oG,OACX6oG,EAAWF,EAAGljD,SAKlB,GAAI5C,GAAS/nC,EAAAC,MAAMorC,UAAW,CAG5B,IAAIykD,EAAsBjC,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAEpClqD,EAAY/Q,KAAK2/G,qBAAqBlC,GAC1C,GAAI1sG,EAAW,CACb,GAAI2uG,EAAqB,CACvB,IAAKjC,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAKjB,OAJAl7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAET,IAAK0tG,EAAGngD,KAAK1tC,EAAAC,MAAMopC,KAKjB,OAJAj5D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAEJ0tG,EAAGngD,KAAK1tC,EAAAC,MAAME,OACjB/vB,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,QAGhBgB,EAAU+f,YAAa,EAEzB,OAAO/f,EACF,GAAI2uG,GAAuB1/G,KAAKs9G,6BAKrC,OAJAt9G,KAAKuV,MACH7L,EAAA8L,eAAeoqG,iBACfnC,EAAG1tG,SAEE,KAIT,IAAIyvG,EAoBF,OAJAx/G,KAAKuV,MACH7L,EAAA8L,eAAeoqG,iBACfnC,EAAG1tG,SAEE,KAnBP,IAAI8vG,EAAY7/G,KAAKu/G,UAAU9B,GAAI,EAAOgC,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAKpC,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAOjB,OANKukD,GACHz/G,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,KAGf,MAETriB,EAAO2jG,GACF9vG,MAAMif,MAAQ2uF,EACnBzhG,EAAKnM,MAAMkf,IAAMwuF,EAAGl/E,SAUjB,GAAIo5B,GAAS/nC,EAAAC,MAAMmQ,KACxB9jB,EAAOtS,EAAAoG,KAAKU,gBACV9G,EAAAoG,KAAKW,qBAAqB,OAAQ8sG,EAAG1tG,SAAU,IAAI,EAAO0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,WAI7E,GAAIo5B,GAAS/nC,EAAAC,MAAMiO,KACxB5hB,EAAOtS,EAAAoG,KAAKU,gBACV9G,EAAAoG,KAAKW,qBAAqB,OAAQ8sG,EAAG1tG,SAAU,IAAI,EAAO0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,WAI7E,GAAIo5B,GAAS/nC,EAAAC,MAAMG,MAAQ2nC,GAAS/nC,EAAAC,MAAMI,MAC/C/T,EAAOtS,EAAAoG,KAAKU,gBACV9G,EAAAoG,KAAKW,qBAAqB,OAAQ8sG,EAAG1tG,SAAU,IAAI,EAAO0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,WAI7E,GAAIo5B,GAAS/nC,EAAAC,MAAMkrC,cACxB0iD,EAAGx5D,aACH/nC,EAAOtS,EAAAoG,KAAKU,gBACV9G,EAAAoG,KAAKW,qBAAqB,SAAU8sG,EAAG1tG,SAAU,IAAI,EAAO0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,UAI/E,IAAIo5B,GAAS/nC,EAAAC,MAAMM,WA6DxB,OANKsvF,GACHz/G,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGA,KAtDP,IANA,IAAIuuG,EAAQ10G,EAAAoG,KAAKW,qBAAqB8sG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAC1DiT,EAAUs7F,EACVttF,EAAqC,KACrC+uF,GAAW,EAGRtC,EAAGngD,KAAK1tC,EAAAC,MAAMwrC,MAAM,CACzB,IAAIoiD,EAAGngD,KAAK1tC,EAAAC,MAAMM,YAShB,OAJAnwB,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,MAAM0tG,EAAGl/E,MAEP,KARP,IAAIzpB,EAAOlL,EAAAoG,KAAKW,qBAAqB8sG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAC7DiT,EAAQlO,KAAOA,EACfkO,EAAUlO,EAWd,GAAI2oG,EAAGngD,KAAK1tC,EAAAC,MAAMkoC,UAAW,CAC3B,EAAG,CACD,IAAIq+C,EAAYp2G,KAAKu/G,UAAU9B,GAAI,EAAMgC,GACzC,IAAKrJ,EAAW,OAAO,KAClBplF,EACAA,EAAWzS,KAAoB63F,GADnBplF,EAAa,CAAgBolF,SAEvCqH,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QACvB,IAAKmgF,EAAGngD,KAAK1tC,EAAAC,MAAMmoC,aAOjB,OANKynD,GACHz/G,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,KAGf,KAIX,KAAOk/E,EAAGngD,KAAK1tC,EAAAC,MAAMopC,MAAM,CACzB,IAAIwkD,EAAGngD,KAAK1tC,EAAAC,MAAME,MAShB,OANK0vF,GACHz/G,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,QAGf,KARPwhF,GAAW,EAWf7jG,EAAOtS,EAAAoG,KAAKU,gBAAgB4tG,EAAOttF,GAAc,GAAI+uF,EAAUtC,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAWvF,KAAOk/E,EAAGngD,KAAK1tC,EAAAC,MAAMosC,cAAc,CACjC,IAAI+jD,EAAevC,EAAGljD,SACtB,IAAKkjD,EAAGngD,KAAK1tC,EAAAC,MAAMqsC,cAOjB,OANKujD,GACHz/G,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGT,KAET,IAAIkwG,EAAexC,EAAG1tG,MAAMiwG,EAAcvC,EAAGl/E,KAGzCwhF,GAAW,EACf,GAAItC,EAAGngD,KAAK1tC,EAAAC,MAAMopC,KAAM,CACtB,IAAIwkD,EAAGngD,KAAK1tC,EAAAC,MAAME,MAShB,OANK0vF,GACHz/G,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,QAGT,KARPgwG,GAAW,EAiBf,GANA7jG,EAAOtS,EAAAoG,KAAKU,gBACV9G,EAAAoG,KAAKW,qBAAqB,QAASsvG,GACnC,CAAE/jG,GACF6jG,EACAtC,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEpBwhF,EAAU,MAGhB,OAAO7jG,GAOTghG,EAAAj7G,UAAA09G,qBAAA,SACElC,GAKA,IAuGIxsF,EAvGAusC,EAAQigD,EAAGlgD,OACXogD,EAAWF,EAAGljD,SACdvpC,EAAqC,KACrC5J,EAAiC,KACjC84F,GAAoB,EAExB,GAAIzC,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAChBglD,GAAc,EACdzC,EAAG9/C,QAAQH,GACXxsC,EAAa,OAER,CACLkvF,GAAc,EACd,EAAG,CACD,IAAI5sG,EAAO1J,EAAAuyB,cAAci6B,QAMzB,GALIqnD,EAAGngD,KAAK1tC,EAAAC,MAAMioC,eAChBooD,GAAc,EACdzC,EAAG9/C,QAAQH,GACXlqD,EAAO1J,EAAAuyB,cAAcmlC,MAEnBm8C,EAAGngD,KAAK1tC,EAAAC,MAAMiO,MAAO,CACvB,IAAI2/E,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAiBhB,OAFA4hD,EAAG7/C,MAAMJ,GACTx9D,KAAKs9G,8BAA+B,EAC7B,KAhBP4C,GAAc,EACdzC,EAAG9/C,QAAQH,GACX,IAAIj8D,EAAIvB,KAAKu/G,UAAU9B,GAAI,GAC3B,IAAKl8G,EAAG,OAAO,KACf,GAAIA,EAAE+R,MAAQ1J,EAAA2J,SAASyoB,UAMrB,OALAh8B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfjf,EAAEwO,OAEJ/P,KAAKs9G,8BAA+B,EAC7B,KAETl2F,EAA0B7lB,MAMvB,KAAIk8G,EAAGpgD,iBA8CZ,OATI6iD,EACFlgH,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGL0tG,EAAG7/C,MAAMJ,GAEXx9D,KAAKs9G,6BAA+B4C,EAC7B,KA7CP,IAAIt/G,EAAOgJ,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,MAAM0tG,EAAGljD,SAAUkjD,EAAGl/E,MAazF,GAZIk/E,EAAGngD,KAAK1tC,EAAAC,MAAMmsC,YAChBkkD,GAAc,EACdzC,EAAG9/C,QAAQH,GACPlqD,GAAQ1J,EAAAuyB,cAAcmlC,KACxBthE,KAAKuV,MACH7L,EAAA8L,eAAe2qG,oCACf1C,EAAG1tG,SAGLuD,EAAO1J,EAAAuyB,cAAcikF,UAGrB3C,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAAQ,CACxBqkD,GAAc,EACdzC,EAAG9/C,QAAQH,GACX,IAAIthD,EAAOlc,KAAKu/G,UAAU9B,GAC1B,IAAKvhG,EAEH,OADAlc,KAAKs9G,6BAA+B4C,EAC7B,KAET,IAAIG,EAAQ,IAAIz2G,EAAA6nB,cAChB4uF,EAAM3uF,cAAgBpe,EACtB+sG,EAAMz/G,KAAOA,EACby/G,EAAMnkG,KAAOA,EACR8U,EACAA,EAAWzS,KAAK8hG,GADJrvF,EAAa,CAAEqvF,QAG5BH,GACFlgH,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfi8C,EAAG1tG,gBAgBJ0tG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QACvB,IAAKmgF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAUjB,OATIglD,EACFlgH,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGd0tG,EAAG7/C,MAAMJ,GAEXx9D,KAAKs9G,6BAA+B4C,EAC7B,KAKX,OAAIzC,EAAGngD,KAAK1tC,EAAAC,MAAMksC,qBAChBmkD,GAAc,EACdzC,EAAG9/C,QAAQH,IACXvsC,EAAajxB,KAAKu/G,UAAU9B,KAiB9Bz9G,KAAKs9G,8BAA+B,EAC7B1zG,EAAAoG,KAAKS,mBACVugB,GAAc,GACdC,EACA7J,GACA,EACAq2F,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,QArBpBv+B,KAAKs9G,6BAA+B4C,EAC7B,QAGLA,EACFlgH,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,MAGd0tG,EAAG7/C,MAAMJ,GAEXx9D,KAAKs9G,6BAA+B4C,EAC7B,OAcXhD,EAAAj7G,UAAA27G,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGljD,SAClB,GAAIkjD,EAAGpgD,iBAAkB,CAGvB,IAFA,IAAIz8D,EAAO68G,EAAG5/C,iBACVhrC,EAAyBjpB,EAAAoG,KAAKE,2BAA2BtP,EAAM68G,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAClFk/E,EAAGngD,KAAK1tC,EAAAC,MAAMwrC,MAAM,CACzB,IAAIoiD,EAAGpgD,iBAYL,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAXPnP,EAAO68G,EAAG5/C,iBACVhrC,EAAajpB,EAAAoG,KAAKslB,+BAChBzC,EACAjpB,EAAAoG,KAAKE,2BAA2BtP,EAAM68G,EAAG1tG,SACzC0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAU5B,IAAI3M,OAAI,EACR,IAAI6rF,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAMhB,OAAOrxD,EAAAoG,KAAK2hB,gBAAgBkB,EAAY,KAAM4qF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAJpE,GADA3M,EAAO5xB,KAAKsgH,eAAe7C,GAEzB,OAAO7zG,EAAAoG,KAAK2hB,gBAAgBkB,EAAYjB,EAAM6rF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,WAMxEv+B,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGP,OAAO,MAGTmtG,EAAAj7G,UAAAu8G,cAAA,SACEf,EACA5tG,EACA2N,EACAmgG,GAKA,IAAI5hG,EAAU,IAAI9U,MAClB,EAAG,CACD,IAAIsU,EAASvb,KAAKugH,yBAAyB9C,EAAI5tG,EAAO2N,GACtD,IAAKjC,EAAQ,OAAO,KACpBQ,EAAQwC,KAA0BhD,SAC3BkiG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QAEvB,IAAIumB,EAAMj6C,EAAAoG,KAAKurB,wBAAwBxf,EAASyB,EAAYigG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAElF,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAAs+G,yBAAA,SACE9C,EACA+C,EACAC,GAKA,IAAKhD,EAAGpgD,iBAKN,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAET,IAAIK,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACrE6f,EAAAgoC,4BAA4BxnD,EAAWyF,OACzC7V,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACf1vG,EAAWL,OAGf,IAAIF,EAAQ2wG,EACR/C,EAAGngD,KAAK1tC,EAAAC,MAAMspC,eAChBtpD,GAASpG,EAAApH,YAAYq+G,qBAGvB,IAAIxkG,EAAwB,KACxBuhG,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,SAChB3/C,EAAOlc,KAAKu/G,UAAU9B,IAGxB,IAAIh5F,EAAiC,KACrC,GAAIg5F,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,SAQhB,GAPI1pD,EAAQpG,EAAApH,YAAY8f,SACtBniB,KAAKuV,MACH7L,EAAA8L,eAAemrG,iDACflD,EAAG1tG,WAGP0U,EAAczkB,KAAK4gH,gBAAgBnD,EAAI,IACrB,OAAO,UAErB5tG,EAAQpG,EAAApH,YAAYqa,MAChB7M,EAAQpG,EAAApH,YAAY8f,SACxBniB,KAAKuV,MACH7L,EAAA8L,eAAeinE,wCACfrsE,EAAWL,OAGLmM,GACVlc,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfi8C,EAAG1tG,MAAM0tG,EAAGl/E,MAIlB,IAAIxuB,EAAQ6f,EAAAjX,MAAMC,KAAKxI,EAAWL,MAAO0tG,EAAG1tG,SAM5C,OALKF,EAAQpG,EAAApH,YAAYq+G,qBAAwBj8F,GAC/CzkB,KAAKuV,MACH7L,EAAA8L,eAAeqrG,iEACf9wG,GAEGnG,EAAAoG,KAAKC,0BACVG,EACA8L,EACAuI,EACAg8F,EACA5wG,EACAE,IAIJmtG,EAAAj7G,UAAAs8G,UAAA,SACEd,EACA5tG,EACA2N,EACAmgG,GAKA,GAAIF,EAAG3oG,QAAU8a,EAAAC,MAAMM,WAKrB,OAJAnwB,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAET,IAAIK,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACzE,GAAI0tG,EAAG3oG,QAAU8a,EAAAC,MAAMssC,UAKrB,OAJAn8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAGT,IADA,IAAIgM,EAAU,IAAI9U,OACVw2G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,IAAI7gD,EAASvb,KAAK8gH,eAAerD,EAAIh0G,EAAApH,YAAYyN,MACjD,IAAKyL,EAAQ,OAAO,KAEpB,GADAQ,EAAQwC,KAA2BhD,IAC9BkiG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMusC,YAChB,MAMA,OAJAp8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAIb,IAAI8zC,EAAMj6C,EAAAoG,KAAK2nB,sBACbvnB,EACA2L,EACAyB,EACA3N,EACA4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGxB,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA6+G,eAAA,SACErD,EACA+C,GAKA,IAAK/C,EAAGpgD,iBAKN,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAET,IAAIK,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACrEzO,EAA2B,KAC/B,OAAIm8G,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,WAChBj4D,EAAQtB,KAAK4gH,gBAAgBnD,EAAI,IACd,KAEd7zG,EAAAoG,KAAK6nB,2BACVznB,EACA9O,EACAk/G,EACA5wF,EAAAjX,MAAMC,KAAKxI,EAAWL,MAAO0tG,EAAG1tG,WAIpCmtG,EAAAj7G,UAAA8+G,YAAA,SACEtD,GAKA,IAAIrrF,EAA0B,KAC9B,GACEqrF,EAAGzgD,MAAK,IAASptC,EAAAC,MAAMisC,WACvB2hD,EAAGjjD,WAAa5qC,EAAAC,MAAMusC,aACrBqhD,EAAG/iD,sBAEEtoC,EAAOpyB,KAAK4gH,gBAAgBnD,IAAM,OAAO,KAGjD,IAAI55D,EAAMj6C,EAAAoG,KAAKwqB,sBAAsBpI,EAAMqrF,EAAG1tG,SAE9C,OADA0tG,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA++G,oBAAA,SACEvD,GAOA,IAFA,IAAIt5F,EAA6C,KAC7C88F,GAAe,GACXxD,EAAGngD,KAAK1tC,EAAAC,MAAMmoC,cAAc,CAClC,IAAIkpD,EAAgBlhH,KAAKmhH,mBAAmB1D,GAC5C,IAAKyD,EAAe,OAAO,KAY3B,GAXkC,OAA9BA,EAAc7vF,YAChB4vF,GAAe,EACNA,IACTjhH,KAAKuV,MACH7L,EAAA8L,eAAe4rG,iEACfF,EAAcnxG,OAEhBmxG,EAAc7vF,YAAc,MAEzBlN,EACAA,EAAe5F,KAAK2iG,GADJ/8F,EAAiB,CAAE+8F,IAEnCzD,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMmoC,aAChB,MAMA,OAJAh4D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAUb,OANMoU,GAAkBA,EAAerZ,QACrC9K,KAAKuV,MACH7L,EAAA8L,eAAe6rG,oCACf5D,EAAG1tG,SAGAoU,GAGT+4F,EAAAj7G,UAAAk/G,mBAAA,SACE1D,GAKA,GAAIA,EAAG3oG,QAAU8a,EAAAC,MAAMM,WAAY,CACjC,IAAI/f,EAAaxG,EAAAoG,KAAKE,2BACpButG,EAAG5/C,iBACH4/C,EAAG1tG,SAEDyO,EAAoC,KACxC,GAAIi/F,EAAGngD,KAAK1tC,EAAAC,MAAM0mC,SAAU,CAE1B,KADIh1D,EAAIvB,KAAKu/G,UAAU9B,IACf,OAAO,KACf,GAAIl8G,EAAE+R,MAAQ1J,EAAA2J,SAASyoB,UAKrB,OAJAh8B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfjf,EAAEwO,OAEG,KAETyO,EAA6Bjd,EAE/B,IAAI8vB,EAAoC,KACxC,GAAIosF,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,QAAS,CACzB,IAAIh4D,EACJ,KADIA,EAAIvB,KAAKu/G,UAAU9B,IACf,OAAO,KACf,GAAIl8G,EAAE+R,MAAQ1J,EAAA2J,SAASyoB,UAKrB,OAJAh8B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfjf,EAAEwO,OAEG,KAETshB,EAA6B9vB,EAE/B,OAAOqI,EAAAoG,KAAKohB,oBACVhhB,EACAoO,EACA6S,EACAzB,EAAAjX,MAAMC,KAAKxI,EAAWL,MAAO0tG,EAAG1tG,UAQpC,OALE/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGA,MAKTmtG,EAAAj7G,UAAAq/G,gBAAA,SACE7D,EACA8D,QAAA,IAAAA,OAAA,GAKA,IAAIvwF,EAAa,IAAI/pB,MACjBu6G,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACfr6F,EAA4B,KAIhC,GADApnB,KAAKu9G,oBAAsB,KACvBE,EAAGngD,KAAK1tC,EAAAC,MAAMiO,MAAO,CACvB,IAAI2/E,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAgBhB,OAJA77D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAdP,KADAqX,EAAWpnB,KAAKu/G,UAAU9B,IACX,OAAO,KAgBxB,GAfMr2F,EAAS9T,MAAQ1J,EAAA2J,SAASyoB,UAC5Bh8B,KAAKu9G,oBAAqCn2F,EAE1CpnB,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACf4G,EAASrX,QAUV0tG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OACjB,OAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YACTlqC,GAEPhxB,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAKb,MAAQ0tG,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,aAAa,CACjC,IAAImlD,EAAQrgH,KAAK0hH,eAAejE,EAAI8D,GACpC,IAAKlB,EAAO,OAAO,KAQnB,OAPImB,IAAaC,IACfzhH,KAAKuV,MACH7L,EAAA8L,eAAemsG,kDACfH,EAAS5gH,KAAKmP,OAEhB0xG,GAAe,GAETpB,EAAM3uF,eACZ,QACMuvF,GACFjhH,KAAKuV,MACH7L,EAAA8L,eAAeosG,yDACfvB,EAAMz/G,KAAKmP,OAGf,MAEF,KAAKnG,EAAAuyB,cAAcikF,SACjBa,GAAe,EACf,MAEF,KAAKr3G,EAAAuyB,cAAcmlC,KACjBkgD,EAAWnB,EAKf,GADArvF,EAAWzS,KAAK8hG,IACX5C,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAChB,MAMA,OAJAl7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAIb,OAAOihB,GAGTksF,EAAAj7G,UAAAy/G,eAAA,SACEjE,EACA8D,QAAA,IAAAA,OAAA,GAKA,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2Bv4G,EAAApH,YAAYyN,KAC3C,GAAIyxG,IACE9D,EAAGngD,KAAK1tC,EAAAC,MAAMunC,SAChB2qD,EAAatE,EAAG1tG,QAChBiyG,GAAev4G,EAAApH,YAAY+0D,QAClBqmD,EAAGngD,KAAK1tC,EAAAC,MAAMsnC,YACvB4qD,EAAatE,EAAG1tG,QAChBiyG,GAAev4G,EAAApH,YAAY80D,WAClBsmD,EAAGngD,KAAK1tC,EAAAC,MAAMqnC,WACvB6qD,EAAatE,EAAG1tG,QAChBiyG,GAAev4G,EAAApH,YAAY60D,SAEzBumD,EAAGzgD,QAAUptC,EAAAC,MAAMvQ,UAAU,CAC/B,IAAIk+C,EAAQigD,EAAGlgD,OACfkgD,EAAG3oG,OACC2oG,EAAGzgD,QAAUptC,EAAAC,MAAMgsC,OACrB4hD,EAAG9/C,QAAQH,GACNukD,IAAYA,EAAatE,EAAG1tG,SACjCiyG,GAAev4G,EAAApH,YAAYid,UAE3Bm+F,EAAG7/C,MAAMJ,GAef,GAXIigD,EAAGngD,KAAK1tC,EAAAC,MAAMioC,eACZkqD,EACFhiH,KAAKuV,MACH7L,EAAA8L,eAAeysG,+DACfxE,EAAG1tG,SAGLgyG,EAAatE,EAAG1tG,QAElB8xG,GAAS,GAEPpE,EAAGpgD,iBAAkB,CAClBwkD,IAAQE,EAAatE,EAAG1tG,SAC7B,IAAIK,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACrEmM,EAAwB,KAS5B,IARI4lG,EAAarE,EAAGngD,KAAK1tC,EAAAC,MAAMmsC,YACzB6lD,GACF7hH,KAAKuV,MACH7L,EAAA8L,eAAe2qG,oCACf/vG,EAAWL,OAIb0tG,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,QAEhB,KADA3/C,EAAOlc,KAAKu/G,UAAU9B,IACX,OAAO,UAElBvhG,EAAOtS,EAAAoG,KAAKM,kBAAkBmtG,EAAG1tG,MAAM0tG,EAAGl/E,MAE5C,IAAI9Z,EAAiC,KACrC,GAAIg5F,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,UACZsoD,GACF7hH,KAAKuV,MACH7L,EAAA8L,eAAe0sG,4CACf9xG,EAAWL,OAGX+xG,EACF9hH,KAAKuV,MACH7L,EAAA8L,eAAe2sG,oDACf/xG,EAAWL,OAGb+xG,GAAa,IAEfr9F,EAAczkB,KAAK4gH,gBAAgBnD,EAAI,KACrB,OAAO,KAE3B,IAAI4C,EAAQz2G,EAAAoG,KAAKwhB,gBACfphB,EACA8L,EACAuI,EACAo9F,EACIj4G,EAAAuyB,cAAcmlC,KACdwgD,EACEl4G,EAAAuyB,cAAcikF,SACdx2G,EAAAuyB,cAAci6B,QACpBxmC,EAAAjX,MAAMC,KAAYmpG,EAAYtE,EAAG1tG,UAGnC,OADAswG,EAAMxwG,OAASmyG,EACR3B,EAOT,OALErgH,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGA,MAGTmtG,EAAAj7G,UAAAw8G,cAAA,SACEhB,EACA5tG,EACA2N,EACAmgG,GAUA,IAAKF,EAAGpgD,iBAKN,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,MAAM0tG,EAAGl/E,MAEP,KAGT,IAAI39B,EAAOgJ,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAC/DqyG,GAAuB,EAEvBj+F,EAA6C,KACjD,GAAIs5F,EAAGngD,KAAK1tC,EAAAC,MAAMkoC,UAAW,CAG3B,GAFAqqD,EAAiB3E,EAAGljD,WACpBp2C,EAAiBnkB,KAAKghH,oBAAoBvD,IACrB,OAAO,KAC5B5tG,GAASpG,EAAApH,YAAY4P,QAGvB,IAAKwrG,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAKjB,OAJAj7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,KAEb,KAGL6jF,EAAiB,IACnBA,EAAiB3E,EAAGljD,UAGtB,IAAIvpC,EAAahxB,KAAKshH,gBAAgB7D,GACtC,IAAKzsF,EAAY,OAAO,KACxB,IAAI5J,EAAWpnB,KAAKu9G,oBAEhB8E,EAAwC,IAA5BxyG,EAAQpG,EAAApH,YAAY2c,KAChCqjG,IACuB,GAArBrxF,EAAWlmB,QACb9K,KAAKuV,MACH7L,EAAA8L,eAAe8sG,+CACf1hH,EAAKmP,OAGLihB,EAAWlmB,QAAUkmB,EAAW,GAAGvM,aACrCzkB,KAAKuV,MACH7L,EAAA8L,eAAe+sG,oDACf3hH,EAAKmP,QAKPF,EAAQpG,EAAApH,YAAY0c,KAClBiS,EAAWlmB,QACb9K,KAAKuV,MACH7L,EAAA8L,eAAegtG,sCACf5hH,EAAKmP,OAKX,IAAIkhB,EAA8B,KAClC,GAAIwsF,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,UAChB5qC,EAAajxB,KAAKu/G,UAAU9B,GAAI,EAAM4E,IACrB,OAAO,KAGrBpxF,IACHA,EAAarnB,EAAAoG,KAAKM,kBAChBmtG,EAAG1tG,MAAM0tG,EAAGl/E,MAET8jF,GACHriH,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfvwC,EAAWlhB,QAKjB,IAAIgB,EAAYnH,EAAAoG,KAAKS,mBACnBugB,EACAC,EACA7J,GACA,EACAq2F,EAAG1tG,MAAMqyG,EAAgB3E,EAAGl/E,MAG1BlZ,EAAyB,KAC7B,GAAIo4F,EAAGngD,KAAK1tC,EAAAC,MAAMssC,YAShB,GARItsD,EAAQpG,EAAApH,YAAY8f,SACtBniB,KAAKuV,MACH7L,EAAA8L,eAAewhE,yDACfymC,EAAG1tG,WAIPsV,EAAOrlB,KAAKyiH,oBAAoBhF,GAAI,IACzB,OAAO,UACP5tG,EAAQpG,EAAApH,YAAY8f,SAC/BniB,KAAKuV,MACH7L,EAAA8L,eAAe0hE,gFACfumC,EAAG1tG,MAAM0tG,EAAGl/E,MAIhB,IAAIslB,EAAMj6C,EAAAoG,KAAKQ,0BACb5P,EACAujB,EACApT,EACAsU,EACA7H,EACA3N,EAAK,EAEL4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGxB,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAAygH,wBAAA,SAAwBjF,GACtB,IACI78G,EADA+8G,EAAWF,EAAGljD,SAEdj1C,EAAS,EAOb,GAAIm4F,EAAG9lD,OAAS/nC,EAAAC,MAAMjU,UAMpB,GAJEhb,EADE68G,EAAGpgD,iBACEzzD,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAExDnG,EAAAoG,KAAKuiB,gCAAgCkrF,EAAG1tG,MAAM0tG,EAAGl/E,OAErDk/E,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAKjB,OAJAj7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,KAEb,UAQTjZ,EAAS,EACTza,OAAO4yG,EAAG9lD,OAAS/nC,EAAAC,MAAMorC,WACzBr6D,EAAOgJ,EAAAoG,KAAKuiB,gCAAgCkrF,EAAG1tG,MAAM0tG,EAAGljD,WAK1D,IAAI6nD,EAAiB3E,EAAGl/E,IACpBvN,EAAahxB,KAAKshH,gBAAgB7D,GACtC,OAAKzsF,EAEEhxB,KAAK2iH,8BAA8BlF,EAAI78G,EAAMowB,EAAY1L,EAAWq4F,EAAUyE,GAF7D,MAKlBlF,EAAAj7G,UAAA0gH,8BAAR,SACElF,EACA78G,EACAowB,EACA1L,EACAq4F,EACAyE,QADA,IAAAzE,OAAiB,QACjB,IAAAyE,OAAuB,GAEnBzE,EAAW,IAAGA,EAAW/8G,EAAKmP,MAAMif,OACpCozF,EAAiB,IAAGA,EAAiBzE,GAEzC,IAAI1sF,EAA8B,KAClC,GAAa,GAAT3L,GAAuCm4F,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,QAEvD,KADA5qC,EAAajxB,KAAKu/G,UAAU9B,IACX,OAAO,UAEnB,GAAIA,EAAGngD,KAAK1tC,EAAAC,MAAMisC,YAEvB,KADA7qC,EAAa,MACI,OAAO,UAExBA,EAAarnB,EAAAoG,KAAKM,kBAAkBmtG,EAAG1tG,MAAM0tG,EAAGl/E,MAGlD,GAAIjZ,IACGm4F,EAAGngD,KAAK1tC,EAAAC,MAAMksC,oBAKjB,OAJA/7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,MAEb,KAIX,IAAIxtB,EAAYnH,EAAAoG,KAAKS,mBACnBugB,EACAC,EACA,MACA,EACAwsF,EAAG1tG,MAAMqyG,EAAgB3E,EAAGl/E,MAG1BlZ,EAAyB,KAC7B,GAAIC,EACF,GAAIm4F,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAChB92C,EAAOrlB,KAAKyiH,oBAAoBhF,GAAI,OAC/B,CACL,IAAImF,EAAiB5iH,KAAK4gH,gBAAgBnD,EAAI,GAC1CmF,IAAgBv9F,EAAOzb,EAAAoG,KAAK6oB,0BAA0B+pF,QAEvD,CACL,IAAKnF,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAKjB,OAJAn8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,KAEb,KAETlZ,EAAOrlB,KAAKyiH,oBAAoBhF,GAAI,GAEtC,IAAKp4F,EAAM,OAAO,KAElB,IAAIhU,EAAczH,EAAAoG,KAAKQ,0BACrB5P,EACA,KACAmQ,EACAsU,EACA,KACA5b,EAAApH,YAAYyN,KACZwV,EACAm4F,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,OAAO30B,EAAAoG,KAAKskB,yBAAyBjjB,IAGvC6rG,EAAAj7G,UAAA08G,sBAAA,SACElB,EACA5tG,EACA2N,EACAmgG,GAUA,IAAIV,EAAcQ,EAAG9lD,OAAS/nC,EAAAC,MAAMnG,UAEpC,IAAK+zF,EAAGpgD,iBAKN,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAGT,IAAIK,EAAaxG,EAAAoG,KAAKE,2BACpButG,EAAG5/C,iBACH4/C,EAAG1tG,SAGDoU,EAA6C,KACjD,GAAIs5F,EAAGngD,KAAK1tC,EAAAC,MAAMkoC,UAAW,CAE3B,KADA5zC,EAAiBnkB,KAAKghH,oBAAoBvD,IACrB,OAAO,KAC5B5tG,GAASpG,EAAApH,YAAY4P,QAGvB,IAAIuM,EAAoC,KACxC,GAAIi/F,EAAGngD,KAAK1tC,EAAAC,MAAM0mC,SAAU,CAC1B,IAAIh1D,EAAIvB,KAAKu/G,UAAU9B,GACvB,IAAKl8G,EAAG,OAAO,KACf,GAAIA,EAAE+R,MAAQ1J,EAAA2J,SAASyoB,UAKrB,OAJAh8B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfjf,EAAEwO,OAEG,KAETyO,EAA6Bjd,EAG/B,IAAI6c,EAA0C,KAC9C,GAAIq/F,EAAGngD,KAAK1tC,EAAAC,MAAM6mC,YAAa,CACzBumD,GACFj9G,KAAKuV,MACH7L,EAAA8L,eAAeqtG,oDACfpF,EAAG1tG,SAGP,EAAG,CACD,IAAImM,EAAOlc,KAAKu/G,UAAU9B,GAC1B,IAAKvhG,EAAM,OAAO,KACb+gG,IACE7+F,EACAA,EAAgBG,KAAoBrC,GADnBkC,EAAkB,CAAgBlC,UAGnDuhG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QAGzB,IAAKmgF,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAKjB,OAJAn8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAGT,IACIsB,EADA0K,EAAU,IAAI9U,MAyBlB,GAvBIg2G,GACFpyG,QAAQuT,GACR/M,EAAczH,EAAAoG,KAAKypB,2BACjBrpB,EACA+T,EACA3F,EACAzC,EACAyB,EACA3N,EACA4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAGxBltB,EAAczH,EAAAoG,KAAKmnB,uBACjB/mB,EACA+T,EACA3F,EACAJ,EACArC,EACAyB,EACA3N,EACA4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAGrBk/E,EAAGngD,KAAK1tC,EAAAC,MAAMusC,YACjB,EAAG,CACD,IAAI7gD,EAASvb,KAAK8iH,iBAAiBrF,EAAIpsG,GACvC,GAAIkK,EAAQQ,EAAQwC,KAA2BhD,QAG7C,GADAvb,KAAK69G,cAAcJ,GACfA,EAAGngD,KAAK1tC,EAAAC,MAAMktC,WAKhB,OAJA/8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,YAGH0tG,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAG1B,OADA/qD,EAAYtB,MAAMkf,IAAMwuF,EAAGl/E,IACpBltB,GAGT6rG,EAAAj7G,UAAA8gH,qBAAA,SAAqBtF,GAInB,IACI78G,EADA+8G,EAAWF,EAAGljD,SASlB,GALE35D,EADE68G,EAAGpgD,iBACEzzD,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAExDnG,EAAAoG,KAAKuiB,gCAAgCkrF,EAAG1tG,MAAM0tG,EAAGl/E,OAGrDk/E,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAKjB,OAJAn8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,MAAM0tG,EAAGl/E,KAAM,KAEb,KAGT,IAAIxiB,EAAU,IAAI9U,MACdoK,EAAczH,EAAAoG,KAAKmnB,uBACrBv2B,EACA,GACA,KACA,KACAmb,EACA,KACAtS,EAAApH,YAAYyN,KACZ2tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,IAAKk/E,EAAGngD,KAAK1tC,EAAAC,MAAMusC,YACjB,EAAG,CACD,IAAI7gD,EAASvb,KAAK8iH,iBAAiBrF,EAAIpsG,GACvC,GAAIkK,EAAQQ,EAAQwC,KAA2BhD,QAG7C,GADAvb,KAAK69G,cAAcJ,GACfA,EAAGngD,KAAK1tC,EAAAC,MAAMktC,WAKhB,OAJA/8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,YAGH0tG,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAG1B,OADA/qD,EAAYtB,MAAMkf,IAAMwuF,EAAGl/E,IACpB30B,EAAAoG,KAAKwjB,sBAAsBniB,IAGpC6rG,EAAAj7G,UAAA6gH,iBAAA,SACErF,EACAzsG,GAUA,IAAI2sG,EAAWF,EAAGl/E,IACd0+E,EAAcjsG,EAAOsC,MAAQ1J,EAAA2J,SAASc,qBAEtCmJ,EAAqC,KACzC,GAAIigG,EAAGngD,KAAK1tC,EAAAC,MAAMwsC,IAAK,CACrB,EAAG,CACD,IAAI3+C,EAAY1d,KAAK49G,eAAeH,GACpC,IAAK//F,EAAW,MACXF,EACAA,EAAWe,KAAoBb,GADnBF,EAAa,CAAgBE,SAEvC+/F,EAAGngD,KAAK1tC,EAAAC,MAAMwsC,KACnB7+C,GAAcy/F,GAChBj9G,KAAKuV,MACH7L,EAAA8L,eAAe4pG,8BACfxvF,EAAAjX,MAAMC,KAAK4E,EAAW,GAAGzN,MAAOyN,EAAWA,EAAW1S,OAAS,GAAGiF,QAMxE,IAAIF,EAAQmB,EAAOnB,MAAQpG,EAAApH,YAAY8f,QAGnC86F,IAAaptG,GAASpG,EAAApH,YAAY2gH,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZzF,EAAGngD,KAAK1tC,EAAAC,MAAMunC,SACZ6lD,GACFj9G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,QAAS,UAGhBF,GAASpG,EAAApH,YAAY+0D,OACrB6rD,EAAcxF,EAAGljD,SACjB2oD,EAAYzF,EAAGl/E,KACNk/E,EAAGngD,KAAK1tC,EAAAC,MAAMqnC,UACnB+lD,GACFj9G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,QAAS,WAGhBF,GAASpG,EAAApH,YAAY60D,QACrB+rD,EAAcxF,EAAGljD,SACjB2oD,EAAYzF,EAAGl/E,KACNk/E,EAAGngD,KAAK1tC,EAAAC,MAAMsnC,aACnB8lD,GACFj9G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,QAAS,aAGhBF,GAASpG,EAAApH,YAAY80D,UACrB8rD,EAAcxF,EAAGljD,SACjB2oD,EAAYzF,EAAGl/E,KAGjB,IAAI4kF,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACd7F,EAAGngD,KAAK1tC,EAAAC,MAAMzQ,SACZ69F,GACFj9G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,QAAS,UAGhBF,GAASpG,EAAApH,YAAY+c,OACrB+jG,EAAc1F,EAAGljD,SACjB6oD,EAAY3F,EAAGl/E,MAEf1uB,GAASpG,EAAApH,YAAYggB,SACjBo7F,EAAGngD,KAAK1tC,EAAAC,MAAMnQ,YACZu9F,GACFj9G,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,QAAS,YAGhBF,GAASpG,EAAApH,YAAYqd,SACrB2jG,EAAgB5F,EAAGljD,SACnB+oD,EAAc7F,EAAGl/E,KAEfvtB,EAAOnB,MAAQpG,EAAApH,YAAY4P,UAASpC,GAASpG,EAAApH,YAAYkhH,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACvB,GAAIhG,EAAGzgD,QAAUptC,EAAAC,MAAMvQ,SAAU,CAC/B,IAAIokG,EAAQjG,EAAGlgD,OACfkgD,EAAG3oG,OACC2oG,EAAGzgD,QAAUptC,EAAAC,MAAMgsC,OACrB4hD,EAAG9/C,QAAQ+lD,GACX7zG,GAASpG,EAAApH,YAAYid,SACrBkkG,EAAgB/F,EAAGljD,SACnBkpD,EAAchG,EAAGl/E,KAEjBk/E,EAAG7/C,MAAM8lD,GAKb,IA+DI9iH,EA/DA48D,EAAQigD,EAAGlgD,OACXgkD,GAAgB,EAChBpgG,GAAW,EAGXkhG,GAAW,EACXzhE,EAAgB,EAChB+iE,EAAc,EAyDlB,GAxDK1G,IACCQ,EAAGngD,KAAK1tC,EAAAC,MAAM9Q,KACZ0+F,EAAGzgD,MAAK,EAAMptC,EAAAgmC,mBAAmBgH,SAAWhtC,EAAAC,MAAMM,YAAestF,EAAG/iD,mBAYtE+iD,EAAG7/C,MAAMJ,IAXT3tD,GAASpG,EAAApH,YAAY0c,IACrBoC,GAAW,EACXy/B,EAAW68D,EAAGljD,SACdopD,EAASlG,EAAGl/E,IACR1uB,EAAQpG,EAAApH,YAAYid,UACtBtf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMyzG,EAAeC,GAAc,aAMnChG,EAAGngD,KAAK1tC,EAAAC,MAAM7Q,KACnBy+F,EAAGzgD,MAAK,EAAMptC,EAAAgmC,mBAAmBgH,SAAWhtC,EAAAC,MAAMM,YAAestF,EAAG/iD,mBAYtE+iD,EAAG7/C,MAAMJ,IAXT3tD,GAASpG,EAAApH,YAAY2c,IACrBqjG,GAAW,EACXzhE,EAAW68D,EAAGljD,SACdopD,EAASlG,EAAGl/E,IACR1uB,EAAQpG,EAAApH,YAAYid,UACtBtf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMyzG,EAAeC,GAAc,aAMnChG,EAAGngD,KAAK1tC,EAAAC,MAAM/P,eAEvByhG,GAAgB,GADhB1xG,GAASpG,EAAApH,YAAYyd,aAETrW,EAAApH,YAAY+c,QACtBpf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMozG,EAAaC,GAAY,UAGlCvzG,EAAQpG,EAAApH,YAAYqd,UACtB1f,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMszG,EAAeC,GAAc,YAGtCzzG,EAAQpG,EAAApH,YAAYid,UACtBtf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMyzG,EAAeC,GAAc,cAO1ClC,EACF3gH,EAAOgJ,EAAAoG,KAAK6jB,4BAA4B4pF,EAAG1tG,aACtC,CACL,IAAMoR,IAAYkhG,GAAa5E,EAAGngD,KAAK1tC,EAAAC,MAAMosC,aAAc,CAErDpsD,EAAQpG,EAAApH,YAAY+0D,OACtBp3D,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMkzG,EAAaC,GAAY,UAE3BrzG,EAAQpG,EAAApH,YAAY80D,UAC7Bn3D,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMkzG,EAAaC,GAAY,aAE3BrzG,EAAQpG,EAAApH,YAAY60D,SAC7Bl3D,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMkzG,EAAaC,GAAY,aAGlCrzG,EAAQpG,EAAApH,YAAY+c,QACtBpf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMozG,EAAaC,GAAY,UAGlCvzG,EAAQpG,EAAApH,YAAYqd,UACtB1f,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMszG,EAAeC,GAAc,YAGtCzzG,EAAQpG,EAAApH,YAAYid,UACtBtf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMyzG,EAAeC,GAAc,YAG1C,IAAIG,EAAW5jH,KAAK6jH,+BAA+BpG,EAAIjgG,GACvD,OAAKomG,GACLnG,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACP8nD,GAFe,KAIxB,IAAKnG,EAAGpgD,iBAKN,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAETnP,EAAOgJ,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAEjE,IAAIoU,EAA6C,KACjD,GAAIs5F,EAAGngD,KAAK1tC,EAAAC,MAAMkoC,UAAW,CAC3B,IAAI+rD,EAAsBrG,EAAGljD,SAE7B,KADAp2C,EAAiBnkB,KAAKghH,oBAAoBvD,IACrB,OAAO,KACxB8D,EACFvhH,KAAKuV,MACH7L,EAAA8L,eAAeuuG,2DACftG,EAAG1tG,MAAM+zG,EAAqBrG,EAAGl/E,MAE1Bpd,GAAYkhG,EACrBriH,KAAKuV,MACH7L,EAAA8L,eAAewuG,wCACfvG,EAAG1tG,MAAM+zG,EAAqBrG,EAAGl/E,MAGnC1uB,GAASpG,EAAApH,YAAY4P,QAKzB,GAAIwrG,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAAY,CAC5B,IAAImnD,EAAiB3E,EAAGljD,SACpBvpC,EAAahxB,KAAKshH,gBAAgB7D,EAAI8D,GAC1C,IAAKvwF,EAAY,OAAO,KACxB,IAAI5J,EAAWpnB,KAAKu9G,oBACpB,GAAIgE,EACF,IAAK,IAAIlhH,EAAI,EAAG8O,EAAI6hB,EAAWlmB,OAAQzK,EAAI8O,IAAK9O,EAAG,CACjD,IAAI+1G,EAAYplF,EAAW3wB,GAC3B,GAAI+1G,EAAUt3F,MACZrV,EAAApH,YAAY+0D,OACZ3tD,EAAApH,YAAY80D,UACZ1tD,EAAApH,YAAY60D,QACZztD,EAAApH,YAAYid,UACX,CACD,IAAI+c,EAA2BzyB,EAAAoG,KAAK2pB,uBAClCy8E,EAAUx1G,KACVw1G,EAAUl6F,KACV,KACA,KACAk6F,EAAUvmG,MAAQpG,EAAApH,YAAYggB,SAC9B+zF,EAAUrmG,OAEZssB,EAAyB1T,eAAiBtoB,EAC1C+1G,EAAU/5E,yBAA2BA,EACrCrrB,EAAO+K,QAAQwC,KAAK8d,SAGflb,EACL6P,EAAWlmB,QACb9K,KAAKuV,MACH7L,EAAA8L,eAAegtG,sCACf5hH,EAAKmP,OAGAsyG,IACgB,GAArBrxF,EAAWlmB,QACb9K,KAAKuV,MACH7L,EAAA8L,eAAe8sG,+CACf1hH,EAAKmP,OAGLihB,EAAWlmB,QAAUkmB,EAAW,GAAGvM,aACrCzkB,KAAKuV,MACH7L,EAAA8L,eAAe+sG,oDACf3hH,EAAKmP,QAKX,IAAIkhB,EAA8B,KAClC,GAAIwsF,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,QAahB,GAZIj7D,EAAK0S,MAAQ1J,EAAA2J,SAASuM,YACxB9f,KAAKuV,MACH7L,EAAA8L,eAAeyuG,2DACfxG,EAAG1tG,SAEIsyG,GACTriH,KAAKuV,MACH7L,EAAA8L,eAAe0uG,oDACfzG,EAAG1tG,WAGPkhB,EAAajxB,KAAKu/G,UAAU9B,EAAI78G,EAAK0S,MAAQ1J,EAAA2J,SAASuM,aAAeuiG,IACpD,OAAO,UAExBpxF,EAAarnB,EAAAoG,KAAKM,kBAAkBmtG,EAAG1tG,MAAM0tG,EAAGl/E,MAC3C8jF,GAAYzhH,EAAK0S,MAAQ1J,EAAA2J,SAASuM,aACrC9f,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfvwC,EAAWlhB,OAKjB,IAAIgB,EAAYnH,EAAAoG,KAAKS,mBACnBugB,EACAC,EACA7J,GACA,EACAq2F,EAAG1tG,MAAMqyG,EAAgB3E,EAAGl/E,MAG1BlZ,EAAyB,KAC7B,GAAIo4F,EAAGngD,KAAK1tC,EAAAC,MAAMssC,YAahB,GAZItsD,EAAQpG,EAAApH,YAAY8f,QACtBniB,KAAKuV,MACH7L,EAAA8L,eAAewhE,yDACfymC,EAAG1tG,SAEIF,EAAQpG,EAAApH,YAAYqd,UAC7B1f,KAAKuV,MACH7L,EAAA8L,eAAe2uG,qEACf1G,EAAG1tG,QAASnP,EAAKiV,QAGrBwP,EAAOrlB,KAAKyiH,oBAAoBhF,GAAI,IACzB,OAAO,UACP5tG,EAAQpG,EAAApH,YAAY8f,SAAa86F,GAC5Cj9G,KAAKuV,MACH7L,EAAA8L,eAAe0hE,gFACfumC,EAAG1tG,SAIP,IAAIq0G,EAAYx6G,EAAAoG,KAAKqqB,wBACnBz5B,EACAujB,EACApT,EACAsU,EACA7H,EACA3N,EACA4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGxB,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPsoD,EAEF,GAAI7C,EACTvhH,KAAKuV,MACH7L,EAAA8L,eAAe6uG,sCACfzjH,EAAKmP,WAGF,KAAIoR,IAAYkhG,EAOhB,CACDxyG,EAAQpG,EAAApH,YAAYqd,UACtB1f,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAMszG,EAAeC,GAAc,YAItCzzG,EAAQpG,EAAApH,YAAY0c,KACtB/e,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAnRW,EACF,GAkRgB,OAI5BF,EAAQpG,EAAApH,YAAY2c,KACtBhf,KAAKuV,MACH7L,EAAA8L,eAAe2pG,gCACf1B,EAAG1tG,MAAM6wC,EAAU+iE,GAAS,OAIhC,IAAIznG,EAAwB,KAU5B,GATIuhG,EAAGngD,KAAK1tC,EAAAC,MAAMmsC,WAChBh8D,KAAKuV,MACH7L,EAAA8L,eAAe8uG,sCACf7G,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGtBk/E,EAAGngD,KAAK1tC,EAAAC,MAAMspC,eAChBtpD,GAASpG,EAAApH,YAAYq+G,qBAEnBjD,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,QAEhB,KADA3/C,EAAOlc,KAAKu/G,UAAU9B,IACX,OAAO,UAElBz9G,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfi8C,EAAG1tG,SAGP,IAAI0U,EAAiC,KACrC,GAAIg5F,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,WAChB90C,EAAczkB,KAAK4gH,gBAAgBnD,IACjB,OAAO,KAE3B,IAAI1tG,EAAQ0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,KAC7B1uB,EAAQpG,EAAApH,YAAYq+G,sBAA0B7wG,EAAQpG,EAAApH,YAAY+c,QAAW69F,GAAex4F,IAC/FzkB,KAAKuV,MACH7L,EAAA8L,eAAeqrG,iEACf9wG,GAGJ,IAAIw0G,EAAW36G,EAAAoG,KAAK2pB,uBAClB/4B,EACAsb,EACAuI,EACAjH,EACA3N,EACAE,GAGF,OADA0tG,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPyoD,EApEPvkH,KAAKuV,MACH7L,EAAA8L,eAAe0hE,gFACft2E,EAAKmP,OAoET,OAAO,MAGTmtG,EAAAj7G,UAAA4hH,+BAAA,SAA+BpG,EAAejgG,GAIxCA,GAAcA,EAAW1S,QAC3B9K,KAAKuV,MACH7L,EAAA8L,eAAe4pG,8BACfxvF,EAAAjX,MAAMC,KAAK4E,EAAW,GAAGzN,MAAOyN,EAAWA,EAAW1S,OAAS,GAAGiF,QAItE,IAAIif,EAAQyuF,EAAGljD,SACf,GAAIkjD,EAAGpgD,iBAEL,GAAU,OADDogD,EAAG5/C,iBAEV,GAAI4/C,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAAQ,CACxB,IAAI3hC,EAAUl6B,KAAKu/G,UAAU9B,GAC7B,IAAKvjF,EAAS,OAAO,KACrB,GAAIA,EAAQ5mB,MAAQ1J,EAAA2J,SAASyoB,UAK3B,OAJAh8B,KAAKuV,MACH7L,EAAA8L,eAAegsD,cACfi8C,EAAG1tG,SAEE,KAET,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAMqsC,cAAe,CAC/B,GAAIuhD,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAAQ,CACxB,IAAI1hC,EAAYn6B,KAAKu/G,UAAU9B,GAC/B,OAAKtjF,EACEvwB,EAAAoG,KAAKiqB,gCAA+CC,EAASC,EAAWsjF,EAAG1tG,MAAMif,EAAOyuF,EAAGl/E,MAD3E,KAGvBv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,YAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGP,OAAO,MAGTmtG,EAAAj7G,UAAA28G,eAAA,SACEnB,EACA5tG,EACA2N,EACAmgG,GAKA,GAAIF,EAAGpgD,iBAAkB,CACvB,IAAIjtD,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACzE,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAAY,CAS5B,IARA,IAAIpgD,EAAU,IAAI9U,MACdoK,EAAczH,EAAAoG,KAAKa,2BACrBT,EACA2L,EACAyB,EACA3N,EACA4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAEhBk/E,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,IAAI7gD,EAASvb,KAAK09G,uBAAuBD,EAAIpsG,GAC7C,GAAIkK,EAAQQ,EAAQwC,KAAKhD,QAGvB,GADAvb,KAAK69G,cAAcJ,GACfA,EAAGngD,KAAK1tC,EAAAC,MAAMktC,WAKhB,OAJA/8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAMb,OAFAsB,EAAYtB,MAAMkf,IAAMwuF,EAAGl/E,IAC3Bk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPzqD,EAEPrR,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGP,OAAO,MAGTmtG,EAAAj7G,UAAAi9G,YAAA,SACEzB,EACAE,EACA3lF,GAKA,IAAIpW,EAAuC,KAC3C,GAAI67F,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAAY,CAE5B,IADA,IAAIpgD,EAAU,IAAI9U,OACVw2G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,IAAI7gD,EAASvb,KAAKwkH,kBAAkB/G,GACpC,IAAKliG,EAAQ,OAAO,KAEpB,GADAQ,EAAQwC,KAAKhD,IACRkiG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMusC,YAChB,MAMA,OAJAp8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAIb,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAM4mC,MAAO,CACvB,IAAIgnD,EAAGngD,KAAK1tC,EAAAC,MAAMkrC,eAOhB,OAJA/6D,KAAKuV,MACH7L,EAAA8L,eAAeqL,wBACf48F,EAAG1tG,SAEE,KANP6R,EAAOhY,EAAAoG,KAAKimB,8BAA8BwnF,EAAGx5D,aAAcw5D,EAAG1tG,SAgBlE,OALqB,QADjByR,GADAqiC,EAAMj6C,EAAAoG,KAAK+nB,sBAAsBhc,EAAS6F,EAAMoW,EAAWylF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAC9D/c,eACOxhB,KAAKo9G,QAAQ9rG,IAAIkQ,KAC7CxhB,KAAKm9G,QAAQ5+F,KAAKiD,GAClBxhB,KAAKo9G,QAAQtrG,IAAI0P,IAEnBi8F,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EACF,GAAI45D,EAAGngD,KAAK1tC,EAAAC,MAAM2oC,UACvB,GAAIilD,EAAGngD,KAAK1tC,EAAAC,MAAM4mC,MAAO,CACvB,GAAIgnD,EAAGngD,KAAK1tC,EAAAC,MAAMkrC,eAAgB,CAChCn5C,EAAOhY,EAAAoG,KAAKimB,8BAA8BwnF,EAAGx5D,aAAcw5D,EAAG1tG,SAC9D,IAAI8zC,EAAMj6C,EAAAoG,KAAK+nB,sBAAsB,KAAMnW,EAAMoW,EAAWylF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAC9E/c,EAAe3W,OAAOg5C,EAAIriC,cAC1BpS,EAASquG,EAAGruG,OAQhB,OAPKA,EAAOivB,cAAajvB,EAAOivB,YAAc,IAAIl3B,KAClDiI,EAAOivB,YAAYvsB,IAAI0P,GAClBxhB,KAAKo9G,QAAQ9rG,IAAIkQ,KACpBxhB,KAAKm9G,QAAQ5+F,KAAKiD,GAClBxhB,KAAKo9G,QAAQtrG,IAAI0P,IAEnBi8F,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAeqL,wBACf48F,EAAG1tG,cAIP/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,aAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGhB,OAAO,MAGTmtG,EAAAj7G,UAAAuiH,kBAAA,SACE/G,GAKA,GAAIA,EAAGpgD,iBAAkB,CACvB,IAAIjtD,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACrE00G,EAA4C,KAChD,GAAIhH,EAAGngD,KAAK1tC,EAAAC,MAAMimC,IAAK,CACrB,IAAI2nD,EAAGpgD,eAAeztC,EAAAgmC,mBAAmB+G,QAOvC,OAJA38D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KANP00G,EAAe76G,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAS3E,OAAOnG,EAAAoG,KAAK2oB,mBACVvoB,EACAq0G,EACAA,EACI70F,EAAAjX,MAAMC,KAAKxI,EAAWL,MAAO00G,EAAa10G,OAC1CK,EAAWL,OAQnB,OALE/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGA,MAGTmtG,EAAAj7G,UAAAg9G,wBAAA,SACExB,EACAE,EACAK,EACAC,GAKA,IAAIr9G,EAAO68G,EAAG5/C,iBACV9tD,EAAQ0tG,EAAG1tG,QACX8zC,EAAMj6C,EAAAoG,KAAK+nB,sBAAsB,CACnCnuB,EAAAoG,KAAK2oB,mBACH/uB,EAAAoG,KAAKE,2BAA2BtP,EAAMmP,GACtCnG,EAAAoG,KAAKE,2BAA2B,UAAWutG,EAAG1tG,MAAMiuG,EAAcC,IAClEluG,IAED,MAAM,EAAO0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEtC,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA68G,YAAA,SACErB,GAOA,IAAIE,EAAWF,EAAGljD,SACdx+C,EAAsC,KACtCkG,EAA6C,KAC7CyiG,GAAW,EACf,GAAIjH,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAEhB,IADApgD,EAAU,IAAI9U,OACNw2G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,IAAI7gD,EAASvb,KAAK2kH,uBAAuBlH,GACzC,IAAKliG,EAAQ,OAAO,KAEpB,GADAQ,EAAQwC,KAAKhD,IACRkiG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMusC,YAChB,MAMA,OAJAp8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,WAIR,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAM2oC,UAAW,CAClC,IAAIilD,EAAGngD,KAAK1tC,EAAAC,MAAMimC,IAehB,OAJA91D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,MAEP,KAdP,IAAI0tG,EAAGpgD,iBAOL,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KANPkS,EAAgBrY,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,cAevE,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAMM,WAAYP,EAAAgmC,mBAAmBgH,QAAS,CAC/D,IAAIh8D,EAAO68G,EAAG5/C,iBACV9tD,EAAQ0tG,EAAG1tG,QAQf,GAPAgM,EAAU,CACRnS,EAAAoG,KAAKupB,wBACH3vB,EAAAoG,KAAKE,2BAA2B,UAAWH,GAC3CnG,EAAAoG,KAAKE,2BAA2BtP,EAAMmP,GACtCA,IAGA0tG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAMhB,OAJAt9B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfi9F,EAAG1tG,SAEE,UAGT20G,GAAW,EAGb,GAAIA,GAAYjH,EAAGngD,KAAK1tC,EAAAC,MAAM4mC,MAAO,CACnC,GAAIgnD,EAAGngD,KAAK1tC,EAAAC,MAAMkrC,eAAgB,CAChC,IAAIn5C,EAAOhY,EAAAoG,KAAKimB,8BAA8BwnF,EAAGx5D,aAAcw5D,EAAG1tG,SAC9D8zC,OAAG,EACH5hC,GACFpX,QAAQkR,GACR8nC,EAAMj6C,EAAAoG,KAAKspB,kCAAkCrX,EAAeL,EAAM67F,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAExFslB,EAAMj6C,EAAAoG,KAAKmpB,sBAAsBpd,EAAS6F,EAAM67F,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExE,IAAI/c,EAAeqiC,EAAIriC,aAMvB,OALKxhB,KAAKo9G,QAAQ9rG,IAAIkQ,KACpBxhB,KAAKm9G,QAAQ5+F,KAAKiD,GAClBxhB,KAAKo9G,QAAQtrG,IAAI0P,IAEnBi8F,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAeqL,wBACf48F,EAAG1tG,cAIP/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,QAGhB,OAAO,MAGTmtG,EAAAj7G,UAAA0iH,uBAAA,SACElH,GAKA,GAAIA,EAAGpgD,eAAeztC,EAAAgmC,mBAAmB+G,QAAS,CAChD,IAAIvsD,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACrE00G,EAA4C,KAChD,GAAIhH,EAAGngD,KAAK1tC,EAAAC,MAAMimC,IAAK,CACrB,IAAI2nD,EAAGpgD,iBAOL,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KANP00G,EAAe76G,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAS3E,OAAOnG,EAAAoG,KAAKupB,wBACVnpB,EACAq0G,EACAA,EACI70F,EAAAjX,MAAMC,KAAKxI,EAAWL,MAAO00G,EAAa10G,OAC1CK,EAAWL,OAQnB,OALE/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGA,MAGTmtG,EAAAj7G,UAAA48G,kBAAA,SACEpB,EACAE,GAKA,GAAIF,EAAGpgD,iBAAkB,CACvB,IAAIonD,EAAe76G,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAC3E,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,QAAS,CACzB,GAAIkkD,EAAGpgD,iBAAkB,CACvB,IAAIjtD,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SACrE8zC,EAAMj6C,EAAAoG,KAAKwoB,4BAA4BpoB,EAAYq0G,EAAchH,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAE3F,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,cAIP/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGP,OAAO,MAGTmtG,EAAAj7G,UAAAy8G,eAAA,SACEjB,EACAmH,QAAA,IAAAA,OAAA,GAKA,IAAIpnD,EAAQigD,EAAGlgD,OAEXlqD,EAA8B,KAClC,OAFYoqG,EAAG3oG,QAGb,KAAK8a,EAAAC,MAAMiP,MACTzrB,EAAYrT,KAAK6kH,WAAWpH,GAC5B,MAEF,KAAK7tF,EAAAC,MAAMnT,MACTrJ,EAAYrT,KAAKw+G,cAAcf,EAAIh0G,EAAApH,YAAYqa,MAAO,KAAM+gG,EAAGljD,UAC/D,MAEF,KAAK3qC,EAAAC,MAAMkP,SACT1rB,EAAYrT,KAAK8kH,cAAcrH,GAC/B,MAEF,KAAK7tF,EAAAC,MAAMmP,GACT3rB,EAAYrT,KAAK+kH,iBAAiBtH,GAClC,MAEF,KAAK7tF,EAAAC,MAAMwP,IACThsB,EAAYrT,KAAKglH,kBAAkBvH,GACnC,MAEF,KAAK7tF,EAAAC,MAAM2P,GACTnsB,EAAYrT,KAAKilH,iBAAiBxH,GAClC,MAEF,KAAK7tF,EAAAC,MAAMinC,IACTzjD,EAAYrT,KAAKw+G,cAAcf,EAAIh0G,EAAApH,YAAYy0D,IAAK,KAAM2mD,EAAGljD,UAC7D,MAEF,KAAK3qC,EAAAC,MAAM0nC,IACTlkD,EAAYrT,KAAKw+G,cAAcf,EAAIh0G,EAAApH,YAAYyN,KAAM,KAAM2tG,EAAGljD,UAC9D,MAEF,KAAK3qC,EAAAC,MAAMssC,UACT9oD,EAAYrT,KAAKyiH,oBAAoBhF,EAAImH,GACzC,MAEF,KAAKh1F,EAAAC,MAAM6P,OACLklF,GACF5kH,KAAKuV,MACH7L,EAAA8L,eAAe0vG,2DACfzH,EAAG1tG,SAGPsD,EAAYrT,KAAK+gH,YAAYtD,GAC7B,MAEF,KAAK7tF,EAAAC,MAAMisC,UACT,OAAOlyD,EAAAoG,KAAKynB,qBAAqBgmF,EAAG1tG,MAAM0tG,EAAGljD,WAE/C,KAAK3qC,EAAAC,MAAM+P,OACTvsB,EAAYrT,KAAKmlH,qBAAqB1H,GACtC,MAEF,KAAK7tF,EAAAC,MAAMgQ,MACTxsB,EAAYrT,KAAKolH,oBAAoB3H,GACrC,MAEF,KAAK7tF,EAAAC,MAAMiQ,IACTzsB,EAAYrT,KAAKqlH,kBAAkB5H,GACnC,MAEF,KAAK7tF,EAAAC,MAAMmQ,KACT3sB,EAAYrT,KAAKslH,mBAAmB7H,GACpC,MAEF,KAAK7tF,EAAAC,MAAMoQ,MACT5sB,EAAYrT,KAAKulH,oBAAoB9H,GACrC,MAEF,KAAK7tF,EAAAC,MAAMwnC,KACT,GAAIomD,EAAGzgD,MAAK,EAAOptC,EAAAgmC,mBAAmBgH,SAAWhtC,EAAAC,MAAMM,WAAY,CACjE9c,EAAYrT,KAAK++G,qBAAqBtB,EAAIh0G,EAAApH,YAAYyN,KAAM,KAAM2tG,EAAGljD,UACrE,MAIJ,QACEkjD,EAAG7/C,MAAMJ,GACTnqD,EAAYrT,KAAKwlH,yBAAyB/H,GAU9C,OANKpqG,EAIHoqG,EAAG9/C,QAAQH,IAHXigD,EAAG7/C,MAAMJ,GACTx9D,KAAK69G,cAAcJ,IAIdpqG,GAGT6pG,EAAAj7G,UAAAwgH,oBAAA,SACEhF,EACAmH,GAOA,IAFA,IAAIjH,EAAWF,EAAGljD,SACdpnD,EAAa,IAAIlM,OACbw2G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,IAAIoB,EAAQigD,EAAGlgD,OACXlqD,EAAYrT,KAAK0+G,eAAejB,EAAImH,GACxC,GAAKvxG,EAKHoqG,EAAG9/C,QAAQH,GACXrqD,EAAWoL,KAAKlL,OANF,CACd,GAAIoqG,EAAG9lD,OAAS/nC,EAAAC,MAAMktC,UAAW,OAAO,KACxC0gD,EAAG7/C,MAAMJ,GACTx9D,KAAK69G,cAAcJ,IAMvB,IAAI55D,EAAMj6C,EAAAoG,KAAK8mB,qBAAqB3jB,EAAYsqG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEtE,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA4iH,WAAA,SACEpH,GAKA,IAAIrtG,EAA0C,KAC1CqtG,EAAGzgD,MAAK,IAASptC,EAAAC,MAAMM,YAAestF,EAAG/iD,qBAC3C+iD,EAAG3oG,KAAK8a,EAAAgmC,mBAAmBgH,QAC3BxsD,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,UAEvE,IAAI8zC,EAAMj6C,EAAAoG,KAAKgnB,qBAAqB5mB,EAAYqtG,EAAG1tG,SAEnD,OADA0tG,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA6iH,cAAA,SACErH,GAKA,IAAIrtG,EAA0C,KAC1CqtG,EAAGzgD,MAAK,IAASptC,EAAAC,MAAMM,YAAestF,EAAG/iD,qBAC3C+iD,EAAG3oG,KAAK8a,EAAAgmC,mBAAmBgH,QAC3BxsD,EAAaxG,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,UAEvE,IAAI8zC,EAAMj6C,EAAAoG,KAAKqnB,wBAAwBjnB,EAAYqtG,EAAG1tG,SAEtD,OADA0tG,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA8iH,iBAAA,SACEtH,GAKA,IAAIE,EAAWF,EAAGljD,SACdlnD,EAAYrT,KAAK0+G,eAAejB,GACpC,IAAKpqG,EAAW,OAAO,KAEvB,GAAIoqG,EAAGngD,KAAK1tC,EAAAC,MAAMoQ,OAEhB,GAAIw9E,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAAY,CAC5B,IAAIplC,EAAY71B,KAAK4gH,gBAAgBnD,GACrC,IAAK5nF,EAAW,OAAO,KAEvB,GAAI4nF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAAa,CAC7B,IAAIrX,EAAMj6C,EAAAoG,KAAKunB,kBAA6BlkB,EAAuBwiB,EAAW4nF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEpG,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,SAGhB,OAAO,MAGTmtG,EAAAj7G,UAAAujH,yBAAA,SACE/H,GAKA,IAAIrrF,EAAOpyB,KAAK4gH,gBAAgBnD,GAChC,IAAKrrF,EAAM,OAAO,KAElB,IAAIyxB,EAAMj6C,EAAAoG,KAAK6oB,0BAA0BzG,GAEzC,OADAqrF,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAA+iH,kBAAA,SACEvH,GAKA,IAAIE,EAAWF,EAAGljD,SAElB,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAAY,CAC5B,IAAIx2C,EAAgC,KAEpC,GAAIg5F,EAAGngD,KAAK1tC,EAAAC,MAAMnT,OAChB+H,EAAczkB,KAAKw+G,cAAcf,EAAIh0G,EAAApH,YAAYqa,MAAO,KAAM+gG,EAAGljD,eAC5D,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMinC,KACvBryC,EAAczkB,KAAKw+G,cAAcf,EAAIh0G,EAAApH,YAAYy0D,IAAK,KAAM2mD,EAAGljD,eAC1D,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAM0nC,KACvB9yC,EAAczkB,KAAKw+G,cAAcf,EAAIh0G,EAAApH,YAAYyN,KAAM,KAAM2tG,EAAGljD,eAE3D,IAAKkjD,EAAGngD,KAAK1tC,EAAAC,MAAMisC,cACxBr3C,EAAczkB,KAAKwlH,yBAAyB/H,IAC1B,OAAO,KAG3B,GAAIA,EAAG9lD,OAAS/nC,EAAAC,MAAMisC,UAAW,CAC/B,IAAIjmC,EAAwC,KAC5C,IAAK4nF,EAAGngD,KAAK1tC,EAAAC,MAAMisC,cACjBjmC,EAAY71B,KAAKwlH,yBAAyB/H,IAC1B,OAAO,KAGzB,GAAIA,EAAG9lD,OAAS/nC,EAAAC,MAAMisC,UAAW,CAC/B,IAAIhiC,EAAiC,KACrC,IAAK2jF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAAa,CAE9B,KADAphC,EAAc95B,KAAK4gH,gBAAgBnD,IACjB,OAAO,KAEzB,IAAKA,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAKjB,OAJAl7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAIX,IAAIsD,EAAYrT,KAAK0+G,eAAejB,GACpC,OAAKpqG,EAEEzJ,EAAAoG,KAAK6pB,mBACVpV,EACAoR,EACIA,EAAUhD,WACV,KACJiH,EACAzmB,EACAoqG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MATD,KAavBv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGhB,OAAO,MAGTmtG,EAAAj7G,UAAAgjH,iBAAA,SACExH,GAKA,IAAIE,EAAWF,EAAGljD,SAClB,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAAY,CAC5B,IAAIplC,EAAY71B,KAAK4gH,gBAAgBnD,GACrC,IAAK5nF,EAAW,OAAO,KACvB,GAAI4nF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAAa,CAC7B,IAAI7nD,EAAYrT,KAAK0+G,eAAejB,GACpC,IAAKpqG,EAAW,OAAO,KACvB,IAAIoyG,EAAkC,KACtC,OAAIhI,EAAGngD,KAAK1tC,EAAAC,MAAMymC,SAChBmvD,EAAgBzlH,KAAK0+G,eAAejB,IACT,KAEtB7zG,EAAAoG,KAAK+oB,kBACVlD,EACAxiB,EACAoyG,EACAhI,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGxBv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGhB,OAAO,MAGTmtG,EAAAj7G,UAAAkjH,qBAAA,SACE1H,GAKA,IAAIE,EAAWF,EAAGljD,SAClB,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAAY,CAC5B,IAAIplC,EAAY71B,KAAK4gH,gBAAgBnD,GACrC,IAAK5nF,EAAW,OAAO,KACvB,GAAI4nF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAAa,CAC7B,GAAIuiD,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAAY,CAE5B,IADA,IAAIxhC,EAAQ,IAAI1zB,OACRw2G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,IAAIspD,EAAQ1lH,KAAK2lH,gBAAgBlI,GACjC,IAAKiI,EAAO,OAAO,KACnB/qF,EAAMpc,KAAiBmnG,GAEzB,IAAI7hE,EAAMj6C,EAAAoG,KAAK0qB,sBAAsB7E,EAAW8E,EAAO8iF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAE7E,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGhB,OAAO,MAGTmtG,EAAAj7G,UAAA0jH,gBAAA,SACElI,GAGA,IACItqG,EACAE,EAFAsqG,EAAWF,EAAGljD,SAMlB,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMomC,MAAO,CACvB,IAAIh/B,EAAQj3B,KAAK4gH,gBAAgBnD,GACjC,IAAKxmF,EAAO,OAAO,KACnB,GAAIwmF,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAAQ,CAExB,IADA1oD,EAAa,IAAIlM,MACVw2G,EAAGzgD,QAAUptC,EAAAC,MAAMomC,MAAQwnD,EAAGjjD,WAAa5qC,EAAAC,MAAMumC,SAAWqnD,EAAGjjD,WAAa5qC,EAAAC,MAAMusC,YAAY,CAEnG,KADA/oD,EAAYrT,KAAK0+G,eAAejB,IAChB,OAAO,KACvBtqG,EAAWoL,KAAKlL,GAElB,OAAOzJ,EAAAoG,KAAK6qB,iBAAiB5D,EAAO9jB,EAAYsqG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEtEv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAMX,GAAI0tG,EAAGngD,KAAK1tC,EAAAC,MAAMumC,SAAU,CACjC,GAAIqnD,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAAQ,CAExB,IADA1oD,EAAa,IAAIlM,MACVw2G,EAAGzgD,QAAUptC,EAAAC,MAAMomC,MAAQwnD,EAAGjjD,WAAa5qC,EAAAC,MAAMumC,SAAWqnD,EAAGjjD,WAAa5qC,EAAAC,MAAMusC,YAAY,CAEnG,KADA/oD,EAAYrT,KAAK0+G,eAAejB,IAChB,OAAO,KACvBtqG,EAAWoL,KAAKlL,GAElB,OAAOzJ,EAAAoG,KAAK6qB,iBAAiB,KAAM1nB,EAAYsqG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAErEv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAeowG,0BACfnI,EAAG1tG,SAGP,OAAO,MAGTmtG,EAAAj7G,UAAAmjH,oBAAA,SACE3H,GAKA,IAAIE,EAAWF,EAAGljD,SACd1nC,EAAa7yB,KAAK4gH,gBAAgBnD,GACtC,IAAK5qF,EAAY,OAAO,KACxB,IAAIgxB,EAAMj6C,EAAAoG,KAAK+qB,qBAAiClI,EAAY4qF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAElF,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAAojH,kBAAA,SACE5H,GAQA,IACI5rF,EADA8rF,EAAWF,EAAGljD,SAElB,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAAY,CAE5B,IADA,IAAIhpD,EAAa,IAAIlM,OACbw2G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CAEjC,KADAvqC,EAAO7xB,KAAK0+G,eAAejB,IAChB,OAAO,KAClBtqG,EAAWoL,KAAgBsT,GAE7B,IAAIqJ,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAIqiF,EAAGngD,KAAK1tC,EAAAC,MAAMqmC,OAAQ,CACxB,IAAKunD,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAKjB,OAJAj7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAET,IAAK0tG,EAAGpgD,iBAKN,OAJAr9D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,KAGT,GADAmrB,EAAgBtxB,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,UACnE0tG,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAKjB,OAJAl7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAET,IAAK0tG,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAKjB,OAJAn8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAGT,IADAorB,EAAkB,IACVsiF,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CAEjC,KADAvqC,EAAO7xB,KAAK0+G,eAAejB,IAChB,OAAO,KAClBtiF,EAAgB5c,KAAgBsT,IAGpC,GAAI4rF,EAAGngD,KAAK1tC,EAAAC,MAAM2mC,SAAU,CAC1B,IAAKinD,EAAGngD,KAAK1tC,EAAAC,MAAMssC,WAKjB,OAJAn8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAGT,IADAqrB,EAAoB,IACZqiF,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CAEjC,KADAvqC,EAAO7xB,KAAK0+G,eAAejB,IAChB,OAAO,KAClBriF,EAAkB7c,KAAgBsT,IAGtC,IAAMsJ,IAAmBC,EAKvB,OAJAp7B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,SAEP,KAET,IAAI8zC,EAAMj6C,EAAAoG,KAAKirB,mBACb9nB,EACA+nB,EACAC,EACAC,EACAqiF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGxB,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAOT,OALE7jD,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGT,MAGTmtG,EAAAj7G,UAAA88G,qBAAA,SACEtB,EACA5tG,EACA2N,EACAmgG,GAKA,GAAIF,EAAGpgD,iBAAkB,CACvB,IAAIz8D,EAAOgJ,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,SAC/DoU,EAA6C,KACjD,GAAIs5F,EAAGngD,KAAK1tC,EAAAC,MAAMkoC,UAAW,CAE3B,KADA5zC,EAAiBnkB,KAAKghH,oBAAoBvD,IACrB,OAAO,KAC5B5tG,GAASpG,EAAApH,YAAY4P,QAEvB,GAAIwrG,EAAGngD,KAAK1tC,EAAAC,MAAM0pC,QAAS,CACzB,IAAIr9C,EAAOlc,KAAKu/G,UAAU9B,GAC1B,IAAKvhG,EAAM,OAAO,KAClB,IAAI2nC,EAAMj6C,EAAAoG,KAAKK,sBACbzP,EACAujB,EACAjI,EACAsB,EACA3N,EACA4tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGxB,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAGP,OAAO,MAGTmtG,EAAAj7G,UAAAqjH,mBAAA,SACE7H,GAKA,IAAIE,EAAWF,EAAGljD,SACd1nC,EAAa7yB,KAAK4gH,gBAAgBnD,EAAE,IACxC,IAAK5qF,EAAY,OAAO,KACxB,IAAIgxB,EAAMj6C,EAAAoG,KAAK0rB,oBAAoB7I,EAAY4qF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAErE,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,GAGTq5D,EAAAj7G,UAAAsjH,oBAAA,SACE9H,GAKA,IAAIE,EAAWF,EAAGljD,SAClB,GAAIkjD,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WAAY,CAC5B,IAAIpoC,EAAa7yB,KAAK4gH,gBAAgBnD,GACtC,IAAK5qF,EAAY,OAAO,KACxB,GAAI4qF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAAa,CAC7B,IAAI7nD,EAAYrT,KAAK0+G,eAAejB,GACpC,IAAKpqG,EAAW,OAAO,KACvB,IAAIwwC,EAAMj6C,EAAAoG,KAAK4rB,qBAAqB/I,EAAYxf,EAAWoqG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEjF,OADAk/E,EAAGngD,KAAK1tC,EAAAC,MAAMisC,WACPjY,EAEP7jD,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,UAIhB/P,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAGhB,OAAO,MAMTmtG,EAAAj7G,UAAA4jH,qBAAA,SACEpI,GAGA,IAAI9lD,EAAQ8lD,EAAG3oG,KAAK8a,EAAAgmC,mBAAmBgH,QACnC+gD,EAAWF,EAAGljD,SACdurD,EA8sBR,SAAkCxyG,GAChC,OAAQA,GACN,KAAKsc,EAAAC,MAAMioC,YAAa,SACxB,KAAKloC,EAAAC,MAAM4nC,MAAO,SAClB,KAAK7nC,EAAAC,MAAMspC,YACX,KAAKvpC,EAAAC,MAAMupC,MACX,KAAKxpC,EAAAC,MAAMnjB,KACX,KAAKkjB,EAAAC,MAAMjjB,MACX,KAAKgjB,EAAAC,MAAM8oC,UACX,KAAK/oC,EAAAC,MAAM+oC,YACX,KAAKhpC,EAAAC,MAAMynC,OACX,KAAK1nC,EAAAC,MAAMmQ,KACX,KAAKpQ,EAAAC,MAAMwmC,OAAQ,UACnB,KAAKzmC,EAAAC,MAAM6N,IAAK,UAElB,SA7tBmBqoF,CAAyBpuD,GAC1C,GAAc,GAAVmuD,EAA+B,CACjC,IAAIpvF,OAAO,EAKX,OAAIihC,GAAS/nC,EAAAC,MAAM6N,KACjBhH,EAAU12B,KAAK4gH,gBAAgBnD,EAAE,KAE7B/mF,EAAQpjB,MAAQ1J,EAAA2J,SAAS8c,KACpBzmB,EAAAoG,KAAK6kB,oBACO6B,EAAS7D,WACT6D,EAASlN,cACTkN,EAASxW,UAC1Bu9F,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAGxBv+B,KAAKuV,MACH7L,EAAA8L,eAAegL,wBACfi9F,EAAG1tG,SAGA,MAdc,MAgBrB2mB,EAAU12B,KAAK4gH,gBAAgBnD,EAAIqI,KAKjCnuD,GAAS/nC,EAAAC,MAAM8oC,WAAahB,GAAS/nC,EAAAC,MAAM+oC,aAE3CliC,EAAQpjB,MAAQ1J,EAAA2J,SAAS4c,YACzBuG,EAAQpjB,MAAQ1J,EAAA2J,SAAS+c,eACzBoG,EAAQpjB,MAAQ1J,EAAA2J,SAASid,gBAEzBxwB,KAAKuV,MACH7L,EAAA8L,eAAewwG,0FACftvF,EAAQ3mB,OAIPnG,EAAAoG,KAAK4mB,4BAA4B+gC,EAAOjhC,EAAS+mF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAhBvD,KAmBzB,IAAInM,EAA0B,KAC9B,OAAQulC,GAEN,KAAK/nC,EAAAC,MAAME,KAAM,OAAOnmB,EAAAoG,KAAK+kB,qBAAqB0oF,EAAG1tG,SACrD,KAAK6f,EAAAC,MAAMG,KAAM,OAAOpmB,EAAAoG,KAAKumB,qBAAqBknF,EAAG1tG,SACrD,KAAK6f,EAAAC,MAAMI,MAAO,OAAOrmB,EAAAoG,KAAKkkB,sBAAsBupF,EAAG1tG,SAIvD,KAAK6f,EAAAC,MAAMorC,UAGT,GAAIwiD,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAChB,OAAOl7D,KAAK2iH,8BACVlF,EACA7zG,EAAAoG,KAAKuiB,gCAAgCkrF,EAAG1tG,MAAM4tG,IAC9C,GAAE,GAIN,IAAIngD,EAAQigD,EAAGlgD,OACX0oD,GAAQ,EACZ,GACE,OAAQxI,EAAG3oG,KAAK8a,EAAAgmC,mBAAmBgH,SAGjC,KAAKhtC,EAAAC,MAAMioC,YAET,OADA2lD,EAAG7/C,MAAMJ,GACFx9D,KAAK0iH,wBAAwBjF,GAGtC,KAAK7tF,EAAAC,MAAMM,WAET,OADAstF,EAAG5/C,iBACK4/C,EAAG3oG,QAGT,KAAK8a,EAAAC,MAAMqrC,WACT,IACGuiD,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,SACd4hD,EAAGngD,KAAK1tC,EAAAC,MAAMksC,oBACf,CACAkqD,GAAQ,EACR,MAKJ,KAAKr2F,EAAAC,MAAMgsC,MAET,OADA4hD,EAAG7/C,MAAMJ,GACFx9D,KAAK0iH,wBAAwBjF,GAGtC,KAAK7tF,EAAAC,MAAMmsC,SACT,GACEyhD,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,QACd4hD,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QACdmgF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAGd,OADAuiD,EAAG7/C,MAAMJ,GACFx9D,KAAK0iH,wBAAwBjF,GAEtCwI,GAAQ,EACR,MAEF,KAAKr2F,EAAAC,MAAMyN,MACT,MAIF,QACE2oF,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAxI,EAAG7/C,MAAMJ,IAGTprC,EAAOpyB,KAAK4gH,gBAAgBnD,IAEvBA,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAOZtxD,EAAAoG,KAAKolB,8BAA8BhD,EAAMqrF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OANpEv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MANS,KAWpB,KAAK6f,EAAAC,MAAMosC,YAET,IADA,IAAIvpC,EAAqB,IAAIzrB,OACrBw2G,EAAGngD,KAAK1tC,EAAAC,MAAMqsC,eAAe,CACnC,GAAIuhD,EAAGzgD,QAAUptC,EAAAC,MAAMyN,MACrBlL,EAAO,UAGP,KADAA,EAAOpyB,KAAK4gH,gBAAgBnD,EAAI,IACrB,OAAO,KAGpB,GADA/qF,EAAmBnU,KAAK6T,IACnBqrF,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMqsC,cAChB,MAMA,OAJAl8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAIb,OAAOnG,EAAAoG,KAAKwiB,6BAA6BE,EAAoB+qF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAGrF,KAAK3O,EAAAC,MAAMssC,UAKT,IAJA,IAAI+pD,EAAWzI,EAAGljD,SACdrlC,EAAQ,IAAIjuB,MACZuT,EAAS,IAAIvT,MACbrG,OAAI,GACA68G,EAAGngD,KAAK1tC,EAAAC,MAAMusC,aAAa,CACjC,GAAKqhD,EAAGpgD,iBAWNz8D,EAAOgJ,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,aAXvC,CACxB,IAAK0tG,EAAGngD,KAAK1tC,EAAAC,MAAMkrC,eAKjB,OAJA/6D,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfrC,EAAG1tG,SAEE,MAETnP,EAAOgJ,EAAAoG,KAAKE,2BAA2ButG,EAAGx5D,aAAcw5D,EAAG1tG,UACtDoiB,UAAW,EAKlB,GADA+C,EAAM3W,KAAK3d,GACP68G,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAAQ,CACxB,IAAIv6D,EAAQtB,KAAK4gH,gBAAgBnD,EAAI,GACrC,IAAKn8G,EAAO,OAAO,KACnBkZ,EAAO+D,KAAKjd,OACP,IAAKV,EAAKuxB,SAOf,OAJAnyB,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KANPyK,EAAO+D,KAAK3d,GAQd,IAAK68G,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMusC,YAChB,MAMA,OAJAp8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAIb,OAAOnG,EAAAoG,KAAKilB,8BAA8BC,EAAO1a,EAAQijG,EAAG1tG,MAAMm2G,EAAUzI,EAAGl/E,MAGjF,KAAK3O,EAAAC,MAAMkoC,SACT,IAAIjlC,EAAS9yB,KAAKu/G,UAAU9B,GAC5B,OAAK3qF,EACA2qF,EAAGngD,KAAK1tC,EAAAC,MAAMmoC,cAOnB5lC,EAAOpyB,KAAK4gH,gBAAgBnD,EAAE,KAEvB7zG,EAAAoG,KAAK2iB,0BACV/oB,EAAAuzB,cAAcmiD,OACdltD,EACAU,EACA2qF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MALN,MAPhBv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MANW,KAiBtB,KAAK6f,EAAAC,MAAMM,WACT,IAAIg2F,EAAiB1I,EAAG5/C,iBACxB,GAAsB,QAAlBsoD,EAA0B,OAAOv8G,EAAAoG,KAAK+kB,qBAAqB0oF,EAAG1tG,SAClE,IAAIK,EAAaxG,EAAAoG,KAAKE,2BAA2Bi2G,EAAgB1I,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MACvF,OAAIk/E,EAAGzgD,MAAK,IAASptC,EAAAC,MAAMksC,oBAAuB0hD,EAAG/iD,mBAiB9CtqD,EAhBEpQ,KAAK2iH,8BACVlF,EACA7zG,EAAAoG,KAAKuiB,gCAAgCkrF,EAAG1tG,MAAM4tG,IAC9C,CACE/zG,EAAAoG,KAAKwhB,gBACHphB,EACAxG,EAAAoG,KAAKM,kBAAkBF,EAAWL,MAAMs3D,OACxC,KACAz9D,EAAAuyB,cAAci6B,QACdhmD,EAAWL,QAEd,EAED4tG,GAKN,KAAK/tF,EAAAC,MAAMiO,KACT,OAAOl0B,EAAAoG,KAAKqmB,qBAAqBonF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEzD,KAAK3O,EAAAC,MAAM/P,YACT,OAAOlW,EAAAoG,KAAK6jB,4BAA4B4pF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEhE,KAAK3O,EAAAC,MAAMY,MAOT,OANIgtF,EAAGzgD,QAAUptC,EAAAC,MAAMwrC,KAAOoiD,EAAGjjD,WAAa5qC,EAAAC,MAAMorC,WAClDj7D,KAAKuV,MACH7L,EAAA8L,eAAe4wG,6DACf3I,EAAG1tG,SAGAnG,EAAAoG,KAAKmmB,sBAAsBsnF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAE1D,KAAK3O,EAAAC,MAAMkrC,cACT,OAAOnxD,EAAAoG,KAAKimB,8BAA8BwnF,EAAGx5D,aAAcw5D,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAEnF,KAAK3O,EAAAC,MAAM+rC,eACT,OAAOhyD,EAAAoG,KAAK2kB,+BAA+B8oF,EAAG/+C,cAAe++C,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAErF,KAAK3O,EAAAC,MAAMurC,aACT,OAAOxxD,EAAAoG,KAAKokB,6BAA6BqpF,EAAG19C,YAAa09C,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAIjF,KAAK3O,EAAAC,MAAM4oC,MACT,IAAI4tD,EAAgB5I,EAAGp/C,oBACvB,OAAKo/C,EAAGngD,KAAK1tC,EAAAC,MAAM4oC,OAOZ7uD,EAAAoG,KAAKwlB,8BACV6wF,EACA5I,EAAGj/C,kBACHi/C,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OATtBv+B,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAQX,KAAK6f,EAAAC,MAAMjU,SACT,OAAO5b,KAAK0iH,wBAAwBjF,GAEtC,KAAK7tF,EAAAC,MAAM/T,MACT,OAAO9b,KAAK+iH,qBAAqBtF,GAEnC,QAYE,OAXI9lD,GAAS/nC,EAAAC,MAAMktC,UACjB/8D,KAAKuV,MACH7L,EAAA8L,eAAeyoD,uBACfw/C,EAAG1tG,MAAM4tG,IAGX39G,KAAKuV,MACH7L,EAAA8L,eAAe8wG,oBACf7I,EAAG1tG,SAGA,OAKbmtG,EAAAj7G,UAAAskH,qCAAA,SACE9I,GAKA,IAAIjgD,EAAQigD,EAAGlgD,OACf,IAAKkgD,EAAGngD,KAAK1tC,EAAAC,MAAMkoC,UAAW,OAAO,KACrC,IAAIvuC,EAAmC,KACvC,EAAG,CACD,GAAIi0F,EAAGzgD,SAAWptC,EAAAC,MAAMmoC,YACtB,MAEF,IAAI97C,EAAOlc,KAAKu/G,UAAU9B,GAAI,GAAM,GACpC,IAAKvhG,EAEH,OADAuhG,EAAG7/C,MAAMJ,GACF,KAEJh0C,EACAA,EAAcjL,KAAKrC,GADJsN,EAAgB,CAAEtN,SAE/BuhG,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QACvB,OAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMmoC,cAAgBylD,EAAGngD,KAAK1tC,EAAAC,MAAMorC,WACvCzxC,GAETi0F,EAAG7/C,MAAMJ,GACF,OAGT0/C,EAAAj7G,UAAAq+G,eAAA,SACE7C,GAMA,IADA,IAAI7rF,EAAO,IAAI3qB,OACPw2G,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,aAAa,CACjC,IAAI9oC,EAAOpyB,KAAK4gH,gBAAgBnD,EAAI,GACpC,IAAKrrF,EAAM,OAAO,KAElB,GADAR,EAAKrT,KAAK6T,IACLqrF,EAAGngD,KAAK1tC,EAAAC,MAAMyN,OAAQ,CACzB,GAAImgF,EAAGngD,KAAK1tC,EAAAC,MAAMqrC,YAChB,MAMA,OAJAl7D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,MAIb,OAAO6hB,GAGTsrF,EAAAj7G,UAAA2+G,gBAAA,SACEnD,EACAqI,QAAA,IAAAA,MAAA,GAEAj7G,OAAiB,GAAVi7G,GAEP,IAAI1zF,EAAOpyB,KAAK6lH,qBAAqBpI,GACrC,IAAKrrF,EAAM,OAAO,KAOlB,IAJA,IACIulC,EAEA6uD,EAHA7I,GAFJvrF,EAAOpyB,KAAKymH,yBAAyBhJ,EAAIrrF,IAErBriB,MAAMif,MAEtBla,EAA0B,MAG3B0xG,EAAiBE,EAAoB/uD,EAAQ8lD,EAAGzgD,UAAY8oD,GAC7D,CAEA,OADArI,EAAG3oG,OACK6iD,GAEN,KAAK/nC,EAAAC,MAAMimC,GACT,IAAIhjC,EAAS9yB,KAAKu/G,UAAU9B,GAC5B,IAAK3qF,EAAQ,OAAO,KACpBV,EAAOxoB,EAAAoG,KAAK2iB,0BACV/oB,EAAAuzB,cAAc24B,GACd1jC,EACAU,EACA2qF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAEF,KAAK3O,EAAAC,MAAMspC,YACT/mC,EAAOxoB,EAAAoG,KAAK2iB,0BACV/oB,EAAAuzB,cAAc4nC,QACd3yC,EACA,KACAqrF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAGF,KAAK3O,EAAAC,MAAM2N,WACT,IAAI/I,EAASz0B,KAAKu/G,UAAU9B,GAC5B,IAAKhpF,EAAQ,OAAO,KACpBrC,EAAOxoB,EAAAoG,KAAKwkB,2BACVpC,EACAqC,EACAgpF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAGF,KAAK3O,EAAAC,MAAMosC,YAET,KADAnnD,EAAO9U,KAAK4gH,gBAAgBnD,IACjB,OAAO,KAClB,IAAKA,EAAGngD,KAAK1tC,EAAAC,MAAMqsC,cAKjB,OAJAl8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAETqiB,EAAOxoB,EAAAoG,KAAK+jB,8BACV3B,EACAtd,EACA2oG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAGF,KAAK3O,EAAAC,MAAM8oC,UACX,KAAK/oC,EAAAC,MAAM+oC,YAEPxmC,EAAK9e,MAAQ1J,EAAA2J,SAAS4c,YACtBiC,EAAK9e,MAAQ1J,EAAA2J,SAAS+c,eACtB8B,EAAK9e,MAAQ1J,EAAA2J,SAASid,gBAEtBxwB,KAAKuV,MACH7L,EAAA8L,eAAewwG,0FACf5zF,EAAKriB,OAGTqiB,EAAOxoB,EAAAoG,KAAKymB,6BACVkhC,EACAvlC,EACAqrF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAGF,KAAK3O,EAAAC,MAAMmsC,SACT,IAAIlmC,EAAS91B,KAAK4gH,gBAAgBnD,GAClC,IAAK3nF,EAAQ,OAAO,KACpB,IAAK2nF,EAAGngD,KAAK1tC,EAAAC,MAAMgsC,OAKjB,OAJA77D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEP,KAET,IAAIgmB,EAAS/1B,KAAK4gH,gBAAgBnD,EAAIqI,EAAU,EAC5C,EACD,GAEH,IAAK/vF,EAAQ,OAAO,KACpB3D,EAAOxoB,EAAAoG,KAAK4lB,wBACVxD,EACA0D,EACAC,EACA0nF,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAGF,KAAK3O,EAAAC,MAAMyN,MACT,IAAIqpF,EAA2B,CAAEv0F,GACjC,EAAG,CAED,KADAA,EAAOpyB,KAAK4gH,gBAAgBnD,EAAI,IACrB,OAAO,KAClBkJ,EAAWpoG,KAAK6T,SACTqrF,EAAGngD,KAAK1tC,EAAAC,MAAMyN,QACvBlL,EAAOxoB,EAAAoG,KAAK0jB,sBAAsBizF,EAAYlJ,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MACpE,MAEF,QAGE,GAAIo5B,GAAS/nC,EAAAC,MAAMwrC,IAAK,CACtB,GAAIoiD,EAAGpgD,iBACLvoD,EAAOlL,EAAAoG,KAAKE,2BAA2ButG,EAAG5/C,iBAAkB4/C,EAAG1tG,cAO/D,KALA+E,EAAO9U,KAAK4gH,gBAAgBnD,EAC1BmJ,EAAmBjvD,GACf6uD,EACAA,EAAiB,IAEZ,OAAO,KAEpB,GAAI1xG,EAAKxB,MAAQ1J,EAAA2J,SAAS4c,WACxBiC,EAAOxoB,EAAAoG,KAAKslB,+BACVlD,EACsBtd,EACtB2oG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,UAEnB,IAAIzpB,EAAKxB,MAAQ1J,EAAA2J,SAAS8c,KAQ/B,OAJArwB,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACfhrG,EAAK/E,OAEA,KANP,KADAqiB,EAAOpyB,KAAK6mH,iBAAiBpJ,EAAIE,EAAUvrF,EAAsBtd,IACtD,OAAO,UAUf,CAML,KALAA,EAAO9U,KAAK4gH,gBAAgBnD,EAC1BmJ,EAAmBjvD,GACf6uD,EACAA,EAAiB,IAEZ,OAAO,KAClBp0F,EAAOxoB,EAAAoG,KAAKgjB,uBAAuB2kC,EAAOvlC,EAAMtd,EAAM2oG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,OAKlFnM,EAAOpyB,KAAKymH,yBAAyBhJ,EAAIrrF,GAE3C,OAAOA,GAGD8qF,EAAAj7G,UAAA4kH,iBAAR,SACEpJ,EACAE,EACAvrF,EACA5xB,GAEA,IAAIsmH,EAAStmH,EAAKqyB,WAClB,OAAQi0F,EAAOxzG,MACb,KAAK1J,EAAA2J,SAAS4c,WACZ3vB,EAAKqyB,WAAajpB,EAAAoG,KAAKslB,+BACrBlD,EACsB00F,EACtBrJ,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,MAExB,MAEF,KAAK30B,EAAA2J,SAAS8c,KACZ,IAAI02F,EAAQ/mH,KAAK6mH,iBAAiBpJ,EAAIE,EAAUvrF,EAAsB00F,GACtE,IAAKC,EAAO,OAAO,KACnBvmH,EAAKqyB,WAAak0F,EAClBvmH,EAAKuP,MAAQ0tG,EAAG1tG,MAAM4tG,EAAUF,EAAGl/E,KACnC,MAEF,QAKE,OAJAv+B,KAAKuV,MACH7L,EAAA8L,eAAesqG,oBACft/G,EAAKuP,OAEA,KAGX,OAAOvP,GAGD08G,EAAAj7G,UAAAwkH,yBAAR,SACEhJ,EACArrF,GAEA,GAAIxoB,EAAAsmB,eAAekC,EAAK9e,MAEtB,IADA,IAAIkW,EAAmC,KAErCi0F,EAAGngD,KAAK1tC,EAAAC,MAAMorC,YAEdrxD,EAAA8mB,sBAAsB0B,EAAK9e,OAA6E,QAAnEkW,EAAgBxpB,KAAKumH,qCAAqC9I,KAC/F,CACA,IAAI7rF,EAAO5xB,KAAKsgH,eAAe7C,GAC/B,IAAK7rF,EAAM,MACXQ,EAAOxoB,EAAAoG,KAAKqjB,qBACVjB,EACA5I,EACAoI,EACA6rF,EAAG1tG,MAAMqiB,EAAKriB,MAAMif,MAAOyuF,EAAGl/E,MAIpC,OAAOnM,GAIT8qF,EAAAj7G,UAAA47G,cAAA,SAAcJ,GAGZ,IAFAA,EAAGzgD,MAAK,GACJygD,EAAG/iD,oBAAoB+iD,EAAG3oG,SAC3B,CACD,IAAI0lD,EAAYijD,EAAGzgD,MAAK,GACxB,GACExC,GAAa5qC,EAAAC,MAAMktC,WACnBvC,GAAa5qC,EAAAC,MAAMisC,UACnB,CACA2hD,EAAG3oG,OACH,MAEF,GAAI2oG,EAAG/iD,mBAAoB,MAC3B,OAAQ+iD,EAAG3oG,QACT,KAAK8a,EAAAC,MAAMM,WACTstF,EAAG5/C,iBACH,MAEF,KAAKjuC,EAAAC,MAAMkrC,cACT0iD,EAAGx5D,aACH,MAEF,KAAKr0B,EAAAC,MAAM+rC,eACT6hD,EAAG/+C,cACH,MAEF,KAAK9uC,EAAAC,MAAMurC,aACTqiD,EAAG19C,YACH,MAEF,KAAKnwC,EAAAC,MAAMssC,UACTn8D,KAAKgnH,UAAUvJ,MAQvBP,EAAAj7G,UAAA+kH,UAAA,SAAUvJ,GAER,IAAIwJ,EAAQ,EACRhB,GAAQ,EACZ,GACE,OAAQxI,EAAG3oG,QACT,KAAK8a,EAAAC,MAAMktC,UACT/8D,KAAKuV,MACH7L,EAAA8L,eAAekmD,YACf+hD,EAAG1tG,QAAS,KAEdk2G,GAAQ,EACR,MAEF,KAAKr2F,EAAAC,MAAMssC,YACP8qD,EACF,MAEF,KAAKr3F,EAAAC,MAAMusC,aACP6qD,IACUhB,GAAQ,GACpB,MAEF,KAAKr2F,EAAAC,MAAMM,WACTstF,EAAG5/C,iBACH,MAEF,KAAKjuC,EAAAC,MAAMkrC,cACT0iD,EAAGx5D,aACH,MAEF,KAAKr0B,EAAAC,MAAM+rC,eACT6hD,EAAG/+C,cACH,MAEF,KAAK9uC,EAAAC,MAAMurC,aACTqiD,EAAG19C,mBAIAkmD,IAEb/I,EA/tHA,CAA4BxzG,EAAAiZ,mBA+wH5B,SAAS+jG,EAAoBpzG,GAC3B,OAAQA,GACN,KAAKsc,EAAAC,MAAMyN,MAAO,SAClB,KAAK1N,EAAAC,MAAM0pC,OACX,KAAK3pC,EAAAC,MAAM2pC,YACX,KAAK5pC,EAAAC,MAAM4pC,aACX,KAAK7pC,EAAAC,MAAM8pC,yBACX,KAAK/pC,EAAAC,MAAM6pC,gBACX,KAAK9pC,EAAAC,MAAM+pC,aACX,KAAKhqC,EAAAC,MAAMgqC,eACX,KAAKjqC,EAAAC,MAAMiqC,yBACX,KAAKlqC,EAAAC,MAAMkqC,+BACX,KAAKnqC,EAAAC,MAAMmqC,2CACX,KAAKpqC,EAAAC,MAAMoqC,iBACX,KAAKrqC,EAAAC,MAAMsqC,aACX,KAAKvqC,EAAAC,MAAMqqC,WAAY,SACvB,KAAKtqC,EAAAC,MAAMmsC,SAAU,SACrB,KAAKpsC,EAAAC,MAAMypC,QAAS,SACpB,KAAK1pC,EAAAC,MAAMwpC,oBAAqB,SAChC,KAAKzpC,EAAAC,MAAMopC,IAAK,SAChB,KAAKrpC,EAAAC,MAAMqpC,MAAO,SAClB,KAAKtpC,EAAAC,MAAMmpC,UAAW,UACtB,KAAKppC,EAAAC,MAAMsoC,cACX,KAAKvoC,EAAAC,MAAMuoC,mBACX,KAAKxoC,EAAAC,MAAMwoC,qBACX,KAAKzoC,EAAAC,MAAMyoC,0BAA2B,UACtC,KAAK1oC,EAAAC,MAAMimC,GACX,KAAKlmC,EAAAC,MAAM8mC,GACX,KAAK/mC,EAAAC,MAAM2N,WACX,KAAK5N,EAAAC,MAAMkoC,SACX,KAAKnoC,EAAAC,MAAMmoC,YACX,KAAKpoC,EAAAC,MAAMooC,gBACX,KAAKroC,EAAAC,MAAMqoC,mBAAoB,UAC/B,KAAKtoC,EAAAC,MAAMgpC,kBACX,KAAKjpC,EAAAC,MAAMipC,wBACX,KAAKlpC,EAAAC,MAAMkpC,oCAAqC,UAChD,KAAKnpC,EAAAC,MAAMnjB,KACX,KAAKkjB,EAAAC,MAAMjjB,MAAO,UAClB,KAAKgjB,EAAAC,MAAM2oC,SACX,KAAK5oC,EAAAC,MAAM4oC,MACX,KAAK7oC,EAAAC,MAAM6oC,QAAS,UACpB,KAAK9oC,EAAAC,MAAM0oC,kBAAmB,UAC9B,KAAK3oC,EAAAC,MAAM8oC,UACX,KAAK/oC,EAAAC,MAAM+oC,YAAa,UACxB,KAAKhpC,EAAAC,MAAMwrC,IACX,KAAKzrC,EAAAC,MAAM6N,IACX,KAAK9N,EAAAC,MAAMosC,YACX,KAAKrsC,EAAAC,MAAMspC,YAAa,UAE1B,SAIF,SAASytD,EAAmBtzG,GAC1B,OAAQA,GACN,KAAKsc,EAAAC,MAAM0pC,OACX,KAAK3pC,EAAAC,MAAM2pC,YACX,KAAK5pC,EAAAC,MAAM4pC,aACX,KAAK7pC,EAAAC,MAAM8pC,yBACX,KAAK/pC,EAAAC,MAAM6pC,gBACX,KAAK9pC,EAAAC,MAAM+pC,aACX,KAAKhqC,EAAAC,MAAMgqC,eACX,KAAKjqC,EAAAC,MAAMiqC,yBACX,KAAKlqC,EAAAC,MAAMkqC,+BACX,KAAKnqC,EAAAC,MAAMmqC,2CACX,KAAKpqC,EAAAC,MAAMoqC,iBACX,KAAKrqC,EAAAC,MAAMsqC,aACX,KAAKvqC,EAAAC,MAAMqqC,WACX,KAAKtqC,EAAAC,MAAMmsC,SACX,KAAKpsC,EAAAC,MAAM0oC,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAr1HP74D,EAAAw9G,SAkuHb,SAAkBgK,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkBxnH,EAAAwnH,aAAAxnH,EAAAwnH,WAAU,2HCtzH5B/mH,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAkyD,EAAAlyD,EAAA,GAEAkyD,EAAAnd,OAAOjzC,UAAUiiD,OAAS,WAKxB,OAAOijE,SAASC,WAAWpnH,KAAKmmB,KAAKkhG,aAAoC,IAG3Eh1D,EAAAnd,OAAOjzC,UAAUkiD,QAAU,WACzB,OAAOgjE,SAASC,WAAWpnH,KAAKmmB,KAAKmhG,+BCxBvC,SAAA9qG,GAEA,MAAA2qG,EAAA3qG,EAAA+qG,UAAoCpnH,EAAQ,IAG5C,QAAAyB,KAFA4a,EAAA2qG,WAEAA,GACAvlH,EAAAu2B,WAAA,cAAAv2B,EAAAu2B,WAAA,gBAAA3b,EAAA5a,GAAAulH,EAAAvlH,IAKA4a,EAAAgrG,kBAAAL,EAAAM,QACAjrG,EAAAkrG,cAAAP,EAAAQ,MACAnrG,EAAAorG,cAAAT,EAAAU,SACArrG,EAAAsrG,QAAA,SAAAvvE,EAAAkV,GAAqC05D,EAAAY,OAAAxvE,GAAAkV,GACrCjxC,EAAAwrG,OAAA,SAAAzvE,GAA+B,OAAA4uE,EAAAY,OAAAxvE,qCCf/B54C,EAAAD,QAAAO,oBCAA,SAAAuc,GAEA,IAAAyrG,EAAA,oBAAAtnD,qBAAA,IAAAnkD,MAAAzc,KAEAkoH,EAAA1iH,WAAA,EACA0iH,EAAAxiH,eAAA,EACAwiH,EAAAviH,gBAAA,EACAuiH,EAAAtiH,mBAAA,EACAsiH,EAAAriH,iBAAA,EACAqiH,EAAApiH,4BAAA,EACAoiH,EAAAniH,4BAAA,EACAmiH,EAAAliH,yBAAA,EACAkiH,EAAAjiH,kBAAA,EACAiiH,EAAAhiH,qBAAA,EAEA,IAAAa,EAAA,IAAAqB,aAAA,GACA,IAAAH,YAAAlB,EAAAwI,QA2IA,SAAA44G,IACA7uG,MAAA8uG,kBACA9uG,MAAA8uG,kBAAAnoH,KAAAkoH,GAEAloH,KAAAoqE,MAAApqE,KAAAY,KAAA,KAAAZ,KAAAkuB,QAAA,UAAA7U,OAAA+wD,MAWA,SAAAg+C,EAAAl6F,GACAluB,KAAAkuB,WAAA,mBACA7U,MAAA8uG,kBACA9uG,MAAA8uG,kBAAAnoH,KAAAooH,GAEApoH,KAAAoqE,MAAApqE,KAAAY,KAAA,KAAAZ,KAAAkuB,QAAA,UAAA7U,OAAA+wD,MA7JArpE,OAAAsnH,iBACAJ,EAAA,YAAA3mH,GAA0C,OAAAA,GAAA,QAC1C,CACAktE,UAAA,CAAgBltE,OAAA,IAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,IAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,aAAA3mH,GAA4C,OAAAA,GAAA,QAC5C,CACAktE,UAAA,CAAgBltE,OAAA,MAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,MAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,IAAAA,EAAA,eAAA3mH,GAAmE,SAAAA,GACnE,CACAktE,UAAA,CAAgBltE,OAAA,WAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,WAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,YAAA3mH,GAA0C,WAAAA,GAC1C,CACAktE,UAAA,CAAgBltE,MAAA,EAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,IAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,aAAA3mH,GAA4C,aAAAA,GAC5C,CACAktE,UAAA,CAAgBltE,MAAA,EAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,MAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,IAAAA,EAAA,eAAA3mH,GAAmE,OAAAA,IAAA,GACnE,CACAktE,UAAA,CAAgBltE,MAAA,EAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,WAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,cAAA3mH,GAA8C,QAAAA,GAC9C,CACAktE,UAAA,CAAgBltE,OAAA,EAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,OAAA,EAAAgnH,UAAA,KAGhBvnH,OAAAsnH,iBACAJ,EAAA,aAAA3mH,GAA4C,OAAAiG,KAAAghH,OAAAjnH,IAC5C,CACAknH,QAAA,CAAgBlnH,MAAAiG,KAAAghH,OAAA,cAAAD,UAAA,GAChB95C,UAAA,CAAgBltE,MAAAiG,KAAAghH,OAAA,eAAAD,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAAiG,KAAAghH,OAAA,cAAAD,UAAA,GAChBG,iBAAA,CAAwBnnH,MAAAiG,KAAAghH,OAAA,gBAAAD,UAAA,GACxBI,iBAAA,CAAwBpnH,OAAA,SAAAgnH,UAAA,GACxBK,iBAAA,CAAwBrnH,MAAA,SAAAgnH,UAAA,KAGxBvnH,OAAAsnH,iBACAJ,EAAA,aAAA3mH,GAA4C,OAAAA,GAC5C,CACAknH,QAAA,CAAgBlnH,MAAA,sBAAAgnH,UAAA,GAChB95C,UAAA,CAAgBltE,MAAA,OAAAgnH,UAAA,GAChB1jE,UAAA,CAAgBtjD,MAAA,uBAAAgnH,UAAA,GAChBG,iBAAA,CAAwBnnH,MAAA,wBAAAgnH,UAAA,GACxBI,iBAAA,CAAwBpnH,OAAA,iBAAAgnH,UAAA,GACxBK,iBAAA,CAAwBrnH,MAAA,iBAAAgnH,UAAA,KAGxBL,EAAA,IAAA1gH,KAAAqhH,MAEAX,EAAA,aAAA3mH,GACA,IAAAZ,EAAA6G,KAAAqhH,MAAAtnH,MACA,OAAAA,EAAA,GAAAZ,KAGAunH,EAAA,gBAAA3mH,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA2mH,EAAA,cAAA3mH,EAAA07C,GAEA,OAAA17C,IADA07C,GAAA,IACA17C,IAAA,GAAA07C,GAGAirE,EAAA,cAAA3mH,EAAA07C,GAEA,OAAA17C,KADA07C,GAAA,IACA17C,GAAA,GAAA07C,GAGAirE,EAAA,IAAA1gH,KAAAmnF,IAEAu5B,EAAA,IAAA1gH,KAAA4jE,IAEA88C,EAAA,IAAA1gH,KAAA6nF,IAEA64B,EAAA,KAAA1gH,KAAAorD,KAEAs1D,EAAA,MAAA1gH,KAAAgoF,MAGA04B,EAAA,iBAAA3mH,GACA,WAAAiG,KAAAmnF,IAAAptF,EAAAiG,KAAAmpF,MAAApvF,IACA,EAAAiG,KAAAshH,MAAA,GAAAvnH,GAEAiG,KAAAshH,MAAAvnH,IAGA2mH,EAAA,gBAAAjvF,EAAAC,EAAApD,GACA,OAAAA,EAAAmD,EAAAC,GAGAgvF,EAAA,KAAA1gH,KAAAgpF,KAEA03B,EAAA,MAAA1gH,KAAAmpF,MAEAu3B,EAAA,kBAAAh7F,EAAA67F,GACA,OAAAvhH,KAAAmnF,IAAAzhE,GAAA1lB,KAAAwhH,KAAAD,IAGAb,EAAA,eAAA3mH,GACA,IAAA84D,EAAA94D,GAAA,WACA+4D,GAAA,SAAA/4D,IAAA,EAIA,OAFA84D,GADA94D,EAAA84D,EAAAC,IACA,WACAA,GAAA,MAAA/4D,IAAA,KAIA2mH,EAAA,iBAAA3mH,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUA4mH,EAAAjmH,UAAAlB,OAAAY,OAAA0X,MAAApX,WACAimH,EAAAjmH,UAAArB,KAAA,mBACAsnH,EAAAjmH,UAAAisB,QAAA,cAEA+5F,EAAA,uBACA,UAAAC,GAWAE,EAAAnmH,UAAAlB,OAAAY,OAAA0X,MAAApX,WACAmmH,EAAAnmH,UAAArB,KAAA,iBAEAqnH,EAAA,gBAAAe,EAAA96F,GACA,GAAA86F,EAAA,OAAAA,EACA,UAAAZ,EAAAl6F,IAGA+5F,EAAA,oBAAA3mH,GACA,OAAAA,GAGA0F,OAAA,uBAAAknD,GACA,OAAAlnD,OAAAo3D,aAAA96C,MAAAtc,OAAAknD,IAGAlnD,OAAA,wBAAAknD,GACA,OAAAlnD,OAAAiiH,cAAA3lG,MAAAtc,OAAAknD,IAGAlnD,OAAA/E,UAAAinH,YACAnoH,OAAAC,eAAAgG,OAAA/E,UAAA,cACAX,MAAA,SAAA6nH,EAAAC,GACA,IAAAC,EAAArpH,KAAAspH,MAAAH,GAAAvwG,KAAAwwG,GAEA,OADAD,EAAAr+G,SAAAu+G,EAAAD,EAAAC,EAAAD,GACAC,KAKApB,EAAA,UAAAsB,OAAA98B,UAEAw7B,EAAA,iBAAAr9G,GACA,uBAAAA,GAGAq9G,EAAA,oBAAAr9G,GACA,UAGAq9G,EAAA,qBAAAr9G,GACA,uBAAAA,GAAA,iBAAAA,GAGAq9G,EAAA,oBAAAr9G,GACA,yBAAAA,GAGAq9G,EAAA,kBAAAr9G,GACA,uBAAAA,gBAAA5D,QAGAihH,EAAA,QAAAhhH,MAAA+lF,QACAi7B,EAAA,qBAAA71F,GACA,OAAAA,GACA,iBAAAA,GACA,iBAAAA,EAAAtnB,QACAsnB,EAAAtnB,QAAA,GACAvD,KAAAmpF,MAAAt+D,EAAAtnB,UAAAsnB,EAAAtnB,QAGA7D,MAAAtF,OAAA,SAAA6nH,GACA,IAAAt7D,EAAA,IAAAjnD,MAAAuiH,GAEA,OADAt7D,EAAApjD,OAAA,EACAojD,GAGA+5D,EAAA,mBAAA71F,GACA,gBAAAA,GAGA61F,EAAA,oBAAA71F,GACA,UAGA61F,EAAA,mBAAA71F,GACA,OAAAA,GAGA61F,EAAA,cAAAh7F,EAAA67F,GACA,OAAA77F,EAAA67F,GAGAb,EAAA,eAAAh7F,EAAA67F,GACA,OAAAvhH,KAAAghH,OAAAt7F,EAAA67F,IAGAb,EAAA,OAAA1gH,KAEAxG,OAAAsnH,iBAAAJ,EAAA,QACAwB,WAAA,CAAenoH,MAAA,EAAAgnH,UAAA,GACfoB,WAAA,CAAepoH,MAAA,EAAAgnH,UAAA,KAcfL,EAAA,aACA,IAAA0B,EAAA,IAAA9hH,WAAA,GACA+hH,EAAA,EACA,OACAn0E,SAAAwyE,EAAA,4BAAApsE,GACA,KAAAA,KAAA,YACA,GAAA+tE,EAAA/tE,EAAA8tE,EAAA7+G,OAAA,CACA,IAAA++G,EAAAF,GACAA,EAAA,IAAA9hH,WAAAN,KAAA4jE,IAAA,MAAAw+C,EAAA7+G,OAAA+wC,EAAA,EAAA8tE,EAAA7+G,UACA4D,IAAAm7G,GAEA,IAAAtxE,EAAAqxE,EAEA,OADA,GAAAA,GAAA/tE,KAAA+tE,EAAA,KAAAA,IACArxE,GAEAuxE,KAAA7B,EAAA,wBAAAz7F,EAAAlrB,EAAAu6C,GACA8tE,EAAAG,KAAAxoH,EAAAkrB,IAAAqvB,IAEApzC,KAAAw/G,EAAA,wBAAA1vE,KACAwxE,KAAA9B,EAAA,wBAAAz7F,EAAAD,EAAAsvB,GACA8tE,EAAAK,WAAAx9F,EAAAD,IAAAsvB,IAEA+hB,MAAAqqD,EAAA,2BACA0B,EAAA,IAAA9hH,WAAA,GACA+hH,EAAA,KAxBA,GA6BA3B,EAAA,MAAAA,EAAA,kBAAA1vE,EAAAj3C,EAAAiO,GACAo6G,MAAA,EAAApxE,IAAA,EAAAhpC,IAAAjO,GAGA2mH,EAAA,KAAAA,EAAA,iBAAA1vE,EAAAhpC,GACA,OAAAo6G,MAAA,EAAApxE,IAAA,EAAAhpC,KAGA04G,EAAA,2DChUA,SAAAzrG,GAAA,MAAA1V,EAAA,IAAAqB,aAAA,GACAtB,EAAA,IAAAqB,aAAApB,EAAAwI,QACAlJ,EAAA,IAAAuB,WAAAb,EAAAwI,QAEAkN,EAAAytG,WAAA,SAAA3oH,GAEA,OADAuF,EAAA,GAAAvF,EACA8E,EAAA,IAGAoW,EAAA0tG,WAAA,SAAA5oH,GAEA,OADA8E,EAAA,GAAA9E,EACAuF,EAAA,IAGA2V,EAAA2tG,WAAA,SAAA7oH,GAEA,OADAwF,EAAA,GAAAxF,EACA+Q,QAAAjM,EAAA,GAAAA,EAAA,KAGAoW,EAAA4tG,WAAA,SAAA9oH,GAGA,OAFA8E,EAAA,GAAA85C,QAAA5+C,GACA8E,EAAA,GAAA+5C,SAAA7+C,GACAwF,EAAA,wCCtBA,SAAA0V,GAAA,MAAA6tG,EAAA7tG,EAAA6tG,MAA4BlqH,EAAQ,IAEpCqc,EAAAyoD,SAAAolD,EAAAC,KAEA9tG,EAAA+tG,QAAAF,EAAAG,IAEAhuG,EAAAnK,QAAA,SAAAo4G,EAAAC,GACA,OAAAL,EAAAM,SAAAF,EAAAC,IAGAluG,EAAA0jC,QAAA,SAAA5+C,GACA,OAAAA,EAAAspH,KAGApuG,EAAA2jC,SAAA,SAAA7+C,GACA,OAAAA,EAAAupH,MAGAruG,EAAA2iD,QAAA,SAAAjsC,EAAAC,GACA,OAAAD,EAAAphB,IAAAqhB,IAGA3W,EAAAwoD,QAAA,SAAA9xC,EAAAC,GACA,OAAAD,EAAA43F,IAAA33F,IAGA3W,EAAAijD,QAAA,SAAAvsC,EAAAC,GACA,OAAAD,EAAA63F,IAAA53F,IAGA3W,EAAAwuG,QAAA,SAAA93F,EAAAC,GACA,OAAAD,EAAA+3F,IAAA93F,IAGA3W,EAAA0uG,UAAA,SAAAh4F,EAAAC,GACA,OAAAD,EAAAi4F,aAAAF,IAAA93F,EAAAg4F,cAAAC,YAGA5uG,EAAA6uG,QAAA,SAAAn4F,EAAAC,GACA,OAAAD,EAAA5qB,IAAA6qB,IAGA3W,EAAA8uG,UAAA,SAAAp4F,EAAAC,GACA,OAAAD,EAAAi4F,aAAA7iH,IAAA6qB,EAAAg4F,cAAAC,YAGA5uG,EAAA+uG,QAAA,SAAAr4F,EAAAC,GACA,OAAAD,EAAAs4F,IAAAr4F,IAGA3W,EAAAivG,OAAA,SAAAv4F,EAAAC,GACA,OAAAD,EAAAw4F,GAAAv4F,IAGA3W,EAAAmvG,QAAA,SAAAz4F,EAAAC,GACA,OAAAD,EAAA04F,IAAAz4F,IAGA3W,EAAA4iD,QAAA,SAAAlsC,EAAAC,GACA,OAAAD,EAAA24F,IAAA14F,IAGA3W,EAAAsvG,QAAA,SAAA54F,EAAAC,GACA,OAAAD,EAAA64F,IAAA54F,IAGA3W,EAAA21D,UAAA,SAAAj/C,EAAAC,GACA,OAAAD,EAAA84F,KAAA74F,IAGA3W,EAAAyvG,QAAA,SAAA3qH,GACA,OAAAA,EAAA4qH,OAGA1vG,EAAA2vG,OAAA,SAAAj5F,EAAAC,GACA,OAAAD,EAAAk5F,GAAAj5F,IAGA3W,EAAA6vG,OAAA,SAAAn5F,EAAAC,GACA,OAAAD,EAAAo5F,GAAAn5F,IAGA3W,EAAAy1D,UAAA,SAAA3wE,EAAAi2E,GACA1sE,OAAA0sE,GAAA,IAAAA,IAAA,IACA,IAAA76B,EAAA2tE,EAAAkC,QAAAh1C,EAAA,GACA,OAAAj2E,EAAAwQ,IAAA4qC,GAAA8uE,IAAA9uE,EAAAwvE,QAGA1vG,EAAAunD,UAAA,SAAAziE,GACA,WAAAA,EAAAupH,MAAAvpH,EAAAspH,KAAA,GAAAtpH,EAAAspH,KAAA1nH,GAAA0hD,YACA,IAAAtjD,EAAAupH,MAAAvpH,EAAAspH,KAAA1nH,GAAAsrE,WAAAltE,EAAAspH,IAAA,GAGApuG,EAAAynD,WAAA,SAAA3iE,GACA,WAAAA,EAAAupH,MAAAvpH,EAAAspH,KAAA,GAAAtpH,EAAAspH,KAAAznH,IAAAyhD,YACA,IAAAtjD,EAAAupH,MAAAvpH,EAAAspH,KAAAznH,IAAAqrE,WAAAltE,EAAAspH,IAAA,GAGApuG,EAAA2nD,WAAA,SAAA7iE,GACA,WAAAA,EAAAupH,MAAAvpH,EAAAspH,KAAA,IACA,IAAAtpH,EAAAupH,MAAAvpH,EAAAspH,IAAA,GAGApuG,EAAAwnD,UAAA,SAAA1iE,GACA,WAAAA,EAAAupH,MAAAvpH,EAAAspH,KAAA,GAAAtpH,EAAAspH,KAAArnH,GAAAqhD,WAGApoC,EAAA0nD,WAAA,SAAA5iE,GACA,WAAAA,EAAAupH,MAAAvpH,EAAAspH,KAAA,GAAAtpH,EAAAspH,KAAApnH,IAAAohD,WAGApoC,EAAA4nD,WAAA,SAAA9iE,GACA,WAAAA,EAAAupH,MAGAruG,EAAA6nD,YAAA,SAAA/iE,GACA,WAAAA,EAAAupH,OAAA,IAAAvpH,EAAAspH,KAAA,IAAAtpH,EAAAspH,MAGA,MAAA4B,EAAAnC,EAAAoC,WAAA5oH,IAAA6kH,kBACAgE,EAAArC,EAAAoC,WAAA5oH,IAAA8kH,kBAEAnsG,EAAAmwG,WAAA,SAAArrH,GACA,OAAAA,EAAAsrH,IAAAJ,IAAAlrH,EAAAurH,IAAAH,IAGA,MAAAI,EAAAzC,EAAAoC,WAAA3oH,IAAA4kH,kBACAqE,EAAA1C,EAAAoC,WAAA3oH,IAAA6kH,kBAEAnsG,EAAAwwG,WAAA,SAAA1rH,GACA,OAAAA,EAAAsrH,IAAAE,IAAAxrH,EAAAurH,IAAAE,IAGAvwG,EAAAitE,WAAA,SAAAnoF,GACA,OAAAkb,EAAAjV,KAAAghH,OAAAjnH,EAAA2rH,aAGAzwG,EAAAktE,WAAA,SAAApoF,GACA,OAAAA,EAAA2rH,YAGAzwG,EAAAu+F,cAAA,SAAAz5G,EAAA4rH,GACA,OAAAA,EAAA5rH,EAAA6pH,aAAA7pH,GAAA0c,SAAA,sCC9IAre,EAAAD,QAAA2qH,EAKA,IAAA8C,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAl4E,OAAA,IAAArtC,WAAA,CACA,m2BACA,IAASnI,QACR,MAAAghE,IAcD,SAAA2pD,EAAAO,EAAAC,EAAAqC,GAMAltH,KAAA4qH,IAAA,EAAAA,EAMA5qH,KAAA6qH,KAAA,EAAAA,EAMA7qH,KAAAktH,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXAlD,EAAApoH,UAAAurH,WAEAzsH,OAAAC,eAAAqpH,EAAApoH,UAAA,cAAqDX,OAAA,IAkBrD+oH,EAAAiD,SAOA,IAAAG,EAAA,GAOAC,EAAA,GAQA,SAAAnB,EAAAjrH,EAAA4rH,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAtsH,KAAA,IACAA,EAAA,OACAqsH,EAAAD,EAAApsH,IAEAqsH,GAEAJ,EAAA5C,EAAArpH,GAAA,EAAAA,GAAA,WACAssH,IACAF,EAAApsH,GAAAisH,GACAA,IAGAK,GAAA,MADAtsH,GAAA,IACAA,EAAA,OACAqsH,EAAAF,EAAAnsH,IAEAqsH,GAEAJ,EAAA5C,EAAArpH,IAAA,WACAssH,IACAH,EAAAnsH,GAAAisH,GACAA,GAmBA,SAAAd,EAAAnrH,EAAA4rH,GACA,GAAAW,MAAAvsH,GACA,OAAA4rH,EAAAY,EAAAxD,EACA,GAAA4C,EAAA,CACA,GAAA5rH,EAAA,EACA,OAAAwsH,EACA,GAAAxsH,GAAAysH,EACA,OAAAC,MACK,CACL,GAAA1sH,IAAA2sH,EACA,OAAAz/C,EACA,GAAAltE,EAAA,GAAA2sH,EACA,OAAArpE,EAEA,OAAAtjD,EAAA,EACAmrH,GAAAnrH,EAAA4rH,GAAAgB,MACAvD,EAAArpH,EAAA6sH,EAAA,EAAA7sH,EAAA6sH,EAAA,EAAAjB,GAmBA,SAAAvC,EAAAyD,EAAAC,EAAAnB,GACA,WAAA7C,EAAA+D,EAAAC,EAAAnB,GA5CA7C,EAAAkC,UAkCAlC,EAAAoC,aAsBApC,EAAAM,WASA,IAAA2D,EAAA/mH,KAAAc,IASA,SAAAkmH,EAAAnqE,EAAA8oE,EAAAsB,GACA,OAAApqE,EAAAt5C,OACA,MAAAuO,MAAA,gBACA,WAAA+qC,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAkmE,EASA,GARA,iBAAA4C,GAEAsB,EAAAtB,EACAA,GAAA,GAEAA,OAEAsB,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SAEA,IAAAtsH,EACA,IAAAA,EAAAiiD,EAAAmzD,QAAA,QACA,MAAAl+F,MAAA,mBACA,OAAAlX,EACA,OAAAosH,EAAAnqE,EAAAziC,UAAA,GAAAurG,EAAAsB,GAAAN,MAQA,IAHA,IAAAQ,EAAAjC,EAAA6B,EAAAE,EAAA,IAEAv4E,EAAAq0E,EACAjqH,EAAA,EAAmBA,EAAA+jD,EAAAt5C,OAAgBzK,GAAA,GACnC,IAAAw7C,EAAAt0C,KAAA6nF,IAAA,EAAAhrC,EAAAt5C,OAAAzK,GACAiB,EAAA8X,SAAAgrC,EAAAziC,UAAAthB,IAAAw7C,GAAA2yE,GACA,GAAA3yE,EAAA,GACA,IAAA8yE,EAAAlC,EAAA6B,EAAAE,EAAA3yE,IACA5F,IAAA80E,IAAA4D,GAAA78G,IAAA26G,EAAAnrH,SAGA20C,GADAA,IAAA80E,IAAA2D,IACA58G,IAAA26G,EAAAnrH,IAIA,OADA20C,EAAAi3E,WACAj3E,EAoBA,SAAA24E,EAAAnhE,EAAAy/D,GACA,uBAAAz/D,EACAg/D,EAAAh/D,EAAAy/D,GACA,iBAAAz/D,EACA8gE,EAAA9gE,EAAAy/D,GAEAvC,EAAAl9D,EAAAm9D,IAAAn9D,EAAAo9D,KAAA,kBAAAqC,IAAAz/D,EAAAy/D,UAfA7C,EAAAkE,aAyBAlE,EAAAuE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAvC,EA5BA,OAkCAjC,EAAAiC,EAAA,GAMAlC,EAAAC,OAMA,IAAAwD,EAAAvB,EAAA,MAMAlC,EAAAyD,QAMA,IAAAtD,EAAA+B,EAAA,GAMAlC,EAAAG,MAMA,IAAAuE,EAAAxC,EAAA,MAMAlC,EAAA0E,OAMA,IAAAC,EAAAzC,GAAA,GAMAlC,EAAA2E,UAMA,IAAApqE,EAAA+lE,GAAA,iBAMAN,EAAAzlE,YAMA,IAAAopE,EAAArD,GAAA,SAMAN,EAAA2D,qBAMA,IAAAx/C,EAAAm8C,EAAA,kBAMAN,EAAA77C,YAMA,IAAAygD,EAAA5E,EAAApoH,UAMAgtH,EAAAC,MAAA,WACA,OAAAlvH,KAAAktH,SAAAltH,KAAA4qH,MAAA,EAAA5qH,KAAA4qH,KAOAqE,EAAAhC,SAAA,WACA,OAAAjtH,KAAAktH,UACAltH,KAAA6qH,OAAA,GAAAsD,GAAAnuH,KAAA4qH,MAAA,GACA5qH,KAAA6qH,KAAAsD,GAAAnuH,KAAA4qH,MAAA,IAUAqE,EAAAjxG,SAAA,SAAAwwG,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SACA,GAAAzuH,KAAAmvH,SACA,UACA,GAAAnvH,KAAAovH,aAAA,CACA,GAAApvH,KAAAosH,GAAA59C,GAAA,CAGA,IAAA6gD,EAAA5C,EAAA+B,GACAvD,EAAAjrH,KAAAirH,IAAAoE,GACAC,EAAArE,EAAAF,IAAAsE,GAAAvE,IAAA9qH,MACA,OAAAirH,EAAAjtG,SAAAwwG,GAAAc,EAAAJ,QAAAlxG,SAAAwwG,GAEA,UAAAxuH,KAAAkuH,MAAAlwG,SAAAwwG,GAQA,IAHA,IAAAE,EAAAjC,EAAA6B,EAAAE,EAAA,GAAAxuH,KAAAktH,UACAqC,EAAAvvH,KACAi2C,EAAA,KACA,CACA,IAAAu5E,EAAAD,EAAAtE,IAAAyD,GAEAe,GADAF,EAAAzE,IAAA0E,EAAAzE,IAAA2D,IAAAQ,UAAA,GACAlxG,SAAAwwG,GAEA,IADAe,EAAAC,GACAL,SACA,OAAAM,EAAAx5E,EAEA,KAAAw5E,EAAA3kH,OAAA,GACA2kH,EAAA,IAAAA,EACAx5E,EAAA,GAAAw5E,EAAAx5E,IASAg5E,EAAAS,YAAA,WACA,OAAA1vH,KAAA6qH,MAOAoE,EAAAU,oBAAA,WACA,OAAA3vH,KAAA6qH,OAAA,GAOAoE,EAAAW,WAAA,WACA,OAAA5vH,KAAA4qH,KAOAqE,EAAAY,mBAAA,WACA,OAAA7vH,KAAA4qH,MAAA,GAOAqE,EAAAa,cAAA,WACA,GAAA9vH,KAAAovH,aACA,OAAApvH,KAAAosH,GAAA59C,GAAA,GAAAxuE,KAAAkuH,MAAA4B,gBAEA,IADA,IAAAriE,EAAA,GAAAztD,KAAA6qH,KAAA7qH,KAAA6qH,KAAA7qH,KAAA4qH,IACAmF,EAAA,GAAsBA,EAAA,GACtB,IAAAtiE,EAAA,GAAAsiE,GAD+BA,KAG/B,UAAA/vH,KAAA6qH,KAAAkF,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAnvH,KAAA6qH,MAAA,IAAA7qH,KAAA4qH,KAOAqE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAApvH,KAAAktH,UAAAltH,KAAA6qH,KAAA,GAOAoE,EAAAgB,WAAA,WACA,OAAAjwH,KAAAktH,UAAAltH,KAAA6qH,MAAA,GAOAoE,EAAAiB,MAAA,WACA,aAAAlwH,KAAA4qH,MAOAqE,EAAAkB,OAAA,WACA,aAAAnwH,KAAA4qH,MAQAqE,EAAAmB,OAAA,SAAApkG,GAGA,OAFAshG,EAAAthG,KACAA,EAAA4iG,EAAA5iG,KACAhsB,KAAAktH,WAAAlhG,EAAAkhG,UAAAltH,KAAA6qH,OAAA,OAAA7+F,EAAA6+F,OAAA,SAEA7qH,KAAA6qH,OAAA7+F,EAAA6+F,MAAA7qH,KAAA4qH,MAAA5+F,EAAA4+F,MASAqE,EAAA7C,GAAA6C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAArkG,GACA,OAAAhsB,KAAAosH,GAAApgG,IASAijG,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA3C,GAAA2C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAvkG,GACA,OAAAhsB,KAAAwwH,KAAAxkG,GAAA,GASAijG,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAA1kG,GACA,OAAAhsB,KAAAwwH,KAAAxkG,IAAA,GASAijG,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAA5kG,GACA,OAAAhsB,KAAAwwH,KAAAxkG,GAAA,GASAijG,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA9kG,GACA,OAAAhsB,KAAAwwH,KAAAxkG,IAAA,GASAijG,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAAhlG,GAGA,GAFAshG,EAAAthG,KACAA,EAAA4iG,EAAA5iG,IACAhsB,KAAAosH,GAAApgG,GACA,SACA,IAAAilG,EAAAjxH,KAAAovH,aACA8B,EAAAllG,EAAAojG,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAlxH,KAAAktH,SAGAlhG,EAAA6+F,OAAA,EAAA7qH,KAAA6qH,OAAA,GAAA7+F,EAAA6+F,OAAA7qH,KAAA6qH,MAAA7+F,EAAA4+F,MAAA,EAAA5qH,KAAA4qH,MAAA,OAFA5qH,KAAA8qH,IAAA9+F,GAAAojG,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAnxH,KAAAktH,UAAAltH,KAAAosH,GAAA59C,GACAA,EACAxuE,KAAAksH,MAAAp6G,IAAA04G,IAQAyE,EAAAf,IAAAe,EAAAkC,OAOAlC,EAAAn9G,IAAA,SAAAs/G,GACA9D,EAAA8D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAArxH,KAAA6qH,OAAA,GACAyG,EAAA,MAAAtxH,KAAA6qH,KACA0G,EAAAvxH,KAAA4qH,MAAA,GACA4G,EAAA,MAAAxxH,KAAA4qH,IAEA6G,EAAAL,EAAAvG,OAAA,GACA6G,EAAA,MAAAN,EAAAvG,KACA8G,EAAAP,EAAAxG,MAAA,GAGAgH,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAxG,QAIA,GAGAiH,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA9G,GANAmH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGA7xH,KAAAktH,WAQA+B,EAAA+C,SAAA,SAAAC,GAGA,OAFA3E,EAAA2E,KACAA,EAAArD,EAAAqD,IACAjyH,KAAA8R,IAAAmgH,EAAA/D,QASAe,EAAAnE,IAAAmE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAnyH,KAAAmvH,SACA,OAAA7E,EAKA,GAJAgD,EAAA6E,KACAA,EAAAvD,EAAAuD,IAGAhF,EAKA,OAAAxC,EAJAwC,EAAApC,IAAA/qH,KAAA4qH,IACA5qH,KAAA6qH,KACAsH,EAAAvH,IACAuH,EAAAtH,MACAsC,EAAAiF,WAAApyH,KAAAktH,UAGA,GAAAiF,EAAAhD,SACA,OAAA7E,EACA,GAAAtqH,KAAAosH,GAAA59C,GACA,OAAA2jD,EAAAjC,QAAA1hD,EAAA87C,EACA,GAAA6H,EAAA/F,GAAA59C,GACA,OAAAxuE,KAAAkwH,QAAA1hD,EAAA87C,EAEA,GAAAtqH,KAAAovH,aACA,OAAA+C,EAAA/C,aACApvH,KAAAkuH,MAAAnD,IAAAoH,EAAAjE,OAEAluH,KAAAkuH,MAAAnD,IAAAoH,GAAAjE,MACK,GAAAiE,EAAA/C,aACL,OAAApvH,KAAA+qH,IAAAoH,EAAAjE,aAGA,GAAAluH,KAAAywH,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAArC,EAAAzsH,KAAAitH,WAAAkF,EAAAlF,WAAAjtH,KAAAktH,UAKA,IAAAmE,EAAArxH,KAAA6qH,OAAA,GACAyG,EAAA,MAAAtxH,KAAA6qH,KACA0G,EAAAvxH,KAAA4qH,MAAA,GACA4G,EAAA,MAAAxxH,KAAA4qH,IAEA6G,EAAAU,EAAAtH,OAAA,GACA6G,EAAA,MAAAS,EAAAtH,KACA8G,EAAAQ,EAAAvH,MAAA,GACAyH,EAAA,MAAAF,EAAAvH,IAEAgH,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA9G,GAZAmH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGA7xH,KAAAktH,WASA+B,EAAAlE,IAAAkE,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAA91G,MAAA,oBAaA,IAWAm5G,EAAAjD,EAAAlG,EArBA,GAAA8D,EAIA,OAAAntH,KAAAktH,WACA,aAAAltH,KAAA6qH,OACA,IAAA0H,EAAA3H,MAAA,IAAA2H,EAAA1H,KAUAF,GANA3qH,KAAAktH,SAAAC,EAAAsF,MAAAtF,EAAAuF,OACA1yH,KAAA4qH,IACA5qH,KAAA6qH,KACA0H,EAAA3H,IACA2H,EAAA1H,MAEAsC,EAAAiF,WAAApyH,KAAAktH,UARAltH,KAWA,GAAAA,KAAAmvH,SACA,OAAAnvH,KAAAktH,SAAAY,EAAAxD,EAEA,GAAAtqH,KAAAktH,SA6BK,CAKL,GAFAqF,EAAArF,WACAqF,IAAApH,cACAoH,EAAA1B,GAAA7wH,MACA,OAAA8tH,EACA,GAAAyE,EAAA1B,GAAA7wH,KAAAgsH,KAAA,IACA,OAAA+C,EACA1F,EAAAyE,MAtCA,CAGA,GAAA9tH,KAAAosH,GAAA59C,GACA,OAAA+jD,EAAAnG,GAAA5B,IAAA+H,EAAAnG,GAAA4C,GACAxgD,EACA+jD,EAAAnG,GAAA59C,GACAg8C,GAIAgI,EADAxyH,KAAA+rH,IAAA,GACAd,IAAAsH,GAAA1G,IAAA,IACAO,GAAA9B,GACAiI,EAAAnD,aAAA5E,EAAAwE,GAEAO,EAAAvvH,KAAA8qH,IAAAyH,EAAAxH,IAAAyH,IACAnJ,EAAAmJ,EAAA1gH,IAAAy9G,EAAAtE,IAAAsH,KAIS,GAAAA,EAAAnG,GAAA59C,GACT,OAAAxuE,KAAAktH,SAAAY,EAAAxD,EACA,GAAAtqH,KAAAovH,aACA,OAAAmD,EAAAnD,aACApvH,KAAAkuH,MAAAjD,IAAAsH,EAAArE,OACAluH,KAAAkuH,MAAAjD,IAAAsH,GAAArE,MACS,GAAAqE,EAAAnD,aACT,OAAApvH,KAAAirH,IAAAsH,EAAArE,aACA7E,EAAAiB,EAmBA,IADAiF,EAAAvvH,KACAuvH,EAAA3C,IAAA2F,IAAA,CAGAC,EAAAjrH,KAAA4jE,IAAA,EAAA5jE,KAAAgoF,MAAAggC,EAAAtC,WAAAsF,EAAAtF,aAWA,IAPA,IAAA0F,EAAAprH,KAAAorD,KAAAprD,KAAAqrH,IAAAJ,GAAAjrH,KAAAsrH,KACAC,EAAAH,GAAA,KAAArE,EAAA,EAAAqE,EAAA,IAIAI,EAAAtG,EAAA+F,GACAQ,EAAAD,EAAAhI,IAAAwH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAAtG,EADA+F,GAAAM,EACA9yH,KAAAktH,WACAnC,IAAAwH,GAKAQ,EAAA5D,WACA4D,EAAAvI,GAEAnB,IAAAv3G,IAAAihH,GACAxD,IAAAzE,IAAAkI,GAEA,OAAA3J,GASA4F,EAAAhE,IAAAgE,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IAGApF,EAOAxC,GANA3qH,KAAAktH,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACAnzH,KAAA4qH,IACA5qH,KAAA6qH,KACA0H,EAAA3H,IACA2H,EAAA1H,MAEAsC,EAAAiF,WAAApyH,KAAAktH,UAGAltH,KAAA8qH,IAAA9qH,KAAAirH,IAAAsH,GAAAxH,IAAAwH,KASAtD,EAAA3mH,IAAA2mH,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA/C,IAAA,WACA,OAAAvB,GAAA3qH,KAAA4qH,KAAA5qH,KAAA6qH,KAAA7qH,KAAAktH,WAQA+B,EAAAzD,IAAA,SAAAx/F,GAGA,OAFAshG,EAAAthG,KACAA,EAAA4iG,EAAA5iG,IACA2+F,EAAA3qH,KAAA4qH,IAAA5+F,EAAA4+F,IAAA5qH,KAAA6qH,KAAA7+F,EAAA6+F,KAAA7qH,KAAAktH,WAQA+B,EAAAvD,GAAA,SAAA1/F,GAGA,OAFAshG,EAAAthG,KACAA,EAAA4iG,EAAA5iG,IACA2+F,EAAA3qH,KAAA4qH,IAAA5+F,EAAA4+F,IAAA5qH,KAAA6qH,KAAA7+F,EAAA6+F,KAAA7qH,KAAAktH,WAQA+B,EAAArD,IAAA,SAAA5/F,GAGA,OAFAshG,EAAAthG,KACAA,EAAA4iG,EAAA5iG,IACA2+F,EAAA3qH,KAAA4qH,IAAA5+F,EAAA4+F,IAAA5qH,KAAA6qH,KAAA7+F,EAAA6+F,KAAA7qH,KAAAktH,WAQA+B,EAAAmE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACArzH,KACAqzH,EAAA,GACA1I,EAAA3qH,KAAA4qH,KAAAyI,EAAArzH,KAAA6qH,MAAAwI,EAAArzH,KAAA4qH,MAAA,GAAAyI,EAAArzH,KAAAktH,UAEAvC,EAAA,EAAA3qH,KAAA4qH,KAAAyI,EAAA,GAAArzH,KAAAktH,WASA+B,EAAApD,IAAAoD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACArzH,KACAqzH,EAAA,GACA1I,EAAA3qH,KAAA4qH,MAAAyI,EAAArzH,KAAA6qH,MAAA,GAAAwI,EAAArzH,KAAA6qH,MAAAwI,EAAArzH,KAAAktH,UAEAvC,EAAA3qH,KAAA6qH,MAAAwI,EAAA,GAAArzH,KAAA6qH,MAAA,OAAA7qH,KAAAktH,WASA+B,EAAAlD,IAAAkD,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAArzH,KAEA,IAAA6qH,EAAA7qH,KAAA6qH,KACA,OAAAwI,EAAA,GAEA1I,EADA3qH,KAAA4qH,MACAyI,EAAAxI,GAAA,GAAAwI,EAAAxI,IAAAwI,EAAArzH,KAAAktH,UAEAvC,EADS,KAAA0I,EACTxI,EAEAA,IAAAwI,EAAA,GAFA,EAAArzH,KAAAktH,WAYA+B,EAAAjD,KAAAiD,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAA7D,SAAA,WACA,OAAAprH,KAAAktH,SAEAvC,EAAA3qH,KAAA4qH,IAAA5qH,KAAA6qH,MAAA,GADA7qH,MAQAivH,EAAA9D,WAAA,WACA,OAAAnrH,KAAAktH,SACAltH,KACA2qH,EAAA3qH,KAAA4qH,IAAA5qH,KAAA6qH,MAAA,IAQAoE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAA3wH,KAAA0zH,YAAA1zH,KAAA2zH,aAOA1E,EAAAyE,UAAA,WACA,IAAAhJ,EAAA1qH,KAAA6qH,KACAJ,EAAAzqH,KAAA4qH,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAuE,EAAA0E,UAAA,WACA,IAAAjJ,EAAA1qH,KAAA6qH,KACAJ,EAAAzqH,KAAA4qH,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAJ,EAAAuJ,UAAA,SAAAz8E,EAAA+1E,EAAAyD,GACA,OAAAA,EAAAtG,EAAAwJ,YAAA18E,EAAA+1E,GAAA7C,EAAAyJ,YAAA38E,EAAA+1E,IASA7C,EAAAwJ,YAAA,SAAA18E,EAAA+1E,GACA,WAAA7C,EACAlzE,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACA+1E,IAUA7C,EAAAyJ,YAAA,SAAA38E,EAAA+1E,GACA,WAAA7C,EACAlzE,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACA+1E,mFCryCA,SAAkBhkH,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,6BAEAA,IAAA,eAEAA,IAAA,sBAZF,CAAkBxJ,EAAAwJ,UAAAxJ,EAAAwJ,QAAO,oFCAzB,SAAYE,GAEVA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,WANF,CAAY1J,EAAA0J,SAAA1J,EAAA0J,OAAM,qbCalB,IAAAE,EAAA,oBAAAA,KAKA,OALaA,EAAQyqH,EAAA,CADpBC,WACY1qH,GAAb,GAAa5J,EAAA4J,WAQb,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,sBAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,sCAEAA,IAAA,oCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,+BAEAA,IAAA,qCAEAA,IAAA,mCAhDF,CAAkB7J,EAAA6J,gBAAA7J,EAAA6J,cAAa,oVClB/B,IAAA8iF,EAAAlsF,EAAA,IACA8zH,EAAA9zH,EAAA,IACA+zH,EAAA/zH,EAAA,IACAuJ,EAAAvJ,EAAA,GA4BoCT,EAAAy0H,iBA5BYzqH,EAAA0lB,wBAEhD,IAAAglG,EAAAj0H,EAAA,IAIAT,EAAA89G,UAAA,SAA0B3nG,EAAc+L,EAAclH,EACpD25G,GAIA,YALoD,IAAA35G,OAAA,QACpD,IAAA25G,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAlX,QAC1BmX,EAAO7W,UAAU3nG,EAAM+L,EAAMlH,GACtB25G,GAIT30H,EAAA2/G,SAAA,SAAyBgV,GACvB,OAAOA,EAAOhV,YAIhB3/G,EAAA40H,eAAA,SAA+BD,GAC7B,IAAIxxG,EAAUwxG,EAAOxxG,QACrB,OAAOA,EAAQlV,kBAAoBkV,EAAQrV,YAAY1C,OACnD+X,EAAQrV,YAAYqV,EAAQlV,qBAC5B,MAONjO,EAAA60H,OAAA,SAAuBrmG,GACrB,OAAOA,EAAQZ,UAAY5jB,EAAAwjB,mBAAmBK,MAIhD7tB,EAAA80H,UAAA,SAA0BtmG,GACxB,OAAOA,EAAQZ,UAAY5jB,EAAAwjB,mBAAmBM,SAIhD9tB,EAAA+0H,QAAA,SAAwBvmG,GACtB,OAAOA,EAAQZ,UAAY5jB,EAAAwjB,mBAAmBO,OAIhD/tB,EAAAg1H,cAAA,WACE,OAAO,IAAIroC,EAAArd,SAIbtvE,EAAAi1H,UAAA,SAA0BnjH,EAAkBoZ,GAC1CpZ,EAAQoZ,OAASA,GAInBlrB,EAAAk1H,YAAA,SAA4BpjH,EAAkBiB,GAC5CjB,EAAQiB,SAAWA,GAIrB/S,EAAAm1H,gBAAA,SAAgCrjH,EAAkBy9D,GAChDz9D,EAAQy9D,aAAeA,GAIzBvvE,EAAAo1H,gBAAA,SAAgCtjH,EAAkB09D,GAChD19D,EAAQ09D,aAAeA,GAIzBxvE,EAAAq1H,eAAA,SAA+BvjH,EAAkB29D,GAC/C39D,EAAQ29D,YAAcA,GAIxBzvE,EAAAs1H,aAAA,SAA6BxjH,EAAkBuW,GAC7CvW,EAAQuW,UAAYA,GAItBroB,EAAAu1H,cAAA,SAA8BzjH,EAAkBkB,GAC9ClB,EAAQkB,WAAaA,GAIvBhT,EAAAw1H,eAAA,SAA+B1jH,EAAkB0H,EAAetY,GAC9D,IAAIkY,EAAgBtH,EAAQsH,cACvBA,IAAetH,EAAQsH,cAAgBA,EAAgB,IAAI1R,KAChE0R,EAAcpK,IAAIwK,EAAOtY,IAI3BlB,EAAAy1H,iBAAA,SAAiC3jH,EAAkB49D,GACjD59D,EAAQ49D,cAAgBA,GAIb1vE,EAAA01H,uBAAsB,EAEtB11H,EAAA21H,uBAAsB,EAEtB31H,EAAA41H,oBAAmB,EAEnB51H,EAAA61H,aAAY,EAEZ71H,EAAA81H,gBAAe,GAG5B91H,EAAA+1H,cAAA,SAA8BjkH,EAAkB89D,GAC9C99D,EAAQ69D,UAAYC,GAItB5vE,EAAAg2H,sBAAA,SAAsClkH,EAAkBmkH,EAAoBC,GAC1EpkH,EAAQmB,kBAAoBgjH,EAC5BnkH,EAAQoB,gBAAkBgjH,GAI5Bl2H,EAAAm2H,cAAA,SAA8BxB,GAC5B,OAAOA,EAAO7zD,UAIhB9gE,EAAAo2H,eAAA,SAA+BjzG,EAAkBrR,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAI66E,EAAA1c,SAAS9sD,EAASrR,GAASu/D,WAIxCrxE,EAAAq2H,gBAAA,SAAgCp2H,GAC9B,IAAI+6G,EAAa,IAAIuZ,EAAA1Z,WAErB,OADAG,EAAWD,UAAU96G,GACd+6G,EAAWl6C,UAIpB9gE,EAAAs2H,SAAA,SAAyBnzG,GACvB,OAAOqxG,EAAA9X,WAAWE,MAAMz5F,IAI1BnjB,EAAAu2H,SAAA,SAAyBpzG,GACvB,OAAOqxG,EAAAvX,WAAWL,MAAMz5F,IAI1BnjB,EAAAw2H,UAAA,SAA0BrzG,mBACpBsM,EAAK,IAAIloB,MACbkoB,EAAG5Q,KAAK,yBACR,IAAgB,IAAAjD,EAAA1G,EAAAiO,EAAQ5U,eAAeuM,UAAQwB,EAAAV,EAAAxG,QAAAkH,EAAAjH,KAAAiH,EAAAV,EAAAxG,OAAE,CAA5C,IAAIqhH,EAAGn6G,EAAA1a,MACV6tB,EAAG5Q,KAAK,SACR4Q,EAAG5Q,KAAK43G,EAAIxnH,cACZwgB,EAAG5Q,KAAK,0GAEV4Q,EAAG5Q,KAAK,2BACR,IAAgB,IAAAtC,EAAArH,EAAAiO,EAAQ5U,eAAeuM,UAAQxF,EAAAiH,EAAAnH,QAAAE,EAAAD,KAAAC,EAAAiH,EAAAnH,OAAE,CAA5C,IACC2U,GADG0sG,EAAGnhH,EAAA1T,OACKmoB,KACf0F,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAKkL,EAAOA,EAAK9Z,GAAGqO,WAAa,KACpCmR,EAAG5Q,KAAK,yGAEV4Q,EAAG5Q,KAAK,4BACR,IAAgB,IAAApI,EAAAvB,EAAAiO,EAAQ5U,eAAeuM,UAAQjE,EAAAJ,EAAArB,QAAAyB,EAAAxB,KAAAwB,EAAAJ,EAAArB,OAAtCqhH,EAAG5/G,EAAAjV,MACV6tB,EAAG5Q,KAAK,QACR4Q,EAAG5Q,KAAK43G,EAAIpsG,UAAU/L,YACtBmR,EAAG5Q,KAAK,wGAGV,OADA4Q,EAAG5Q,KAAK,YACD4Q,EAAGvW,KAAK,KAIjB,IAAAnP,EAAAtJ,EAAA,GAAST,EAAAoD,eAAA2G,EAAA3G,eAGTiqB,EAAA5sB,EAAA,IAEA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,KACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,IACA4sB,EAAA5sB,EAAA,mFCrMAT,EAAA02H,SAAA,SAAyBC,EAAUpxG,GAEjC,OADApa,OAAOoa,GAAS,GAAKA,EAAQ,IACtBonG,OACLd,QACE8K,EACAj3D,QACEmrD,QACAl4G,QAAQ4S,KAGZggD,WAKJvlE,EAAA42H,UAAA,SAA0BD,EAAUpxG,EAAYsxG,GAE9C,OADA1rH,OAAOoa,GAAS,GAAKA,EAAQ,IACtBsxG,EACH9K,OACE4K,EACAj3D,QACEmrD,QACAl4G,QAAQ4S,KAGZsmG,QACE8K,EACApK,QACE7sD,QACEmrD,QACAl4G,QAAQ4S,sFC9BpB,SAAkBuxG,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkB92H,EAAA82H,WAAA92H,EAAA82H,SAAQ,KAuI1B92H,EAAAwvB,YAAA,SAA4BxuB,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAm9D,aAAA,SAA6Bn8D,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAy7D,eAAA,SAA+Bz6D,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAo/D,aAAA,SAA6Bp+D,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA48D,kBAAA,SAAkC57D,GAChC,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAmLqButB,EAnLYvtB,GAoL9B,GAAKutB,EAAO,QACnBwoG,EAAmBxoG,EAAayoG,GAFzC,IAAkCzoG,GA/KlCvuB,EAAA68D,mBAAA,SAAmC77D,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAA+8D,iBAAA,SAAiC/7D,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAyKoButB,EAzKYvtB,GA0K7B,GAAKutB,EAAO,QACnBwoG,EAAmBxoG,EAAa0oG,GAFzC,IAAiC1oG,GArKjC,IAAMyoG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO: not yet supported\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      // console.log(<string>new Error(\"stack\").stack);\n      // throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.FUNCTIONTYPE) {\n      let explicitThisType = (<FunctionTypeNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<FunctionTypeNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.NAMEDTYPE);\n    var typeNode = <NamedTypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var isSimpleType = !typeName.next;\n\n    // look up in contextual type arguments if a simple type\n    if (isSimpleType) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle built-in types\n      if (isSimpleType) {\n        switch (typeName.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(typeNode, context, contextualTypeArguments, reportMode);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n\n          // }\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                propertyAccess.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    // try {\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // } catch (exception) {\n    //   console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n    //   throw exception;\n    // }\n\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.i32(reportNode.range.line),\n        // module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  NamedTypeNode\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element){\n      element = this.program.elementsByName.get(internalName);\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: TypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <NamedTypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.functionTypeNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.functionTypeNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: TypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <NamedTypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeDeclaration,\n    NamedTypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: NamedTypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: NamedTypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <NamedTypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type != null && type.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  // signbit: {\n  //   value: function signbit(x) {\n  //     F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n  //   }\n  // },\n  // sincos: {\n  //   value: function sincos(x) {\n  //     this.sincos_sin = Math.sin(x);\n  //     this.sincos_cos = Math.cos(x);\n  //   }\n  // }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    NamedTypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line - 2;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: NamedTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: TypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <NamedTypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <NamedTypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n"],"sourceRoot":""}