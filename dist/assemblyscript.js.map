{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","diagnostics","super","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY_ENTRY","nativeFile","File","set","internalName","resolver","Resolver","AbiInfo","internalPath","source","text","buffer","offset","classInstance","payloadSize","writeI32","id","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","identifier","createTypeDeclaration","createOmittedType","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","createNamespaceDeclaration","signature","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","declaration","has","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","alias","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","values","sourceKind","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","typeArguments","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","type","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","decorators","acceptedFlags","decorator","fromNode","flag","fromKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","checkDecorators","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","UNSAFE","AMBIENT","EXTERNAL","STATIC","INTERFACE_PROTOTYPE","LAZY","READONLY","INLINE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","normalizedPath","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","x","NULL","TRUE","FALSE","typeName","TypeName","next","createTypeName","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","defaultType","elem","TypeParameterNode","ParameterNode","parameterKind","args","stmt","DecoratorNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","ClassExpression","expressions","CommaExpression","ConstructorExpression","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","BlockStatement","label","BreakStatement","ClassDeclaration","ContinueStatement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","NAMEDTYPE","typeArgumentNodes","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameNode","IDENTIFIER","nameStr","PROPERTYACCESS","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numArguments","COMMA","ELEMENTACCESS","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","exportPaths","pos","lastIndexOf","simplePath","LIBRARY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","withRange","console","log","stack","emitDiagnostic","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","result","paramTypes","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","load","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","ftype","_BinaryenFunctionTypeGetName","_BinaryenFunctionTypeGetNumParams","_BinaryenFunctionTypeGetParam","_BinaryenFunctionTypeGetResult","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","funcType","addEvent","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","Auto","declareType","isArrayType","bracketIndex","indexOf","endIndex","impledInterface","impledSerializable","classDeclaration","interfaceName","_type","tempClz","interfaces","implTypes","AbiTypeEnum","isString","isMapType","MAP","findElement","AbiHelper","abiTypeLookup","NUMBER","abiTypeEnum","getArgs","findSourceAsElement","findSourceAsTypeName","abiType","isArrayMap","argType","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","findSourceAbiType","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","StructDef","fields","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","proposals","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","typeNodeAnalyzer","asTypes","getAsTypes","asType","getStructFromClzPrototype","haveSpecifyDecorator","ACTION","clsProto","DATABASE","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","getInternalName","ele","struct","addFieldsFromClassPrototype","fieldDeclare","memberType","IGNORE","TypeNodeAnalyzer","getAbiDeclareType","addField","addAbiTypeAlias","addToStruct","clzPrototype","extendedContract","hasActionDecorators","contractName","contractVarName","isActionFnPrototype","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","getArrayArgAbiTypeEnum","argTypeName","getArrayArg","rtnNodeAnly","isClassPrototype","impledReturnable","resolveDatabaseDecorator","impledInterfaces","funcPrototype","decoratorNode","getSpecifyDecorator","isValidAbility","parameter","typeInfo","getActionAbility","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","resolveClassDispatcher","addAll","dispatch","assemblyDispatch","getContent","undefined","beginChar","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","row","Decompiler","functionId","decompiler","decompile","finish","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","toText","binaryen","wrapModule","emitStackIR","toAsmjs","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","parser","parseFile","nextFile","getDependee","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","readI32","readI64","valueI64","insertCode","insertPoints","insertPoint","insertPointArr","_","descComparator","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","fnName","hasImpl","Verify","verify","serializePoint","SerializePoint","countOfPkDecorator","serialize","increase","deserialize","fieldDeclaration","checkSerializable","serializeField","deserializeField","PRIMARYID","isPrimaryType","primaryKey","getDeclareType","serializeClassname","getSerializePoint","indentity"],"mappings":"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CX,KAAK1oB,EAAMijD,GACX,KAAKjjD,EAAMkjD,MACX,KAAKljD,EAAMojD,OACX,KAAKpjD,EAAMoX,UACX,KAAKpX,EAAMgf,KACX,KAAKhf,EAAM2S,SACX,KAAK3S,EAAMiS,IACX,KAAKjS,EAAM0jD,KACX,KAAK1jD,EAAMgrB,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYhrB,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYiiD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4C3uD,GAE1C,OADAiK,OAAOjK,EAAKkK,QACJlK,EAAKsK,WAAW,IACtB,KAAK,IAAY,MAAe,UAARtK,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,M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,EAAArE,aAAayhB,GAASx0C,EAAU56B,IAGxD,OAAO1c,EAAO0uE,MAAM,KAAMuF,EACxBv3D,GAAQ,EAAAqe,WAAWgxD,KACf,EAAA/lB,kBAAkBiO,EAAM9oE,EAAS,IACjCuR,GAhBR,a,8ECh+RA,SAAYvF,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCuiB,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MA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CACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bz+H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqB24B,EAnLY34B,GAoL9B,GAAK24B,EAAO,QACnB+lG,EAAmB/lG,EAAagmG,IAFzC,IAAkChmG,GA/KlC,8BAAmC34B,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB24B,EAzKY34B,GA0K7B,GAAK24B,EAAO,QACnB+lG,EAAmB/lG,EAAaimG,IAFzC,IAAiCjmG,GArKjC,MAAMgmG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmB/lG,EAAW4lG,GACrC,GAAI5lG,EAAO4lG,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIM,EACAC,EAHA9K,EAAK,EACLC,EAAKsK,EAAIn0H,OAIN4pH,EAAK,EAAIC,GAAI,CAIlB,GAHA4K,EAAM7K,GAAOC,EAAKD,GAAO,IAEzB8K,EAASP,EADTM,GAAc,EAANA,KAEMlmG,GAAQA,GAAQ4lG,EAAIM,EAAM,GACtC,OAAO,EAELlmG,EAAOmmG,EACT7K,EAAK4K,EAEL7K,EAAK6K,EAAM,EAGf,OAAO,I,8EC9WT,qBAA6B18G,EAA4B,MACvD,GAAIA,EAAU,CACZ,IAAI48G,EAAS,IAAIj4H,MAASqb,EAAS/X,QACnC,IAAK,IAAIzK,EAAI,EAAGyU,EAAI+N,EAAS/X,OAAQzK,EAAIyU,IAAKzU,EAAGqqB,UAAU+0G,EAAOp/H,GAAKwiB,EAASxiB,IAChF,OAAOo/H,EAET,OAAO,IAAIj4H,OAGb,mBAA2Bqb,EAA0B,MACnD,GAAIA,EAAU,CACZ,IAAI48G,EAAS,IAAI/3H,IACjB,IAAK,IAAIg4H,KAAK78G,EAAU48G,EAAOhsH,IAAIisH,GACnC,OAAOD,EAET,OAAO,IAAI/3H,KAGb,mBAA6Bmb,EAA4B,KAAM88G,EAA6B,MAC1F,IAAIF,EAAS,IAAI93H,IACjB,GAAIkb,EAAU,CACZ,IAAK,IAAK/N,EAAG4qH,KAAM78G,EAAU48G,EAAO1uH,IAAI+D,EAAG4qH,GAC3C,GAAIC,EAAW,IAAK,IAAK7qH,EAAG4qH,KAAMC,EAAWF,EAAO1uH,IAAI+D,EAAG4qH,QACtD,GAAIC,EACT,IAAK,IAAK7qH,EAAG4qH,KAAMC,EAAWF,EAAO1uH,IAAI+D,EAAG4qH,GAE9C,OAAOD,I,8ECpBT,aAIMG,EAAY,GAMlB,SAAgBnuG,EAAcrP,GAK5B,IAJA,IAiBIy4C,EAjBA/jC,EAAM,EACNmD,EAAM7X,EAAKtX,OAGRgsB,EAAM,EAAImD,GACS,IAAxB7X,EAAKlX,WAAW4rB,IAChB1U,EAAKlX,WAAW4rB,EAAM,IAAM8oG,GAE5B9oG,GAAO,EAUT,KAPIA,EAAM,GAAKmD,EAAM7X,EAAKtX,UACxBsX,EAAOA,EAAKD,UAAU2U,EAAKmD,GAC3BA,GAAOnD,EACPA,EAAM,GAIDA,EAAM,EAAImD,GAAK,CAIpB,GAHA4gC,GAAQ,EAINz4C,EAAKlX,WAAW4rB,IAAQ8oG,GACI,IAA5Bx9G,EAAKlX,WAAW4rB,EAAM,GACtB,CAGA,IADA+jC,EAAQ/jC,EAAM,GAAKmD,IAEjBnD,EAAM,EAAImD,GACV7X,EAAKlX,WAAW4rB,EAAM,IAAM8oG,EAC5B,CACAx9G,EAAOy4C,EACHz4C,EAAKD,UAAU,EAAG2U,GAClB1U,EAAKD,UAAU,EAAG2U,GAAO1U,EAAKD,UAAU2U,EAAM,GAClDmD,GAAO,EACP,SAKF,IADA4gC,EAAQ/jC,EAAM,GAAKmD,IACsB,IAA5B7X,EAAKlX,WAAW4rB,EAAM,IACjCA,EAAM,EAAImD,GACkB,IAA5B7X,EAAKlX,WAAW4rB,EAAM,IACtB1U,EAAKlX,WAAW4rB,EAAM,IAAM8oG,EAC5B,CAEA,IAAIC,EAAO/oG,EACX,OAAS+oG,GAAQ,GACf,GAAIz9G,EAAKlX,WAAW20H,IAASD,EAAW,CAClC9oG,EAAM+oG,GAAQ,GACa,IAA7Bz9G,EAAKlX,WAAW20H,EAAO,IACM,IAA7Bz9G,EAAKlX,WAAW20H,EAAO,KAEvBz9G,EAAOy4C,EACHz4C,EAAKD,UAAU,EAAG09G,GAClBz9G,EAAKD,UAAU,EAAG09G,GAAQz9G,EAAKD,UAAU2U,EAAM,GACnDmD,GAAOnD,EAAM,EAAI+oG,EACjB/oG,EAAM+oG,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAK/oG,EAAM,IACT,GAAPA,GACoB,IAAtB1U,EAAKlX,WAAW,IACM,IAAtBkX,EAAKlX,WAAW,IAChB,CAEA+uB,GADA7X,EAAOA,EAAKD,UAAU2U,EAAM,IACjBhsB,OACX,WAKRgsB,IAEF,OAAOmD,EAAM,EAAI7X,EAAO,IAc1B,SAAgB09G,EAAQj8G,GACtB,IAAIiT,EAAMjT,EAAe/Y,OACzB,GAAIgsB,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIjT,EAAe3Y,WAAW,IAAM00H,EAClC,OAAO/7G,EAGX,OAASiT,EAAM,GACb,GAAIjT,EAAe3Y,WAAW4rB,IAAQ8oG,EACpC,OAAO/7G,EAAe1B,UAAU,EAAG2U,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BjT,EAAwBk8G,GAClD,OAAIl8G,EAAe6N,WAAW,QACrB7N,EAEF4N,EACLquG,EAAQC,GAAU,EAAAz9H,eAAiBuhB,IAKvC,a,8EC5GA,MAAM06F,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB,kBAAuB1kF,EAAc6jB,GACnC,KAAOA,GAAS,GACd7jB,EAAGjb,KAAK2/F,GACR7gE,GAAS,EAEPA,GAAS,IACX7jB,EAAGjb,KAAK0/F,GACR5gE,GAAS,GAEPA,GACF7jB,EAAGjb,KAAKy/F,K,6BCQZ,SAAgByhB,EAAQzuH,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAASrQ,EAAYiQ,EAAoBC,GACvDD,EAAOC,GAAclQ,EACrBiQ,EAAOC,EAAS,GAAKlQ,IAAU,EAC/BiQ,EAAOC,EAAS,GAAKlQ,IAAU,GAC/BiQ,EAAOC,EAAS,GAAKlQ,IAAU,GAIjC,SAAgB2+H,EAAQ1uH,EAAoBC,GAC1C,IAAIkjH,EAAKsL,EAAQzuH,EAAQC,GACrBmjH,EAAKqL,EAAQzuH,EAAQC,EAAS,GAClC,OAAOyC,QAAQygH,EAAIC,G,iDAzCrB,kBAAuBpjH,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB,mBAAwBlQ,EAAYiQ,EAAoBC,GACtDD,EAAOC,GAAUlQ,GAInB,mBAAwBiQ,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B,oBAAyBlQ,EAAYiQ,EAAoBC,GACvDD,EAAOC,GAAclQ,EACrBiQ,EAAOC,EAAS,GAAKlQ,IAAU,GAIjC,YAQA,aAQA,YAOA,oBAAyBA,EAAYiQ,EAAoBC,GACvDG,EAASqrC,QAAQ17C,GAAQiQ,EAAQC,GACjCG,EAASsrC,SAAS37C,GAAQiQ,EAAQC,EAAS,IAI7C,mBAAwBD,EAAoBC,GAC1C,OAAO2iH,WAAW6L,EAAQzuH,EAAQC,KAIpC,oBAAyBlQ,EAAYiQ,EAAoBC,GACvDG,EAASuiH,WAAW5yH,GAAQiQ,EAAQC,IAItC,mBAAwBD,EAAoBC,GAC1C,OAAO6iH,WAAW4L,EAAQ1uH,EAAQC,KAIpC,oBAAyBlQ,EAAYiQ,EAAoBC,GACvD,IAAI0uH,EAAW9L,WAAW9yH,GAC1BqQ,EAASqrC,QAAQkjF,GAAW3uH,EAAQC,GACpCG,EAASsrC,SAASijF,GAAW3uH,EAAQC,EAAS,K,8ECpEhD,aASA,OAkBA,QAUA,QAKA,MAAaisG,EA8BT,YAAY1rG,EAAcouH,EAAqB,IAC3CngI,KAAK+R,MAAQA,EACb/R,KAAKmgI,WAAaA,EAClBngI,KAAKq5B,KAAO,GAvBhB,mBAAmB+mG,GAEf,IAAInB,EAAM,IAAIt3H,IACd,IAAK,IAAI04H,KAAeD,EAAc,CAClC,IAAIv8G,EAAiBw8G,EAAYx8G,eAC7By8G,EAAiDrB,EAAI/9H,IAAI2iB,GAExDy8G,IACDA,EAAiB,IAAI94H,MACrBy3H,EAAIluH,IAAI8S,EAAgBy8G,IAE5BA,EAAexhH,KAAKuhH,GAGxB,IAAK,IAAKE,EAAGtlH,KAAWgkH,EACpBhkH,EAAOs4G,KAAK9V,EAAY+iB,gBAE5B,OAAOvB,EASX,WACI,OAA6B,GAArBj/H,KAAK+R,MAAMwW,OAAevoB,KAAK+R,MAAM8oD,MAAMvyC,KAAO,EAAItoB,KAAK+R,MAAM8oD,MAAMvyC,KAAO,EAE1F,qBACI,OAAOtoB,KAAK+R,MAAMV,OAAOwS,eAG7B,gBACI,OAAO7jB,KAAK+R,MAAMV,OAAOwS,eAAiB7jB,KAAK+R,MAAMqM,WAGzD,WACI,OAAOpe,KAAK+R,MAAMqM,WAGtB,cAAcib,GACVr5B,KAAKq5B,KAAKva,KAAKua,GAGnB,WACI,OAAOr5B,KAAKmgI,YAxDpB,gBAMmB,EAAAK,eAAiB,CAAC5mF,EAAgBC,IACrCA,EAAEvxB,KAAOsxB,EAAEtxB,KAwD3B,MAAMm4G,EAcF,YAAYhgH,GAZZ,KAAAigH,sBAAgC,YAChC,KAAAC,wBAAkC,cAClC,KAAAC,oBAA8B,aAItB,KAAAC,eAAyB,EAEzB,KAAAC,iBAA2B,EAE3B,KAAAC,eAAyB,EAG7B/gI,KAAKygB,eAAiBA,EACtBzgB,KAAK+sE,aAGD,WACJ,OAAO/sE,KAAK8gI,iBAAmB9gI,KAAK6gI,eAAiB7gI,KAAK+gI,cAGtD,aACJ,GAAI/gI,KAAKygB,eAAe9E,gBACpB,IAAK,IAAK4kH,EAAGtpH,KAAYjX,KAAKygB,eAAe9E,gBACzC,GAAI1E,EAAQ9B,MAAQ,EAAA3K,YAAY+Q,mBAAoB,CAChD,IACIylH,EADiC/pH,EACZhE,YAAYrS,KAAKmR,MAAMqM,WAC5C4iH,GAAUhhI,KAAK0gI,wBACf1gI,KAAK6gI,eAAgB,GAErBG,GAAUhhI,KAAK2gI,0BACf3gI,KAAK8gI,iBAAkB,GAEvBE,GAAUhhI,KAAK4gI,sBACf5gI,KAAK+gI,eAAgB,IAOzC,kBAAkBloE,GACd,IAAI7nD,EAAe,EAAA2rE,QAAQo+B,gBAAgBliD,GACvC5hD,EAA+BjX,KAAKygB,eAAeyC,QAAQlT,eAAe9O,IAAI8P,GAGlF,GAAIiG,GAAWA,EAAQ9B,MAAQ,EAAA3K,YAAY2N,gBAAiB,CACxD,IAAI8oH,EAAU,EAAAtkD,QAAQsP,mBAAoCh1E,GAC1D,EAAAiqH,OAAOC,OAAOF,EAAS,SAASjwH,mDAKxC,oBACI,IAAKhR,KAAKkd,WACN,OAAO,KAEX,IAAIkkH,EAAiC,IAAIC,EAAerhI,KAAKygB,eAAexN,YAAYlB,OAMxF,GALAqvH,EAAel1C,iBAAqClsF,KAAKygB,eAAexN,YACxEmuH,EAAeN,gBAAkB9gI,KAAK8gI,gBACtCM,EAAeP,cAAgB7gI,KAAK6gI,cACpCO,EAAeL,cAAgB/gI,KAAK+gI,eAE/B/gI,KAAKygB,eAAe9E,gBACrB,OAAO,KAEX,IAAI2lH,EAAyB,EACzB,EAAA3kD,QAAQsP,mBAAmBjsF,KAAKygB,eAAevH,iBAC/CkoH,EAAeG,UAAUC,WAAW/tH,IAAI,wBACxC2tH,EAAeK,YAAYD,WAAW/tH,IAAI,2BAE9C,IAAK,IAAKoX,EAAW5T,KAAYjX,KAAKygB,eAAe9E,gBACjD,GAAI1E,EAAQ9B,MAAQ,EAAA3K,YAAYme,gBAAiB,CAC7C,IACI+4G,EADiDzqH,EACqBhE,YACtE8rD,EAA8B2iE,EAAiBrlH,KAEnD,GAAI0iD,GAAcA,EAAW5pD,MAAQ,EAAAC,SAAS6e,YACzC,EAAA0oD,QAAQy9B,qBAAqBsnB,EAAkB,EAAA32H,cAAcswG,QAAS,CACvE,IAAIxiD,EAA0BkG,EAC1B/+D,KAAK6gI,gBACL7gI,KAAK2hI,kBAAiC5iE,GACtCqiE,EAAeG,UAAUxjB,OAAO/9G,KAAK4hI,eAAe/2G,EAAWguC,KAE/D74D,KAAK8gI,kBACL9gI,KAAK2hI,kBAAiC5iE,GACtCqiE,EAAeK,YAAY1jB,OAAO/9G,KAAK6hI,iBAAiBh3G,EAAWguC,KAI3E,GAAIkG,GAAcA,EAAW5pD,MAAQ,EAAAC,SAAS6e,WAAa,EAAA0oD,QAAQy9B,qBAAqBsnB,EAAkB,EAAA32H,cAAc+2H,WAAY,CAIhI,GAHAR,IACA,EAAAJ,OAAOC,OAAOG,GAAsB,EAAG,SAASthI,KAAKygB,eAAe7f,yDAC3B,IAAI,EAAA06G,iBAAiBt7G,KAAKygB,eAAgCs+C,GAC7EgjE,gBAClB,MAAM,IAAIp5H,MAAM,SAAS3I,KAAKygB,eAAe7f,eAAeiqB,mDAEhEu2G,EAAeY,WAAWpgB,OAAO,GAAGnuG,IAAI,eAAeoX,OAWnE,OANKy2G,GACDF,EAAeY,WAAWpgB,OAAO,GAAGnuG,IAAI,aAE5C2tH,EAAeY,WAAWpgB,OAAO,GAAGnuG,IAAI,KACxC2tH,EAAeK,YAAY7f,OAAO,GAAGnuG,IAAI,KACzC2tH,EAAeG,UAAU3f,OAAO,GAAGnuG,IAAI,KAChC2tH,EAIX,eAAev2G,EAAmBguC,GAC9B,IAAIkhD,EAAqC,IAAI,EAAAuB,iBAAiBt7G,KAAKygB,eAAgBo4C,GAC/E+oD,EAAmB,IAAI,EAAAhE,SAE3B,GADAgE,EAAOA,OAAO,GACV7H,EAAiBzrB,UAAW,CAC5B,IAAIguB,EAAiBvC,EAAiBwC,yBAClCC,EAAczC,EAAiB0C,cAC/BH,GAAkB,EAAA9vB,YAAYO,OAC9B60B,EAAOnuG,IAAI,kBAAkB+oG,WAAqB3xF,OAC3CyxF,GAAkB,EAAA9vB,YAAYxrE,OACrC4gG,EAAOnuG,IAAI,6BAA6BoX,OAExC+2F,EAAOnuG,IAAI,yBAAyB+oG,WAAqB3xF,WAE1D,CACH,IAAImiE,EAAc+sB,EAAiB/sB,YAC/BA,GAAe,EAAAR,YAAYxrE,OAC3B4gG,EAAOnuG,IAAI,uBAAuBoX,OAC3BmiE,GAAe,EAAAR,YAAYO,OAClC60B,EAAOnuG,IAAI,YAAYsmG,EAAiBkoB,0BAA0Bp3G,OAElE+2F,EAAOnuG,IAAI,QAAQoX,oBAG3B,OAAO+2F,EAAO1D,aAGlB,iBAAiBrzF,EAAmBxO,GAChC,IAAI09F,EAAqC,IAAI,EAAAuB,iBAAiBt7G,KAAKygB,eAAgBpE,GAC/EulG,EAAS,IAAI,EAAAhE,SAEjB,GADAgE,EAAOA,OAAO,GACV7H,EAAiBzrB,UAAW,CAC5B,IAAIguB,EAAiBvC,EAAiBwC,yBAClCC,EAAczC,EAAiB0C,cAE/BH,GAAkB,EAAA9vB,YAAYO,OAC9B60B,EAAOnuG,IAAI,QAAQoX,qBAA6B2xF,SACzCF,GAAkB,EAAA9vB,YAAYxrE,OACrC4gG,EAAOnuG,IAAI,QAAQoX,8BAEnB+2F,EAAOnuG,IAAI,QAAQoX,4BAAoC2xF,aAExD,CACH,IAAIxvB,EAAc+sB,EAAiB/sB,YAC/BA,GAAe,EAAAR,YAAYxrE,OAC3B4gG,EAAOnuG,IAAI,QAAQoX,wBACZmiE,GAAe,EAAAR,YAAYO,OAClC60B,EAAOnuG,IAAI,QAAQoX,eAAuBkvF,EAAiBttF,gBAE3Dm1F,EAAOnuG,IAAI,QAAQoX,sBAG3B,OAAO+2F,EAAO1D,cAItB,MAAamjB,UAAuB5jB,EAYhC,YAAY1rG,GACRnC,MAAMmC,EAAM8oD,OAXhB,KAAA0mE,UAAsB,IAAI,EAAA3jB,SAC1B,KAAA6jB,YAAwB,IAAI,EAAA7jB,SAC5B,KAAAokB,WAAuB,IAAI,EAAApkB,SAE3B,KAAAijB,eAAsB,EACtB,KAAAC,iBAAwB,EACxB,KAAAC,eAAsB,EAMlB/gI,KAAKuhI,UAAU3f,OAAO,GAAGnuG,IAAI,qCAC7BzT,KAAKyhI,YAAY7f,OAAO,GAAGnuG,IAAI,uCAC/BzT,KAAKgiI,WAAWpgB,OAAO,GAAGnuG,IAAI,2BAGlC,gBACI,OAAOzT,KAAK+R,MAAMV,OAAOwS,eAAiB7jB,KAAK+R,MAAMqM,WAAape,KAAKksF,iBAAiBtrF,KAAKmR,MAAMqM,WAGvG,WACI,IAAI87B,EAAS,GAUb,OATIl6C,KAAK8gI,iBACL5mF,EAAOp7B,KAAK9e,KAAKyhI,YAAYrjH,YAE7Bpe,KAAK6gI,eACL3mF,EAAOp7B,KAAK9e,KAAKuhI,UAAUnjH,YAE3Bpe,KAAK+gI,eACL7mF,EAAOp7B,KAAK9e,KAAKgiI,WAAW5jH,YAEzB87B,EAAOxgC,KAAK,OAlC3B,mBAsCA,0BAMI,YAAYwJ,GAHJ,KAAAg/G,mBAAkC,IAAIx6H,IACtC,KAAA04H,aAAmC,GAGvCpgI,KAAKkjB,QAAUA,EACfljB,KAAK85G,UAGD,UACJ,IAAK,IAAKymB,EAAGtpH,KAAYjX,KAAKkjB,QAAQlT,eAClC,GAAIiH,GAAWA,EAAQ9B,MAAQ,EAAA3K,YAAY2N,iBACnC,EAAAwkE,QAAQsP,mBAAmCh1E,GAAU,CACrD,IAEImqH,EAFgC,IAAIX,EAAmCxpH,GAE5CkrH,oBAC3Bf,IAAmBphI,KAAKkiI,mBAAmBhvH,IAAIkuH,EAAegB,aAC9DpiI,KAAKogI,aAAathH,KAAKsiH,GACvBphI,KAAKkiI,mBAAmBzuH,IAAI2tH,EAAegB,aAO/D,kBACI,OAAOpiI,KAAKogI,gB,8ECzVpB,oBAMI,oBAAuB/4E,GACnB,OAAqB,GAAdA,EAAIv8C,OAGf,gBAAmB2uB,GACf,IAAI4tB,EAAM,IAAI7/C,MAEd,OADA6/C,EAAIvoC,KAAK2a,GACF4tB","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\n// export function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n//   switch (kind) {\n//     case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n//     case DecoratorKind.OPERATOR:\n//     case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n//     case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n//     case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n//     case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n//     case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n//     case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n//     case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n//     case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n//     // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n//     // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n//     // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n//     case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n//     case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n//     default: return DecoratorFlags.NONE;\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  SIMDLoad = _BinaryenSIMDLoadId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AndNotV128 = _BinaryenAndNotVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  MinI8x16 = _BinaryenMinSVecI8x16(),\n  MinU8x16 = _BinaryenMinUVecI8x16(),\n  MaxI8x16 = _BinaryenMaxSVecI8x16(),\n  MaxU8x16 = _BinaryenMaxUVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  MinI16x8 = _BinaryenMinSVecI16x8(),\n  MinU16x8 = _BinaryenMinUVecI16x8(),\n  MaxI16x8 = _BinaryenMaxSVecI16x8(),\n  MaxU16x8 = _BinaryenMaxUVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  MinI32x4 = _BinaryenMinSVecI32x4(),\n  MinU32x4 = _BinaryenMinUVecI32x4(),\n  MaxI32x4 = _BinaryenMaxSVecI32x4(),\n  MaxU32x4 = _BinaryenMaxUVecI32x4(),\n  DotI16x8 = _BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // function types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionTypeRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  // table\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    try {\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// function types\n\nexport function getFunctionTypeName(ftype: FunctionTypeRef): string | null {\n  return readString(_BinaryenFunctionTypeGetName(ftype));\n}\n\nexport function getFunctionTypeParamCount(ftype: FunctionTypeRef): Index {\n  return _BinaryenFunctionTypeGetNumParams(ftype);\n}\n\nexport function getFunctionTypeParam(ftype: FunctionTypeRef, index: Index): NativeType {\n  return _BinaryenFunctionTypeGetParam(ftype, index);\n}\n\nexport function getFunctionTypeResult(ftype: FunctionTypeRef): NativeType {\n  return _BinaryenFunctionTypeGetResult(ftype);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(_BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return _BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return _BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return _BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(_BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return _BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(_BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return _BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return _BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(_BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: assert(false);\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.EXNREF: return \"e\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Either reuses or creates the event type matching the specified name. */\n  ensureEventType(\n    name: string,\n    parameterTypes: Type[] | null\n  ): EventRef {\n    var events = this.events;\n    if (events.has(name)) return events.get(name)!;\n    var module = this.module;\n    var funcType = this.ensureFunctionType(parameterTypes, Type.void);\n    var eventType = module.addEvent(name, 0, funcType);\n    events.set(name, eventType);\n    return eventType;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    try {\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeDeclaration,\n    NamedTypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: NamedTypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: NamedTypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <NamedTypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type != null && type.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | undefined = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.i32(reportNode.range.line),\n        // module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  NamedTypeNode\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        continue;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element: Element | null | undefined = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element) {\n      element = this.program.elementsByName.get(internalName);\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: TypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <NamedTypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.functionTypeNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.functionTypeNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: TypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <NamedTypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  // signbit: {\n  //   value: function signbit(x) {\n  //     F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n  //   }\n  // },\n  // sincos: {\n  //   value: function sincos(x) {\n  //     this.sincos_sin = Math.sin(x);\n  //     this.sincos_cos = Math.cos(x);\n  //   }\n  // }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    NamedTypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | undefined = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line - 2;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: NamedTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | undefined = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: TypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <NamedTypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <NamedTypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n"],"sourceRoot":""}