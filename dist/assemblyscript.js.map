{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","OperatorKind","common_1","diagnostics_1","types_1","ast_1","abi_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","assert","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","diagnostics","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","makeNativeVariableDeclaration","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","text","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","DiagnosticEmitter","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","console","log","stack","info","infoRelated","warning","warningRelated","errorRelated","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","typeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","astutil_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","AbiTypeEnum","collectionutil_1","haveSpecifyDecorator","getSpecifyDecorator","isString","getInternalName","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","impledSerializable","impledInterface","impledReturnable","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","extendedContract","isClassPrototype","isSpecifyElement","impledInterfaces","tempClz","interfaces","implTypes","implTypes_1","implTypes_1_1","TypeNodeAnalyzer","getDeclareType","isVoid","MAP","findElement","AbiHelper","abiTypeLookup","NUMBER","isArray","abiTypeEnum","getArrayArgAbiTypeEnum","getArgs","findSourceAsElement","isPrimaryType","findSourceAsTypeName","getArrayArg","getAbiDeclareType","abiType","argType","args_1","args_1_1","getAsTypes","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","findSourceAbiType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","inserter_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","proposals","Set","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","addAbiTypeAlias","typeNodeAnalyzer","asTypes","asTypes_1","asTypes_1_1","asType","getStructFromClzPrototype","isActionFnPrototype","funcType","resolveDatabaseDecorator","clsProto","decorators_1","decorators_1_1","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","ele","addFieldsFromClassPrototype","struct","fieldDeclare","memberType","addToStruct","resolveClassDispatcher","clzPrototype","hasActionDecorators","contractName","contractVarName","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","argTypeName","rtnNodeAnly","declaration_1","impledInterfaces_1","impledInterfaces_1_1","getActionAbility","funcPrototype","decoratorNode","parameters_1","parameters_1_1","parameter","typeInfo","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","undefined","beginChar","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","sincos_sin","sincos_cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","fieldDeclaration","serializeField","deserializeField","primaryKey","serializeClassname","indentity","newArray","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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AAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO: not yet supported\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  createSIMDExtract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  createSIMDReplace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  createSIMDShuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createSIMDBitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  createSIMDShift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64:\n    case NativeType.V128: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.name + \" | null\"\n          : classReference.name;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < this.end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.createUnreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.createUnreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.createUnreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.createUnreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.createUnreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!expectedType) return module.createUnreachable();\n\n    // instanceof <basicType> must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.createI32(actualType == expectedType ? 1 : 0);\n    }\n    // <nullable> instanceof <nonNullable> must be != 0\n    if (\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\n      actualType.nonNullableType.isAssignableTo(expectedType)\n    ) {\n      return module.createBinary(\n        actualType.is(TypeFlags.LONG)\n          ? BinaryOp.NeI64\n          : BinaryOp.NeI32,\n        expr,\n        actualType.toNativeZero(module)\n      );\n    }\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(expr);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeNode,\n    TypeDeclaration\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: TypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: TypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <TypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type == null) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  CommonTypeNode,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  TypeDeclaration\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element){\n      element = this.program.elementsByName.get(internalName);\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: CommonTypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <TypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.signatureNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.signatureNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <TypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <TypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <TypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n}\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  // signbit: {\n  //   value: function signbit(x) {\n  //     F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n  //   }\n  // },\n  // sincos: {\n  //   value: function sincos(x) {\n  //     this.sincos_sin = Math.sin(x);\n  //     this.sincos_cos = Math.cos(x);\n  //   }\n  // }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64\n} from \"./module\";\n\nimport {\n  ElementKind,\n  OperatorKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n  export const i32_notify = \"~lib/builtins/i32.notify\";\n  export const i64_notify = \"~lib/builtins/i64.notify\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      return module.createI32(\n        classReference.lookupInSelf(\"length\") && (\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\n        ) ? 1 : 0\n      );\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(byteSize);\n        } else {\n          expr = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(byteSize, 0);\n        } else {\n          expr = module.createI32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(alignLog2);\n        } else {\n          expr = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(alignLog2, 0);\n        } else {\n          expr = module.createI32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          expr = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.createLoad(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = outType;\n      return module.createAtomicLoad(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.createAtomicRMW(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        inType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = inType;\n      return module.createAtomicCmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWake(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.createSelect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.createUnreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.GrowMemory, null, [\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u8,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        toType,\n        WrapMode.NONE\n      );\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.createUnreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\n            expr = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.createUnreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.createUnreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.createUnreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      return module.createSIMDExtract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDReplace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = module.precomputeExpression(\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n        );\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createSIMDShuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDShift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createUnary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createSIMDBitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createUnary(op, arg0);\n    }\n\n    // === GC integration =========================================================================\n\n    case BuiltinSymbols.iterateRoots: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      compiler.currentType = Type.void;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.createI32(reportNode.range.line),\n        // module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if required. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            typeName\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            typeName\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: CommonTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.TYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <TypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}