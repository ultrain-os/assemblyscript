{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/ultrain/abi.ts","webpack://assemblyscript/./src/ultrain/astutil.ts","webpack://assemblyscript/./src/ultrain/primitiveutil.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/ultrain/index.ts","webpack://assemblyscript/./src/ultrain/inserter.ts","webpack://assemblyscript/./src/ultrain/collectionutil.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","diagnostics","super","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY_ENTRY","nativeFile","File","set","internalName","resolver","Resolver","internalPath","source","text","buffer","offset","classInstance","payloadSize","writeI32","id","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","identifier","createTypeDeclaration","createOmittedType","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","createNamespaceDeclaration","signature","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","declaration","has","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","alias","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","values","sourceKind","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","typeArguments","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","type","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","decorators","acceptedFlags","decorator","fromNode","flag","fromKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","checkDecorators","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","UNSAFE","AMBIENT","EXTERNAL","STATIC","INTERFACE_PROTOTYPE","LAZY","READONLY","INLINE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","normalizedPath","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","x","NULL","TRUE","FALSE","typeName","TypeName","next","createTypeName","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","defaultType","elem","TypeParameterNode","ParameterNode","parameterKind","args","stmt","DecoratorNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","ClassExpression","expressions","CommaExpression","ConstructorExpression","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","BlockStatement","label","BreakStatement","ClassDeclaration","ContinueStatement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","NAMEDTYPE","typeArgumentNodes","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameNode","IDENTIFIER","nameStr","ACTION","PRIMARYID","DATABASE","IGNORE","PROPERTYACCESS","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numArguments","COMMA","ELEMENTACCESS","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","exportPaths","pos","lastIndexOf","simplePath","LIBRARY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","withRange","console","log","stack","emitDiagnostic","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","result","paramTypes","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","load","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","ftype","_BinaryenFunctionTypeGetName","_BinaryenFunctionTypeGetNumParams","_BinaryenFunctionTypeGetParam","_BinaryenFunctionTypeGetResult","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","Not_implemented","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","warning","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","funcType","addEvent","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","Decompiler","functionId","decompiler","decompile","finish","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","StructDef","fields","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","AbiHelper","proposals","abiTypeLookup","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","AbiInfo","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","typeNodeAnalyzer","asTypes","getAsTypes","asType","abiType","findSourceAbiType","findElement","getStructFromClzPrototype","AstUtil","haveSpecifyDecorator","clsProto","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","getInternalName","ele","struct","impledSerializable","addFieldsFromClassPrototype","fieldDeclare","memberType","TypeNodeAnalyzer","getAbiDeclareType","addField","addAbiTypeAlias","addToStruct","clzPrototype","extendedContract","hasActionDecorators","contractName","contractVarName","isActionFnPrototype","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","getArrayArgAbiTypeEnum","argTypeName","getArrayArg","AbiTypeEnum","NUMBER","abiTypeEnum","rtnNodeAnly","isClassPrototype","impledReturnable","location","resolveDatabaseDecorator","impledInterfaces","impledInterface","funcPrototype","decoratorNode","getSpecifyDecorator","isValidAbility","typeInfo","getActionAbility","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","resolveClassDispatcher","addAll","dispatch","assemblyDispatch","getContent","declareType","isArrayType","bracketIndex","endIndex","classDeclaration","interfaceName","_type","tempClz","interfaces","implTypes","isMapType","MAP","getArgs","findSourceAsElement","findSourceAsTypeName","argType","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","undefined","beginChar","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","row","toText","binaryen","wrapModule","emitStackIR","toAsmjs","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","parser","parseFile","nextFile","getDependee","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","readI32","readI64","valueI64","insertCode","insertPoints","insertPoint","insertPointArr","_","descComparator","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","fnName","hasImpl","Verify","verify","serializePoint","SerializePoint","countOfPkDecorator","serialize","increase","deserialize","fieldDeclaration","checkSerializable","serializeField","deserializeField","isPrimaryType","primaryKey","getDeclareType","serializeClassname","getSerializePoint","indentity"],"mappings":"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AAK3iD,EAAM+iD,KACX,KAAK/iD,EAAMuqB,IACX,KAAKvqB,EAAM6R,IACX,KAAK7R,EAAM2oB,WACX,KAAK3oB,EAAMkjD,GACX,KAAKljD,EAAMmjD,MACX,KAAKnjD,EAAMqjD,OACX,KAAKrjD,EAAMiX,UACX,KAAKjX,EAAM6e,KACX,KAAK7e,EAAMwS,SACX,KAAKxS,EAAM8R,IACX,KAAK9R,EAAM2jD,KACX,KAAK3jD,EAAMirB,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYjrB,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYkiD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4C5uD,GAE1C,OADAiK,OAAOjK,EAAKkK,QACJlK,EAAKsK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AASv0C,EAAU96B,IAGxD,OAAOzc,EAAO4uE,MAAM,KAAMwF,EACxB33D,GAAQ,EAAAue,WAAW+wD,KACf,EAAA7lB,kBAAkBkO,EAAMjpE,EAAS,IACjCsR,GAhBR,a,8EC59RA,SAAYvF,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCyiB,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IA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,QACA9gH,QAAQmR,KAGZ05C,WAKJ,qBAA0B0gE,EAAUp6G,EAAYq6G,GAE9C,OADA30H,OAAOsa,GAAS,GAAKA,EAAQ,IACtBq6G,EACHxJ,OACEuJ,EACAppE,QACE2+D,QACA9gH,QAAQmR,KAGZ2wG,QACEyJ,EACA/I,QACErgE,QACE2+D,QACA9gH,QAAQmR,Q,8EC9BpB,SAAkBs6G,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B/+H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqB44B,EAnLY54B,GAoL9B,GAAK44B,EAAO,QACnBomG,EAAmBpmG,EAAaqmG,IAFzC,IAAkCrmG,GA/KlC,8BAAmC54B,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB44B,EAzKY54B,GA0K7B,GAAK44B,EAAO,QACnBomG,EAAmBpmG,EAAasmG,IAFzC,IAAiCtmG,GArKjC,MAAMqmG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBpmG,EAAWimG,GACrC,GAAIjmG,EAAOimG,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIM,EACAC,EAHA9K,EAAK,EACLC,EAAKsK,EAAIz0H,OAINkqH,EAAK,EAAIC,GAAI,CAIlB,GAHA4K,EAAM7K,GAAOC,EAAKD,GAAO,IAEzB8K,EAASP,EADTM,GAAc,EAANA,KAEMvmG,GAAQA,GAAQimG,EAAIM,EAAM,GACtC,OAAO,EAELvmG,EAAOwmG,EACT7K,EAAK4K,EAEL7K,EAAK6K,EAAM,EAGf,OAAO,I,8EC9WT,qBAA6Bn9G,EAA4B,MACvD,GAAIA,EAAU,CACZ,IAAIq9G,EAAS,IAAIv4H,MAASkb,EAAS5X,QACnC,IAAK,IAAIzK,EAAI,EAAGwU,EAAI6N,EAAS5X,OAAQzK,EAAIwU,IAAKxU,EAAGkqB,UAAUw1G,EAAO1/H,GAAKqiB,EAASriB,IAChF,OAAO0/H,EAET,OAAO,IAAIv4H,OAGb,mBAA2Bkb,EAA0B,MACnD,GAAIA,EAAU,CACZ,IAAIq9G,EAAS,IAAIr4H,IACjB,IAAK,IAAIs4H,KAAKt9G,EAAUq9G,EAAOvsH,IAAIwsH,GACnC,OAAOD,EAET,OAAO,IAAIr4H,KAGb,mBAA6Bgb,EAA4B,KAAMu9G,EAA6B,MAC1F,IAAIF,EAAS,IAAIp4H,IACjB,GAAI+a,EAAU,CACZ,IAAK,IAAK7N,EAAGmrH,KAAMt9G,EAAUq9G,EAAOhvH,IAAI8D,EAAGmrH,GAC3C,GAAIC,EAAW,IAAK,IAAKprH,EAAGmrH,KAAMC,EAAWF,EAAOhvH,IAAI8D,EAAGmrH,QACtD,GAAIC,EACT,IAAK,IAAKprH,EAAGmrH,KAAMC,EAAWF,EAAOhvH,IAAI8D,EAAGmrH,GAE9C,OAAOD,I,8ECpBT,aAIMG,EAAY,GAMlB,SAAgB5uG,EAAcrP,GAK5B,IAJA,IAiBI64C,EAjBA/jC,EAAM,EACNmD,EAAMjY,EAAKnX,OAGRisB,EAAM,EAAImD,GACS,IAAxBjY,EAAK/W,WAAW6rB,IAChB9U,EAAK/W,WAAW6rB,EAAM,IAAMmpG,GAE5BnpG,GAAO,EAUT,KAPIA,EAAM,GAAKmD,EAAMjY,EAAKnX,UACxBmX,EAAOA,EAAKD,UAAU+U,EAAKmD,GAC3BA,GAAOnD,EACPA,EAAM,GAIDA,EAAM,EAAImD,GAAK,CAIpB,GAHA4gC,GAAQ,EAIN74C,EAAK/W,WAAW6rB,IAAQmpG,GACI,IAA5Bj+G,EAAK/W,WAAW6rB,EAAM,GACtB,CAGA,IADA+jC,EAAQ/jC,EAAM,GAAKmD,IAEjBnD,EAAM,EAAImD,GACVjY,EAAK/W,WAAW6rB,EAAM,IAAMmpG,EAC5B,CACAj+G,EAAO64C,EACH74C,EAAKD,UAAU,EAAG+U,GAClB9U,EAAKD,UAAU,EAAG+U,GAAO9U,EAAKD,UAAU+U,EAAM,GAClDmD,GAAO,EACP,SAKF,IADA4gC,EAAQ/jC,EAAM,GAAKmD,IACsB,IAA5BjY,EAAK/W,WAAW6rB,EAAM,IACjCA,EAAM,EAAImD,GACkB,IAA5BjY,EAAK/W,WAAW6rB,EAAM,IACtB9U,EAAK/W,WAAW6rB,EAAM,IAAMmpG,EAC5B,CAEA,IAAIC,EAAOppG,EACX,OAASopG,GAAQ,GACf,GAAIl+G,EAAK/W,WAAWi1H,IAASD,EAAW,CAClCnpG,EAAMopG,GAAQ,GACa,IAA7Bl+G,EAAK/W,WAAWi1H,EAAO,IACM,IAA7Bl+G,EAAK/W,WAAWi1H,EAAO,KAEvBl+G,EAAO64C,EACH74C,EAAKD,UAAU,EAAGm+G,GAClBl+G,EAAKD,UAAU,EAAGm+G,GAAQl+G,EAAKD,UAAU+U,EAAM,GACnDmD,GAAOnD,EAAM,EAAIopG,EACjBppG,EAAMopG,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKppG,EAAM,IACT,GAAPA,GACoB,IAAtB9U,EAAK/W,WAAW,IACM,IAAtB+W,EAAK/W,WAAW,IAChB,CAEAgvB,GADAjY,EAAOA,EAAKD,UAAU+U,EAAM,IACjBjsB,OACX,WAKRisB,IAEF,OAAOmD,EAAM,EAAIjY,EAAO,IAc1B,SAAgBm+G,EAAQ18G,GACtB,IAAIqT,EAAMrT,EAAe5Y,OACzB,GAAIisB,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIrT,EAAexY,WAAW,IAAMg1H,EAClC,OAAOx8G,EAGX,OAASqT,EAAM,GACb,GAAIrT,EAAexY,WAAW6rB,IAAQmpG,EACpC,OAAOx8G,EAAe1B,UAAU,EAAG+U,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BrT,EAAwB28G,GAClD,OAAI38G,EAAe6N,WAAW,QACrB7N,EAEF4N,EACL8uG,EAAQC,GAAU,EAAA/9H,eAAiBohB,IAKvC,a,8EC5GA,MAAMitG,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB,kBAAuB72F,EAAc6jB,GACnC,KAAOA,GAAS,GACd7jB,EAAGrb,KAAKkyG,GACRhzE,GAAS,EAEPA,GAAS,IACX7jB,EAAGrb,KAAKiyG,GACR/yE,GAAS,GAEPA,GACF7jB,EAAGrb,KAAKgyG,K,6BCQZ,SAAgB2P,EAAQhvH,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAASpQ,EAAYgQ,EAAoBC,GACvDD,EAAOC,GAAcjQ,EACrBgQ,EAAOC,EAAS,GAAKjQ,IAAU,EAC/BgQ,EAAOC,EAAS,GAAKjQ,IAAU,GAC/BgQ,EAAOC,EAAS,GAAKjQ,IAAU,GAIjC,SAAgBi/H,EAAQjvH,EAAoBC,GAC1C,IAAIyjH,EAAKsL,EAAQhvH,EAAQC,GACrB0jH,EAAKqL,EAAQhvH,EAAQC,EAAS,GAClC,OAAOyC,QAAQghH,EAAIC,G,iDAzCrB,kBAAuB3jH,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB,mBAAwBjQ,EAAYgQ,EAAoBC,GACtDD,EAAOC,GAAUjQ,GAInB,mBAAwBgQ,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B,oBAAyBjQ,EAAYgQ,EAAoBC,GACvDD,EAAOC,GAAcjQ,EACrBgQ,EAAOC,EAAS,GAAKjQ,IAAU,GAIjC,YAQA,aAQA,YAOA,oBAAyBA,EAAYgQ,EAAoBC,GACvDG,EAASurC,QAAQ37C,GAAQgQ,EAAQC,GACjCG,EAASwrC,SAAS57C,GAAQgQ,EAAQC,EAAS,IAI7C,mBAAwBD,EAAoBC,GAC1C,OAAOkjH,WAAW6L,EAAQhvH,EAAQC,KAIpC,oBAAyBjQ,EAAYgQ,EAAoBC,GACvDG,EAAS8iH,WAAWlzH,GAAQgQ,EAAQC,IAItC,mBAAwBD,EAAoBC,GAC1C,OAAOojH,WAAW4L,EAAQjvH,EAAQC,KAIpC,oBAAyBjQ,EAAYgQ,EAAoBC,GACvD,IAAIivH,EAAW9L,WAAWpzH,GAC1BoQ,EAASurC,QAAQujF,GAAWlvH,EAAQC,GACpCG,EAASwrC,SAASsjF,GAAWlvH,EAAQC,EAAS,K,0ICxEhD,S,8ECIA,aASA,OAkBA,QAUA,QAKA,MAAai9G,EA8BT,YAAY18G,EAAc2uH,EAAqB,IAC3CzgI,KAAK8R,MAAQA,EACb9R,KAAKygI,WAAaA,EAClBzgI,KAAKs5B,KAAO,GAvBhB,mBAAmBonG,GAEf,IAAInB,EAAM,IAAI53H,IACd,IAAK,IAAIg5H,KAAeD,EAAc,CAClC,IAAIh9G,EAAiBi9G,EAAYj9G,eAC7Bk9G,EAA4CrB,EAAIr+H,IAAIwiB,IAAmB,KAEtEk9G,IACDA,EAAiB,IAAIp5H,MACrB+3H,EAAIxuH,IAAI2S,EAAgBk9G,IAE5BA,EAAejiH,KAAKgiH,GAGxB,IAAK,IAAKE,EAAG7lH,KAAWukH,EACpBvkH,EAAOw4G,KAAKhF,EAAYsS,gBAE5B,OAAOvB,EASX,WACI,OAA6B,GAArBv/H,KAAK8R,MAAMsW,OAAepoB,KAAK8R,MAAMgpD,MAAM3yC,KAAO,EAAInoB,KAAK8R,MAAMgpD,MAAM3yC,KAAO,EAE1F,qBACI,OAAOnoB,KAAK8R,MAAMV,OAAOsS,eAG7B,gBACI,OAAO1jB,KAAK8R,MAAMV,OAAOsS,eAAiB1jB,KAAK8R,MAAMqM,WAGzD,WACI,OAAOne,KAAK8R,MAAMqM,WAGtB,cAAcmb,GACVt5B,KAAKs5B,KAAK3a,KAAK2a,GAGnB,WACI,OAAOt5B,KAAKygI,YAxDpB,gBAMmB,EAAAK,eAAiB,CAACjnF,EAAgBC,IACrCA,EAAE3xB,KAAO0xB,EAAE1xB,KAwD3B,MAAM44G,EAcF,YAAYzgH,GAZZ,KAAA0gH,sBAAgC,YAChC,KAAAC,wBAAkC,cAClC,KAAAC,oBAA8B,aAItB,KAAAC,eAAyB,EAEzB,KAAAC,iBAA2B,EAE3B,KAAAC,eAAyB,EAG7BrhI,KAAKsgB,eAAiBA,EACtBtgB,KAAKitE,aAGD,WACJ,OAAOjtE,KAAKohI,iBAAmBphI,KAAKmhI,eAAiBnhI,KAAKqhI,cAGtD,aACJ,GAAIrhI,KAAKsgB,eAAe5E,gBACpB,IAAK,IAAKmlH,EAAG7pH,KAAYhX,KAAKsgB,eAAe5E,gBACzC,GAAI1E,EAAQ9B,MAAQ,EAAA1K,YAAY8Q,mBAAoB,CAChD,IACIgmH,EADiCtqH,EACZhE,YAAYpS,KAAKkR,MAAMqM,WAC5CmjH,GAAUthI,KAAKghI,wBACfhhI,KAAKmhI,eAAgB,GAErBG,GAAUthI,KAAKihI,0BACfjhI,KAAKohI,iBAAkB,GAEvBE,GAAUthI,KAAKkhI,sBACflhI,KAAKqhI,eAAgB,IAOzC,kBAAkBvoE,GACd,IAAI9nD,EAAe,EAAAg6G,QAAQU,gBAAgB5yD,GACvC9hD,EAA0BhX,KAAKsgB,eAAeyC,QAAQ/S,eAAe9O,IAAI8P,IAAiB,KAG9F,GAAIgG,GAAWA,EAAQ9B,MAAQ,EAAA1K,YAAY0N,gBAAiB,CACxD,IAAIqpH,EAAU,EAAAvW,QAAQa,mBAAoC70G,GAC1D,EAAAwqH,OAAOC,OAAOF,EAAS,SAASvwH,mDAKxC,oBACI,IAAKhR,KAAKid,WACN,OAAO,KAEX,IAAIykH,EAAiC,IAAIC,EAAe3hI,KAAKsgB,eAAetN,YAAYlB,OAMxF,GALA4vH,EAAepS,iBAAqCtvH,KAAKsgB,eAAetN,YACxE0uH,EAAeN,gBAAkBphI,KAAKohI,gBACtCM,EAAeP,cAAgBnhI,KAAKmhI,cACpCO,EAAeL,cAAgBrhI,KAAKqhI,eAE/BrhI,KAAKsgB,eAAe5E,gBACrB,OAAO,KAEX,IAAIkmH,EAAyB,EACzB,EAAA5W,QAAQa,mBAAmB7rH,KAAKsgB,eAAerH,iBAC/CyoH,EAAeG,UAAUC,WAAWtuH,IAAI,wBACxCkuH,EAAeK,YAAYD,WAAWtuH,IAAI,2BAE9C,IAAK,IAAKkX,EAAW1T,KAAYhX,KAAKsgB,eAAe5E,gBACjD,GAAI1E,EAAQ9B,MAAQ,EAAA1K,YAAYge,gBAAiB,CAC7C,IACIw5G,EADiDhrH,EACqBhE,YACtEisD,EAA8B+iE,EAAiB5lH,KAEnD,GAAI6iD,GAAcA,EAAW/pD,MAAQ,EAAAC,SAAS2e,YACzC,EAAAk3F,QAAQC,qBAAqB+W,EAAkB,EAAAj3H,cAAc+pB,QAAS,CACvE,IAAIgkC,EAA0BmG,EAC1Bj/D,KAAKmhI,gBACLnhI,KAAKiiI,kBAAiChjE,GACtCyiE,EAAeG,UAAU/S,OAAO9uH,KAAKkiI,eAAex3G,EAAWouC,KAE/D94D,KAAKohI,kBACLphI,KAAKiiI,kBAAiChjE,GACtCyiE,EAAeK,YAAYjT,OAAO9uH,KAAKmiI,iBAAiBz3G,EAAWouC,KAI3E,GAAImG,GAAcA,EAAW/pD,MAAQ,EAAAC,SAAS2e,WAAa,EAAAk3F,QAAQC,qBAAqB+W,EAAkB,EAAAj3H,cAAc6pB,WAAY,CAIhI,GAHAgtG,IACA,EAAAJ,OAAOC,OAAOG,GAAsB,EAAG,SAAS5hI,KAAKsgB,eAAe1f,yDAC3B,IAAI,EAAAqrH,iBAAiBjsH,KAAKsgB,eAAgC2+C,GAC7EmjE,gBAClB,MAAM,IAAIz5H,MAAM,SAAS3I,KAAKsgB,eAAe1f,eAAe8pB,mDAEhEg3G,EAAeW,WAAW/oB,OAAO,GAAG9lG,IAAI,eAAekX,OAWnE,OANKk3G,GACDF,EAAeW,WAAW/oB,OAAO,GAAG9lG,IAAI,aAE5CkuH,EAAeW,WAAW/oB,OAAO,GAAG9lG,IAAI,KACxCkuH,EAAeK,YAAYzoB,OAAO,GAAG9lG,IAAI,KACzCkuH,EAAeG,UAAUvoB,OAAO,GAAG9lG,IAAI,KAChCkuH,EAIX,eAAeh3G,EAAmBouC,GAC9B,IAAI0xD,EAAqC,IAAI,EAAAyB,iBAAiBjsH,KAAKsgB,eAAgBw4C,GAC/EwgD,EAAmB,IAAI,EAAAqV,SAE3B,GADArV,EAAOA,OAAO,GACVkR,EAAiBn+B,UAAW,CAC5B,IAAI4gC,EAAiBzC,EAAiB0C,yBAClCC,EAAc3C,EAAiB4C,cAC/BH,GAAkB,EAAAI,YAAYC,OAC9BhU,EAAO9lG,IAAI,kBAAkB25G,WAAqBziG,OAC3CuiG,GAAkB,EAAAI,YAAYxsG,OACrCy4F,EAAO9lG,IAAI,6BAA6BkX,OAExC4uF,EAAO9lG,IAAI,yBAAyB25G,WAAqBziG,WAE1D,CACH,IAAI6iG,EAAc/C,EAAiB+C,YAC/BA,GAAe,EAAAF,YAAYxsG,OAC3By4F,EAAO9lG,IAAI,uBAAuBkX,OAC3B6iG,GAAe,EAAAF,YAAYC,OAClChU,EAAO9lG,IAAI,YAAYg3G,EAAiB8X,0BAA0B53G,OAElE4uF,EAAO9lG,IAAI,QAAQkX,oBAG3B,OAAO4uF,EAAO2V,aAGlB,iBAAiBvkG,EAAmBtO,GAChC,IAAIouG,EAAqC,IAAI,EAAAyB,iBAAiBjsH,KAAKsgB,eAAgBlE,GAC/Ek9F,EAAS,IAAI,EAAAqV,SAEjB,GADArV,EAAOA,OAAO,GACVkR,EAAiBn+B,UAAW,CAC5B,IAAI4gC,EAAiBzC,EAAiB0C,yBAClCC,EAAc3C,EAAiB4C,cAE/BH,GAAkB,EAAAI,YAAYC,OAC9BhU,EAAO9lG,IAAI,QAAQkX,qBAA6ByiG,SACzCF,GAAkB,EAAAI,YAAYxsG,OACrCy4F,EAAO9lG,IAAI,QAAQkX,8BAEnB4uF,EAAO9lG,IAAI,QAAQkX,4BAAoCyiG,aAExD,CACH,IAAII,EAAc/C,EAAiB+C,YAC/BA,GAAe,EAAAF,YAAYxsG,OAC3By4F,EAAO9lG,IAAI,QAAQkX,wBACZ6iG,GAAe,EAAAF,YAAYC,OAClChU,EAAO9lG,IAAI,QAAQkX,eAAuB8/F,EAAiBl+F,gBAE3DgtF,EAAO9lG,IAAI,QAAQkX,sBAG3B,OAAO4uF,EAAO2V,cAItB,MAAa0S,UAAuBnT,EAYhC,YAAY18G,GACRlC,MAAMkC,EAAMgpD,OAXhB,KAAA+mE,UAAsB,IAAI,EAAAlT,SAC1B,KAAAoT,YAAwB,IAAI,EAAApT,SAC5B,KAAA0T,WAAuB,IAAI,EAAA1T,SAE3B,KAAAwS,eAAsB,EACtB,KAAAC,iBAAwB,EACxB,KAAAC,eAAsB,EAMlBrhI,KAAK6hI,UAAUvoB,OAAO,GAAG9lG,IAAI,qCAC7BxT,KAAK+hI,YAAYzoB,OAAO,GAAG9lG,IAAI,uCAC/BxT,KAAKqiI,WAAW/oB,OAAO,GAAG9lG,IAAI,2BAGlC,gBACI,OAAOxT,KAAK8R,MAAMV,OAAOsS,eAAiB1jB,KAAK8R,MAAMqM,WAAane,KAAKsvH,iBAAiB1uH,KAAKkR,MAAMqM,WAGvG,WACI,IAAIg8B,EAAS,GAUb,OATIn6C,KAAKohI,iBACLjnF,EAAOx7B,KAAK3e,KAAK+hI,YAAY5jH,YAE7Bne,KAAKmhI,eACLhnF,EAAOx7B,KAAK3e,KAAK6hI,UAAU1jH,YAE3Bne,KAAKqhI,eACLlnF,EAAOx7B,KAAK3e,KAAKqiI,WAAWlkH,YAEzBg8B,EAAO1gC,KAAK,OAlC3B,mBAsCA,0BAMI,YAAYsJ,GAHJ,KAAAw/G,mBAAkC,IAAI76H,IACtC,KAAAg5H,aAAmC,GAGvC1gI,KAAK+iB,QAAUA,EACf/iB,KAAKuqH,UAGD,UACJ,IAAK,IAAKsW,EAAG7pH,KAAYhX,KAAK+iB,QAAQ/S,eAClC,GAAIgH,GAAWA,EAAQ9B,MAAQ,EAAA1K,YAAY0N,iBACnC,EAAA8yG,QAAQa,mBAAmC70G,GAAU,CACrD,IAEI0qH,EAFgC,IAAIX,EAAmC/pH,GAE5CwrH,oBAC3Bd,IAAmB1hI,KAAKuiI,mBAAmBtvH,IAAIyuH,EAAee,aAC9DziI,KAAK0gI,aAAa/hH,KAAK+iH,GACvB1hI,KAAKuiI,mBAAmB/uH,IAAIkuH,EAAee,aAO/D,kBACI,OAAOziI,KAAK0gI,gB,8ECzVpB,oBAMI,oBAAuBp5E,GACnB,OAAqB,GAAdA,EAAIx8C,OAGf,gBAAmB4uB,GACf,IAAI4tB,EAAM,IAAI9/C,MAEd,OADA8/C,EAAI3oC,KAAK+a,GACF4tB","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"uabort\"; // ultrain change to uabort\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          /* ultrain comment out for unimplement interface Serializable */\n          // this.warning(\n          //   DiagnosticCode.Not_implemented,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  /* ultrain add  START */\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  /* ultrain add  END */\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        /* ultrain add START */\n        case CharCode.a: {\n          if (nameStr == \"action\") return DecoratorKind.ACTION;\n          break;\n        }\n        case CharCode.p: {\n          if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n          break;\n        }\n        case CharCode.d: {\n          if (nameStr == \"database\") return DecoratorKind.DATABASE;\n        }\n        /* ultrain add END */\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          /* ultrain add  START */\n          if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n          /* ultrain add  END */\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    /* ultrain add START */\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n    /* ultrain add END */\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  SIMDLoad = _BinaryenSIMDLoadId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AndNotV128 = _BinaryenAndNotVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  MinI8x16 = _BinaryenMinSVecI8x16(),\n  MinU8x16 = _BinaryenMinUVecI8x16(),\n  MaxI8x16 = _BinaryenMaxSVecI8x16(),\n  MaxU8x16 = _BinaryenMaxUVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  MinI16x8 = _BinaryenMinSVecI16x8(),\n  MinU16x8 = _BinaryenMinUVecI16x8(),\n  MaxI16x8 = _BinaryenMaxSVecI16x8(),\n  MaxU16x8 = _BinaryenMaxUVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  MinI32x4 = _BinaryenMinSVecI32x4(),\n  MinU32x4 = _BinaryenMinUVecI32x4(),\n  MaxI32x4 = _BinaryenMaxSVecI32x4(),\n  MaxU32x4 = _BinaryenMaxUVecI32x4(),\n  DotI16x8 = _BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // function types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionTypeRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  // table\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    try {\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// function types\n\nexport function getFunctionTypeName(ftype: FunctionTypeRef): string | null {\n  return readString(_BinaryenFunctionTypeGetName(ftype));\n}\n\nexport function getFunctionTypeParamCount(ftype: FunctionTypeRef): Index {\n  return _BinaryenFunctionTypeGetNumParams(ftype);\n}\n\nexport function getFunctionTypeParam(ftype: FunctionTypeRef, index: Index): NativeType {\n  return _BinaryenFunctionTypeGetParam(ftype, index);\n}\n\nexport function getFunctionTypeResult(ftype: FunctionTypeRef): NativeType {\n  return _BinaryenFunctionTypeGetResult(ftype);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(_BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return _BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return _BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return _BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(_BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return _BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(_BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return _BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return _BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(_BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: assert(false);\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.EXNREF: return \"e\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Either reuses or creates the event type matching the specified name. */\n  ensureEventType(\n    name: string,\n    parameterTypes: Type[] | null\n  ): EventRef {\n    var events = this.events;\n    if (events.has(name)) return events.get(name)!;\n    var module = this.module;\n    var funcType = this.ensureFunctionType(parameterTypes, Type.void);\n    var eventType = module.addEvent(name, 0, funcType);\n    events.set(name, eventType);\n    return eventType;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  /* ultrain add  START */\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n  /* ultrain add  END */\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    }\n    /* ultrain add  START */\n    else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    }\n    /* ultrain add  END */\n    else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"../types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"../program\";\n\nimport {\n  DecoratorKind,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  NamedTypeNode\n} from \"../ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        continue;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element) {\n      element = this.program.elementsByName.get(internalName) || null;\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: TypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <NamedTypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.functionTypeNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.functionTypeNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: TypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <NamedTypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n\nexport function getAbiInfo(program: Program): AbiInfo {\n  return new AbiInfo(program);\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeDeclaration,\n    NamedTypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"./abi\";\n\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): boolean {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): boolean {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): boolean {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): boolean {\n        return declareType == \"Map\";\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): boolean {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): boolean {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): boolean {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): boolean {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): boolean {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): boolean {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: NamedTypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: NamedTypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): boolean {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <NamedTypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): boolean {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type != null && type.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): boolean {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                return `${this.getArgs().join(\",\")}{}`;\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName) || null;\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n\n// ultrain Insert for Ultrain\nexport * from \"./ultrain/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","export * from \"./abi\";\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    NamedTypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"../program\";\n\nimport {\n    Range\n} from \"../tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"../types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./astutil\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath) || null;\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line - 2;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: NamedTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName) || null;\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: TypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <NamedTypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <NamedTypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n"],"sourceRoot":""}