{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","OperatorKind","common_1","diagnostics_1","types_1","ast_1","util_1","abi_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","diagnostics","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","text","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","console","log","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","DiagnosticEmitter","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","stack","info","infoRelated","warning","warningRelated","errorRelated","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","typeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","astutil_1","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","AbiTypeEnum","collectionutil_1","haveSpecifyDecorator","getSpecifyDecorator","isString","getInternalName","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","impledSerializable","impledInterface","impledReturnable","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","extendedContract","isClassPrototype","isSpecifyElement","impledInterfaces","tempClz","interfaces","implTypes","implTypes_1","e_4","implTypes_1_1","TypeNodeAnalyzer","getDeclareType","isVoid","MAP","findElement","AbiHelper","abiTypeLookup","NUMBER","isArray","abiTypeEnum","getArrayArgAbiTypeEnum","getArgs","findSourceAsElement","isPrimaryType","findSourceAsTypeName","getArrayArg","getAbiDeclareType","abiType","argType","args_1","args_1_1","getAsTypes","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","findSourceAbiType","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","inserter_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","proposals","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","addAbiTypeAlias","typeNodeAnalyzer","asTypes","asTypes_1","asTypes_1_1","asType","getStructFromClzPrototype","isActionFnPrototype","funcType","resolveDatabaseDecorator","clsProto","decorators_1","decorators_1_1","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","ele","addFieldsFromClassPrototype","struct","fieldDeclare","memberType","addToStruct","resolveClassDispatcher","clzPrototype","hasActionDecorators","contractName","contractVarName","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","argTypeName","rtnNodeAnly","declaration_1","impledInterfaces_1","impledInterfaces_1_1","getActionAbility","funcPrototype","decoratorNode","parameters_1","parameters_1_1","parameter","typeInfo","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","undefined","beginChar","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","typeToString","members_2","members_2_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","fieldDeclaration","serializeField","deserializeField","primaryKey","serializeClassname","indentity","newArray"],"mappings":"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51B,IAG1C,KAAKigC,EAAArpB,SAASukC,OACd,KAAKlb,EAAArpB,SAAS43C,OACd,KAAKvuB,EAAArpB,SAAS63C,OACd,KAAKxuB,EAAArpB,SAAS83C,OAIZ,OAHA/gF,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASi4C,OACd,KAAK5uB,EAAArpB,SAASk4C,OACd,KAAK7uB,EAAArpB,SAASo4C,OACd,KAAK/uB,EAAArpB,SAASq4C,OAIZ,OAHAthF,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAAS4kC,OAMZ,OALA7tE,KAAKse,KAAK,eACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,SACxCryB,KAAKse,KAAK,KAGZ,KAAKg0C,EAAArpB,SAAS6kC,OACd,KAAKxb,EAAArpB,SAASs4C,OAIZ,OAHAvhF,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAAS8kC,OAMZ,OALA/tE,KAAKse,KAAK,eACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,SACxCryB,KAAKse,KAAK,KAGZ,KAAKg0C,EAAArpB,SAASwkC,OACd,KAAKnb,EAAArpB,SAAS64C,OAIZ,OAHA9hF,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAAS84C,MACd,KAAKzvB,EAAArpB,SAAS+4C,MAIZ,OAH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,KAAK1a,EAAArpB,SAASgkC,MAIZ,OAHAjtE,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,YACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAAS4jC,MAKZ,OAJA7sE,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,iBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MAIZ,OAHAvtE,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,aACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASkkC,MAKZ,OAJAntE,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,kBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASm4C,OAKZ,OAJAphF,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,iBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASu4C,OAKZ,OAJAxhF,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,iBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAAS4oD,QAMZ,OALA7xF,KAAKse,KAAK,cACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,MACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,SACxCryB,KAAKse,KAAK,KAGZ,KAAKg0C,EAAArpB,SAAS+oD,QAMZ,OALAhyF,KAAKse,KAAK,cACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,MACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,SACxCryB,KAAKse,KAAK,KAGZ,KAAKg0C,EAAArpB,SAASkjC,MAKZ,OAJAnsE,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,iBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASwjC,MAKZ,OAJAzsE,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,kBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAAS8jC,MAKZ,OAJA/sE,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,iBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASokC,MAKZ,OAJArtE,KAAKse,KAAK,SACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,kBACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,IAG1C,KAAKigC,EAAArpB,SAASmqD,YAMZ,OALApzF,KAAKse,KAAK,kBACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,MACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,SACxCryB,KAAKse,KAAK,KAGZ,KAAKg0C,EAAArpB,SAAS2pD,OAMZ,OALA5yF,KAAKse,KAAK,aACVte,KAAKw6G,oBAAoBloD,EAAAtK,cAAc31B,IACvCryB,KAAKse,KAAK,MACVte,KAAKw6G,oBAAoBloD,EAAArK,eAAe51B,SACxCryB,KAAKse,KAAK,KAGZ,KAAKg0C,EAAArpB,SAASupD,OAMZ,OALAxyF,KAAKse,KAAK,aACVte,KAAKw6G,oBAAoBloD,EAAAtK,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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if present. */\n  abortInstance: Function;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          console.log(`alias: ${alias}, name: ${name}`);\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO: not yet supported\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n          // }\n          if (!(target = arrayType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, arrayType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    try {\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      this.warning(\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\n        reportNode.range, instance.internalName\n      );\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeNode,\n    TypeDeclaration\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: TypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: TypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <TypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type != null && type.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.i32(reportNode.range.line),\n        // module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  CommonTypeNode,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  TypeDeclaration\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element){\n      element = this.program.elementsByName.get(internalName);\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: CommonTypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <TypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.signatureNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.signatureNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <TypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <TypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <TypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<TypeNode>parameter];\n          else parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\n          else implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: CommonTypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  // signbit: {\n  //   value: function signbit(x) {\n  //     F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n  //   }\n  // },\n  // sincos: {\n  //   value: function sincos(x) {\n  //     this.sincos_sin = Math.sin(x);\n  //     this.sincos_cos = Math.cos(x);\n  //   }\n  // }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        console.log(`line: ${this.range.line}`);\n        console.log(`range---: ${this.range.toString()}, column : ${this.range.column}`);\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line - 2;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: CommonTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.TYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <TypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n       \n        console.log(`SerializePoint range: ${range.toString()}`);\n        console.log(`SerializePoint range end: ${range.end}, \n        SerializePoint start: ${range.start}, atEnd: ${this.range.atEnd.line}, \n        line: ${this.range.line}`);\n\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n"],"sourceRoot":""}