{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__21__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","OperatorKind","common_1","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","basicClasses","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","tmp","LIBRARY_PREFIX","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","Array","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","set","internalName","currentFilespace","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","declaration","element","tryLocateImport","externalName","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","range","parent","path","text","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","alias","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","type","registerBasicClass","FUNCTION_PROTOTYPE","startFunction","isAny","CommonFlags","GENERIC","AMBIENT","MAIN","resolveFunction","members","signature","parameterTypes","signatureReference","returnType","byteSize","typeKind","className","classElement","globalName","is","global","Global","NONE","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","decorators","acceptedFlags","presentFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","BUILTIN","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","GLOBAL","SOURCE","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","identifier","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","GET","SET","initializeAccessor","initializeMethod","INDEXSIGNATUREDECLARATION","classPrototype","isInterface","INTERFACE_PROTOTYPE","STATIC","staticField","INLINE","READONLY","findDecorator","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","GETTER_PREFIX","SETTER_PREFIX","staticName","STATIC_DELIMITER","staticPrototype","instanceName","INSTANCE_DELIMITER","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","externalIdentifier","prefix","FILESPACE_PREFIX","PATH_DELIMITER","FILESPACE","referencedName","referencedElement","seen","Set","add","EXTERNAL","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","typeParameters","global_1","CONST","DiagnosticEmitter","Element","program","flags","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","initializer","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","applyClassTypeArguments","contextualTypeArguments","classTypeParameters","numClassTypeParameters","Function","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","CLASS","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","typeArguments","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","toType","tokenizer_1","Token","util_1","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createSignature","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","expression","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","body","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","SourceKind","Statement","Source","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","PARENT_SUBST","INNER_DELIMITER","LIBRARY_SUBST","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","console","log","stack","info","warning","__export","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","builtins_1","astutil_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","makeMap","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","superType","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","compileNopExpression","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","i64_is_u32","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","compileInstantiate","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","AbiTypeEnum","collectionutil_1","haveSpecifyDecorator","getSpecifyDecorator","isString","getInternalName","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","impledSerializable","impledInterface","impledReturnable","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","extendedContract","isClassPrototype","isSpecifyElement","impledInterfaces","tempClz","interfaces","implTypes","implTypes_1","implTypes_1_1","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printProgramInstances","keys_1","keys_1_1","printProgramElements","elements_1","elements_1_1","printClassPrototype","elements_2","elements_2_1","TypeNodeAnalyzer","getDeclareType","isVoid","MAP","findSourceAsType","NUMBER","isArray","abiTypeEnum","getArrayArgAbiTypeEnum","getArgs","isPrimaryType","findSourceAsTypeName","getArrayArg","getAbiDeclareType","abiType","argType","args_1","args_1_1","getAsTypes","Collections","isEmptyArray","findElement","asTypeName","sourceTypeName","typeAlias","aliasTypeName","findSourceAbiType","AbiHelper","abiTypeLookup","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","Expected_0_type_arguments_but_got_1","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","minParameterCount","maxParameterCount","argumentCount","ensureResolvedLazyGlobal","contextualFunction","targetExpression","propertyName","elementAccess","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_bool","explicitLocal","functionTarget","classInstanceKey","classInstances","instance_1","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","inserter_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","proposals","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","parseSignatureToAbiStruct","methodName","struct","parameters_1","parameters_1_1","parameter","typeInfo","addAbiTypeAlias","typeNodeAnalyzer","asTypes","asTypes_1","asTypes_1_1","asType","getStructFromClzPrototype","isActionFnPrototype","funcType","resolveDatabaseDecorator","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","Strings","isAroundQuotation","getElementFromExpr","addFieldsFromClassPrototype","members_1","members_1_1","fieldDeclare","memberName","memberType","addToStruct","resolveClassDispatcher","clzPrototype","hasActionDecorators","contractName","contractVarName","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","argTypeName","rtnNodeAnly","declaration_1","impledInterfaces_1","impledInterfaces_1_1","getActionAbility","decoratorNode","funcPrototype","serializeInserter","SerializeInserter","superInserter","SuperInserter","serializePoints","getInsertPoints","superPoints","mergedPoints","concat","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","undefined","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","dest","copy","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","stringType","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","original_2","original_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","serializeField","deserializeField","primaryKey","serializeClassname","indentity","classNames","baseClassNames","identity","processConstructor","ConstructorResolver","generateSuperExprInserter","baseConstructorResolver","getClassIdentity","generateConstructorInsert","setStmtsWithoutComments","setHavingSuperExpr","stmtsWithoutComments","havingSuperExpr","isBlockBody","blockStatements","_stmt","getSuperExpr","getClassName","keyword","havingBaseConstructorMethod","generateConstructor","contents","callSuperExpr","generateCallSuperExpr","getSignature","getBaseClassName","newArray","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__21__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low,\n  getGetGlobalName\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n  /** Classes backing basic types like `i32`. */\n  basicClasses: Map<TypeKind,Class> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerBasicClass(TypeKind.I8, \"I8\");\n    this.registerBasicClass(TypeKind.I16, \"I16\");\n    this.registerBasicClass(TypeKind.I32, \"I32\");\n    this.registerBasicClass(TypeKind.I64, \"I64\");\n    this.registerBasicClass(TypeKind.ISIZE, \"Isize\");\n    this.registerBasicClass(TypeKind.U8, \"U8\");\n    this.registerBasicClass(TypeKind.U16, \"U16\");\n    this.registerBasicClass(TypeKind.U32, \"U32\");\n    this.registerBasicClass(TypeKind.U64, \"U64\");\n    this.registerBasicClass(TypeKind.USIZE, \"Usize\");\n    this.registerBasicClass(TypeKind.BOOL, \"Bool\");\n    this.registerBasicClass(TypeKind.F32, \"F32\");\n    this.registerBasicClass(TypeKind.F64, \"F64\");\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  private registerBasicClass(typeKind: TypeKind, className: string): void {\n    if (this.elementsLookup.has(className)) {\n      let element = assert(this.elementsLookup.get(className));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.basicClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n      .withConstantIntegerValue(value);\n    global.set(CommonFlags.RESOLVED);\n    this.elementsLookup.set(globalName, global);\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n      .withConstantFloatValue(value);\n    global.set(CommonFlags.RESOLVED);\n    this.elementsLookup.set(globalName, global);\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is a database */\n  DATABASE = 1 << 9,\n  /** Is a action */\n  ACTION = 1 << 10,\n  /** Is a ignore */\n  IGNORE = 1 << 11\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string): string {\n    if (!str) return str;\n    var result  =  \"\";\n    for (let ch of str) {\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName(): string {\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName: string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances by class type arguments and function type arguments. */\n  instances: Map<string,Map<string,Function>> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Applies class type arguments to the context of a partially resolved instance method. */\n  applyClassTypeArguments(contextualTypeArguments: Map<string,Type>): void {\n    var classTypeArguments = assert(this.classTypeArguments); // set only if partial\n    var classDeclaration = assert(this.classPrototype).declaration;\n    var classTypeParameters = classDeclaration.typeParameters;\n    var numClassTypeParameters = classTypeParameters.length;\n    assert(numClassTypeParameters == classTypeArguments.length);\n    for (let i = 0; i < numClassTypeParameters; ++i) {\n      contextualTypeArguments.set(\n        classTypeParameters[i].name.text,\n        classTypeArguments[i]\n      );\n    }\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(`duplicate local name: ${name}`);\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    // case NodeKind.SUPER: // TODO\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.PARENTHESIZED: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    elem.defaultType = defaultType; if (defaultType) defaultType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType; keyType.parent = elem;\n    elem.valueType = valueType; valueType.parent = elem;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 22,\n  /** Is compiled. */\n  COMPILED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is the main function. */\n  MAIN = 1 << 28,\n\n  // Other\n\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n  // SIMDExtract = _BinaryenSIMDExtractId(),\n  // SIMDReplace = _BinaryenSIMDReplaceId(),\n  // SIMDShuffle = _BinaryenSIMDShuffleId(),\n  // SIMDBitselect = _BinaryenSIMDBitselectId(),\n  // SIMDShift = _BinaryenSIMDShiftId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\n// export enum SIMDOp {\n//   SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n//   SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n//   SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n//   SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n//   SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n//   SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n//   NotVec128 = _BinaryenNotVec128(),\n//   NegVecI8x16 = _BinaryenNegVecI8x16(),\n//   AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n//   AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n//   NegVecI16x8 = _BinaryenNegVecI16x8(),\n//   AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n//   AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n//   NegVecI32x4 = _BinaryenNegVecI32x4(),\n//   AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n//   AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n//   NegVecI64x2 = _BinaryenNegVecI64x2(),\n//   AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n//   AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n//   AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n//   NegVecF32x4 = _BinaryenNegVecF32x4(),\n//   SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n//   AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n//   NegVecF64x2 = _BinaryenNegVecF64x2(),\n//   SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n//   TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n//   TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n//   TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n//   TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n//   ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n//   ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n//   ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n//   ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n//   EqVecI8x16 = _BinaryenEqVecI8x16(),\n//   NeVecI8x16 = _BinaryenNeVecI8x16(),\n//   LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n//   LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n//   LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n//   LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n//   GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n//   GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n//   GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n//   GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n//   EqVecI16x8 = _BinaryenEqVecI16x8(),\n//   NeVecI16x8 = _BinaryenNeVecI16x8(),\n//   LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n//   LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n//   LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n//   LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n//   GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n//   GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n//   GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n//   GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n//   EqVecI32x4 = _BinaryenEqVecI32x4(),\n//   NeVecI32x4 = _BinaryenNeVecI32x4(),\n//   LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n//   LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n//   LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n//   LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n//   GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n//   GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n//   GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n//   GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n//   EqVecF32x4 = _BinaryenEqVecF32x4(),\n//   NeVecF32x4 = _BinaryenNeVecF32x4(),\n//   LtVecF32x4 = _BinaryenLtVecF32x4(),\n//   LeVecF32x4 = _BinaryenLeVecF32x4(),\n//   GtVecF32x4 = _BinaryenGtVecF32x4(),\n//   GeVecF32x4 = _BinaryenGeVecF32x4(),\n//   EqVecF64x2 = _BinaryenEqVecF64x2(),\n//   NeVecF64x2 = _BinaryenNeVecF64x2(),\n//   LtVecF64x2 = _BinaryenLtVecF64x2(),\n//   LeVecF64x2 = _BinaryenLeVecF64x2(),\n//   GtVecF64x2 = _BinaryenGtVecF64x2(),\n//   GeVecF64x2 = _BinaryenGeVecF64x2(),\n//   AndVec128 = _BinaryenAndVec128(),\n//   OrVec128 = _BinaryenOrVec128(),\n//   XorVec128 = _BinaryenXorVec128(),\n//   AddVecI8x16 = _BinaryenAddVecI8x16(),\n//   AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n//   AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n//   SubVecI8x16 = _BinaryenSubVecI8x16(),\n//   SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n//   SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n//   MulVecI8x16 = _BinaryenMulVecI8x16(),\n//   AddVecI16x8 = _BinaryenAddVecI16x8(),\n//   AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n//   AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n//   SubVecI16x8 = _BinaryenSubVecI16x8(),\n//   SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n//   SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n//   MulVecI16x8 = _BinaryenMulVecI16x8(),\n//   AddVecI32x4 = _BinaryenAddVecI32x4(),\n//   SubVecI32x4 = _BinaryenSubVecI32x4(),\n//   MulVecI32x4 = _BinaryenMulVecI32x4(),\n//   AddVecI64x2 = _BinaryenAddVecI64x2(),\n//   SubVecI64x2 = _BinaryenSubVecI64x2(),\n//   AddVecF32x4 = _BinaryenAddVecF32x4(),\n//   SubVecF32x4 = _BinaryenSubVecF32x4(),\n//   MulVecF32x4 = _BinaryenMulVecF32x4(),\n//   DivVecF32x4 = _BinaryenDivVecF32x4(),\n//   MinVecF32x4 = _BinaryenMinVecF32x4(),\n//   MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n//   AddVecF64x2 = _BinaryenAddVecF64x2(),\n//   SubVecF64x2 = _BinaryenSubVecF64x2(),\n//   MulVecF64x2 = _BinaryenMulVecF64x2(),\n//   DivVecF64x2 = _BinaryenDivVecF64x2(),\n//   MinVecF64x2 = _BinaryenMinVecF64x2(),\n//   MaxVecF64x2 = _BinaryenMaxVecF64x2()\n// }\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveGlobal(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n          global.set(CommonFlags.RESOLVED);\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n          global.set(CommonFlags.RESOLVED);\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if resolved lazily\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[]\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      makeMap<string,Type>(),\n      null,\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type>,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(\n              <ClassPrototype>element,\n              [],\n              makeMap<string,Type>()\n            );\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              makeMap<string,Type>(),\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(\n              <ClassPrototype>element,\n              [],\n              makeMap<string,Type>()\n            );\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              makeMap<string,Type>(),\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[]\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      makeMap<string,Type>(),\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type>,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      // TODO To remove, to support the super();\n      // case NodeKind.SUPER: {\n      //   expr = this.compileNopExpression();\n      //   break;\n      // }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let classType = thisType.classReference;\n      let superType = classType\n        ? classType.base\n          ? classType.base.type\n          : null\n        : null;\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) { // reuse this var\n        flow.addScopedLocalAlias(getGetLocalIndex(thisArg), thisType, \"this\");\n        if (superType) flow.addScopedLocalAlias(getGetLocalIndex(thisArg), superType, \"super\");\n      } else { // use a temp var\n        let thisLocal = flow.addScopedLocal(thisType, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n        if (superType) flow.addScopedLocalAlias(thisLocal.index, superType, \"super\");\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return flow.is(FlowFlags.RETURNS)\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\n      : body.length > 1\n        ? module.createBlock(null, body, returnType.toNativeType())\n        : body.length\n          ? body[0]\n          : module.createNop();\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction, contextualType); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      makeMap<string,Type>(flow.contextualTypeArguments),\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  compileNopExpression(): ExpressionRef {\n    var module = this.module;\n    return module.createNop();\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = assert(currentFunction.signature.thisType);\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    var expr: ExpressionRef;\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, argumentExpressions, reportNode,\n        this.options.usizeType.toNativeZero(this.module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      if (argumentExpressions.length) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", argumentExpressions.length.toString(10)\n        );\n      }\n      expr = this.makeAllocate(classInstance, reportNode);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = currentFunction.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    currentFunction.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  //change the namespace import method\n  if (declaration.parent && declaration.parent.kind == NodeKind.NAMESPACEDECLARATION) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = declaration.name.range.toString();\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Program,\n    Element,\n    ElementKind\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.simpleName == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = tempClz.declaration.implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n\n    static printTypeAliasInfo(program: Program): void {\n\n        var typesLookupKeys = program.typesLookup.keys();\n        for (let key of typesLookupKeys) {\n            let value = program.typesLookup.get(key);\n            if (value) {\n                console.log(`type look up key: ${key}. value: ${value.kind}`);\n            }\n        }\n        var typesAliasKeys = program.typeAliases.keys();\n        for (let key of typesAliasKeys) {\n            let value = program.typeAliases.get(key);\n            if (value) {\n                console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n            }\n        }\n    }\n\n    static printProgramInstances(program: Program): void {\n        var keys = program.instancesLookup.keys();\n        for (let key of keys) {\n            let value = program.instancesLookup.get(key);\n            if (value) {\n                console.log(`instance lookup key:${key}. Kind:${ElementKind[value.kind]}`);\n            }\n        }\n    }\n\n    static printProgramElements(program: Program): void {\n        var elements = program.elementsLookup;\n        for (let [key, element] of elements) {\n            console.log(`Element lookup key:${key}. Kind:${ElementKind[element.kind]}`);\n\n        }\n    }\n\n    static printClassPrototype(program: Program): void {\n        var elements = program.elementsLookup;\n        for (let [key, element] of elements) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype: ClassPrototype = <ClassPrototype>element;\n                if (classPrototype.instances) {\n                    for (let instance of classPrototype.instances) {\n                        console.log(`class instance: ${instance.toString()}`);\n                    }\n                }\n                if (classPrototype.basePrototype) {\n                    console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    program: Program;\n    typeNode: TypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(program: Program, typeNode: TypeNode) {\n        this.program = program;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is clz[], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findSourceAsType(typeName);\n        if (type == null) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsType(typeName);\n        if (type == null) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        var internalPath = `${this.typeNode.range.source.internalPath}/${typeName}`;\n        var element = this.program.elementsLookup.get(internalPath);\n        return element ? element : this.program.elementsLookup.get(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    findSourceAsType(asTypeName: string): Type | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Type | null = this.program.typesLookup.get(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    findSourceAsTypeName(typeName: string): string {\n        var typeAlias = this.program.typeAliases.get(typeName);\n        if (typeAlias) {\n            let aliasTypeName = typeAlias.type.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var typeAlias = this.program.typeAliases.get(typeName);\n        if (typeAlias) {\n            let aliasTypeName = typeAlias.type.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field,\n  Global\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\nimport {\n  makeMap\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              makeMap<string,Type>(contextualTypeArguments),\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    var typeArgumentNodes = typeNode.typeArguments;\n    var typeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let numTypeArguments = typeArgumentNodes.length;\n      typeArguments = new Array<Type>(numTypeArguments);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        let paramType = this.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!paramType) return null;\n        typeArguments[i] = paramType;\n      }\n      if (numTypeArguments) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(typeArguments);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    // check built-in macro types\n    if (simpleName == \"NATIVE\") {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n          );\n        }\n        return null;\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: return Type.i32;\n        case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: return Type.u32;\n        case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: return Type.void;\n        default: assert(false);\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range.atEnd,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var resolveType = assert(global.declaration).type;\n    if (!resolveType) return false;\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\n    if (!resolvedType) return false;\n    global.type = resolvedType;\n    global.set(CommonFlags.RESOLVED);\n    return true;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    contextualType: Type,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let basicClasses = this.program.basicClasses;\n          if (!type.is(TypeFlags.REFERENCE) && basicClasses.has(type.kind)) {\n            classReference = assert(basicClasses.get(type.kind));\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    contextualType: Type,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  determineIntegerLiteralType(\n    intValue: I64,\n    contextualType: Type\n  ): Type {\n\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    contextualType: Type = Type.void,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let classType = type.classReference;\n        if (!classType) return null;\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return classType;\n      }\n      case NodeKind.UNARYPREFIX: {\n        // TODO: overloads\n        switch ((<UnaryPrefixExpression>expression).operator) {\n          case Token.MINUS: {\n            let operand = (<UnaryPrefixExpression>expression).operand;\n            // implicitly negate if an integer literal to distinguish between i32/u32/i64\n            if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n              let type = this.determineIntegerLiteralType(\n                i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n                contextualType\n              );\n              return assert(this.program.basicClasses.get(type.kind));\n            }\n            return this.resolveExpression(\n              operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n          }\n          case Token.PLUS:\n          case Token.PLUS_PLUS:\n          case Token.MINUS_MINUS: {\n            return this.resolveExpression(\n              (<UnaryPrefixExpression>expression).operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n          }\n          case Token.EXCLAMATION: {\n            return assert(this.program.basicClasses.get(TypeKind.BOOL));\n          }\n          case Token.TILDE: {\n            let resolvedOperand = this.resolveExpression(\n              (<UnaryPrefixExpression>expression).operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n            if (!resolvedOperand) return null;\n            throw new Error(\"not implemented\"); // TODO: should all elements have a corresponding type right away?\n          }\n          default: assert(false);\n        }\n        return null;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        // TODO: overloads\n        switch ((<UnaryPostfixExpression>expression).operator) {\n          case Token.PLUS_PLUS:\n          case Token.MINUS_MINUS: {\n            return this.resolveExpression(\n              (<UnaryPostfixExpression>expression).operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n          }\n          default: assert(false);\n        }\n        return null;\n      }\n      case NodeKind.BINARY: {\n        // TODO: all sorts of unary and binary expressions, which means looking up overloads and\n        // evaluating their return types, knowing the semantics of different operators etc.\n        // should probably share that code with the compiler somehow, as it also does exactly this.\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.INTEGER: {\n            return assert(\n              this.program.basicClasses.get(\n                this.determineIntegerLiteralType(\n                  (<IntegerLiteralExpression>expression).value,\n                  contextualType\n                ).kind\n              )\n            );\n          }\n          case LiteralKind.FLOAT: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return assert(\n              this.program.basicClasses.get(\n                contextualType == Type.f32\n                  ? TypeKind.F32\n                  : TypeKind.F64\n              )\n            );\n          }\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          contextualType,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          contextualType,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            makeMap<string,Type>(contextualFunction.flow.contextualTypeArguments),\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var classTypeArguments = prototype.classTypeArguments; // set only if partially resolved\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var classInstances = prototype.instances.get(classInstanceKey);\n    if (classInstances) {\n      let instance = classInstances.get(instanceKey);\n      if (instance) return instance;\n    }\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // apply class type arguments if a partially resolved instance method\n    if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      let explicitThisType = signatureNode.explicitThisType;\n      if (explicitThisType) {\n        thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n        if (!thisType) return null;\n      } else {\n        thisType = classInstance.type;\n      }\n      contextualTypeArguments.set(\"this\", thisType);\n    } else {\n      if (signatureNode.explicitThisType) {\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          signatureNode.explicitThisType.range\n        ); // recoverable\n      }\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\n    classInstances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    partialPrototype.instances = prototype.instances;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // apply class type arguments if a partially resolved instance method\n      // FIXME: this is done once more in resolveFunction. required here for resolveTypeArguments,\n      // required there for just resolving a function no matter if a partial or not.\n      let classTypeArguments = prototype.classTypeArguments;\n      if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    var constructorPrototype = prototype.constructorPrototype;\n    if (constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(\n        constructorPartial,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(\n          operatorPartial,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","import {\n  SerializeInserter,\n  InsertPoint,\n  SuperInserter\n} from \"./inserter\";\n\nimport {\n  Type,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  CommonTypeNode,\n  TypeNode,\n  DecoratorNode,\n  Node\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  /**\n   *  Add abi struct for abi info.\n   * @param methodName the method name\n   * @param signature the signature node\n   */\n  parseSignatureToAbiStruct(methodName: string, signature: SignatureNode): StructDef {\n\n    var struct = new StructDef();\n    struct.name = methodName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(this.program, <TypeNode>type);\n      struct.addField(parameter.name.range.toString(), typeInfo.getAbiDeclareType());\n      this.addAbiTypeAlias(typeInfo);\n    }\n    return struct;\n  }\n\n  addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator\n  */\n  resolveDatabaseDecorator(statement: DeclarationStatement): void {\n    if (!statement.decorators) {\n      return;\n    }\n    for (let decorator of statement.decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value\n   * @param expr\n   */\n  getExprValue(expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var internalName = AstUtil.getInternalName(expr);\n    var element: Element | null = this.program.elementsLookup.get(internalName);\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  getElementFromExpr(expr: Expression): Element {\n    var internalPath = expr.range.source.internalPath;\n    var name = expr.range.toString();\n    var internalName = `${internalPath}/${name}`;\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    return element;\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  getStructFromNode(node: Node): void {\n    var element = this.getElementFromExpr(node);\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = classPrototype.declaration.members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: CommonTypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.program, <TypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.simpleName) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.simpleName;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFnPrototype(instance)) {\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let params = declaration.signature.parameters; // FunctionDeclaration parameter types\n          let returnType = declaration.signature.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.program, <TypeNode>type.type);\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(this.program, <TypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = (<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype.declaration);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  getActionAbility(statement: DeclarationStatement): string {\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function havn't action decoreator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = funcPrototype.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = funcPrototype.declaration.signature;\n    var struct = this.parseSignatureToAbiStruct(funcName, signature);\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(declaration)));\n  }\n\n  private resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.printInstanceLookupInfo();\n    // this.printClassProtoTypeInfo();\n\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var superInserter: SuperInserter = new SuperInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    var superPoints = superInserter.getInsertPoints();\n    var mergedPoints = serializePoints.concat(superPoints);\n    this.insertPointsLookup = InsertPoint.toSortedMap(mergedPoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let element of this.program.elementsLookup.values()) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        return str.charCodeAt(0) == 0x22 && str.charCodeAt(str.length - 1) == 0x22;\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instances of element.instances.values()) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable,\n  IndexSignatureDeclaration\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          // TODO: this works for now, but the representation isn't great\n          identifier = Node.createIdentifierExpression(\n            identifier.text + \".\" + tn.readIdentifier(),\n            tn.range(identifier.range.start, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__21__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFunction,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let currentFunction = compiler.currentFunction;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = currentFunction.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          ret = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          currentFunction.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let currentFunction = compiler.currentFunction;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = currentFunction.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          currentFunction.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let currentFunction = compiler.currentFunction;\n\n          let tempLocal1 = currentFunction.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          ret = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          currentFunction.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case \"instantiate\": {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classInstance = typeArguments[0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.createI32(reportNode.range.line),\n        // module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null): Map<K,V> {\n  if (original) {\n    let cloned = new Map<K,V>();\n    for (let [k, v] of original) cloned.set(k, v);\n    return cloned;\n  }\n  return new Map<K,V>();\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    BlockStatement,\n    Statement\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter, Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: CommonTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsLookup.get(internalName);\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.TYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.simpleName} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype.program, <TypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.simpleName} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype.program, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype.program, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n\nexport class SuperInserter {\n\n    program: Program;\n    private insertPoints: Array<InsertPoint> = [];\n    private classNames: Set<string> = new Set<string>();\n    private baseClassNames: Set<string> = new Set<string>();\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype = <ClassPrototype>element;\n                let classDeclaration = classPrototype.declaration;\n                let identity = classDeclaration.range.source.normalizedPath + classDeclaration.range.toString() + classDeclaration.name.range.toString();\n                // console.log(`${classPrototype.simpleName}: atEnd line: ${classPrototype.declaration.range.atEnd.line} line: ${classPrototype.declaration.range.line} end: ${classPrototype.declaration.range.end} column:${classPrototype.declaration.range.column}`);\n                if (classPrototype.basePrototype && !this.classNames.has(identity)) {\n                    this.processConstructor(classPrototype);\n                    this.classNames.add(identity);\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n\n    /**\n     * The class prototype has base class.\n     * @param classPrototype the classPrototype\n     */\n    private processConstructor(classPrototype: ClassPrototype): void {\n        var constructorPrototype = classPrototype.constructorPrototype;\n        if (!constructorPrototype) {\n            return;\n        }\n        if (!classPrototype.basePrototype) {\n            return;\n        }\n        if (!classPrototype.basePrototype.constructorPrototype) {\n            return;\n        }\n\n        // Add call super method\n        var constructorResolver = new ConstructorResolver(constructorPrototype);\n        var superInserter = constructorResolver.generateSuperExprInserter();\n        this.insertPoints.push(superInserter);\n\n        // Add constructor replaced method\n        var baseConstructorResolver = new ConstructorResolver(classPrototype.basePrototype.constructorPrototype);\n        if (!this.baseClassNames.has(baseConstructorResolver.getClassIdentity())) {\n            this.insertPoints.push(baseConstructorResolver.generateConstructorInsert());\n            this.baseClassNames.add(baseConstructorResolver.getClassIdentity());\n        }\n    }\n}\n\nclass ConstructorResolver {\n    private classPrototype: ClassPrototype;\n    private constructorPrototype: FunctionPrototype;\n    private stmtsWithoutComments: Statement[];\n    private havingSuperExpr: bool;\n\n    constructor(constructorPrototype: FunctionPrototype) {\n\n        if (constructorPrototype.classPrototype) {\n            this.classPrototype = constructorPrototype.classPrototype;\n        } else {\n            throw new Error(`Function ${constructorPrototype.simpleName} should belong a class prototype`);\n        }\n\n        this.constructorPrototype = constructorPrototype;\n        this.setStmtsWithoutComments();\n        this.setHavingSuperExpr();\n    }\n\n    private setHavingSuperExpr(): void {\n        if (this.stmtsWithoutComments.length == 0) {\n            this.havingSuperExpr = false;\n        } else {\n            this.havingSuperExpr = this.stmtsWithoutComments[0].range.toString() == \"super\";\n        }\n    }\n\n    private location(range: Range): string {\n        return \"in \" +\n            range.source.normalizedPath +\n            \":\" +\n            range.line.toString(10) +\n            \":\" +\n            range.column.toString(10);\n    }\n\n    getClassIdentity(): string {\n        var range = this.classPrototype.declaration.range;\n        return range.source.normalizedPath + range.toString();\n    }\n\n    private setStmtsWithoutComments(): void {\n        var body = this.constructorPrototype.declaration.body;\n        var isBlockBody = (body != null && body.kind == NodeKind.BLOCK);\n        this.stmtsWithoutComments = new Array<Statement>();\n        if (isBlockBody) {\n            let blockStatements = <BlockStatement>this.constructorPrototype.declaration.body;\n            for (let _stmt of blockStatements.statements) {\n                if (_stmt.kind != NodeKind.COMMENT) {\n                    this.stmtsWithoutComments.push(_stmt);\n                }\n            }\n        }\n    }\n\n    getSuperExpr(): string {\n        if (!this.havingSuperExpr) {\n            throw new Error(`Class ${this.getClassName()} should have super expression, at ${this.location(this.constructorPrototype.declaration.range)}`);\n        }\n        var keyword = this.stmtsWithoutComments[0].range.toString();\n        if (this.stmtsWithoutComments.length == 1) {\n            return `${keyword}()`;\n        }\n        var params = this.stmtsWithoutComments[1].range.toString();\n        return (params.startsWith(\"(\")) ? `${keyword}${params}` : `${keyword}()`;\n    }\n\n    private havingBaseConstructorMethod(): bool {\n        if (this.classPrototype.basePrototype\n            && this.classPrototype.basePrototype.constructorPrototype) {\n            return true;\n        }\n        return false;\n    }\n\n    generateConstructor(): string {\n        var index = 0;\n        var contents = new Array<string>();\n        if (this.havingSuperExpr) {\n            index = 1;\n            if (this.havingBaseConstructorMethod()) {\n                let callSuperExpr = this.generateCallSuperExpr();\n                contents.push(callSuperExpr);\n            }\n            if (this.stmtsWithoutComments.length >= 2) {\n                index = this.stmtsWithoutComments[1].range.toString().startsWith(\"(\") ? 2 : index;\n            }\n        }\n        for (let i = index; i < this.stmtsWithoutComments.length; i++) {\n            contents.push(this.stmtsWithoutComments[i].range.toString());\n        }\n        return `_${this.getClassName()}_super${this.getSignature()} : void { ${contents.join(\";\\n\")}; }`;\n    }\n\n    generateConstructorInsert(): InsertPoint {\n        var range = this.classPrototype.declaration.range;\n        return new InsertPoint(range, this.generateConstructor());\n    }\n\n    private generateCallSuperExpr(): string {\n        return `this._${this.getBaseClassName()}_${this.getSuperExpr()};`;\n    }\n\n    generateSuperExprInserter(): InsertPoint {\n        var expr = this.generateCallSuperExpr();\n        return new InsertPoint(this.stmtsWithoutComments[1].range, expr);\n    }\n\n    private getClassName(): string {\n        return this.classPrototype.simpleName;\n    }\n\n    private getBaseClassName(): string {\n        if (!this.classPrototype.basePrototype) {\n            throw new Error(`Class ${this.getClassName()} should have super class.`);\n        }\n        return this.classPrototype.basePrototype.simpleName;\n    }\n\n    private getSignature(): string {\n        return this.constructorPrototype.declaration.signature.range.toString();\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}